
health_monitoring_wearable_mainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008824  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008a5c  08008a5c  00009a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b5c  08008b5c  00009b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b64  08008b64  00009b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008b68  08008b68  00009b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  08008b6c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000361  2000005c  08008bc8  0000a05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  200003bd  08008bc8  0000a3bd  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b1fd  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003204  00000000  00000000  0002528f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001850  00000000  00000000  00028498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012f3  00000000  00000000  00029ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036170  00000000  00000000  0002afdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dcd5  00000000  00000000  0006114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157db0  00000000  00000000  0007ee20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d6bd0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006bd0  00000000  00000000  001d6c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001dd7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	08008a44 	.word	0x08008a44

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	08008a44 	.word	0x08008a44

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <data_handler_notify_hr_spo2>:
static void data_handler_req_start_stream(uint8_t stream_mask);
static void data_handler_req_stop_stream(void);


//// Notify (response) functions
void data_handler_notify_hr_spo2(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    //TODO:uint32_t ts = sensor_get_timestamp();
//    uart->send_cmd(CMD_REQ_HR_SPO2_DATA, data_handler->payload, 4, ts); // optional pre-send if needed
//
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <data_handler_notify_temp>:

void data_handler_notify_temp(void) {
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uint32_t ts = sensor_get_timestamp();
//    uart_handler_Send_Response(CMD_REQ_TEMP_DATA, data_handler->payload, 5, ts);
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <data_handler_notify_pressure>:
//
void data_handler_notify_pressure(void) {
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uint32_t ts = sensor_get_timestamp();
//    uart_handler_Send_Response(CMD_REQ_PRESSURE_DATA, data_handler->payload, 2, ts);
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <data_handler_notify_data_stream>:
//
void data_handler_notify_data_stream(void) {
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uint32_t ts = sensor_get_timestamp();
//    uart_handler_Send_Response(CMD_REQ_ALL_DATA, data_handler->payload, 8, ts);
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <data_handler_notify_unix_time>:
//
void data_handler_notify_unix_time(void) {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_SET_UNIX_TIME, data_handler->payload, 4, 0);
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <data_handler_notify_set_sensor_config>:
//
void data_handler_notify_set_sensor_config(void) {
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_SET_SENSOR_CONFIG, data_handler->payload, 2, 0);
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <data_handler_notify_start_stream>:
//
void data_handler_notify_start_stream(void) {
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_START_STREAM, data_handler->payload, 1, 0);
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <data_handler_notify_stop_stream>:
//
void data_handler_notify_stop_stream(void) {
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_STOP_STREAM, data_handler->payload, 1, 0);
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <data_handler_dispatcher>:

void data_handler_dispatcher(UART_CommandPacket_t* cmd) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    data_handler->data_cmd = (Data_CmdID_t)cmd->cmd_type;
 800066c:	4b71      	ldr	r3, [pc, #452]	@ (8000834 <data_handler_dispatcher+0x1d0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	7852      	ldrb	r2, [r2, #1]
 8000674:	701a      	strb	r2, [r3, #0]
    memcpy(data_handler->payload, cmd->payload, 4);
 8000676:	4b6f      	ldr	r3, [pc, #444]	@ (8000834 <data_handler_dispatcher+0x1d0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	3203      	adds	r2, #3
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	601a      	str	r2, [r3, #0]

    switch (data_handler->data_cmd) {
 8000684:	4b6b      	ldr	r3, [pc, #428]	@ (8000834 <data_handler_dispatcher+0x1d0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3b01      	subs	r3, #1
 800068c:	2b40      	cmp	r3, #64	@ 0x40
 800068e:	f200 80cc 	bhi.w	800082a <data_handler_dispatcher+0x1c6>
 8000692:	a201      	add	r2, pc, #4	@ (adr r2, 8000698 <data_handler_dispatcher+0x34>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	0800079d 	.word	0x0800079d
 800069c:	080007a3 	.word	0x080007a3
 80006a0:	080007af 	.word	0x080007af
 80006a4:	080007b5 	.word	0x080007b5
 80006a8:	0800082b 	.word	0x0800082b
 80006ac:	0800082b 	.word	0x0800082b
 80006b0:	0800082b 	.word	0x0800082b
 80006b4:	0800082b 	.word	0x0800082b
 80006b8:	0800082b 	.word	0x0800082b
 80006bc:	0800082b 	.word	0x0800082b
 80006c0:	0800082b 	.word	0x0800082b
 80006c4:	0800082b 	.word	0x0800082b
 80006c8:	0800082b 	.word	0x0800082b
 80006cc:	0800082b 	.word	0x0800082b
 80006d0:	0800082b 	.word	0x0800082b
 80006d4:	080007bb 	.word	0x080007bb
 80006d8:	0800082b 	.word	0x0800082b
 80006dc:	0800082b 	.word	0x0800082b
 80006e0:	0800082b 	.word	0x0800082b
 80006e4:	0800082b 	.word	0x0800082b
 80006e8:	0800082b 	.word	0x0800082b
 80006ec:	0800082b 	.word	0x0800082b
 80006f0:	0800082b 	.word	0x0800082b
 80006f4:	0800082b 	.word	0x0800082b
 80006f8:	0800082b 	.word	0x0800082b
 80006fc:	0800082b 	.word	0x0800082b
 8000700:	0800082b 	.word	0x0800082b
 8000704:	0800082b 	.word	0x0800082b
 8000708:	0800082b 	.word	0x0800082b
 800070c:	0800082b 	.word	0x0800082b
 8000710:	0800082b 	.word	0x0800082b
 8000714:	080007e1 	.word	0x080007e1
 8000718:	0800082b 	.word	0x0800082b
 800071c:	0800082b 	.word	0x0800082b
 8000720:	0800082b 	.word	0x0800082b
 8000724:	0800082b 	.word	0x0800082b
 8000728:	0800082b 	.word	0x0800082b
 800072c:	0800082b 	.word	0x0800082b
 8000730:	0800082b 	.word	0x0800082b
 8000734:	0800082b 	.word	0x0800082b
 8000738:	0800082b 	.word	0x0800082b
 800073c:	0800082b 	.word	0x0800082b
 8000740:	0800082b 	.word	0x0800082b
 8000744:	0800082b 	.word	0x0800082b
 8000748:	0800082b 	.word	0x0800082b
 800074c:	0800082b 	.word	0x0800082b
 8000750:	0800082b 	.word	0x0800082b
 8000754:	08000807 	.word	0x08000807
 8000758:	0800082b 	.word	0x0800082b
 800075c:	0800082b 	.word	0x0800082b
 8000760:	0800082b 	.word	0x0800082b
 8000764:	0800082b 	.word	0x0800082b
 8000768:	0800082b 	.word	0x0800082b
 800076c:	0800082b 	.word	0x0800082b
 8000770:	0800082b 	.word	0x0800082b
 8000774:	0800082b 	.word	0x0800082b
 8000778:	0800082b 	.word	0x0800082b
 800077c:	0800082b 	.word	0x0800082b
 8000780:	0800082b 	.word	0x0800082b
 8000784:	0800082b 	.word	0x0800082b
 8000788:	0800082b 	.word	0x0800082b
 800078c:	0800082b 	.word	0x0800082b
 8000790:	0800082b 	.word	0x0800082b
 8000794:	08000819 	.word	0x08000819
 8000798:	08000825 	.word	0x08000825
        case CMD_REQ_HR_SPO2_DATA:
            data_handler_req_hr_spo2();
 800079c:	f000 f84c 	bl	8000838 <data_handler_req_hr_spo2>
            break;
 80007a0:	e044      	b.n	800082c <data_handler_dispatcher+0x1c8>
        case CMD_REQ_TEMP_DATA:
            data_handler_req_temp(cmd->payload[0]);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	78db      	ldrb	r3, [r3, #3]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f84c 	bl	8000844 <data_handler_req_temp>
            break;
 80007ac:	e03e      	b.n	800082c <data_handler_dispatcher+0x1c8>
        case CMD_REQ_PRESSURE_DATA:
            data_handler_req_pressure();
 80007ae:	f000 f854 	bl	800085a <data_handler_req_pressure>
            break;
 80007b2:	e03b      	b.n	800082c <data_handler_dispatcher+0x1c8>
        case CMD_REQ_ALL_DATA:
            data_handler_req_all_data();
 80007b4:	f000 f857 	bl	8000866 <data_handler_req_all_data>
            break;
 80007b8:	e038      	b.n	800082c <data_handler_dispatcher+0x1c8>
        case CMD_REQ_HISTORICAL_DATA: {
            uint32_t ts = (cmd->payload[0] << 24) | (cmd->payload[1] << 16) |
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	78db      	ldrb	r3, [r3, #3]
 80007be:	061a      	lsls	r2, r3, #24
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	041b      	lsls	r3, r3, #16
 80007c6:	431a      	orrs	r2, r3
                          (cmd->payload[2] << 8) | cmd->payload[3];
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	021b      	lsls	r3, r3, #8
            uint32_t ts = (cmd->payload[0] << 24) | (cmd->payload[1] << 16) |
 80007ce:	4313      	orrs	r3, r2
                          (cmd->payload[2] << 8) | cmd->payload[3];
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7992      	ldrb	r2, [r2, #6]
 80007d4:	4313      	orrs	r3, r2
            uint32_t ts = (cmd->payload[0] << 24) | (cmd->payload[1] << 16) |
 80007d6:	60bb      	str	r3, [r7, #8]
            data_handler_req_historical_data(ts);
 80007d8:	68b8      	ldr	r0, [r7, #8]
 80007da:	f000 f84a 	bl	8000872 <data_handler_req_historical_data>
            break;
 80007de:	e025      	b.n	800082c <data_handler_dispatcher+0x1c8>
        }
        case CMD_SET_UNIX_TIME: {
            uint32_t unix_time = (cmd->payload[0] << 24) | (cmd->payload[1] << 16) |
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	78db      	ldrb	r3, [r3, #3]
 80007e4:	061a      	lsls	r2, r3, #24
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	041b      	lsls	r3, r3, #16
 80007ec:	431a      	orrs	r2, r3
                                 (cmd->payload[2] << 8) | cmd->payload[3];
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	795b      	ldrb	r3, [r3, #5]
 80007f2:	021b      	lsls	r3, r3, #8
            uint32_t unix_time = (cmd->payload[0] << 24) | (cmd->payload[1] << 16) |
 80007f4:	4313      	orrs	r3, r2
                                 (cmd->payload[2] << 8) | cmd->payload[3];
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7992      	ldrb	r2, [r2, #6]
 80007fa:	4313      	orrs	r3, r2
            uint32_t unix_time = (cmd->payload[0] << 24) | (cmd->payload[1] << 16) |
 80007fc:	60fb      	str	r3, [r7, #12]
            data_handler_req_set_unix_time(unix_time);
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f000 f841 	bl	8000886 <data_handler_req_set_unix_time>
            break;
 8000804:	e012      	b.n	800082c <data_handler_dispatcher+0x1c8>
        }
        case CMD_SET_SENSOR_CONFIG:
            data_handler_req_set_sensor_config(cmd->payload[0], cmd->payload[1]);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	78da      	ldrb	r2, [r3, #3]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	4619      	mov	r1, r3
 8000810:	4610      	mov	r0, r2
 8000812:	f000 f842 	bl	800089a <data_handler_req_set_sensor_config>
            break;
 8000816:	e009      	b.n	800082c <data_handler_dispatcher+0x1c8>
        case CMD_START_STREAM:
            data_handler_req_start_stream(cmd->payload[0]);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f84a 	bl	80008b6 <data_handler_req_start_stream>
            break;
 8000822:	e003      	b.n	800082c <data_handler_dispatcher+0x1c8>
        case CMD_STOP_STREAM:
            data_handler_req_stop_stream();
 8000824:	f000 f852 	bl	80008cc <data_handler_req_stop_stream>
            break;
 8000828:	e000      	b.n	800082c <data_handler_dispatcher+0x1c8>
        default:
            // Unknown command handling
            break;
 800082a:	bf00      	nop
    }
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000078 	.word	0x20000078

08000838 <data_handler_req_hr_spo2>:

static void data_handler_req_hr_spo2(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    // Collect HR + SpO2 from sensor, fill payload and call notify
	//TODO: sensor_collect_hr_spo2(data_handler->payload);  // Expected to fill 4 bytes
    data_handler_notify_hr_spo2();
 800083c:	f7ff feda 	bl	80005f4 <data_handler_notify_hr_spo2>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <data_handler_req_temp>:

static void data_handler_req_temp(uint8_t temp_type) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	//TODO: sensor_collect_temp(temp_type, data_handler->payload);
    data_handler_notify_temp();
 800084e:	f7ff fed8 	bl	8000602 <data_handler_notify_temp>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <data_handler_req_pressure>:

static void data_handler_req_pressure(void) {
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
	//TODO: sensor_collect_pressure(data_handler->payload);
    data_handler_notify_pressure();
 800085e:	f7ff fed7 	bl	8000610 <data_handler_notify_pressure>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <data_handler_req_all_data>:

static void data_handler_req_all_data(void) {
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
    //TODO: sensor_collect_all(data_handler->payload);
    data_handler_notify_data_stream();
 800086a:	f7ff fed8 	bl	800061e <data_handler_notify_data_stream>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <data_handler_req_historical_data>:

static void data_handler_req_historical_data(uint32_t start_time) {
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
    // TODO: implement logic or buffering to retrieve historical logs
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <data_handler_req_set_unix_time>:

static void data_handler_req_set_unix_time(uint32_t unix_time) {
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	//TODO:sensor_set_unix_time(unix_time);
    data_handler_notify_unix_time();
 800088e:	f7ff fecd 	bl	800062c <data_handler_notify_unix_time>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <data_handler_req_set_sensor_config>:

static void data_handler_req_set_sensor_config(uint8_t sensor_type, uint8_t config_val) {
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	460a      	mov	r2, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	//TODO:sensor_configure(sensor_type, config_val);
    data_handler_notify_set_sensor_config();
 80008aa:	f7ff fec6 	bl	800063a <data_handler_notify_set_sensor_config>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <data_handler_req_start_stream>:

static void data_handler_req_start_stream(uint8_t stream_mask) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
	//TODO:sensor_stream_start(stream_mask);
    data_handler_notify_start_stream();
 80008c0:	f7ff fec2 	bl	8000648 <data_handler_notify_start_stream>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <data_handler_req_stop_stream>:

static void data_handler_req_stop_stream(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	//TODO:sensor_stream_stop();
    data_handler_notify_stop_stream();
 80008d0:	f7ff fec1 	bl	8000656 <data_handler_notify_stop_stream>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <data_handler_Init>:

void data_handler_Init(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 80008dc:	2008      	movs	r0, #8
 80008de:	f007 ffa9 	bl	8008834 <malloc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <data_handler_Init+0x30>)
 80008e8:	601a      	str	r2, [r3, #0]
    data_handler->payload = data_handler_buffer;
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <data_handler_Init+0x30>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a07      	ldr	r2, [pc, #28]	@ (800090c <data_handler_Init+0x34>)
 80008f0:	605a      	str	r2, [r3, #4]
    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <data_handler_Init+0x30>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	220a      	movs	r2, #10
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f008 f84f 	bl	80089a0 <memset>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000078 	.word	0x20000078
 800090c:	2000007c 	.word	0x2000007c

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fd70 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f816 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f000 f9bc 	bl	8000c98 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000920:	f000 f872 	bl	8000a08 <MX_I2C2_Init>
  MX_RTC_Init();
 8000924:	f000 f8c4 	bl	8000ab0 <MX_RTC_Init>
  MX_TIM16_Init();
 8000928:	f000 f944 	bl	8000bb4 <MX_TIM16_Init>
  MX_UART4_Init();
 800092c:	f000 f968 	bl	8000c00 <MX_UART4_Init>
  MX_ICACHE_Init();
 8000930:	f000 f8aa 	bl	8000a88 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  uart_handler_Init(&huart4);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <main+0x34>)
 8000936:	f000 fce9 	bl	800130c <uart_handler_Init>
  data_handler_Init();
 800093a:	f7ff ffcd 	bl	80008d8 <data_handler_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093e:	bf00      	nop
 8000940:	e7fd      	b.n	800093e <main+0x2e>
 8000942:	bf00      	nop
 8000944:	20000158 	.word	0x20000158

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09e      	sub	sp, #120	@ 0x78
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0318 	add.w	r3, r7, #24
 8000952:	2260      	movs	r2, #96	@ 0x60
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f008 f822 	bl	80089a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800096c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000970:	f001 fb96 	bl	80020a0 <HAL_PWREx_ControlVoltageScaling>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800097a:	f000 f9b7 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800097e:	230a      	movs	r3, #10
 8000980:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000982:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000988:	2310      	movs	r3, #16
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800098c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099a:	2302      	movs	r3, #2
 800099c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80009a6:	2308      	movs	r3, #8
 80009a8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80009b6:	230c      	movs	r3, #12
 80009b8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fbf8 	bl	80021b8 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009ce:	f000 f98d 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	231f      	movs	r3, #31
 80009d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	2103      	movs	r1, #3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 fabe 	bl	8002f70 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009fa:	f000 f977 	bl	8000cec <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3778      	adds	r7, #120	@ 0x78
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <MX_I2C2_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a14:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <MX_I2C2_Init+0x7c>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a44:	f001 f9b0 	bl	8001da8 <HAL_I2C_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a4e:	f000 f94d 	bl	8000cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a56:	f001 fa5c 	bl	8001f12 <HAL_I2CEx_ConfigAnalogFilter>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a60:	f000 f944 	bl	8000cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a64:	2100      	movs	r1, #0
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_I2C2_Init+0x74>)
 8000a68:	f001 fa9e 	bl	8001fa8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a72:	f000 f93b 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000088 	.word	0x20000088
 8000a80:	40005800 	.word	0x40005800
 8000a84:	20a0c4df 	.word	0x20a0c4df

08000a88 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f001 fad7 	bl	8002040 <HAL_ICACHE_ConfigAssociativityMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a98:	f000 f928 	bl	8000cec <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a9c:	f001 faf0 	bl	8002080 <HAL_ICACHE_Enable>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000aa6:	f000 f921 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ade:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000ae0:	4a33      	ldr	r2, [pc, #204]	@ (8000bb0 <MX_RTC_Init+0x100>)
 8000ae2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae4:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000aec:	227f      	movs	r2, #127	@ 0x7f
 8000aee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af0:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000af2:	22ff      	movs	r2, #255	@ 0xff
 8000af4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b08:	4b28      	ldr	r3, [pc, #160]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b10:	4b26      	ldr	r3, [pc, #152]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000b16:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b1c:	4823      	ldr	r0, [pc, #140]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b1e:	f005 fad7 	bl	80060d0 <HAL_RTC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b28:	f000 f8e0 	bl	8000cec <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	481a      	ldr	r0, [pc, #104]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b44:	f005 fd3c 	bl	80065c0 <HAL_RTCEx_PrivilegeModeSet>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b4e:	f000 f8cd 	bl	8000cec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b66:	f107 0308 	add.w	r3, r7, #8
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480f      	ldr	r0, [pc, #60]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b70:	f005 fb38 	bl	80061e4 <HAL_RTC_SetTime>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000b7a:	f000 f8b7 	bl	8000cec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b82:	2301      	movs	r3, #1
 8000b84:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2201      	movs	r2, #1
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_RTC_Init+0xfc>)
 8000b96:	f005 fbc1 	bl	800631c <HAL_RTC_SetDate>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000ba0:	f000 f8a4 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3738      	adds	r7, #56	@ 0x38
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000dc 	.word	0x200000dc
 8000bb0:	46007800 	.word	0x46007800

08000bb4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000bba:	4a10      	ldr	r2, [pc, #64]	@ (8000bfc <MX_TIM16_Init+0x48>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_TIM16_Init+0x44>)
 8000be6:	f005 fd19 	bl	800661c <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000bf0:	f000 f87c 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000010c 	.word	0x2000010c
 8000bfc:	40014400 	.word	0x40014400

08000c00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c04:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c06:	4a23      	ldr	r2, [pc, #140]	@ (8000c94 <MX_UART4_Init+0x94>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c48:	4811      	ldr	r0, [pc, #68]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c4a:	f005 fe3f 	bl	80068cc <HAL_UART_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c54:	f000 f84a 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c5c:	f007 fcc1 	bl	80085e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c66:	f000 f841 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c6e:	f007 fcf6 	bl	800865e <HAL_UARTEx_SetRxFifoThreshold>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c78:	f000 f838 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <MX_UART4_Init+0x90>)
 8000c7e:	f007 fc77 	bl	8008570 <HAL_UARTEx_DisableFifoMode>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c88:	f000 f830 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000158 	.word	0x20000158
 8000c94:	40004c00 	.word	0x40004c00

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_GPIO_Init+0x50>)
 8000ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca4:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <MX_GPIO_Init+0x50>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_GPIO_Init+0x50>)
 8000cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <MX_GPIO_Init+0x50>)
 8000cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc2:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <MX_GPIO_Init+0x50>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_GPIO_Init+0x50>)
 8000cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	46020c00 	.word	0x46020c00

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_MspInit+0x30>)
 8000d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d04:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_MspInit+0x30>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_MspInit+0x30>)
 8000d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	46020c00 	.word	0x46020c00

08000d2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b0bc      	sub	sp, #240	@ 0xf0
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	22c8      	movs	r2, #200	@ 0xc8
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f007 fe27 	bl	80089a0 <memset>
  if(hi2c->Instance==I2C2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2a      	ldr	r2, [pc, #168]	@ (8000e00 <HAL_I2C_MspInit+0xd4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d14c      	bne.n	8000df6 <HAL_I2C_MspInit+0xca>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d5c:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fccd 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000d7c:	f7ff ffb6 	bl	8000cec <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d80:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <HAL_I2C_MspInit+0xd8>)
 8000d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d86:	4a1f      	ldr	r2, [pc, #124]	@ (8000e04 <HAL_I2C_MspInit+0xd8>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_I2C_MspInit+0xd8>)
 8000d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d9e:	2330      	movs	r3, #48	@ 0x30
 8000da0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000db6:	2304      	movs	r3, #4
 8000db8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dbc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4811      	ldr	r0, [pc, #68]	@ (8000e08 <HAL_I2C_MspInit+0xdc>)
 8000dc4:	f000 fe18 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_I2C_MspInit+0xd8>)
 8000dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dce:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <HAL_I2C_MspInit+0xd8>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_I2C_MspInit+0xd8>)
 8000dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2039      	movs	r0, #57	@ 0x39
 8000dec:	f000 fc82 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000df0:	2039      	movs	r0, #57	@ 0x39
 8000df2:	f000 fc99 	bl	8001728 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	37f0      	adds	r7, #240	@ 0xf0
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40005800 	.word	0x40005800
 8000e04:	46020c00 	.word	0x46020c00
 8000e08:	42021c00 	.word	0x42021c00

08000e0c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0b6      	sub	sp, #216	@ 0xd8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	22c8      	movs	r2, #200	@ 0xc8
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f007 fdbf 	bl	80089a0 <memset>
  if(hrtc->Instance==RTC)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1d      	ldr	r2, [pc, #116]	@ (8000e9c <HAL_RTC_MspInit+0x90>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d132      	bne.n	8000e92 <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e2c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 fc63 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000e50:	f7ff ff4c 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e5a:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e70:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000e7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000e82:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e88:	4a05      	ldr	r2, [pc, #20]	@ (8000ea0 <HAL_RTC_MspInit+0x94>)
 8000e8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	37d8      	adds	r7, #216	@ 0xd8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	46007800 	.word	0x46007800
 8000ea0:	46020c00 	.word	0x46020c00

08000ea4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x3c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10e      	bne.n	8000ed4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_TIM_Base_MspInit+0x40>)
 8000eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ebc:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <HAL_TIM_Base_MspInit+0x40>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <HAL_TIM_Base_MspInit+0x40>)
 8000ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	40014400 	.word	0x40014400
 8000ee4:	46020c00 	.word	0x46020c00

08000ee8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0bc      	sub	sp, #240	@ 0xf0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	22c8      	movs	r2, #200	@ 0xc8
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f007 fd49 	bl	80089a0 <memset>
  if(huart->Instance==UART4)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2a      	ldr	r2, [pc, #168]	@ (8000fbc <HAL_UART_MspInit+0xd4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d14d      	bne.n	8000fb4 <HAL_UART_MspInit+0xcc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f18:	f04f 0208 	mov.w	r2, #8
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fbef 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000f38:	f7ff fed8 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f3c:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <HAL_UART_MspInit+0xd8>)
 8000f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f42:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <HAL_UART_MspInit+0xd8>)
 8000f44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_UART_MspInit+0xd8>)
 8000f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_UART_MspInit+0xd8>)
 8000f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f60:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <HAL_UART_MspInit+0xd8>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_UART_MspInit+0xd8>)
 8000f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000f78:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f92:	2308      	movs	r3, #8
 8000f94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <HAL_UART_MspInit+0xdc>)
 8000fa0:	f000 fd2a 	bl	80019f8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2040      	movs	r0, #64	@ 0x40
 8000faa:	f000 fba3 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000fae:	2040      	movs	r0, #64	@ 0x40
 8000fb0:	f000 fbba 	bl	8001728 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000fb4:	bf00      	nop
 8000fb6:	37f0      	adds	r7, #240	@ 0xf0
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40004c00 	.word	0x40004c00
 8000fc0:	46020c00 	.word	0x46020c00
 8000fc4:	42020800 	.word	0x42020800

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 fa91 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <I2C2_EV_IRQHandler+0x10>)
 800102e:	f000 ff56 	bl	8001ede <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000088 	.word	0x20000088

0800103c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001040:	4802      	ldr	r0, [pc, #8]	@ (800104c <UART4_IRQHandler+0x10>)
 8001042:	f005 fd31 	bl	8006aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000158 	.word	0x20000158

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f007 fca6 	bl	80089d0 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200c0000 	.word	0x200c0000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	200001ec 	.word	0x200001ec
 80010b8:	200003c0 	.word	0x200003c0

080010bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <SystemInit+0x68>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <SystemInit+0x68>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <SystemInit+0x6c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <SystemInit+0x6c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <SystemInit+0x6c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <SystemInit+0x6c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <SystemInit+0x6c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <SystemInit+0x6c>)
 80010ee:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80010f2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80010f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <SystemInit+0x6c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <SystemInit+0x6c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a09      	ldr	r2, [pc, #36]	@ (8001128 <SystemInit+0x6c>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001108:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <SystemInit+0x6c>)
 800110c:	2200      	movs	r2, #0
 800110e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <SystemInit+0x68>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
  #endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	46020c00 	.word	0x46020c00

0800112c <Calculate_CRC>:

// Forward declarations
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Response(uint8_t status, uint8_t* payload, uint8_t payload_len);

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	e009      	b.n	8001156 <Calculate_CRC+0x2a>
        crc ^= data[i];
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4053      	eors	r3, r2
 800114e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	3301      	adds	r3, #1
 8001154:	73bb      	strb	r3, [r7, #14]
 8001156:	7bba      	ldrb	r2, [r7, #14]
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3f1      	bcc.n	8001142 <Calculate_CRC+0x16>
    }
    return crc;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
    if (Size >= 7 && rx_buffer[0] == 0xAA) {
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	2b06      	cmp	r3, #6
 800117c:	d90a      	bls.n	8001194 <HAL_UARTEx_RxEventCallback+0x28>
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <HAL_UARTEx_RxEventCallback+0x40>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2baa      	cmp	r3, #170	@ 0xaa
 8001184:	d106      	bne.n	8001194 <HAL_UARTEx_RxEventCallback+0x28>
        uart_handler->process_recived_pck(rx_buffer, Size);
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_UARTEx_RxEventCallback+0x44>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	887a      	ldrh	r2, [r7, #2]
 800118e:	4611      	mov	r1, r2
 8001190:	4806      	ldr	r0, [pc, #24]	@ (80011ac <HAL_UARTEx_RxEventCallback+0x40>)
 8001192:	4798      	blx	r3
    }
    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_UARTEx_RxEventCallback+0x44>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2240      	movs	r2, #64	@ 0x40
 800119c:	4903      	ldr	r1, [pc, #12]	@ (80011ac <HAL_UARTEx_RxEventCallback+0x40>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 fa9b 	bl	80086da <HAL_UARTEx_ReceiveToIdle_IT>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000234 	.word	0x20000234
 80011b0:	200001f0 	.word	0x200001f0

080011b4 <uart_handler_Process_Received_pck>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
    if (size < 7) return;
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d945      	bls.n	8001252 <uart_handler_Process_Received_pck+0x9e>

    uint8_t received_crc = pck[size - 1];
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	73fb      	strb	r3, [r7, #15]
    uint8_t calculated_crc = Calculate_CRC(&pck[1], size - 2); // exclude start byte and CRC
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	3b02      	subs	r3, #2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	4610      	mov	r0, r2
 80011e2:	f7ff ffa3 	bl	800112c <Calculate_CRC>
 80011e6:	4603      	mov	r3, r0
 80011e8:	73bb      	strb	r3, [r7, #14]
    if (received_crc != calculated_crc) {
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d004      	beq.n	80011fc <uart_handler_Process_Received_pck+0x48>
        uart_handler->state = UART_STATE_ERROR;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2203      	movs	r2, #3
 80011f8:	701a      	strb	r2, [r3, #0]
        return;
 80011fa:	e02b      	b.n	8001254 <uart_handler_Process_Received_pck+0xa0>
    }

    uart_handler->cmd_packet->header = pck[0];
 80011fc:	4b17      	ldr	r3, [pc, #92]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	701a      	strb	r2, [r3, #0]
    uart_handler->cmd_packet->cmd_type = pck[1];
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	7852      	ldrb	r2, [r2, #1]
 8001212:	705a      	strb	r2, [r3, #1]
    uart_handler->cmd_packet->payload_len = pck[2];
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	7892      	ldrb	r2, [r2, #2]
 800121e:	709a      	strb	r2, [r3, #2]
    memcpy(uart_handler->cmd_packet->payload, &pck[3], 4);
 8001220:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	3303      	adds	r3, #3
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	3203      	adds	r2, #3
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet->crc = received_crc;
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    uart_handler->state = UART_STATE_PROCESSING;
 800123c:	4b07      	ldr	r3, [pc, #28]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2202      	movs	r2, #2
 8001242:	701a      	strb	r2, [r3, #0]

    // Here you should now call your command dispatcher logic:
    data_handler_dispatcher(uart_handler->cmd_packet);
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <uart_handler_Process_Received_pck+0xa8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fa0a 	bl	8000664 <data_handler_dispatcher>
 8001250:	e000      	b.n	8001254 <uart_handler_Process_Received_pck+0xa0>
    if (size < 7) return;
 8001252:	bf00      	nop
}
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f0 	.word	0x200001f0

08001260 <uart_handler_Send_Response>:

static void uart_handler_Send_Response(uint8_t status, uint8_t* payload, uint8_t payload_len) {
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = tx_buffer;
 8001270:	4b24      	ldr	r3, [pc, #144]	@ (8001304 <uart_handler_Send_Response+0xa4>)
 8001272:	60fb      	str	r3, [r7, #12]
    uint8_t idx = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	72fb      	strb	r3, [r7, #11]

    buf[idx++] = 0xAA;                     // Start byte
 8001278:	7afb      	ldrb	r3, [r7, #11]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	72fa      	strb	r2, [r7, #11]
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	22aa      	movs	r2, #170	@ 0xaa
 8001286:	701a      	strb	r2, [r3, #0]
    buf[idx++] = status;                  // Response CMD/status
 8001288:	7afb      	ldrb	r3, [r7, #11]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	72fa      	strb	r2, [r7, #11]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	701a      	strb	r2, [r3, #0]
    buf[idx++] = payload_len;             // Payload length
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	72fa      	strb	r2, [r7, #11]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	79ba      	ldrb	r2, [r7, #6]
 80012a6:	701a      	strb	r2, [r3, #0]

    memcpy(&buf[idx], payload, payload_len);
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	79ba      	ldrb	r2, [r7, #6]
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fbb8 	bl	8008a28 <memcpy>
    idx += payload_len;
 80012b8:	7afa      	ldrb	r2, [r7, #11]
 80012ba:	79bb      	ldrb	r3, [r7, #6]
 80012bc:	4413      	add	r3, r2
 80012be:	72fb      	strb	r3, [r7, #11]


    buf[idx] = Calculate_CRC(&buf[1], idx - 1); // CRC over CMD + LEN + payload + timestamp
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1c58      	adds	r0, r3, #1
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	b2d9      	uxtb	r1, r3
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	18d4      	adds	r4, r2, r3
 80012d0:	f7ff ff2c 	bl	800112c <Calculate_CRC>
 80012d4:	4603      	mov	r3, r0
 80012d6:	7023      	strb	r3, [r4, #0]
    idx++;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	3301      	adds	r3, #1
 80012dc:	72fb      	strb	r3, [r7, #11]

    HAL_UART_Transmit(uart_handler->huart, buf, idx, HAL_MAX_DELAY);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <uart_handler_Send_Response+0xa8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68d8      	ldr	r0, [r3, #12]
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	68f9      	ldr	r1, [r7, #12]
 80012ee:	f005 fb3d 	bl	800696c <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <uart_handler_Send_Response+0xa8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	200001f4 	.word	0x200001f4
 8001308:	200001f0 	.word	0x200001f0

0800130c <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 8001314:	2020      	movs	r0, #32
 8001316:	f007 fa8d 	bl	8008834 <malloc>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <uart_handler_Init+0x84>)
 8001320:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <uart_handler_Init+0x84>)
 8001324:	681c      	ldr	r4, [r3, #0]
 8001326:	203e      	movs	r0, #62	@ 0x3e
 8001328:	f007 fa84 	bl	8008834 <malloc>
 800132c:	4603      	mov	r3, r0
 800132e:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8001330:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <uart_handler_Init+0x84>)
 8001332:	681c      	ldr	r4, [r3, #0]
 8001334:	203e      	movs	r0, #62	@ 0x3e
 8001336:	f007 fa7d 	bl	8008834 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	60a3      	str	r3, [r4, #8]

    uart_handler->huart = huart;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <uart_handler_Init+0x84>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	60da      	str	r2, [r3, #12]
    uart_handler->state = UART_STATE_IDLE;
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <uart_handler_Init+0x84>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <uart_handler_Init+0x84>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	223a      	movs	r2, #58	@ 0x3a
 8001354:	705a      	strb	r2, [r3, #1]
    uart_handler->rx_buffer = rx_buffer;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <uart_handler_Init+0x84>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <uart_handler_Init+0x88>)
 800135c:	61da      	str	r2, [r3, #28]
    uart_handler->tx_buffer = tx_buffer;
 800135e:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <uart_handler_Init+0x84>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <uart_handler_Init+0x8c>)
 8001364:	619a      	str	r2, [r3, #24]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <uart_handler_Init+0x84>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0c      	ldr	r2, [pc, #48]	@ (800139c <uart_handler_Init+0x90>)
 800136c:	611a      	str	r2, [r3, #16]
    uart_handler->send_response = uart_handler_Send_Response;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <uart_handler_Init+0x84>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <uart_handler_Init+0x94>)
 8001374:	615a      	str	r2, [r3, #20]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <uart_handler_Init+0x84>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	4905      	ldr	r1, [pc, #20]	@ (8001394 <uart_handler_Init+0x88>)
 8001380:	4618      	mov	r0, r3
 8001382:	f007 f9aa 	bl	80086da <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	200001f0 	.word	0x200001f0
 8001394:	20000234 	.word	0x20000234
 8001398:	200001f4 	.word	0x200001f4
 800139c:	080011b5 	.word	0x080011b5
 80013a0:	08001261 	.word	0x08001261

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a8:	f7ff fe88 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
	ldr	r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f007 fb03 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff fa9b 	bl	8000910 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013dc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80013e0:	08008b6c 	.word	0x08008b6c
	ldr	r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013e8:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80013ec:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 80013f0:	200003bd 	.word	0x200003bd

080013f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_Init+0x50>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_Init+0x50>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f968 	bl	80016de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800140e:	f001 ffa1 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8001412:	4602      	mov	r2, r0
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <HAL_Init+0x54>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	490c      	ldr	r1, [pc, #48]	@ (8001450 <HAL_Init+0x58>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_Init+0x5c>)
 8001426:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001428:	2004      	movs	r0, #4
 800142a:	f000 f9ad 	bl	8001788 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f812 	bl	8001458 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e002      	b.n	8001444 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800143e:	f7ff fc5b 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40022000 	.word	0x40022000
 800144c:	46020c00 	.word	0x46020c00
 8001450:	08008a5c 	.word	0x08008a5c
 8001454:	20000000 	.word	0x20000000

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <HAL_InitTick+0xdc>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e05c      	b.n	800152a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001470:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_InitTick+0xe0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b04      	cmp	r3, #4
 800147a:	d10c      	bne.n	8001496 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800147c:	4b2f      	ldr	r3, [pc, #188]	@ (800153c <HAL_InitTick+0xe4>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <HAL_InitTick+0xdc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148a:	fbb3 f3f1 	udiv	r3, r3, r1
 800148e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	e037      	b.n	8001506 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001496:	f000 f9cf 	bl	8001838 <HAL_SYSTICK_GetCLKSourceConfig>
 800149a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d023      	beq.n	80014ea <HAL_InitTick+0x92>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d82d      	bhi.n	8001504 <HAL_InitTick+0xac>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_InitTick+0x5e>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00d      	beq.n	80014d0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80014b4:	e026      	b.n	8001504 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <HAL_InitTick+0xe4>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001534 <HAL_InitTick+0xdc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80014c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014cc:	60fb      	str	r3, [r7, #12]
        break;
 80014ce:	e01a      	b.n	8001506 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <HAL_InitTick+0xdc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014da:	fbb3 f3f2 	udiv	r3, r3, r2
 80014de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
        break;
 80014e8:	e00d      	b.n	8001506 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_InitTick+0xdc>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	60fb      	str	r3, [r7, #12]
        break;
 8001502:	e000      	b.n	8001506 <HAL_InitTick+0xae>
        break;
 8001504:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f91c 	bl	8001744 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e009      	b.n	800152a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001516:	2200      	movs	r2, #0
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	f04f 30ff 	mov.w	r0, #4294967295
 800151e:	f000 f8e9 	bl	80016f4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001522:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <HAL_InitTick+0xe8>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008
 8001538:	e000e010 	.word	0xe000e010
 800153c:	20000000 	.word	0x20000000
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	20000274 	.word	0x20000274

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000274 	.word	0x20000274

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	@ (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff4c 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001702:	f7ff ff63 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001706:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f7ff ffb3 	bl	8001678 <NVIC_EncodePriority>
 8001712:	4602      	mov	r2, r0
 8001714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff82 	bl	8001624 <__NVIC_SetPriority>
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff56 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001754:	d301      	bcc.n	800175a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001756:	2301      	movs	r3, #1
 8001758:	e00d      	b.n	8001776 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_SYSTICK_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_SYSTICK_Config+0x40>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_SYSTICK_Config+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_SYSTICK_Config+0x40>)
 800176e:	f043 0303 	orr.w	r3, r3, #3
 8001772:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b04      	cmp	r3, #4
 8001794:	d844      	bhi.n	8001820 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001796:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017bf 	.word	0x080017bf
 80017a0:	080017dd 	.word	0x080017dd
 80017a4:	080017ff 	.word	0x080017ff
 80017a8:	08001821 	.word	0x08001821
 80017ac:	080017b1 	.word	0x080017b1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6013      	str	r3, [r2, #0]
      break;
 80017bc:	e031      	b.n	8001822 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017d2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017da:	e022      	b.n	8001822 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80017e2:	f023 0304 	bic.w	r3, r3, #4
 80017e6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80017f2:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80017f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80017fc:	e011      	b.n	8001822 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001810:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001816:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800181e:	e000      	b.n	8001822 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001820:	bf00      	nop
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e010 	.word	0xe000e010
 8001834:	46020c00 	.word	0x46020c00

08001838 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800184a:	2304      	movs	r3, #4
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	e021      	b.n	8001894 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800185a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001862:	d011      	beq.n	8001888 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800186a:	d810      	bhi.n	800188e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001878:	d003      	beq.n	8001882 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800187a:	e008      	b.n	800188e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
        break;
 8001880:	e008      	b.n	8001894 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001882:	2301      	movs	r3, #1
 8001884:	607b      	str	r3, [r7, #4]
        break;
 8001886:	e005      	b.n	8001894 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001888:	2302      	movs	r3, #2
 800188a:	607b      	str	r3, [r7, #4]
        break;
 800188c:	e002      	b.n	8001894 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
        break;
 8001892:	bf00      	nop
    }
  }
  return systick_source;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010
 80018a8:	46020c00 	.word	0x46020c00

080018ac <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80018b4:	f7ff fe5a 	bl	800156c <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e06b      	b.n	800199c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d008      	beq.n	80018e2 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2220      	movs	r2, #32
 80018d4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e05c      	b.n	800199c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0204 	orr.w	r2, r2, #4
 80018f0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2205      	movs	r2, #5
 80018f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80018fa:	e020      	b.n	800193e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80018fc:	f7ff fe36 	bl	800156c <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d919      	bls.n	800193e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	f043 0210 	orr.w	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800192e:	2201      	movs	r2, #1
 8001930:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e02e      	b.n	800199c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0d7      	beq.n	80018fc <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0202 	orr.w	r2, r2, #2
 800195a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2204      	movs	r2, #4
 8001960:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800196c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001986:	2201      	movs	r2, #1
 8001988:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e019      	b.n	80019ea <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d004      	beq.n	80019cc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2220      	movs	r2, #32
 80019c6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e00e      	b.n	80019ea <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2204      	movs	r2, #4
 80019d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a0a:	e1ba      	b.n	8001d82 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 81aa 	beq.w	8001d7c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a55      	ldr	r2, [pc, #340]	@ (8001b80 <HAL_GPIO_Init+0x188>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d15d      	bne.n	8001aec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8001a60:	4a48      	ldr	r2, [pc, #288]	@ (8001b84 <HAL_GPIO_Init+0x18c>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a68:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8001a6a:	4a46      	ldr	r2, [pc, #280]	@ (8001b84 <HAL_GPIO_Init+0x18c>)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220b      	movs	r2, #11
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69f9      	ldr	r1, [r7, #28]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2202      	movs	r2, #2
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e067      	b.n	8001bbc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x104>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d145      	bne.n	8001b88 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69fa      	ldr	r2, [r7, #28]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	08da      	lsrs	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3208      	adds	r2, #8
 8001b42:	69f9      	ldr	r1, [r7, #28]
 8001b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0203 	and.w	r2, r3, #3
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e01e      	b.n	8001bbc <HAL_GPIO_Init+0x1c4>
 8001b7e:	bf00      	nop
 8001b80:	46020000 	.word	0x46020000
 8001b84:	08008ab4 	.word	0x08008ab4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00b      	beq.n	8001bdc <HAL_GPIO_Init+0x1e4>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d007      	beq.n	8001bdc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd0:	2b11      	cmp	r3, #17
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	d130      	bne.n	8001c3e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001c12:	2201      	movs	r2, #1
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 0201 	and.w	r2, r3, #1
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d017      	beq.n	8001c76 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d07c      	beq.n	8001d7c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001c82:	4a47      	ldr	r2, [pc, #284]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3318      	adds	r3, #24
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0a9a      	lsrs	r2, r3, #10
 8001caa:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <HAL_GPIO_Init+0x3ac>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001cbe:	4938      	ldr	r1, [pc, #224]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3318      	adds	r3, #24
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ccc:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001d1a:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d26:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001d46:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d54:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001d74:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <HAL_GPIO_Init+0x3a8>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f ae3d 	bne.w	8001a0c <HAL_GPIO_Init+0x14>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3724      	adds	r7, #36	@ 0x24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	46022000 	.word	0x46022000
 8001da4:	002f7f7f 	.word	0x002f7f7f

08001da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e08d      	b.n	8001ed6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7fe ffac 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	@ 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d108      	bne.n	8001e4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	e007      	b.n	8001e5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69d9      	ldr	r1, [r3, #28]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d138      	bne.n	8001f9a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e032      	b.n	8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2224      	movs	r2, #36	@ 0x24
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6819      	ldr	r1, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e000      	b.n	8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
  }
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d139      	bne.n	8002032 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e033      	b.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	@ 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e007      	b.n	800206e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0204 	bic.w	r2, r3, #4
 8002066:	4905      	ldr	r1, [pc, #20]	@ (800207c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40030400 	.word	0x40030400

08002080 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002084:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_ICACHE_Enable+0x1c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <HAL_ICACHE_Enable+0x1c>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40030400 	.word	0x40030400

080020a0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d10b      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c0:	d905      	bls.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80020c2:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4a32      	ldr	r2, [pc, #200]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020cc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e057      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020d8:	d90a      	bls.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80020da:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	60d3      	str	r3, [r2, #12]
 80020ee:	e007      	b.n	8002100 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80020f8:	4925      	ldr	r1, [pc, #148]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002100:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	2232      	movs	r2, #50	@ 0x32
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	4a21      	ldr	r2, [pc, #132]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	3301      	adds	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800211e:	e002      	b.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3b01      	subs	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f3      	bne.n	8002120 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01b      	beq.n	8002176 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a15      	ldr	r2, [pc, #84]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	2232      	movs	r2, #50	@ 0x32
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800215c:	e002      	b.n	8002164 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3b01      	subs	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002164:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f3      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e000      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	46020800 	.word	0x46020800
 8002194:	20000000 	.word	0x20000000
 8002198:	10624dd3 	.word	0x10624dd3

0800219c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	46020800 	.word	0x46020800

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08e      	sub	sp, #56	@ 0x38
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f000 bec8 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b99      	ldr	r3, [pc, #612]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021dc:	4b96      	ldr	r3, [pc, #600]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 816c 	beq.w	80024cc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_RCC_OscConfig+0x52>
 80021fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	f040 80de 	bne.w	80023be <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002204:	2b01      	cmp	r3, #1
 8002206:	f040 80da 	bne.w	80023be <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f000 bea5 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800221c:	4b86      	ldr	r3, [pc, #536]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d004      	beq.n	8002232 <HAL_RCC_OscConfig+0x7a>
 8002228:	4b83      	ldr	r3, [pc, #524]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002230:	e005      	b.n	800223e <HAL_RCC_OscConfig+0x86>
 8002232:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800223e:	4293      	cmp	r3, r2
 8002240:	d255      	bcs.n	80022ee <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	4618      	mov	r0, r3
 800224e:	f001 f9d9 	bl	8003604 <RCC_SetFlashLatencyFromMSIRange>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	f000 be82 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800225e:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002264:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002268:	6093      	str	r3, [r2, #8]
 800226a:	4b73      	ldr	r3, [pc, #460]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	4970      	ldr	r1, [pc, #448]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002284:	d309      	bcc.n	800229a <HAL_RCC_OscConfig+0xe2>
 8002286:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f023 021f 	bic.w	r2, r3, #31
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4969      	ldr	r1, [pc, #420]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002294:	4313      	orrs	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
 8002298:	e07e      	b.n	8002398 <HAL_RCC_OscConfig+0x1e0>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da0a      	bge.n	80022b8 <HAL_RCC_OscConfig+0x100>
 80022a2:	4b65      	ldr	r3, [pc, #404]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	015b      	lsls	r3, r3, #5
 80022b0:	4961      	ldr	r1, [pc, #388]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]
 80022b6:	e06f      	b.n	8002398 <HAL_RCC_OscConfig+0x1e0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c0:	d30a      	bcc.n	80022d8 <HAL_RCC_OscConfig+0x120>
 80022c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4959      	ldr	r1, [pc, #356]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60cb      	str	r3, [r1, #12]
 80022d6:	e05f      	b.n	8002398 <HAL_RCC_OscConfig+0x1e0>
 80022d8:	4b57      	ldr	r3, [pc, #348]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	03db      	lsls	r3, r3, #15
 80022e6:	4954      	ldr	r1, [pc, #336]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
 80022ec:	e054      	b.n	8002398 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80022ee:	4b52      	ldr	r3, [pc, #328]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4a51      	ldr	r2, [pc, #324]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022f8:	6093      	str	r3, [r2, #8]
 80022fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	494c      	ldr	r1, [pc, #304]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002308:	4313      	orrs	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002314:	d309      	bcc.n	800232a <HAL_RCC_OscConfig+0x172>
 8002316:	4b48      	ldr	r3, [pc, #288]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f023 021f 	bic.w	r2, r3, #31
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4945      	ldr	r1, [pc, #276]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002324:	4313      	orrs	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
 8002328:	e028      	b.n	800237c <HAL_RCC_OscConfig+0x1c4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	2b00      	cmp	r3, #0
 8002330:	da0a      	bge.n	8002348 <HAL_RCC_OscConfig+0x190>
 8002332:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	493d      	ldr	r1, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002342:	4313      	orrs	r3, r2
 8002344:	60cb      	str	r3, [r1, #12]
 8002346:	e019      	b.n	800237c <HAL_RCC_OscConfig+0x1c4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d30a      	bcc.n	8002368 <HAL_RCC_OscConfig+0x1b0>
 8002352:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	029b      	lsls	r3, r3, #10
 8002360:	4935      	ldr	r1, [pc, #212]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002362:	4313      	orrs	r3, r2
 8002364:	60cb      	str	r3, [r1, #12]
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0x1c4>
 8002368:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	03db      	lsls	r3, r3, #15
 8002376:	4930      	ldr	r1, [pc, #192]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002378:	4313      	orrs	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800237c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f93c 	bl	8003604 <RCC_SetFlashLatencyFromMSIRange>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	f000 bde5 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002398:	f001 f8de 	bl	8003558 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800239c:	4b27      	ldr	r3, [pc, #156]	@ (800243c <HAL_RCC_OscConfig+0x284>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff f859 	bl	8001458 <HAL_InitTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80023ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 808a 	beq.w	80024ca <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80023b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023ba:	f000 bdd2 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d066      	beq.n	8002494 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80023d2:	f7ff f8cb 	bl	800156c <HAL_GetTick>
 80023d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023d8:	e009      	b.n	80023ee <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023da:	f7ff f8c7 	bl	800156c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d902      	bls.n	80023ee <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	f000 bdba 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ef      	beq.n	80023da <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002400:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002404:	6093      	str	r3, [r2, #8]
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	4909      	ldr	r1, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002420:	d30e      	bcc.n	8002440 <HAL_RCC_OscConfig+0x288>
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 021f 	bic.w	r2, r3, #31
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4902      	ldr	r1, [pc, #8]	@ (8002438 <HAL_RCC_OscConfig+0x280>)
 8002430:	4313      	orrs	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
 8002434:	e04a      	b.n	80024cc <HAL_RCC_OscConfig+0x314>
 8002436:	bf00      	nop
 8002438:	46020c00 	.word	0x46020c00
 800243c:	20000004 	.word	0x20000004
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	2b00      	cmp	r3, #0
 8002446:	da0a      	bge.n	800245e <HAL_RCC_OscConfig+0x2a6>
 8002448:	4b98      	ldr	r3, [pc, #608]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	4995      	ldr	r1, [pc, #596]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e036      	b.n	80024cc <HAL_RCC_OscConfig+0x314>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002466:	d30a      	bcc.n	800247e <HAL_RCC_OscConfig+0x2c6>
 8002468:	4b90      	ldr	r3, [pc, #576]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	029b      	lsls	r3, r3, #10
 8002476:	498d      	ldr	r1, [pc, #564]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	60cb      	str	r3, [r1, #12]
 800247c:	e026      	b.n	80024cc <HAL_RCC_OscConfig+0x314>
 800247e:	4b8b      	ldr	r3, [pc, #556]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	03db      	lsls	r3, r3, #15
 800248c:	4987      	ldr	r1, [pc, #540]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	60cb      	str	r3, [r1, #12]
 8002492:	e01b      	b.n	80024cc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002494:	4b85      	ldr	r3, [pc, #532]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a84      	ldr	r2, [pc, #528]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024a0:	f7ff f864 	bl	800156c <HAL_GetTick>
 80024a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80024a6:	e009      	b.n	80024bc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a8:	f7ff f860 	bl	800156c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	f000 bd53 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80024bc:	4b7b      	ldr	r3, [pc, #492]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ef      	bne.n	80024a8 <HAL_RCC_OscConfig+0x2f0>
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80024ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 808b 	beq.w	80025f0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x334>
 80024e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d17d      	bne.n	80025f0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f000 bd34 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x35a>
 8002504:	4b69      	ldr	r3, [pc, #420]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a68      	ldr	r2, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e041      	b.n	8002596 <HAL_RCC_OscConfig+0x3de>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251a:	d112      	bne.n	8002542 <HAL_RCC_OscConfig+0x38a>
 800251c:	4b63      	ldr	r3, [pc, #396]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a62      	ldr	r2, [pc, #392]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b60      	ldr	r3, [pc, #384]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a5f      	ldr	r2, [pc, #380]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800252e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b5d      	ldr	r3, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5c      	ldr	r2, [pc, #368]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800253a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e029      	b.n	8002596 <HAL_RCC_OscConfig+0x3de>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800254a:	d112      	bne.n	8002572 <HAL_RCC_OscConfig+0x3ba>
 800254c:	4b57      	ldr	r3, [pc, #348]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a56      	ldr	r2, [pc, #344]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002552:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b54      	ldr	r3, [pc, #336]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a53      	ldr	r2, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800255e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b51      	ldr	r3, [pc, #324]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a50      	ldr	r2, [pc, #320]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e011      	b.n	8002596 <HAL_RCC_OscConfig+0x3de>
 8002572:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a4d      	ldr	r2, [pc, #308]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	4b4b      	ldr	r3, [pc, #300]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a4a      	ldr	r2, [pc, #296]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b48      	ldr	r3, [pc, #288]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a47      	ldr	r2, [pc, #284]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002590:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002594:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d014      	beq.n	80025c8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800259e:	f7fe ffe5 	bl	800156c <HAL_GetTick>
 80025a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a4:	e009      	b.n	80025ba <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a6:	f7fe ffe1 	bl	800156c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b64      	cmp	r3, #100	@ 0x64
 80025b2:	d902      	bls.n	80025ba <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	f000 bcd4 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	4b3c      	ldr	r3, [pc, #240]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ef      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3ee>
 80025c6:	e013      	b.n	80025f0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80025c8:	f7fe ffd0 	bl	800156c <HAL_GetTick>
 80025cc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	e009      	b.n	80025e4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe ffcc 	bl	800156c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	@ 0x64
 80025dc:	d902      	bls.n	80025e4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	f000 bcbf 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025e4:	4b31      	ldr	r3, [pc, #196]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ef      	bne.n	80025d0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05f      	beq.n	80026bc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x456>
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	2b0c      	cmp	r3, #12
 8002606:	d114      	bne.n	8002632 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260a:	2b02      	cmp	r3, #2
 800260c:	d111      	bne.n	8002632 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d102      	bne.n	800261c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f000 bca3 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	4920      	ldr	r1, [pc, #128]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002630:	e044      	b.n	80026bc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d024      	beq.n	8002684 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800263a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002644:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002646:	f7fe ff91 	bl	800156c <HAL_GetTick>
 800264a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800264c:	e009      	b.n	8002662 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe ff8d 	bl	800156c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d902      	bls.n	8002662 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	f000 bc80 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002662:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0ef      	beq.n	800264e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	490b      	ldr	r1, [pc, #44]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	610b      	str	r3, [r1, #16]
 8002682:	e01b      	b.n	80026bc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a08      	ldr	r2, [pc, #32]	@ (80026ac <HAL_RCC_OscConfig+0x4f4>)
 800268a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800268e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002690:	f7fe ff6c 	bl	800156c <HAL_GetTick>
 8002694:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe ff68 	bl	800156c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d904      	bls.n	80026b0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	f000 bc5b 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
 80026ac:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b0:	4baf      	ldr	r3, [pc, #700]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ed      	bne.n	8002698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80c8 	beq.w	800285a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80026d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4ba4      	ldr	r3, [pc, #656]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e4:	4aa2      	ldr	r2, [pc, #648]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80026ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002702:	4b9c      	ldr	r3, [pc, #624]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d119      	bne.n	8002742 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800270e:	4b99      	ldr	r3, [pc, #612]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	4a98      	ldr	r2, [pc, #608]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271a:	f7fe ff27 	bl	800156c <HAL_GetTick>
 800271e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002720:	e009      	b.n	8002736 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002722:	f7fe ff23 	bl	800156c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d902      	bls.n	8002736 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	f000 bc16 	b.w	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002736:	4b8f      	ldr	r3, [pc, #572]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0ef      	beq.n	8002722 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d05f      	beq.n	800280a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800274a:	4b89      	ldr	r3, [pc, #548]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800274c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002750:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275c:	429a      	cmp	r2, r3
 800275e:	d037      	beq.n	80027d0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e3f4      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01b      	beq.n	80027ba <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002782:	4b7b      	ldr	r3, [pc, #492]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002788:	4a79      	ldr	r2, [pc, #484]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800278a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800278e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002792:	f7fe feeb 	bl	800156c <HAL_GetTick>
 8002796:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279a:	f7fe fee7 	bl	800156c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e3da      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027ac:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80027ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ef      	bne.n	800279a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80027ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80027bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4969      	ldr	r1, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80027d0:	4b67      	ldr	r3, [pc, #412]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80027d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d6:	4a66      	ldr	r2, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80027d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80027e0:	f7fe fec4 	bl	800156c <HAL_GetTick>
 80027e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe fec0 	bl	800156c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e3b3      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80027fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x630>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b59      	ldr	r3, [pc, #356]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800280c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002810:	4a57      	ldr	r2, [pc, #348]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002812:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800281a:	f7fe fea7 	bl	800156c <HAL_GetTick>
 800281e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fea3 	bl	800156c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b05      	cmp	r3, #5
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e396      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002834:	4b4e      	ldr	r3, [pc, #312]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800283a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002842:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b49      	ldr	r3, [pc, #292]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002850:	4a47      	ldr	r2, [pc, #284]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8111 	beq.w	8002a8a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287c:	4b3c      	ldr	r3, [pc, #240]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002882:	4a3b      	ldr	r2, [pc, #236]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800288c:	4b38      	ldr	r3, [pc, #224]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d118      	bne.n	80028de <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80028ac:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	4a30      	ldr	r2, [pc, #192]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b8:	f7fe fe58 	bl	800156c <HAL_GetTick>
 80028bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c0:	f7fe fe54 	bl	800156c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e347      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028d2:	4b28      	ldr	r3, [pc, #160]	@ (8002974 <HAL_RCC_OscConfig+0x7bc>)
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01f      	beq.n	800292a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80028f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800290c:	4a18      	ldr	r2, [pc, #96]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002916:	e018      	b.n	800294a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800291a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800291e:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002928:	e00f      	b.n	800294a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800292c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800293a:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 800293c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002940:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x7b8>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d057      	beq.n	8002a02 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002952:	f7fe fe0b 	bl	800156c <HAL_GetTick>
 8002956:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002958:	e00e      	b.n	8002978 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe fe07 	bl	800156c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d905      	bls.n	8002978 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e2f8      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
 8002970:	46020c00 	.word	0x46020c00
 8002974:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002978:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 800297a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0e9      	beq.n	800295a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01b      	beq.n	80029ca <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002992:	4b96      	ldr	r3, [pc, #600]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002998:	4a94      	ldr	r2, [pc, #592]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 800299a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800299e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe fde2 	bl	800156c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e2d3      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80029ba:	4b8c      	ldr	r3, [pc, #560]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 80029bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ed      	beq.n	80029a4 <HAL_RCC_OscConfig+0x7ec>
 80029c8:	e053      	b.n	8002a72 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029ca:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 80029cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029d0:	4a86      	ldr	r2, [pc, #536]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 80029d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fdc6 	bl	800156c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e2b7      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80029f2:	4b7e      	ldr	r3, [pc, #504]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 80029f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ed      	bne.n	80029dc <HAL_RCC_OscConfig+0x824>
 8002a00:	e037      	b.n	8002a72 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002a02:	f7fe fdb3 	bl	800156c <HAL_GetTick>
 8002a06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fdaf 	bl	800156c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e2a0      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a20:	4b72      	ldr	r3, [pc, #456]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1ed      	bne.n	8002a0a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01a      	beq.n	8002a72 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a42:	4a6a      	ldr	r2, [pc, #424]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fd8d 	bl	800156c <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e27e      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a64:	4b61      	ldr	r3, [pc, #388]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ed      	bne.n	8002a4e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a72:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a80:	4a5a      	ldr	r2, [pc, #360]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d036      	beq.n	8002b04 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d019      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002a9e:	4b53      	ldr	r3, [pc, #332]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a52      	ldr	r2, [pc, #328]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002aa4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002aaa:	f7fe fd5f 	bl	800156c <HAL_GetTick>
 8002aae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab2:	f7fe fd5b 	bl	800156c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e24e      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ac4:	4b49      	ldr	r3, [pc, #292]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x8fa>
 8002ad0:	e018      	b.n	8002b04 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002ad2:	4b46      	ldr	r3, [pc, #280]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a45      	ldr	r2, [pc, #276]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002ad8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002adc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ade:	f7fe fd45 	bl	800156c <HAL_GetTick>
 8002ae2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae6:	f7fe fd41 	bl	800156c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e234      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002af8:	4b3c      	ldr	r3, [pc, #240]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d036      	beq.n	8002b7e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d019      	beq.n	8002b4c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002b18:	4b34      	ldr	r3, [pc, #208]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a33      	ldr	r2, [pc, #204]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b24:	f7fe fd22 	bl	800156c <HAL_GetTick>
 8002b28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fd1e 	bl	800156c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e211      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x974>
 8002b4a:	e018      	b.n	8002b7e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002b4c:	4b27      	ldr	r3, [pc, #156]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a26      	ldr	r2, [pc, #152]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002b58:	f7fe fd08 	bl	800156c <HAL_GetTick>
 8002b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002b60:	f7fe fd04 	bl	800156c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1f7      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002b72:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07f      	beq.n	8002c8a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d062      	beq.n	8002c58 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002b92:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4a15      	ldr	r2, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002b98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b9c:	6093      	str	r3, [r2, #8]
 8002b9e:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	4910      	ldr	r1, [pc, #64]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002bb8:	d309      	bcc.n	8002bce <HAL_RCC_OscConfig+0xa16>
 8002bba:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 021f 	bic.w	r2, r3, #31
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4909      	ldr	r1, [pc, #36]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
 8002bcc:	e02a      	b.n	8002c24 <HAL_RCC_OscConfig+0xa6c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da0c      	bge.n	8002bf0 <HAL_RCC_OscConfig+0xa38>
 8002bd6:	4b05      	ldr	r3, [pc, #20]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	015b      	lsls	r3, r3, #5
 8002be4:	4901      	ldr	r1, [pc, #4]	@ (8002bec <HAL_RCC_OscConfig+0xa34>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60cb      	str	r3, [r1, #12]
 8002bea:	e01b      	b.n	8002c24 <HAL_RCC_OscConfig+0xa6c>
 8002bec:	46020c00 	.word	0x46020c00
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d30a      	bcc.n	8002c10 <HAL_RCC_OscConfig+0xa58>
 8002bfa:	4ba1      	ldr	r3, [pc, #644]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	029b      	lsls	r3, r3, #10
 8002c08:	499d      	ldr	r1, [pc, #628]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
 8002c0e:	e009      	b.n	8002c24 <HAL_RCC_OscConfig+0xa6c>
 8002c10:	4b9b      	ldr	r3, [pc, #620]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	03db      	lsls	r3, r3, #15
 8002c1e:	4998      	ldr	r1, [pc, #608]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002c24:	4b96      	ldr	r3, [pc, #600]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a95      	ldr	r2, [pc, #596]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c2a:	f043 0310 	orr.w	r3, r3, #16
 8002c2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c30:	f7fe fc9c 	bl	800156c <HAL_GetTick>
 8002c34:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c38:	f7fe fc98 	bl	800156c <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e18b      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xa80>
 8002c56:	e018      	b.n	8002c8a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002c58:	4b89      	ldr	r3, [pc, #548]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a88      	ldr	r2, [pc, #544]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c5e:	f023 0310 	bic.w	r3, r3, #16
 8002c62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c64:	f7fe fc82 	bl	800156c <HAL_GetTick>
 8002c68:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002c6c:	f7fe fc7e 	bl	800156c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e171      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002c7e:	4b80      	ldr	r3, [pc, #512]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8166 	beq.w	8002f60 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c9a:	4b79      	ldr	r3, [pc, #484]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	f000 80f2 	beq.w	8002e8c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	f040 80c5 	bne.w	8002e3c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b73      	ldr	r3, [pc, #460]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a72      	ldr	r2, [pc, #456]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002cbe:	f7fe fc55 	bl	800156c <HAL_GetTick>
 8002cc2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fc51 	bl	800156c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e144      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cd8:	4b69      	ldr	r3, [pc, #420]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce4:	4b66      	ldr	r3, [pc, #408]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d111      	bne.n	8002d16 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b63      	ldr	r3, [pc, #396]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf8:	4a61      	ldr	r2, [pc, #388]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d02:	4b5f      	ldr	r3, [pc, #380]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002d16:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <HAL_RCC_OscConfig+0xccc>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d22:	d102      	bne.n	8002d2a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002d2a:	4b56      	ldr	r3, [pc, #344]	@ (8002e84 <HAL_RCC_OscConfig+0xccc>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a55      	ldr	r2, [pc, #340]	@ (8002e84 <HAL_RCC_OscConfig+0xccc>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d34:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002d36:	4b52      	ldr	r3, [pc, #328]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d4a:	3a01      	subs	r2, #1
 8002d4c:	0212      	lsls	r2, r2, #8
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d54:	430a      	orrs	r2, r1
 8002d56:	494a      	ldr	r1, [pc, #296]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d5c:	4b48      	ldr	r3, [pc, #288]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d60:	4b49      	ldr	r3, [pc, #292]	@ (8002e88 <HAL_RCC_OscConfig+0xcd0>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0252      	lsls	r2, r2, #9
 8002d76:	b292      	uxth	r2, r2
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0412      	lsls	r2, r2, #16
 8002d82:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002d86:	4311      	orrs	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0612      	lsls	r2, r2, #24
 8002d90:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002d94:	430a      	orrs	r2, r1
 8002d96:	493a      	ldr	r1, [pc, #232]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002d9c:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	4a37      	ldr	r2, [pc, #220]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002da2:	f023 0310 	bic.w	r3, r3, #16
 8002da6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	4a34      	ldr	r2, [pc, #208]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002db2:	4b33      	ldr	r3, [pc, #204]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002db8:	f043 0310 	orr.w	r3, r3, #16
 8002dbc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002dbe:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	f023 020c 	bic.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dca:	492d      	ldr	r1, [pc, #180]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <HAL_RCC_OscConfig+0xccc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a29      	ldr	r2, [pc, #164]	@ (8002e84 <HAL_RCC_OscConfig+0xccc>)
 8002dde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002de4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002dec:	4b24      	ldr	r3, [pc, #144]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b20      	ldr	r3, [pc, #128]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e08:	f7fe fbb0 	bl	800156c <HAL_GetTick>
 8002e0c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fbac 	bl	800156c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e09f      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002e22:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e2e:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e38:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e3a:	e091      	b.n	8002f60 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0f      	ldr	r2, [pc, #60]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e48:	f7fe fb90 	bl	800156c <HAL_GetTick>
 8002e4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fb8c 	bl	800156c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e07f      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e62:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	4a03      	ldr	r2, [pc, #12]	@ (8002e80 <HAL_RCC_OscConfig+0xcc8>)
 8002e74:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002e78:	f023 0303 	bic.w	r3, r3, #3
 8002e7c:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e7e:	e06f      	b.n	8002f60 <HAL_RCC_OscConfig+0xda8>
 8002e80:	46020c00 	.word	0x46020c00
 8002e84:	46020800 	.word	0x46020800
 8002e88:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002e8c:	4b37      	ldr	r3, [pc, #220]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e92:	4b36      	ldr	r3, [pc, #216]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d039      	beq.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d132      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	0a1b      	lsrs	r3, r3, #8
 8002eb2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d129      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d122      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	0a5b      	lsrs	r3, r3, #9
 8002ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	0e1b      	lsrs	r3, r3, #24
 8002f06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e024      	b.n	8002f62 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d01a      	beq.n	8002f60 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002f30:	f023 0310 	bic.w	r3, r3, #16
 8002f34:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe fb19 	bl	800156c <HAL_GetTick>
 8002f3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002f3c:	bf00      	nop
 8002f3e:	f7fe fb15 	bl	800156c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d0f9      	beq.n	8002f3e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4e:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <HAL_RCC_OscConfig+0xdb4>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3738      	adds	r7, #56	@ 0x38
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	46020c00 	.word	0x46020c00

08002f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e1d9      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f84:	4b9b      	ldr	r3, [pc, #620]	@ (80031f4 <HAL_RCC_ClockConfig+0x284>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d910      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b98      	ldr	r3, [pc, #608]	@ (80031f4 <HAL_RCC_ClockConfig+0x284>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	4996      	ldr	r1, [pc, #600]	@ (80031f4 <HAL_RCC_ClockConfig+0x284>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b94      	ldr	r3, [pc, #592]	@ (80031f4 <HAL_RCC_ClockConfig+0x284>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e1c1      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d908      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002fd0:	4b89      	ldr	r3, [pc, #548]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	4986      	ldr	r1, [pc, #536]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	4b81      	ldr	r3, [pc, #516]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d909      	bls.n	8003014 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003000:	4b7d      	ldr	r3, [pc, #500]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	497a      	ldr	r1, [pc, #488]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003010:	4313      	orrs	r3, r2
 8003012:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b74      	ldr	r3, [pc, #464]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800302c:	429a      	cmp	r2, r3
 800302e:	d908      	bls.n	8003042 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b71      	ldr	r3, [pc, #452]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	496e      	ldr	r1, [pc, #440]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 800303e:	4313      	orrs	r3, r2
 8003040:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	4b69      	ldr	r3, [pc, #420]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	429a      	cmp	r2, r3
 800305c:	d908      	bls.n	8003070 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800305e:	4b66      	ldr	r3, [pc, #408]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 020f 	bic.w	r2, r3, #15
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4963      	ldr	r1, [pc, #396]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 800306c:	4313      	orrs	r3, r2
 800306e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80d2 	beq.w	8003222 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d143      	bne.n	8003112 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b5b      	ldr	r3, [pc, #364]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 800308c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d110      	bne.n	80030ba <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b57      	ldr	r3, [pc, #348]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 800309a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800309e:	4a56      	ldr	r2, [pc, #344]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80030a8:	4b53      	ldr	r3, [pc, #332]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80030aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80030ba:	f7fe fa57 	bl	800156c <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80030c0:	4b4e      	ldr	r3, [pc, #312]	@ (80031fc <HAL_RCC_ClockConfig+0x28c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00f      	beq.n	80030ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80030ce:	f7fe fa4d 	bl	800156c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e12b      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80030e0:	4b46      	ldr	r3, [pc, #280]	@ (80031fc <HAL_RCC_ClockConfig+0x28c>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80030f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030f8:	4a3f      	ldr	r2, [pc, #252]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80030fa:	f023 0304 	bic.w	r3, r3, #4
 80030fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003102:	4b3d      	ldr	r3, [pc, #244]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d121      	bne.n	8003152 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e112      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311a:	4b37      	ldr	r3, [pc, #220]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e106      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003132:	4b31      	ldr	r3, [pc, #196]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0fa      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003142:	4b2d      	ldr	r3, [pc, #180]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0f2      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4926      	ldr	r1, [pc, #152]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 8003160:	4313      	orrs	r3, r2
 8003162:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003164:	f7fe fa02 	bl	800156c <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d112      	bne.n	8003198 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe f9fa 	bl	800156c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0d6      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800318a:	4b1b      	ldr	r3, [pc, #108]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d1ee      	bne.n	8003174 <HAL_RCC_ClockConfig+0x204>
 8003196:	e044      	b.n	8003222 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d112      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a2:	f7fe f9e3 	bl	800156c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0bf      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031b8:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_ClockConfig+0x232>
 80031c4:	e02d      	b.n	8003222 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d123      	bne.n	8003216 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d0:	f7fe f9cc 	bl	800156c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e0a8      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80031e6:	4b04      	ldr	r3, [pc, #16]	@ (80031f8 <HAL_RCC_ClockConfig+0x288>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x260>
 80031f2:	e016      	b.n	8003222 <HAL_RCC_ClockConfig+0x2b2>
 80031f4:	40022000 	.word	0x40022000
 80031f8:	46020c00 	.word	0x46020c00
 80031fc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe f9b4 	bl	800156c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e090      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003216:	4b4a      	ldr	r3, [pc, #296]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b04      	cmp	r3, #4
 8003220:	d1ee      	bne.n	8003200 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b43      	ldr	r3, [pc, #268]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	429a      	cmp	r2, r3
 800323c:	d208      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800323e:	4b40      	ldr	r3, [pc, #256]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 020f 	bic.w	r2, r3, #15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	493d      	ldr	r1, [pc, #244]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 800324c:	4313      	orrs	r3, r2
 800324e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b3c      	ldr	r3, [pc, #240]	@ (8003344 <HAL_RCC_ClockConfig+0x3d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d210      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b39      	ldr	r3, [pc, #228]	@ (8003344 <HAL_RCC_ClockConfig+0x3d4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 020f 	bic.w	r2, r3, #15
 8003266:	4937      	ldr	r1, [pc, #220]	@ (8003344 <HAL_RCC_ClockConfig+0x3d4>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b35      	ldr	r3, [pc, #212]	@ (8003344 <HAL_RCC_ClockConfig+0x3d4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e05b      	b.n	8003338 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003298:	429a      	cmp	r2, r3
 800329a:	d208      	bcs.n	80032ae <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b28      	ldr	r3, [pc, #160]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4925      	ldr	r1, [pc, #148]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d012      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d209      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80032cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4919      	ldr	r1, [pc, #100]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d208      	bcs.n	800330e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80032fc:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	490d      	ldr	r1, [pc, #52]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 800330a:	4313      	orrs	r3, r2
 800330c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800330e:	f000 f821 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003312:	4602      	mov	r2, r0
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_RCC_ClockConfig+0x3d0>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	490a      	ldr	r1, [pc, #40]	@ (8003348 <HAL_RCC_ClockConfig+0x3d8>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	4a09      	ldr	r2, [pc, #36]	@ (800334c <HAL_RCC_ClockConfig+0x3dc>)
 8003326:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003328:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_RCC_ClockConfig+0x3e0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe f893 	bl	8001458 <HAL_InitTick>
 8003332:	4603      	mov	r3, r0
 8003334:	73fb      	strb	r3, [r7, #15]

  return status;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	46020c00 	.word	0x46020c00
 8003344:	40022000 	.word	0x40022000
 8003348:	08008a5c 	.word	0x08008a5c
 800334c:	20000000 	.word	0x20000000
 8003350:	20000004 	.word	0x20000004

08003354 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b08b      	sub	sp, #44	@ 0x2c
 8003358:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003362:	4b78      	ldr	r3, [pc, #480]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800336c:	4b75      	ldr	r3, [pc, #468]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x34>
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d121      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d11e      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003388:	4b6e      	ldr	r3, [pc, #440]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003394:	4b6b      	ldr	r3, [pc, #428]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800339a:	0b1b      	lsrs	r3, r3, #12
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80033a4:	4b67      	ldr	r3, [pc, #412]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	0f1b      	lsrs	r3, r3, #28
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b0:	4a65      	ldr	r2, [pc, #404]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033c4:	e00d      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d2:	4b5e      	ldr	r3, [pc, #376]	@ (800354c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80033d4:	623b      	str	r3, [r7, #32]
 80033d6:	e004      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033de:	4b5b      	ldr	r3, [pc, #364]	@ (800354c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80033e0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	f040 80a5 	bne.w	8003534 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80033ea:	4b56      	ldr	r3, [pc, #344]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80033f4:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80033f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3301      	adds	r3, #1
 8003400:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003402:	4b50      	ldr	r3, [pc, #320]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800340e:	4b4d      	ldr	r3, [pc, #308]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d003      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0xe4>
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d022      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x128>
 8003436:	e043      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003550 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b3e      	ldr	r3, [pc, #248]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800344c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800345a:	ed97 6a01 	vldr	s12, [r7, #4]
 800345e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003554 <HAL_RCC_GetSysClockFreq+0x200>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800346a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800347a:	e046      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003550 <HAL_RCC_GetSysClockFreq+0x1fc>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b2d      	ldr	r3, [pc, #180]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800349e:	ed97 6a01 	vldr	s12, [r7, #4]
 80034a2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003554 <HAL_RCC_GetSysClockFreq+0x200>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034be:	e024      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034e8:	ed97 6a01 	vldr	s12, [r7, #4]
 80034ec:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003554 <HAL_RCC_GetSysClockFreq+0x200>
 80034f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80034f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80034f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003508:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	0e1b      	lsrs	r3, r3, #24
 8003510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003514:	3301      	adds	r3, #1
 8003516:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003522:	edd7 6a07 	vldr	s13, [r7, #28]
 8003526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800352a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352e:	ee17 3a90 	vmov	r3, s15
 8003532:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003534:	6a3b      	ldr	r3, [r7, #32]
}
 8003536:	4618      	mov	r0, r3
 8003538:	372c      	adds	r7, #44	@ 0x2c
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	46020c00 	.word	0x46020c00
 8003548:	08008a74 	.word	0x08008a74
 800354c:	00f42400 	.word	0x00f42400
 8003550:	4b742400 	.word	0x4b742400
 8003554:	46000000 	.word	0x46000000

08003558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800355c:	f7ff fefa 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x28>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	4906      	ldr	r1, [pc, #24]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x2c>)
 800356c:	5ccb      	ldrb	r3, [r1, r3]
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	4a05      	ldr	r2, [pc, #20]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x30>)
 8003574:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <HAL_RCC_GetHCLKFreq+0x30>)
 8003578:	681b      	ldr	r3, [r3, #0]
}
 800357a:	4618      	mov	r0, r3
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	46020c00 	.word	0x46020c00
 8003584:	08008a5c 	.word	0x08008a5c
 8003588:	20000000 	.word	0x20000000

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003590:	f7ff ffe2 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	46020c00 	.word	0x46020c00
 80035b0:	08008a6c 	.word	0x08008a6c

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80035b8:	f7ff ffce 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	46020c00 	.word	0x46020c00
 80035d8:	08008a6c 	.word	0x08008a6c

080035dc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80035e0:	f7ff ffba 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_GetPCLK3Freq+0x20>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	@ (8003600 <HAL_RCC_GetPCLK3Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	46020c00 	.word	0x46020c00
 8003600:	08008a6c 	.word	0x08008a6c

08003604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800360c:	4b3e      	ldr	r3, [pc, #248]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800361a:	f7fe fdbf 	bl	800219c <HAL_PWREx_GetVoltageRange>
 800361e:	6178      	str	r0, [r7, #20]
 8003620:	e019      	b.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003628:	4a37      	ldr	r2, [pc, #220]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003632:	4b35      	ldr	r3, [pc, #212]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003640:	f7fe fdac 	bl	800219c <HAL_PWREx_GetVoltageRange>
 8003644:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364c:	4a2e      	ldr	r2, [pc, #184]	@ (8003708 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800364e:	f023 0304 	bic.w	r3, r3, #4
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800365c:	d003      	beq.n	8003666 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003664:	d109      	bne.n	800367a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800366c:	d202      	bcs.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800366e:	2301      	movs	r3, #1
 8003670:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003672:	e033      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003674:	2300      	movs	r3, #0
 8003676:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003678:	e030      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003680:	d208      	bcs.n	8003694 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003688:	d102      	bne.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800368a:	2303      	movs	r3, #3
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	e025      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e035      	b.n	8003700 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800369a:	d90f      	bls.n	80036bc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036a8:	d902      	bls.n	80036b0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e015      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80036b0:	2301      	movs	r3, #1
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e012      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	e00f      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036c2:	d109      	bne.n	80036d8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ca:	d102      	bne.n	80036d2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80036cc:	2301      	movs	r3, #1
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e004      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80036d2:	2302      	movs	r3, #2
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	e001      	b.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80036d8:	2301      	movs	r3, #1
 80036da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f023 020f 	bic.w	r2, r3, #15
 80036e4:	4909      	ldr	r1, [pc, #36]	@ (800370c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80036ec:	4b07      	ldr	r3, [pc, #28]	@ (800370c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d001      	beq.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	46020c00 	.word	0x46020c00
 800370c:	40022000 	.word	0x40022000

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003714:	b0ba      	sub	sp, #232	@ 0xe8
 8003716:	af00      	add	r7, sp, #0
 8003718:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800371c:	2300      	movs	r3, #0
 800371e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003722:	2300      	movs	r3, #0
 8003724:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f002 0401 	and.w	r4, r2, #1
 8003734:	2500      	movs	r5, #0
 8003736:	ea54 0305 	orrs.w	r3, r4, r5
 800373a:	d00b      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800373c:	4bcb      	ldr	r3, [pc, #812]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003742:	f023 0103 	bic.w	r1, r3, #3
 8003746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374c:	4ac7      	ldr	r2, [pc, #796]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800374e:	430b      	orrs	r3, r1
 8003750:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f002 0802 	and.w	r8, r2, #2
 8003760:	f04f 0900 	mov.w	r9, #0
 8003764:	ea58 0309 	orrs.w	r3, r8, r9
 8003768:	d00b      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800376a:	4bc0      	ldr	r3, [pc, #768]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800376c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003770:	f023 010c 	bic.w	r1, r3, #12
 8003774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377a:	4abc      	ldr	r2, [pc, #752]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377c:	430b      	orrs	r3, r1
 800377e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f002 0a04 	and.w	sl, r2, #4
 800378e:	f04f 0b00 	mov.w	fp, #0
 8003792:	ea5a 030b 	orrs.w	r3, sl, fp
 8003796:	d00b      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003798:	4bb4      	ldr	r3, [pc, #720]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800379e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a8:	4ab0      	ldr	r2, [pc, #704]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f002 0308 	and.w	r3, r2, #8
 80037bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80037d0:	4ba6      	ldr	r3, [pc, #664]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e0:	4aa2      	ldr	r2, [pc, #648]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e2:	430b      	orrs	r3, r1
 80037e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f002 0310 	and.w	r3, r2, #16
 80037f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d00b      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003808:	4b98      	ldr	r3, [pc, #608]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003818:	4a94      	ldr	r2, [pc, #592]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381a:	430b      	orrs	r3, r1
 800381c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f002 0320 	and.w	r3, r2, #32
 800382c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003836:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d00b      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003840:	4b8a      	ldr	r3, [pc, #552]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003846:	f023 0107 	bic.w	r1, r3, #7
 800384a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800384e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003850:	4a86      	ldr	r2, [pc, #536]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003852:	430b      	orrs	r3, r1
 8003854:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800386e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d00b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003878:	4b7c      	ldr	r3, [pc, #496]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800387e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003888:	4a78      	ldr	r2, [pc, #480]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388a:	430b      	orrs	r3, r1
 800388c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800389c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80038b0:	4b6e      	ldr	r3, [pc, #440]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80038d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80038de:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d00b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80038e8:	4b60      	ldr	r3, [pc, #384]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003916:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d00b      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003920:	4b52      	ldr	r3, [pc, #328]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003926:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800392a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	4a4e      	ldr	r2, [pc, #312]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003932:	430b      	orrs	r3, r1
 8003934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003938:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003944:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800394e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d00b      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003958:	4b44      	ldr	r3, [pc, #272]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800395a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800395e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003968:	4a40      	ldr	r2, [pc, #256]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	430b      	orrs	r3, r1
 800396c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800397c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003986:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d00b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003990:	4b36      	ldr	r3, [pc, #216]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003996:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800399a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800399e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a0:	4a32      	ldr	r2, [pc, #200]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a2:	430b      	orrs	r3, r1
 80039a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80039a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d00c      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80039c8:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039da:	4a24      	ldr	r2, [pc, #144]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039dc:	430b      	orrs	r3, r1
 80039de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039f0:	2300      	movs	r3, #0
 80039f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d04f      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80039fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	2b80      	cmp	r3, #128	@ 0x80
 8003a08:	d02d      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d827      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a0e:	2b60      	cmp	r3, #96	@ 0x60
 8003a10:	d02e      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a12:	2b60      	cmp	r3, #96	@ 0x60
 8003a14:	d823      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a16:	2b40      	cmp	r3, #64	@ 0x40
 8003a18:	d006      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003a1a:	2b40      	cmp	r3, #64	@ 0x40
 8003a1c:	d81f      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d011      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003a26:	e01a      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a28:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a32:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a34:	e01d      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f002 fa17 	bl	8005e70 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a48:	e013      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a4e:	332c      	adds	r3, #44	@ 0x2c
 8003a50:	4618      	mov	r0, r3
 8003a52:	f002 faa5 	bl	8005fa0 <RCCEx_PLL3_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a5c:	e009      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a64:	e005      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8003a66:	bf00      	nop
 8003a68:	e003      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003a6a:	bf00      	nop
 8003a6c:	46020c00 	.word	0x46020c00
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10d      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003a7a:	4bb6      	ldr	r3, [pc, #728]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a80:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8c:	4ab1      	ldr	r2, [pc, #708]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a96:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a9a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003aaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003aac:	2300      	movs	r3, #0
 8003aae:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ab0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d053      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac6:	d033      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003acc:	d82c      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad2:	d02f      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ad8:	d826      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ade:	d008      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae4:	d820      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aee:	d011      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003af0:	e01a      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003af2:	4b98      	ldr	r3, [pc, #608]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	4a97      	ldr	r2, [pc, #604]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003afe:	e01a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b04:	3308      	adds	r3, #8
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 f9b2 	bl	8005e70 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b12:	e010      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b18:	332c      	adds	r3, #44	@ 0x2c
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f002 fa40 	bl	8005fa0 <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b26:	e006      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10d      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003b3e:	4b85      	ldr	r3, [pc, #532]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003b40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b44:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b50:	4a80      	ldr	r2, [pc, #512]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b5e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b70:	2300      	movs	r3, #0
 8003b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d046      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b8a:	d028      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003b8c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003b90:	d821      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b96:	d022      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b9c:	d81b      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003b9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ba2:	d01c      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003ba4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ba8:	d815      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb4:	d80f      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d011      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bbe:	d00e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f002 f951 	bl	8005e70 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003bd4:	e004      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003bdc:	e000      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8003bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003be8:	4b5a      	ldr	r3, [pc, #360]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bee:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bfa:	4a56      	ldr	r2, [pc, #344]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c08:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003c18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c1e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d03f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d81e      	bhi.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003c34:	a201      	add	r2, pc, #4	@ (adr r2, 8003c3c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c7b 	.word	0x08003c7b
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c5f 	.word	0x08003c5f
 8003c48:	08003c7b 	.word	0x08003c7b
 8003c4c:	08003c7b 	.word	0x08003c7b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c50:	4b40      	ldr	r3, [pc, #256]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	4a3f      	ldr	r2, [pc, #252]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c62:	332c      	adds	r3, #44	@ 0x2c
 8003c64:	4618      	mov	r0, r3
 8003c66:	f002 f99b 	bl	8005fa0 <RCCEx_PLL3_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c70:	e004      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c78:	e000      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8003c7a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003c7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003c84:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c8a:	f023 0107 	bic.w	r1, r3, #7
 8003c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c96:	4a2f      	ldr	r2, [pc, #188]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c9e:	e003      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ca4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d04d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ccc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cd0:	d028      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003cd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cd6:	d821      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003cd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cdc:	d024      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003cde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ce2:	d81b      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ce8:	d00e      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003cea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cee:	d815      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf8:	d110      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	4a15      	ldr	r2, [pc, #84]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003d06:	e012      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d0c:	332c      	adds	r3, #44	@ 0x2c
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f002 f946 	bl	8005fa0 <RCCEx_PLL3_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003d22:	e004      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003d2c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003d2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d110      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d3c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d48:	4a02      	ldr	r2, [pc, #8]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003d52:	bf00      	nop
 8003d54:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d5c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d6e:	2300      	movs	r3, #0
 8003d70:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d72:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f000 80b5 	beq.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d84:	4b9d      	ldr	r3, [pc, #628]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d113      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	4b9a      	ldr	r3, [pc, #616]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d98:	4a98      	ldr	r2, [pc, #608]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003da2:	4b96      	ldr	r3, [pc, #600]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003dba:	4b91      	ldr	r3, [pc, #580]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	4a90      	ldr	r2, [pc, #576]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fbd1 	bl	800156c <HAL_GetTick>
 8003dca:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dce:	e00b      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fd fbcc 	bl	800156c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d903      	bls.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003de6:	e005      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003de8:	4b85      	ldr	r3, [pc, #532]	@ (8004000 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ed      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003df4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d165      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfc:	4b7f      	ldr	r3, [pc, #508]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003dfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d023      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01b      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e22:	4b76      	ldr	r3, [pc, #472]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e30:	4b72      	ldr	r3, [pc, #456]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e36:	4a71      	ldr	r2, [pc, #452]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e40:	4b6e      	ldr	r3, [pc, #440]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e46:	4a6d      	ldr	r2, [pc, #436]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e50:	4a6a      	ldr	r2, [pc, #424]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d019      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e66:	f7fd fb81 	bl	800156c <HAL_GetTick>
 8003e6a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	e00d      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd fb7c 	bl	800156c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d903      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003e8a:	e006      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0ea      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8003e9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10d      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003ea2:	4b56      	ldr	r3, [pc, #344]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003eb4:	4a51      	ldr	r2, [pc, #324]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ebe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ec2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ecc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ed0:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed8:	4b48      	ldr	r3, [pc, #288]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ede:	4a47      	ldr	r2, [pc, #284]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003ee8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d042      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f0c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f10:	d022      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003f12:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003f16:	d81b      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f1c:	d011      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8003f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f22:	d815      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d019      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f2c:	d110      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f32:	3308      	adds	r3, #8
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 ff9b 	bl	8005e70 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f40:	e00d      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f42:	4b2e      	ldr	r3, [pc, #184]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	4a2d      	ldr	r2, [pc, #180]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003f5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003f5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003f66:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f6c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f78:	4a20      	ldr	r2, [pc, #128]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003f86:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f98:	2300      	movs	r3, #0
 8003f9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d032      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb2:	d00b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb8:	d804      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc2:	d007      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e002      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003fd4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003fd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d112      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003fde:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003fe0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fe4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff0:	4a02      	ldr	r2, [pc, #8]	@ (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8003ffa:	bf00      	nop
 8003ffc:	46020c00 	.word	0x46020c00
 8004000:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004008:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800400c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800401a:	2300      	movs	r3, #0
 800401c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800401e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d00c      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004028:	4b98      	ldr	r3, [pc, #608]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800402a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800402e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8004032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800403a:	4a94      	ldr	r2, [pc, #592]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800403c:	430b      	orrs	r3, r1
 800403e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004050:	2300      	movs	r3, #0
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
 8004054:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800405e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004062:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800406c:	4b87      	ldr	r3, [pc, #540]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	4a86      	ldr	r2, [pc, #536]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004072:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004076:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004078:	4b84      	ldr	r3, [pc, #528]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800407a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800407e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800408a:	4a80      	ldr	r2, [pc, #512]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800408c:	430b      	orrs	r3, r1
 800408e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800409e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d00c      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80040ae:	4b77      	ldr	r3, [pc, #476]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040c0:	4972      	ldr	r1, [pc, #456]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80040c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d00c      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80040e4:	4b69      	ldr	r3, [pc, #420]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80040f6:	4965      	ldr	r1, [pc, #404]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80040fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004114:	460b      	mov	r3, r1
 8004116:	4313      	orrs	r3, r2
 8004118:	d00c      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800411a:	4b5c      	ldr	r3, [pc, #368]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800411c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004120:	f023 0218 	bic.w	r2, r3, #24
 8004124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004128:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800412c:	4957      	ldr	r1, [pc, #348]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004134:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800414a:	460b      	mov	r3, r1
 800414c:	4313      	orrs	r3, r2
 800414e:	d032      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004154:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800415c:	d105      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415e:	4b4b      	ldr	r3, [pc, #300]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	4a4a      	ldr	r2, [pc, #296]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004168:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800416a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800416e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004172:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004176:	d108      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800417c:	3308      	adds	r3, #8
 800417e:	4618      	mov	r0, r3
 8004180:	f001 fe76 	bl	8005e70 <RCCEx_PLL2_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800418a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10d      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004192:	4b3e      	ldr	r3, [pc, #248]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004198:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800419c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041a4:	4939      	ldr	r1, [pc, #228]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80041ac:	e003      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80041b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80041b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	2300      	movs	r3, #0
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d03a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80041d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041de:	d00e      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80041e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e4:	d815      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80041ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041ee:	d110      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4b26      	ldr	r3, [pc, #152]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	4a25      	ldr	r2, [pc, #148]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80041fc:	e00e      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004202:	3308      	adds	r3, #8
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fe33 	bl	8005e70 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004210:	e004      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800421a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800421c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004224:	4b19      	ldr	r3, [pc, #100]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800422a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800422e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004236:	4915      	ldr	r1, [pc, #84]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800423e:	e003      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004244:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004248:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	d00c      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004264:	4b09      	ldr	r3, [pc, #36]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800426a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800426e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004276:	4905      	ldr	r1, [pc, #20]	@ (800428c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800427e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8004282:	4618      	mov	r0, r3
 8004284:	37e8      	adds	r7, #232	@ 0xe8
 8004286:	46bd      	mov	sp, r7
 8004288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428c:	46020c00 	.word	0x46020c00

08004290 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	@ 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004298:	4ba6      	ldr	r3, [pc, #664]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800429a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80042a2:	4ba4      	ldr	r3, [pc, #656]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80042ac:	4ba1      	ldr	r3, [pc, #644]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	3301      	adds	r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80042ba:	4b9e      	ldr	r3, [pc, #632]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80042c6:	4b9b      	ldr	r3, [pc, #620]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	08db      	lsrs	r3, r3, #3
 80042cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d062      	beq.n	80043ae <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	f200 8081 	bhi.w	80043f2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d024      	beq.n	8004340 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d17a      	bne.n	80043f2 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004538 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b89      	ldr	r3, [pc, #548]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800431e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004322:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800453c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800432e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800433e:	e08f      	b.n	8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004340:	4b7c      	ldr	r3, [pc, #496]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800434c:	4b79      	ldr	r3, [pc, #484]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	0f1b      	lsrs	r3, r3, #28
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	e006      	b.n	8004366 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8004358:	4b76      	ldr	r3, [pc, #472]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800435a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	0f1b      	lsrs	r3, r3, #28
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	4a76      	ldr	r2, [pc, #472]	@ (8004540 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436c:	ee07 3a90 	vmov	s15, r3
 8004370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800438c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004390:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800453c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800439c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80043a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ac:	e058      	b.n	8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	ee07 3a90 	vmov	s15, r3
 80043b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004538 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80043bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c0:	4b5c      	ldr	r3, [pc, #368]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80043d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800453c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80043d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80043e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043f0:	e036      	b.n	8004460 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80043f2:	4b50      	ldr	r3, [pc, #320]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80043fe:	4b4d      	ldr	r3, [pc, #308]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0f1b      	lsrs	r3, r3, #28
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	e006      	b.n	8004418 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800440c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	0f1b      	lsrs	r3, r3, #28
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	4a49      	ldr	r2, [pc, #292]	@ (8004540 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004442:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800453c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004460:	4b34      	ldr	r3, [pc, #208]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d017      	beq.n	800449c <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800446c:	4b31      	ldr	r3, [pc, #196]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004470:	0a5b      	lsrs	r3, r3, #9
 8004472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800447e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004482:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004486:	edd7 6a07 	vldr	s13, [r7, #28]
 800448a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800448e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004492:	ee17 2a90 	vmov	r2, s15
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e002      	b.n	80044a2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80044a2:	4b24      	ldr	r3, [pc, #144]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d017      	beq.n	80044de <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80044ae:	4b21      	ldr	r3, [pc, #132]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b2:	0c1b      	lsrs	r3, r3, #16
 80044b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b8:	ee07 3a90 	vmov	s15, r3
 80044bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80044c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80044c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d4:	ee17 2a90 	vmov	r2, s15
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	e002      	b.n	80044e4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80044e4:	4b13      	ldr	r3, [pc, #76]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d017      	beq.n	8004520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80044f0:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80044f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f4:	0e1b      	lsrs	r3, r3, #24
 80044f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8004502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004506:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800450a:	edd7 6a07 	vldr	s13, [r7, #28]
 800450e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004516:	ee17 2a90 	vmov	r2, s15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800451e:	e002      	b.n	8004526 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
}
 8004526:	bf00      	nop
 8004528:	3724      	adds	r7, #36	@ 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	46020c00 	.word	0x46020c00
 8004538:	4b742400 	.word	0x4b742400
 800453c:	46000000 	.word	0x46000000
 8004540:	08008a74 	.word	0x08008a74

08004544 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	@ 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800454c:	4ba6      	ldr	r3, [pc, #664]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004554:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004556:	4ba4      	ldr	r3, [pc, #656]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8004560:	4ba1      	ldr	r3, [pc, #644]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	3301      	adds	r3, #1
 800456c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800456e:	4b9e      	ldr	r3, [pc, #632]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800457a:	4b9b      	ldr	r3, [pc, #620]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	ee07 3a90 	vmov	s15, r3
 800458e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004592:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d062      	beq.n	8004662 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	f200 8081 	bhi.w	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d024      	beq.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d17a      	bne.n	80046a6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b89      	ldr	r3, [pc, #548]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045f2:	e08f      	b.n	8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80045f4:	4b7c      	ldr	r3, [pc, #496]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004600:	4b79      	ldr	r3, [pc, #484]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	0f1b      	lsrs	r3, r3, #28
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	e006      	b.n	800461a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800460c:	4b76      	ldr	r3, [pc, #472]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800460e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	0f1b      	lsrs	r3, r3, #28
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	4a76      	ldr	r2, [pc, #472]	@ (80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004640:	ed97 6a02 	vldr	s12, [r7, #8]
 8004644:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004650:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004654:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004660:	e058      	b.n	8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004674:	4b5c      	ldr	r3, [pc, #368]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004684:	ed97 6a02 	vldr	s12, [r7, #8]
 8004688:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800468c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004690:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8004694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004698:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800469c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046a4:	e036      	b.n	8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80046a6:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80046b2:	4b4d      	ldr	r3, [pc, #308]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0f1b      	lsrs	r3, r3, #28
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	e006      	b.n	80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80046be:	4b4a      	ldr	r3, [pc, #296]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80046c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	0f1b      	lsrs	r3, r3, #28
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	4a49      	ldr	r2, [pc, #292]	@ (80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80046ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	ee07 3a90 	vmov	s15, r3
 80046e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80047f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004712:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004714:	4b34      	ldr	r3, [pc, #208]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d017      	beq.n	8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004720:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004724:	0a5b      	lsrs	r3, r3, #9
 8004726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8004732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004736:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800473a:	edd7 6a07 	vldr	s13, [r7, #28]
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004746:	ee17 2a90 	vmov	r2, s15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e002      	b.n	8004756 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004756:	4b24      	ldr	r3, [pc, #144]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d017      	beq.n	8004792 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004762:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004778:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800477c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004788:	ee17 2a90 	vmov	r2, s15
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	e002      	b.n	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004798:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d017      	beq.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047a4:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	0e1b      	lsrs	r3, r3, #24
 80047aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80047b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80047be:	edd7 6a07 	vldr	s13, [r7, #28]
 80047c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ca:	ee17 2a90 	vmov	r2, s15
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047d2:	e002      	b.n	80047da <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
}
 80047da:	bf00      	nop
 80047dc:	3724      	adds	r7, #36	@ 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	46020c00 	.word	0x46020c00
 80047ec:	4b742400 	.word	0x4b742400
 80047f0:	46000000 	.word	0x46000000
 80047f4:	08008a74 	.word	0x08008a74

080047f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004800:	4ba6      	ldr	r3, [pc, #664]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800480a:	4ba4      	ldr	r3, [pc, #656]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8004814:	4ba1      	ldr	r3, [pc, #644]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	3301      	adds	r3, #1
 8004820:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8004822:	4b9e      	ldr	r3, [pc, #632]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800482e:	4b9b      	ldr	r3, [pc, #620]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004832:	08db      	lsrs	r3, r3, #3
 8004834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d062      	beq.n	8004916 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b03      	cmp	r3, #3
 8004854:	f200 8081 	bhi.w	800495a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d024      	beq.n	80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d17a      	bne.n	800495a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004876:	4b89      	ldr	r3, [pc, #548]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004886:	ed97 6a02 	vldr	s12, [r7, #8]
 800488a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80048a6:	e08f      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80048a8:	4b7c      	ldr	r3, [pc, #496]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80048b4:	4b79      	ldr	r3, [pc, #484]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	0f1b      	lsrs	r3, r3, #28
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	e006      	b.n	80048ce <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80048c0:	4b76      	ldr	r3, [pc, #472]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	0f1b      	lsrs	r3, r3, #28
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	4a76      	ldr	r2, [pc, #472]	@ (8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80048d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80048fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004908:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800490c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004910:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004914:	e058      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004920:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8004924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004928:	4b5c      	ldr	r3, [pc, #368]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004938:	ed97 6a02 	vldr	s12, [r7, #8]
 800493c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004940:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004944:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8004948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004954:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004958:	e036      	b.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800495a:	4b50      	ldr	r3, [pc, #320]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8004966:	4b4d      	ldr	r3, [pc, #308]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	0f1b      	lsrs	r3, r3, #28
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	e006      	b.n	8004980 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8004972:	4b4a      	ldr	r3, [pc, #296]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	0f1b      	lsrs	r3, r3, #28
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	4a49      	ldr	r2, [pc, #292]	@ (8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049aa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049c6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80049c8:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d017      	beq.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049d4:	4b31      	ldr	r3, [pc, #196]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80049d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d8:	0a5b      	lsrs	r3, r3, #9
 80049da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80049e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80049ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fa:	ee17 2a90 	vmov	r2, s15
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004a0a:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a16:	4b21      	ldr	r3, [pc, #132]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8004a28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a2c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a3c:	ee17 2a90 	vmov	r2, s15
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d017      	beq.n	8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a58:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5c:	0e1b      	lsrs	r3, r3, #24
 8004a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8004a6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a7e:	ee17 2a90 	vmov	r2, s15
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a86:	e002      	b.n	8004a8e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	46020c00 	.word	0x46020c00
 8004aa0:	4b742400 	.word	0x4b742400
 8004aa4:	46000000 	.word	0x46000000
 8004aa8:	08008a74 	.word	0x08008a74

08004aac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08e      	sub	sp, #56	@ 0x38
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aba:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	d145      	bne.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ac2:	4ba7      	ldr	r3, [pc, #668]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004acc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004ace:	4ba4      	ldr	r3, [pc, #656]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d108      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae2:	d104      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aea:	f001 b9b3 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004aee:	4b9c      	ldr	r3, [pc, #624]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004afc:	d114      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b04:	d110      	bne.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b06:	4b96      	ldr	r3, [pc, #600]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b14:	d103      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8004b16:	23fa      	movs	r3, #250	@ 0xfa
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b1a:	f001 b99b 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004b1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b24:	f001 b996 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004b28:	4b8d      	ldr	r3, [pc, #564]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b34:	d107      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b3c:	d103      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8004b3e:	4b89      	ldr	r3, [pc, #548]	@ (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b42:	f001 b987 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b4a:	f001 b983 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b52:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004b56:	430b      	orrs	r3, r1
 8004b58:	d151      	bne.n	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004b5a:	4b81      	ldr	r3, [pc, #516]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b60:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004b64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	2b80      	cmp	r3, #128	@ 0x80
 8004b6a:	d035      	beq.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	2b80      	cmp	r3, #128	@ 0x80
 8004b70:	d841      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	2b60      	cmp	r3, #96	@ 0x60
 8004b76:	d02a      	beq.n	8004bce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7a:	2b60      	cmp	r3, #96	@ 0x60
 8004b7c:	d83b      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	2b40      	cmp	r3, #64	@ 0x40
 8004b88:	d835      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00c      	beq.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d012      	beq.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004b96:	e02e      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fb77 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ba6:	f001 b955 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004baa:	f107 0318 	add.w	r3, r7, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fcc8 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bb8:	f001 b94c 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bbc:	f107 030c 	add.w	r3, r7, #12
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fe19 	bl	80047f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bca:	f001 b943 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004bce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bd4:	f001 b93e 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bd8:	4b61      	ldr	r3, [pc, #388]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be4:	d103      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004be6:	4b60      	ldr	r3, [pc, #384]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004bea:	f001 b933 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bf2:	f001 b92f 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bfa:	f001 b92b 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c02:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004c06:	430b      	orrs	r3, r1
 8004c08:	d158      	bne.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004c0a:	4b55      	ldr	r3, [pc, #340]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1c:	d03b      	beq.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c24:	d846      	bhi.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c2c:	d02e      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c34:	d83e      	bhi.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c44:	d836      	bhi.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00d      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c52:	d012      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004c54:	e02e      	b.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fb18 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c64:	f001 b8f6 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c68:	f107 0318 	add.w	r3, r7, #24
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fc69 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c76:	f001 b8ed 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c7a:	f107 030c 	add.w	r3, r7, #12
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fdba 	bl	80047f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c88:	f001 b8e4 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c8c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004c90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c92:	f001 b8df 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c96:	4b32      	ldr	r3, [pc, #200]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca2:	d103      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004ca4:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004ca8:	f001 b8d4 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb0:	f001 b8d0 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cb8:	f001 b8cc 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	d126      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004cc8:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004cca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cd2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004cd4:	4b22      	ldr	r3, [pc, #136]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cec:	f001 b8b2 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d103      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004d06:	4b19      	ldr	r3, [pc, #100]	@ (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0a:	f001 b8a3 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d12:	f001 b89f 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d1a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	d16e      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004d22:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d28:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004d2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d34:	d03d      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d38:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d3c:	d85c      	bhi.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d44:	d014      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d4c:	d854      	bhi.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01f      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d5a:	d012      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004d5c:	e04c      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004d5e:	bf00      	nop
 8004d60:	46020c00 	.word	0x46020c00
 8004d64:	0007a120 	.word	0x0007a120
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fa8b 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d7e:	f001 b869 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d82:	f107 0318 	add.w	r3, r7, #24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fbdc 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d90:	f001 b860 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004d94:	4ba7      	ldr	r3, [pc, #668]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da0:	d103      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004da2:	4ba5      	ldr	r3, [pc, #660]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004da4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004da6:	f001 b855 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dae:	f001 b851 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004db2:	4ba0      	ldr	r3, [pc, #640]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d118      	bne.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004dbe:	4b9d      	ldr	r3, [pc, #628]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004dca:	4b9a      	ldr	r3, [pc, #616]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0e1b      	lsrs	r3, r3, #24
 8004dd0:	f003 030f 	and.w	r3, r3, #15
 8004dd4:	e006      	b.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004dd6:	4b97      	ldr	r3, [pc, #604]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	0e1b      	lsrs	r3, r3, #24
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	4a95      	ldr	r2, [pc, #596]	@ (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004dec:	f001 b832 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004df4:	f001 b82e 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dfc:	f001 b82a 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e04:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	d17f      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004e0c:	4b89      	ldr	r3, [pc, #548]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e16:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d165      	bne.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004e1e:	4b85      	ldr	r3, [pc, #532]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e24:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004e28:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e30:	d034      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004e38:	d853      	bhi.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e40:	d00b      	beq.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e48:	d84b      	bhi.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d016      	beq.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e56:	d009      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004e58:	e043      	b.n	8004ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fa16 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004e68:	f000 bff4 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e6c:	f107 0318 	add.w	r3, r7, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fb67 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004e7a:	f000 bfeb 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e8a:	d103      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004e8e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004e90:	f000 bfe0 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004e98:	f000 bfdc 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004e9c:	4b65      	ldr	r3, [pc, #404]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d118      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ea8:	4b62      	ldr	r3, [pc, #392]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004eb4:	4b5f      	ldr	r3, [pc, #380]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	e006      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004ec0:	4b5c      	ldr	r3, [pc, #368]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a5b      	ldr	r2, [pc, #364]	@ (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004ed6:	f000 bfbd 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004ede:	f000 bfb9 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004ee6:	f000 bfb5 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef0:	d108      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff f9ca 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f00:	f000 bfa8 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f08:	f000 bfa4 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f10:	1e51      	subs	r1, r2, #1
 8004f12:	430b      	orrs	r3, r1
 8004f14:	d136      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f16:	4b47      	ldr	r3, [pc, #284]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe fb44 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f2e:	f000 bf91 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d104      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f38:	f7fe fa0c 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8004f3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f3e:	f000 bf89 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004f42:	4b3c      	ldr	r3, [pc, #240]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f4e:	d106      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d103      	bne.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004f56:	4b3a      	ldr	r3, [pc, #232]	@ (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f5a:	f000 bf7b 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004f5e:	4b35      	ldr	r3, [pc, #212]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d104      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f78:	f000 bf6c 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f80:	f000 bf68 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f88:	1e91      	subs	r1, r2, #2
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	d136      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004f8e:	4b29      	ldr	r3, [pc, #164]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe faf4 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8004fa4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fa6:	f000 bf55 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d104      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fb0:	f7fe f9d0 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8004fb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fb6:	f000 bf4d 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004fba:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d103      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004fce:	4b1c      	ldr	r3, [pc, #112]	@ (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fd2:	f000 bf3f 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004fd6:	4b17      	ldr	r3, [pc, #92]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d104      	bne.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff0:	f000 bf30 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff8:	f000 bf2c 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005000:	1f11      	subs	r1, r2, #4
 8005002:	430b      	orrs	r3, r1
 8005004:	d13f      	bne.n	8005086 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005006:	4b0b      	ldr	r3, [pc, #44]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800500c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005018:	f7fe fab8 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 800501c:	6378      	str	r0, [r7, #52]	@ 0x34
 800501e:	f000 bf19 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	2b10      	cmp	r3, #16
 8005026:	d10d      	bne.n	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005028:	f7fe f994 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 800502c:	6378      	str	r0, [r7, #52]	@ 0x34
 800502e:	f000 bf11 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005032:	bf00      	nop
 8005034:	46020c00 	.word	0x46020c00
 8005038:	02dc6c00 	.word	0x02dc6c00
 800503c:	08008a74 	.word	0x08008a74
 8005040:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005044:	4ba6      	ldr	r3, [pc, #664]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005050:	d106      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	2b20      	cmp	r3, #32
 8005056:	d103      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8005058:	4ba2      	ldr	r3, [pc, #648]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800505a:	637b      	str	r3, [r7, #52]	@ 0x34
 800505c:	f000 befa 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005060:	4b9f      	ldr	r3, [pc, #636]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d107      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	2b30      	cmp	r3, #48	@ 0x30
 8005072:	d104      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8005074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
 800507a:	f000 beeb 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
 8005082:	f000 bee7 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800508a:	f1a2 0108 	sub.w	r1, r2, #8
 800508e:	430b      	orrs	r3, r1
 8005090:	d136      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005092:	4b93      	ldr	r3, [pc, #588]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005098:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800509c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80050a4:	f7fe fa72 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 80050a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80050aa:	f000 bed3 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80050ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b0:	2b40      	cmp	r3, #64	@ 0x40
 80050b2:	d104      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050b4:	f7fe f94e 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80050b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80050ba:	f000 becb 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80050be:	4b88      	ldr	r3, [pc, #544]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ca:	d106      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	2b80      	cmp	r3, #128	@ 0x80
 80050d0:	d103      	bne.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80050d2:	4b84      	ldr	r3, [pc, #528]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d6:	f000 bebd 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80050da:	4b81      	ldr	r3, [pc, #516]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d107      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80050ec:	d104      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f4:	f000 beae 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80050fc:	f000 beaa 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005104:	f1a2 0110 	sub.w	r1, r2, #16
 8005108:	430b      	orrs	r3, r1
 800510a:	d139      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800510c:	4b74      	ldr	r3, [pc, #464]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800510e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005116:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800511e:	f7fe fa35 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8005122:	6378      	str	r0, [r7, #52]	@ 0x34
 8005124:	f000 be96 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800512e:	d104      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005130:	f7fe f910 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005134:	6378      	str	r0, [r7, #52]	@ 0x34
 8005136:	f000 be8d 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800513a:	4b69      	ldr	r3, [pc, #420]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005146:	d107      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8005148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800514e:	d103      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8005150:	4b64      	ldr	r3, [pc, #400]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	f000 be7e 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005158:	4b61      	ldr	r3, [pc, #388]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800515a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d108      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8005166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800516c:	d104      	bne.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800516e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	f000 be6e 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	637b      	str	r3, [r7, #52]	@ 0x34
 800517c:	f000 be6a 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005184:	f1a2 0120 	sub.w	r1, r2, #32
 8005188:	430b      	orrs	r3, r1
 800518a:	d158      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800518c:	4b54      	ldr	r3, [pc, #336]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800518e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800519e:	f7fe fa1d 	bl	80035dc <HAL_RCC_GetPCLK3Freq>
 80051a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80051a4:	f000 be56 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d104      	bne.n	80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80051ae:	f7fe f8d1 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80051b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80051b4:	f000 be4e 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80051b8:	4b49      	ldr	r3, [pc, #292]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c4:	d106      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d103      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80051cc:	4b45      	ldr	r3, [pc, #276]	@ (80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80051d0:	f000 be40 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80051d4:	4b42      	ldr	r3, [pc, #264]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d107      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d104      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80051e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ee:	f000 be31 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80051f2:	4b3b      	ldr	r3, [pc, #236]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d11b      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	2b04      	cmp	r3, #4
 8005202:	d118      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005204:	4b36      	ldr	r3, [pc, #216]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005210:	4b33      	ldr	r3, [pc, #204]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	e006      	b.n	800522a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800521c:	4b30      	ldr	r3, [pc, #192]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800521e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	4a2f      	ldr	r2, [pc, #188]	@ (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
 8005232:	f000 be0f 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	637b      	str	r3, [r7, #52]	@ 0x34
 800523a:	f000 be0b 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800523e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005242:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005246:	430b      	orrs	r3, r1
 8005248:	d172      	bne.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800524a:	4b25      	ldr	r3, [pc, #148]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800524c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005250:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005254:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525c:	d104      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800525e:	f7fe f879 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005262:	6378      	str	r0, [r7, #52]	@ 0x34
 8005264:	f000 bdf6 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800526e:	d108      	bne.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005270:	f107 0318 	add.w	r3, r7, #24
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff f965 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	637b      	str	r3, [r7, #52]	@ 0x34
 800527e:	f000 bde9 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005288:	f7fe f966 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 800528c:	6378      	str	r0, [r7, #52]	@ 0x34
 800528e:	f000 bde1 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005298:	d128      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800529a:	4b11      	ldr	r3, [pc, #68]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d118      	bne.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80052a6:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80052b2:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	0e1b      	lsrs	r3, r3, #24
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	e006      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80052be:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80052c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	0e1b      	lsrs	r3, r3, #24
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	4a06      	ldr	r2, [pc, #24]	@ (80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d4:	f000 bdbe 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
 80052dc:	f000 bdba 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80052e0:	46020c00 	.word	0x46020c00
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	08008a74 	.word	0x08008a74
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80052ec:	4baf      	ldr	r3, [pc, #700]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052f8:	d107      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005300:	d103      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8005302:	4bab      	ldr	r3, [pc, #684]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005304:	637b      	str	r3, [r7, #52]	@ 0x34
 8005306:	f000 bda5 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800530a:	4ba8      	ldr	r3, [pc, #672]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005316:	d107      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531e:	d103      	bne.n	8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8005320:	4ba3      	ldr	r3, [pc, #652]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34
 8005324:	f000 bd96 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	637b      	str	r3, [r7, #52]	@ 0x34
 800532c:	f000 bd92 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8005330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005334:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005338:	430b      	orrs	r3, r1
 800533a:	d158      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800533c:	4b9b      	ldr	r3, [pc, #620]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800533e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	2b04      	cmp	r3, #4
 800534c:	d84b      	bhi.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800534e:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	0800538d 	.word	0x0800538d
 8005358:	08005369 	.word	0x08005369
 800535c:	0800537b 	.word	0x0800537b
 8005360:	08005397 	.word	0x08005397
 8005364:	080053a1 	.word	0x080053a1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe ff8f 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005376:	f000 bd6d 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800537a:	f107 030c 	add.w	r3, r7, #12
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fa3a 	bl	80047f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005388:	f000 bd64 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800538c:	f7fe f8e4 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8005390:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005392:	f000 bd5f 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005396:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800539c:	f000 bd5a 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80053a0:	4b82      	ldr	r3, [pc, #520]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d118      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053ac:	4b7f      	ldr	r3, [pc, #508]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80053b8:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	0e1b      	lsrs	r3, r3, #24
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	e006      	b.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80053c4:	4b79      	ldr	r3, [pc, #484]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	0e1b      	lsrs	r3, r3, #24
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	4a78      	ldr	r2, [pc, #480]	@ (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80053d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80053da:	f000 bd3b 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053e2:	f000 bd37 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053ea:	f000 bd33 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80053ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80053f6:	430b      	orrs	r3, r1
 80053f8:	d167      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80053fa:	4b6c      	ldr	r3, [pc, #432]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005400:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005404:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800540c:	d036      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005414:	d855      	bhi.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800541c:	d029      	beq.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005420:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005424:	d84d      	bhi.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800542c:	d013      	beq.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005434:	d845      	bhi.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	2b00      	cmp	r3, #0
 800543a:	d015      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005442:	d13e      	bne.n	80054c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe ff21 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005452:	f000 bcff 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005456:	f107 030c 	add.w	r3, r7, #12
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff f9cc 	bl	80047f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005464:	f000 bcf6 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005468:	f7fe f876 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 800546c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800546e:	f000 bcf1 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005472:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005478:	f000 bcec 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800547c:	4b4b      	ldr	r3, [pc, #300]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b20      	cmp	r3, #32
 8005486:	d118      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005488:	4b48      	ldr	r3, [pc, #288]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8005494:	4b45      	ldr	r3, [pc, #276]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	0e1b      	lsrs	r3, r3, #24
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	e006      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80054a0:	4b42      	ldr	r3, [pc, #264]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80054a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	4a41      	ldr	r2, [pc, #260]	@ (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80054b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054b6:	f000 bccd 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054be:	f000 bcc9 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054c6:	f000 bcc5 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80054ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054ce:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80054d2:	430b      	orrs	r3, r1
 80054d4:	d14c      	bne.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80054d6:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80054d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fe f850 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 80054ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80054ee:	f000 bcb1 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054f8:	d104      	bne.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80054fa:	f7fd ff2b 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80054fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8005500:	f000 bca8 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005504:	4b29      	ldr	r3, [pc, #164]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005510:	d107      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005518:	d103      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800551a:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800551c:	637b      	str	r3, [r7, #52]	@ 0x34
 800551e:	f000 bc99 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8005522:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d11c      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005534:	d118      	bne.n	8005568 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005536:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8005542:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	0e1b      	lsrs	r3, r3, #24
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	e006      	b.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800554e:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	0e1b      	lsrs	r3, r3, #24
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	637b      	str	r3, [r7, #52]	@ 0x34
 8005564:	f000 bc76 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
 800556c:	f000 bc72 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8005570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005574:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8005578:	430b      	orrs	r3, r1
 800557a:	d153      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800557c:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800557e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005582:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800558e:	f7fd fffd 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8005592:	6378      	str	r0, [r7, #52]	@ 0x34
 8005594:	f000 bc5e 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800559e:	d10b      	bne.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80055a0:	f7fd fed8 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 80055a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80055a6:	f000 bc55 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80055aa:	bf00      	nop
 80055ac:	46020c00 	.word	0x46020c00
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	08008a74 	.word	0x08008a74
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80055b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c4:	d107      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055cc:	d103      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80055ce:	4b9d      	ldr	r3, [pc, #628]	@ (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80055d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d2:	f000 bc3f 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80055d6:	4b9a      	ldr	r3, [pc, #616]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d11c      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055e8:	d118      	bne.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055ea:	4b95      	ldr	r3, [pc, #596]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80055f6:	4b92      	ldr	r3, [pc, #584]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0e1b      	lsrs	r3, r3, #24
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	e006      	b.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005602:	4b8f      	ldr	r3, [pc, #572]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	0e1b      	lsrs	r3, r3, #24
 800560c:	f003 030f 	and.w	r3, r3, #15
 8005610:	4a8d      	ldr	r2, [pc, #564]	@ (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8005612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
 8005618:	f000 bc1c 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005620:	f000 bc18 	b.w	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8005624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005628:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800562c:	430b      	orrs	r3, r1
 800562e:	d151      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005630:	4b83      	ldr	r3, [pc, #524]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005636:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800563a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005640:	d024      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	2bc0      	cmp	r3, #192	@ 0xc0
 8005646:	d842      	bhi.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	2b80      	cmp	r3, #128	@ 0x80
 800564c:	d00d      	beq.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	2b80      	cmp	r3, #128	@ 0x80
 8005652:	d83c      	bhi.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d011      	beq.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8005660:	e035      	b.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8005662:	f7fd ffbb 	bl	80035dc <HAL_RCC_GetPCLK3Freq>
 8005666:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005668:	e3f4      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800566a:	4b75      	ldr	r3, [pc, #468]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8005678:	4b72      	ldr	r3, [pc, #456]	@ (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800567c:	e3ea      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005682:	e3e7      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8005684:	f7fd fe66 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005688:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800568a:	e3e3      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800568c:	4b6c      	ldr	r3, [pc, #432]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b20      	cmp	r3, #32
 8005696:	d117      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005698:	4b69      	ldr	r3, [pc, #420]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80056a4:	4b66      	ldr	r3, [pc, #408]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	0e1b      	lsrs	r3, r3, #24
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	e006      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80056b0:	4b63      	ldr	r3, [pc, #396]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80056b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056b6:	041b      	lsls	r3, r3, #16
 80056b8:	0e1b      	lsrs	r3, r3, #24
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	4a62      	ldr	r2, [pc, #392]	@ (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80056c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80056c6:	e3c5      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056cc:	e3c2      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80056d2:	e3bf      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80056d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056d8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80056dc:	430b      	orrs	r3, r1
 80056de:	d147      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80056e0:	4b57      	ldr	r3, [pc, #348]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80056e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80056ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d103      	bne.n	80056fa <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80056f2:	f7fd ff4b 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 80056f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80056f8:	e3ac      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005700:	d103      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005702:	f7fd fe27 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005706:	6378      	str	r0, [r7, #52]	@ 0x34
 8005708:	e3a4      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800570a:	4b4d      	ldr	r3, [pc, #308]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005716:	d106      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571e:	d102      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8005720:	4b48      	ldr	r3, [pc, #288]	@ (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8005722:	637b      	str	r3, [r7, #52]	@ 0x34
 8005724:	e396      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8005726:	4b46      	ldr	r3, [pc, #280]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d11b      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005738:	d117      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800573a:	4b41      	ldr	r3, [pc, #260]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8005746:	4b3e      	ldr	r3, [pc, #248]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	0e1b      	lsrs	r3, r3, #24
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	e006      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8005752:	4b3b      	ldr	r3, [pc, #236]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	0e1b      	lsrs	r3, r3, #24
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	4a39      	ldr	r2, [pc, #228]	@ (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8005762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	e374      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
 800576e:	e371      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8005770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005774:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005778:	430b      	orrs	r3, r1
 800577a:	d16a      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800577c:	4b30      	ldr	r3, [pc, #192]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800577e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	2b00      	cmp	r3, #0
 800578c:	d120      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800578e:	4b2c      	ldr	r3, [pc, #176]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b20      	cmp	r3, #32
 8005798:	d117      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800579a:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80057a6:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	0e1b      	lsrs	r3, r3, #24
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	e006      	b.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80057b2:	4b23      	ldr	r3, [pc, #140]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057b8:	041b      	lsls	r3, r3, #16
 80057ba:	0e1b      	lsrs	r3, r3, #24
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	4a21      	ldr	r2, [pc, #132]	@ (8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c8:	e344      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ce:	e341      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80057d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057de:	d112      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057e6:	d10e      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80057ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f6:	d102      	bne.n	80057fe <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80057f8:	23fa      	movs	r3, #250	@ 0xfa
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057fc:	e32a      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80057fe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005802:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005804:	e326      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8005806:	4b0e      	ldr	r3, [pc, #56]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800580e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005812:	d106      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800581a:	d102      	bne.n	8005822 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005820:	e318      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8005822:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d10d      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005836:	d109      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8005838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800583c:	637b      	str	r3, [r7, #52]	@ 0x34
 800583e:	e309      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005840:	46020c00 	.word	0x46020c00
 8005844:	00f42400 	.word	0x00f42400
 8005848:	08008a74 	.word	0x08008a74
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005850:	e300      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8005852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005856:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800585a:	430b      	orrs	r3, r1
 800585c:	d164      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800585e:	4ba2      	ldr	r3, [pc, #648]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005860:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005864:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005868:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	d120      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005870:	4b9d      	ldr	r3, [pc, #628]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b20      	cmp	r3, #32
 800587a:	d117      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800587c:	4b9a      	ldr	r3, [pc, #616]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8005888:	4b97      	ldr	r3, [pc, #604]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	0e1b      	lsrs	r3, r3, #24
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	e006      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8005894:	4b94      	ldr	r3, [pc, #592]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	0e1b      	lsrs	r3, r3, #24
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	4a92      	ldr	r2, [pc, #584]	@ (8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80058a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058aa:	e2d3      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b0:	e2d0      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80058b2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80058b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c0:	d112      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c8:	d10e      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058ca:	4b87      	ldr	r3, [pc, #540]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80058cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058d8:	d102      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80058da:	23fa      	movs	r3, #250	@ 0xfa
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058de:	e2b9      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80058e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80058e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058e6:	e2b5      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80058e8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f4:	d106      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058fc:	d102      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80058fe:	4b7c      	ldr	r3, [pc, #496]	@ (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005900:	637b      	str	r3, [r7, #52]	@ 0x34
 8005902:	e2a7      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005904:	4b78      	ldr	r3, [pc, #480]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d107      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005918:	d103      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800591a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005920:	e298      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	@ 0x34
 8005926:	e295      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8005928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800592c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005930:	430b      	orrs	r3, r1
 8005932:	d147      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005934:	4b6c      	ldr	r3, [pc, #432]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800593a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800593e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005946:	f7fd fe21 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 800594a:	6378      	str	r0, [r7, #52]	@ 0x34
 800594c:	e282      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800594e:	4b66      	ldr	r3, [pc, #408]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800595c:	d112      	bne.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005964:	d10e      	bne.n	8005984 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005966:	4b60      	ldr	r3, [pc, #384]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800596c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005974:	d102      	bne.n	800597c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8005976:	23fa      	movs	r3, #250	@ 0xfa
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800597a:	e26b      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800597c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005982:	e267      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8005984:	4b58      	ldr	r3, [pc, #352]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005990:	d106      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8005992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005994:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005998:	d102      	bne.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800599a:	4b55      	ldr	r3, [pc, #340]	@ (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
 800599e:	e259      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80059a0:	4b51      	ldr	r3, [pc, #324]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059b4:	d103      	bne.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80059b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80059bc:	e24a      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c2:	e247      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80059c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80059cc:	430b      	orrs	r3, r1
 80059ce:	d12d      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80059d0:	4b45      	ldr	r3, [pc, #276]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059d6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80059da:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80059dc:	4b42      	ldr	r3, [pc, #264]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059e8:	d105      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80059f0:	4b3f      	ldr	r3, [pc, #252]	@ (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	e22e      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059fc:	d107      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fe fc44 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0c:	e222      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a14:	d107      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a16:	f107 0318 	add.w	r3, r7, #24
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe fd92 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a24:	e216      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a2a:	e213      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8005a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a30:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8005a34:	430b      	orrs	r3, r1
 8005a36:	d15d      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005a38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a3e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a42:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a4a:	d028      	beq.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a52:	d845      	bhi.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a5a:	d013      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a62:	d83d      	bhi.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a70:	d004      	beq.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8005a72:	e035      	b.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8005a74:	f7fd fd9e 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8005a78:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a7a:	e1eb      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005a7c:	f7fd fc6a 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005a80:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005a82:	e1e7      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a84:	4b18      	ldr	r3, [pc, #96]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a90:	d102      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8005a92:	4b17      	ldr	r3, [pc, #92]	@ (8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a96:	e1dd      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a9c:	e1da      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005a9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d117      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	0e1b      	lsrs	r3, r3, #24
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	e006      	b.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8005ac2:	4b09      	ldr	r3, [pc, #36]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	0e1b      	lsrs	r3, r3, #24
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	4a06      	ldr	r2, [pc, #24]	@ (8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8005ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ad8:	e1bc      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ade:	e1b9      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ae4:	e1b6      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005ae6:	bf00      	nop
 8005ae8:	46020c00 	.word	0x46020c00
 8005aec:	08008a74 	.word	0x08008a74
 8005af0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8005af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005afc:	430b      	orrs	r3, r1
 8005afe:	d156      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005b00:	4ba5      	ldr	r3, [pc, #660]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b12:	d028      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8005b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b1a:	d845      	bhi.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b22:	d013      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8005b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b2a:	d83d      	bhi.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b38:	d004      	beq.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8005b3a:	e035      	b.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fd fd26 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 8005b40:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b42:	e187      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005b44:	f7fd fc06 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005b48:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b4a:	e183      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b4c:	4b92      	ldr	r3, [pc, #584]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b58:	d102      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8005b5a:	4b90      	ldr	r3, [pc, #576]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8005b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b5e:	e179      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b64:	e176      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b66:	4b8c      	ldr	r3, [pc, #560]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d117      	bne.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b72:	4b89      	ldr	r3, [pc, #548]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8005b7e:	4b86      	ldr	r3, [pc, #536]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	0e1b      	lsrs	r3, r3, #24
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	e006      	b.n	8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8005b8a:	4b83      	ldr	r3, [pc, #524]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	0e1b      	lsrs	r3, r3, #24
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	4a81      	ldr	r2, [pc, #516]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ba0:	e158      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ba6:	e155      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bac:	e152      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	d177      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005bba:	4b77      	ldr	r3, [pc, #476]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bc0:	f003 0318 	and.w	r3, r3, #24
 8005bc4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	2b18      	cmp	r3, #24
 8005bca:	d86b      	bhi.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8005bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005c39 	.word	0x08005c39
 8005bd8:	08005ca5 	.word	0x08005ca5
 8005bdc:	08005ca5 	.word	0x08005ca5
 8005be0:	08005ca5 	.word	0x08005ca5
 8005be4:	08005ca5 	.word	0x08005ca5
 8005be8:	08005ca5 	.word	0x08005ca5
 8005bec:	08005ca5 	.word	0x08005ca5
 8005bf0:	08005ca5 	.word	0x08005ca5
 8005bf4:	08005c41 	.word	0x08005c41
 8005bf8:	08005ca5 	.word	0x08005ca5
 8005bfc:	08005ca5 	.word	0x08005ca5
 8005c00:	08005ca5 	.word	0x08005ca5
 8005c04:	08005ca5 	.word	0x08005ca5
 8005c08:	08005ca5 	.word	0x08005ca5
 8005c0c:	08005ca5 	.word	0x08005ca5
 8005c10:	08005ca5 	.word	0x08005ca5
 8005c14:	08005c49 	.word	0x08005c49
 8005c18:	08005ca5 	.word	0x08005ca5
 8005c1c:	08005ca5 	.word	0x08005ca5
 8005c20:	08005ca5 	.word	0x08005ca5
 8005c24:	08005ca5 	.word	0x08005ca5
 8005c28:	08005ca5 	.word	0x08005ca5
 8005c2c:	08005ca5 	.word	0x08005ca5
 8005c30:	08005ca5 	.word	0x08005ca5
 8005c34:	08005c63 	.word	0x08005c63
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005c38:	f7fd fcd0 	bl	80035dc <HAL_RCC_GetPCLK3Freq>
 8005c3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005c3e:	e109      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005c40:	f7fd fb88 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005c44:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005c46:	e105      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c48:	4b53      	ldr	r3, [pc, #332]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c54:	d102      	bne.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8005c56:	4b51      	ldr	r3, [pc, #324]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c5a:	e0fb      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c60:	e0f8      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c62:	4b4d      	ldr	r3, [pc, #308]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d117      	bne.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8005c7a:	4b47      	ldr	r3, [pc, #284]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	0e1b      	lsrs	r3, r3, #24
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8005c86:	4b44      	ldr	r3, [pc, #272]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	0e1b      	lsrs	r3, r3, #24
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	4a42      	ldr	r2, [pc, #264]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c9c:	e0da      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ca2:	e0d7      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ca8:	e0d4      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cae:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	d155      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005cb6:	4b38      	ldr	r3, [pc, #224]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005cb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cbc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc8:	d013      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cd0:	d844      	bhi.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd8:	d013      	beq.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ce0:	d83c      	bhi.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d014      	beq.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cee:	d014      	beq.n	8005d1a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005cf0:	e034      	b.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cf2:	f107 0318 	add.w	r3, r7, #24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fc24 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d00:	e0a8      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fac2 	bl	8004290 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d10:	e0a0      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fd fb1f 	bl	8003354 <HAL_RCC_GetSysClockFreq>
 8005d16:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005d18:	e09c      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d117      	bne.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005d26:	4b1c      	ldr	r3, [pc, #112]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8005d32:	4b19      	ldr	r3, [pc, #100]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	0e1b      	lsrs	r3, r3, #24
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	e006      	b.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005d3e:	4b16      	ldr	r3, [pc, #88]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d44:	041b      	lsls	r3, r3, #16
 8005d46:	0e1b      	lsrs	r3, r3, #24
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	4a14      	ldr	r2, [pc, #80]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d52:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005d54:	e07e      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d5a:	e07b      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d60:	e078      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d66:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	d138      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005d7a:	4b07      	ldr	r3, [pc, #28]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d10d      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8005d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d94:	e05e      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005d96:	bf00      	nop
 8005d98:	46020c00 	.word	0x46020c00
 8005d9c:	00f42400 	.word	0x00f42400
 8005da0:	08008a74 	.word	0x08008a74
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005da4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005daa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005db2:	d112      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dba:	d10e      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dbc:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dca:	d102      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8005dcc:	23fa      	movs	r3, #250	@ 0xfa
 8005dce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dd0:	e040      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005dd2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005dd6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dd8:	e03c      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dde:	e039      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005de4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005de8:	430b      	orrs	r3, r1
 8005dea:	d131      	bne.n	8005e50 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005dec:	4b1c      	ldr	r3, [pc, #112]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005df2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005df6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005df8:	4b19      	ldr	r3, [pc, #100]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	d105      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8005e0c:	4b15      	ldr	r3, [pc, #84]	@ (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8005e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e10:	e020      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005e12:	4b13      	ldr	r3, [pc, #76]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e1e:	d106      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e26:	d102      	bne.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005e28:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8005e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e2c:	e012      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3a:	d106      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e42:	d102      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8005e44:	4b09      	ldr	r3, [pc, #36]	@ (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8005e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e48:	e004      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4e:	e001      	b.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3738      	adds	r7, #56	@ 0x38
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	46020c00 	.word	0x46020c00
 8005e64:	02dc6c00 	.word	0x02dc6c00
 8005e68:	016e3600 	.word	0x016e3600
 8005e6c:	00f42400 	.word	0x00f42400

08005e70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005e78:	4b47      	ldr	r3, [pc, #284]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a46      	ldr	r2, [pc, #280]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005e7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e82:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e84:	f7fb fb72 	bl	800156c <HAL_GetTick>
 8005e88:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e8c:	f7fb fb6e 	bl	800156c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e077      	b.n	8005f8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6811      	ldr	r1, [r2, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6852      	ldr	r2, [r2, #4]
 8005ebe:	3a01      	subs	r2, #1
 8005ec0:	0212      	lsls	r2, r2, #8
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	4934      	ldr	r1, [pc, #208]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005eca:	4b33      	ldr	r3, [pc, #204]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ece:	4b33      	ldr	r3, [pc, #204]	@ (8005f9c <RCCEx_PLL2_Config+0x12c>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6892      	ldr	r2, [r2, #8]
 8005ed6:	3a01      	subs	r2, #1
 8005ed8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68d2      	ldr	r2, [r2, #12]
 8005ee0:	3a01      	subs	r2, #1
 8005ee2:	0252      	lsls	r2, r2, #9
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	4311      	orrs	r1, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6912      	ldr	r2, [r2, #16]
 8005eec:	3a01      	subs	r2, #1
 8005eee:	0412      	lsls	r2, r2, #16
 8005ef0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005ef4:	4311      	orrs	r1, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6952      	ldr	r2, [r2, #20]
 8005efa:	3a01      	subs	r2, #1
 8005efc:	0612      	lsls	r2, r2, #24
 8005efe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005f02:	430a      	orrs	r2, r1
 8005f04:	4924      	ldr	r1, [pc, #144]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005f0a:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	f023 020c 	bic.w	r2, r3, #12
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	4920      	ldr	r1, [pc, #128]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	491c      	ldr	r1, [pc, #112]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f30:	f023 0310 	bic.w	r3, r3, #16
 8005f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f36:	4b18      	ldr	r3, [pc, #96]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f3e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	69d2      	ldr	r2, [r2, #28]
 8005f46:	00d2      	lsls	r2, r2, #3
 8005f48:	4913      	ldr	r1, [pc, #76]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005f4e:	4b12      	ldr	r3, [pc, #72]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	4a11      	ldr	r2, [pc, #68]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f54:	f043 0310 	orr.w	r3, r3, #16
 8005f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f64:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f66:	f7fb fb01 	bl	800156c <HAL_GetTick>
 8005f6a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f6c:	e008      	b.n	8005f80 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f6e:	f7fb fafd 	bl	800156c <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e006      	b.n	8005f8e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <RCCEx_PLL2_Config+0x128>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0

}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	46020c00 	.word	0x46020c00
 8005f9c:	80800000 	.word	0x80800000

08005fa0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005fa8:	4b47      	ldr	r3, [pc, #284]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a46      	ldr	r2, [pc, #280]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8005fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fb4:	f7fb fada 	bl	800156c <HAL_GetTick>
 8005fb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fba:	e008      	b.n	8005fce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fbc:	f7fb fad6 	bl	800156c <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e077      	b.n	80060be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fce:	4b3e      	ldr	r3, [pc, #248]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005fda:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6811      	ldr	r1, [r2, #0]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6852      	ldr	r2, [r2, #4]
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	0212      	lsls	r2, r2, #8
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	4934      	ldr	r1, [pc, #208]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	630b      	str	r3, [r1, #48]	@ 0x30
 8005ffa:	4b33      	ldr	r3, [pc, #204]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ffe:	4b33      	ldr	r3, [pc, #204]	@ (80060cc <RCCEx_PLL3_Config+0x12c>)
 8006000:	4013      	ands	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6892      	ldr	r2, [r2, #8]
 8006006:	3a01      	subs	r2, #1
 8006008:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	68d2      	ldr	r2, [r2, #12]
 8006010:	3a01      	subs	r2, #1
 8006012:	0252      	lsls	r2, r2, #9
 8006014:	b292      	uxth	r2, r2
 8006016:	4311      	orrs	r1, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6912      	ldr	r2, [r2, #16]
 800601c:	3a01      	subs	r2, #1
 800601e:	0412      	lsls	r2, r2, #16
 8006020:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6952      	ldr	r2, [r2, #20]
 800602a:	3a01      	subs	r2, #1
 800602c:	0612      	lsls	r2, r2, #24
 800602e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006032:	430a      	orrs	r2, r1
 8006034:	4924      	ldr	r1, [pc, #144]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006036:	4313      	orrs	r3, r2
 8006038:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800603a:	4b23      	ldr	r3, [pc, #140]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	f023 020c 	bic.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	4920      	ldr	r1, [pc, #128]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006048:	4313      	orrs	r3, r2
 800604a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800604c:	4b1e      	ldr	r3, [pc, #120]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 800604e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	491c      	ldr	r1, [pc, #112]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006056:	4313      	orrs	r3, r2
 8006058:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800605a:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006060:	f023 0310 	bic.w	r3, r3, #16
 8006064:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006066:	4b18      	ldr	r3, [pc, #96]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800606e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	69d2      	ldr	r2, [r2, #28]
 8006076:	00d2      	lsls	r2, r2, #3
 8006078:	4913      	ldr	r1, [pc, #76]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 800607a:	4313      	orrs	r3, r2
 800607c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800607e:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	4a11      	ldr	r2, [pc, #68]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006084:	f043 0310 	orr.w	r3, r3, #16
 8006088:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800608a:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a0e      	ldr	r2, [pc, #56]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 8006090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006094:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006096:	f7fb fa69 	bl	800156c <HAL_GetTick>
 800609a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800609c:	e008      	b.n	80060b0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800609e:	f7fb fa65 	bl	800156c <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e006      	b.n	80060be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <RCCEx_PLL3_Config+0x128>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	46020c00 	.word	0x46020c00
 80060cc:	80800000 	.word	0x80800000

080060d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d078      	beq.n	80061d4 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fa fe88 	bl	8000e0c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006104:	4b36      	ldr	r3, [pc, #216]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d058      	beq.n	80061c2 <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 8006110:	4b33      	ldr	r3, [pc, #204]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611c:	d053      	beq.n	80061c6 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800611e:	4b30      	ldr	r3, [pc, #192]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006120:	22ca      	movs	r2, #202	@ 0xca
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24
 8006124:	4b2e      	ldr	r3, [pc, #184]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006126:	2253      	movs	r2, #83	@ 0x53
 8006128:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f9ae 	bl	800648c <RTC_EnterInitMode>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d13f      	bne.n	80061ba <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800613a:	4b29      	ldr	r3, [pc, #164]	@ (80061e0 <HAL_RTC_Init+0x110>)
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	4a28      	ldr	r2, [pc, #160]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006140:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006148:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800614a:	4b25      	ldr	r3, [pc, #148]	@ (80061e0 <HAL_RTC_Init+0x110>)
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	4319      	orrs	r1, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	430b      	orrs	r3, r1
 800615e:	4920      	ldr	r1, [pc, #128]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006160:	4313      	orrs	r3, r2
 8006162:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	041b      	lsls	r3, r3, #16
 800616e:	491c      	ldr	r1, [pc, #112]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006170:	4313      	orrs	r3, r2
 8006172:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006174:	4b1a      	ldr	r3, [pc, #104]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	430b      	orrs	r3, r1
 8006186:	4916      	ldr	r1, [pc, #88]	@ (80061e0 <HAL_RTC_Init+0x110>)
 8006188:	4313      	orrs	r3, r2
 800618a:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f9b9 	bl	8006504 <RTC_ExitInitMode>
 8006192:	4603      	mov	r3, r0
 8006194:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10e      	bne.n	80061ba <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 800619c:	4b10      	ldr	r3, [pc, #64]	@ (80061e0 <HAL_RTC_Init+0x110>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a19      	ldr	r1, [r3, #32]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4319      	orrs	r1, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	430b      	orrs	r3, r1
 80061b4:	490a      	ldr	r1, [pc, #40]	@ (80061e0 <HAL_RTC_Init+0x110>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <HAL_RTC_Init+0x110>)
 80061bc:	22ff      	movs	r2, #255	@ 0xff
 80061be:	625a      	str	r2, [r3, #36]	@ 0x24
 80061c0:	e001      	b.n	80061c6 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	46007800 	.word	0x46007800

080061e4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_RTC_SetTime+0x1a>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e088      	b.n	8006310 <HAL_RTC_SetTime+0x12c>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800620e:	4b42      	ldr	r3, [pc, #264]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 8006210:	22ca      	movs	r2, #202	@ 0xca
 8006212:	625a      	str	r2, [r3, #36]	@ 0x24
 8006214:	4b40      	ldr	r3, [pc, #256]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 8006216:	2253      	movs	r2, #83	@ 0x53
 8006218:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f936 	bl	800648c <RTC_EnterInitMode>
 8006220:	4603      	mov	r3, r0
 8006222:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006224:	7cfb      	ldrb	r3, [r7, #19]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d163      	bne.n	80062f2 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800622a:	4b3b      	ldr	r3, [pc, #236]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006236:	d057      	beq.n	80062e8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d125      	bne.n	800628a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800623e:	4b36      	ldr	r3, [pc, #216]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	2200      	movs	r2, #0
 800624e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 f993 	bl	8006580 <RTC_ByteToBcd2>
 800625a:	4603      	mov	r3, r0
 800625c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f98c 	bl	8006580 <RTC_ByteToBcd2>
 8006268:	4603      	mov	r3, r0
 800626a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800626c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	789b      	ldrb	r3, [r3, #2]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 f984 	bl	8006580 <RTC_ByteToBcd2>
 8006278:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800627a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	78db      	ldrb	r3, [r3, #3]
 8006282:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e017      	b.n	80062ba <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800628a:	4b23      	ldr	r3, [pc, #140]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d102      	bne.n	800629c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062a8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062ae:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	78db      	ldrb	r3, [r3, #3]
 80062b4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80062ba:	4a17      	ldr	r2, [pc, #92]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80062c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80062c6:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80062c8:	4b13      	ldr	r3, [pc, #76]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	4a12      	ldr	r2, [pc, #72]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 80062ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062d2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80062d4:	4b10      	ldr	r3, [pc, #64]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	68d9      	ldr	r1, [r3, #12]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	490d      	ldr	r1, [pc, #52]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f90b 	bl	8006504 <RTC_ExitInitMode>
 80062ee:	4603      	mov	r3, r0
 80062f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f2:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <HAL_RTC_SetTime+0x134>)
 80062f4:	22ff      	movs	r2, #255	@ 0xff
 80062f6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80062f8:	7cfb      	ldrb	r3, [r7, #19]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800630e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd90      	pop	{r4, r7, pc}
 8006318:	46007800 	.word	0x46007800

0800631c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_RTC_SetDate+0x1a>
 8006332:	2302      	movs	r3, #2
 8006334:	e071      	b.n	800641a <HAL_RTC_SetDate+0xfe>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2202      	movs	r2, #2
 8006342:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10e      	bne.n	800636a <HAL_RTC_SetDate+0x4e>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	f023 0310 	bic.w	r3, r3, #16
 8006360:	b2db      	uxtb	r3, r3
 8006362:	330a      	adds	r3, #10
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11c      	bne.n	80063aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f903 	bl	8006580 <RTC_ByteToBcd2>
 800637a:	4603      	mov	r3, r0
 800637c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f8fc 	bl	8006580 <RTC_ByteToBcd2>
 8006388:	4603      	mov	r3, r0
 800638a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800638c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	789b      	ldrb	r3, [r3, #2]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f8f4 	bl	8006580 <RTC_ByteToBcd2>
 8006398:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800639a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e00e      	b.n	80063c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	78db      	ldrb	r3, [r3, #3]
 80063ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80063bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063c8:	4b16      	ldr	r3, [pc, #88]	@ (8006424 <HAL_RTC_SetDate+0x108>)
 80063ca:	22ca      	movs	r2, #202	@ 0xca
 80063cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80063ce:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <HAL_RTC_SetDate+0x108>)
 80063d0:	2253      	movs	r2, #83	@ 0x53
 80063d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f859 	bl	800648c <RTC_EnterInitMode>
 80063da:	4603      	mov	r3, r0
 80063dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80063de:	7cfb      	ldrb	r3, [r7, #19]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80063e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006424 <HAL_RTC_SetDate+0x108>)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 f886 	bl	8006504 <RTC_ExitInitMode>
 80063f8:	4603      	mov	r3, r0
 80063fa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fc:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <HAL_RTC_SetDate+0x108>)
 80063fe:	22ff      	movs	r2, #255	@ 0xff
 8006400:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006402:	7cfb      	ldrb	r3, [r7, #19]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006418:	7cfb      	ldrb	r3, [r7, #19]
}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd90      	pop	{r4, r7, pc}
 8006422:	bf00      	nop
 8006424:	46007800 	.word	0x46007800

08006428 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006430:	4b15      	ldr	r3, [pc, #84]	@ (8006488 <HAL_RTC_WaitForSynchro+0x60>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a14      	ldr	r2, [pc, #80]	@ (8006488 <HAL_RTC_WaitForSynchro+0x60>)
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800643c:	f7fb f896 	bl	800156c <HAL_GetTick>
 8006440:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006442:	e013      	b.n	800646c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006444:	f7fb f892 	bl	800156c <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006452:	d90b      	bls.n	800646c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006454:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <HAL_RTC_WaitForSynchro+0x60>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10c      	bne.n	800647a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2203      	movs	r2, #3
 8006464:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e008      	b.n	800647e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800646c:	4b06      	ldr	r3, [pc, #24]	@ (8006488 <HAL_RTC_WaitForSynchro+0x60>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0e5      	beq.n	8006444 <HAL_RTC_WaitForSynchro+0x1c>
 8006478:	e000      	b.n	800647c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800647a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	46007800 	.word	0x46007800

0800648c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006498:	4b19      	ldr	r3, [pc, #100]	@ (8006500 <RTC_EnterInitMode+0x74>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d128      	bne.n	80064f6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064a4:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <RTC_EnterInitMode+0x74>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <RTC_EnterInitMode+0x74>)
 80064aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ae:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80064b0:	f7fb f85c 	bl	800156c <HAL_GetTick>
 80064b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064b6:	e013      	b.n	80064e0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064b8:	f7fb f858 	bl	800156c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064c6:	d90b      	bls.n	80064e0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80064c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <RTC_EnterInitMode+0x74>)
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10f      	bne.n	80064f4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2203      	movs	r2, #3
 80064dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064e0:	4b07      	ldr	r3, [pc, #28]	@ (8006500 <RTC_EnterInitMode+0x74>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <RTC_EnterInitMode+0x6a>
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d1e2      	bne.n	80064b8 <RTC_EnterInitMode+0x2c>
 80064f2:	e000      	b.n	80064f6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80064f4:	bf00      	nop
        }
      }
    }
  }

  return status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	46007800 	.word	0x46007800

08006504 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006510:	4b1a      	ldr	r3, [pc, #104]	@ (800657c <RTC_ExitInitMode+0x78>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a19      	ldr	r2, [pc, #100]	@ (800657c <RTC_ExitInitMode+0x78>)
 8006516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800651c:	4b17      	ldr	r3, [pc, #92]	@ (800657c <RTC_ExitInitMode+0x78>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10c      	bne.n	8006542 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff ff7d 	bl	8006428 <HAL_RTC_WaitForSynchro>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01e      	beq.n	8006572 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2203      	movs	r2, #3
 8006538:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	73fb      	strb	r3, [r7, #15]
 8006540:	e017      	b.n	8006572 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006542:	4b0e      	ldr	r3, [pc, #56]	@ (800657c <RTC_ExitInitMode+0x78>)
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	4a0d      	ldr	r2, [pc, #52]	@ (800657c <RTC_ExitInitMode+0x78>)
 8006548:	f023 0320 	bic.w	r3, r3, #32
 800654c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff6a 	bl	8006428 <HAL_RTC_WaitForSynchro>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2203      	movs	r2, #3
 800655e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006566:	4b05      	ldr	r3, [pc, #20]	@ (800657c <RTC_ExitInitMode+0x78>)
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	4a04      	ldr	r2, [pc, #16]	@ (800657c <RTC_ExitInitMode+0x78>)
 800656c:	f043 0320 	orr.w	r3, r3, #32
 8006570:	6193      	str	r3, [r2, #24]
  }
  return status;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	46007800 	.word	0x46007800

08006580 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006592:	e005      	b.n	80065a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	3b0a      	subs	r3, #10
 800659e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	2b09      	cmp	r3, #9
 80065a4:	d8f6      	bhi.n	8006594 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	b2db      	uxtb	r3, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4910      	ldr	r1, [pc, #64]	@ (8006614 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	431a      	orrs	r2, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	490c      	ldr	r1, [pc, #48]	@ (8006618 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80065ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	6919      	ldr	r1, [r3, #16]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	430b      	orrs	r3, r1
 8006600:	4905      	ldr	r1, [pc, #20]	@ (8006618 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006602:	4313      	orrs	r3, r2
 8006604:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	46007800 	.word	0x46007800
 8006618:	46007c00 	.word	0x46007c00

0800661c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e049      	b.n	80066c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fa fc2e 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f000 f836 	bl	80066cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a6b      	ldr	r2, [pc, #428]	@ (800688c <TIM_Base_SetConfig+0x1c0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d02b      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a6a      	ldr	r2, [pc, #424]	@ (8006890 <TIM_Base_SetConfig+0x1c4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d027      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f2:	d023      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066fa:	d01f      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a65      	ldr	r2, [pc, #404]	@ (8006894 <TIM_Base_SetConfig+0x1c8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d01b      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a64      	ldr	r2, [pc, #400]	@ (8006898 <TIM_Base_SetConfig+0x1cc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d017      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a63      	ldr	r2, [pc, #396]	@ (800689c <TIM_Base_SetConfig+0x1d0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a62      	ldr	r2, [pc, #392]	@ (80068a0 <TIM_Base_SetConfig+0x1d4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00f      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a61      	ldr	r2, [pc, #388]	@ (80068a4 <TIM_Base_SetConfig+0x1d8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a60      	ldr	r2, [pc, #384]	@ (80068a8 <TIM_Base_SetConfig+0x1dc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a5f      	ldr	r2, [pc, #380]	@ (80068ac <TIM_Base_SetConfig+0x1e0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_Base_SetConfig+0x70>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a5e      	ldr	r2, [pc, #376]	@ (80068b0 <TIM_Base_SetConfig+0x1e4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d108      	bne.n	800674e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a4e      	ldr	r2, [pc, #312]	@ (800688c <TIM_Base_SetConfig+0x1c0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d043      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a4d      	ldr	r2, [pc, #308]	@ (8006890 <TIM_Base_SetConfig+0x1c4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d03f      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006764:	d03b      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800676c:	d037      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a48      	ldr	r2, [pc, #288]	@ (8006894 <TIM_Base_SetConfig+0x1c8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d033      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a47      	ldr	r2, [pc, #284]	@ (8006898 <TIM_Base_SetConfig+0x1cc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d02f      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a46      	ldr	r2, [pc, #280]	@ (800689c <TIM_Base_SetConfig+0x1d0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d02b      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a45      	ldr	r2, [pc, #276]	@ (80068a0 <TIM_Base_SetConfig+0x1d4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a44      	ldr	r2, [pc, #272]	@ (80068a4 <TIM_Base_SetConfig+0x1d8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d023      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a43      	ldr	r2, [pc, #268]	@ (80068a8 <TIM_Base_SetConfig+0x1dc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01f      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a42      	ldr	r2, [pc, #264]	@ (80068ac <TIM_Base_SetConfig+0x1e0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01b      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a41      	ldr	r2, [pc, #260]	@ (80068b0 <TIM_Base_SetConfig+0x1e4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d017      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a40      	ldr	r2, [pc, #256]	@ (80068b4 <TIM_Base_SetConfig+0x1e8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a3f      	ldr	r2, [pc, #252]	@ (80068b8 <TIM_Base_SetConfig+0x1ec>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00f      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a3e      	ldr	r2, [pc, #248]	@ (80068bc <TIM_Base_SetConfig+0x1f0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00b      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a3d      	ldr	r2, [pc, #244]	@ (80068c0 <TIM_Base_SetConfig+0x1f4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d007      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a3c      	ldr	r2, [pc, #240]	@ (80068c4 <TIM_Base_SetConfig+0x1f8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d003      	beq.n	80067de <TIM_Base_SetConfig+0x112>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a3b      	ldr	r2, [pc, #236]	@ (80068c8 <TIM_Base_SetConfig+0x1fc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d108      	bne.n	80067f0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689a      	ldr	r2, [r3, #8]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1e      	ldr	r2, [pc, #120]	@ (800688c <TIM_Base_SetConfig+0x1c0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d023      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1d      	ldr	r2, [pc, #116]	@ (8006890 <TIM_Base_SetConfig+0x1c4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01f      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a22      	ldr	r2, [pc, #136]	@ (80068ac <TIM_Base_SetConfig+0x1e0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01b      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <TIM_Base_SetConfig+0x1e4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d017      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a20      	ldr	r2, [pc, #128]	@ (80068b4 <TIM_Base_SetConfig+0x1e8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1f      	ldr	r2, [pc, #124]	@ (80068b8 <TIM_Base_SetConfig+0x1ec>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00f      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1e      	ldr	r2, [pc, #120]	@ (80068bc <TIM_Base_SetConfig+0x1f0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00b      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1d      	ldr	r2, [pc, #116]	@ (80068c0 <TIM_Base_SetConfig+0x1f4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1c      	ldr	r2, [pc, #112]	@ (80068c4 <TIM_Base_SetConfig+0x1f8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_Base_SetConfig+0x192>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1b      	ldr	r2, [pc, #108]	@ (80068c8 <TIM_Base_SetConfig+0x1fc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d103      	bne.n	8006866 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f043 0204 	orr.w	r2, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40012c00 	.word	0x40012c00
 8006890:	50012c00 	.word	0x50012c00
 8006894:	40000400 	.word	0x40000400
 8006898:	50000400 	.word	0x50000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	50000800 	.word	0x50000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	50000c00 	.word	0x50000c00
 80068ac:	40013400 	.word	0x40013400
 80068b0:	50013400 	.word	0x50013400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	50014000 	.word	0x50014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	50014400 	.word	0x50014400
 80068c4:	40014800 	.word	0x40014800
 80068c8:	50014800 	.word	0x50014800

080068cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e042      	b.n	8006964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fa faf9 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	@ 0x24
 80068fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fd5e 	bl	80073d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fbb9 	bl	8007094 <UART_SetConfig>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e01b      	b.n	8006964 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800693a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800694a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fddd 	bl	800751c <UART_CheckIdleState>
 8006962:	4603      	mov	r3, r0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	@ 0x28
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006982:	2b20      	cmp	r3, #32
 8006984:	f040 808b 	bne.w	8006a9e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <HAL_UART_Transmit+0x28>
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e083      	b.n	8006aa0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b80      	cmp	r3, #128	@ 0x80
 80069a4:	d107      	bne.n	80069b6 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069b4:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2221      	movs	r2, #33	@ 0x21
 80069c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069c6:	f7fa fdd1 	bl	800156c <HAL_GetTick>
 80069ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	88fa      	ldrh	r2, [r7, #6]
 80069d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e4:	d108      	bne.n	80069f8 <HAL_UART_Transmit+0x8c>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e003      	b.n	8006a00 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a00:	e030      	b.n	8006a64 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2180      	movs	r1, #128	@ 0x80
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fe2f 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e03d      	b.n	8006aa0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	e007      	b.n	8006a52 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	781a      	ldrb	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1c8      	bne.n	8006a02 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2200      	movs	r2, #0
 8006a78:	2140      	movs	r1, #64	@ 0x40
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 fdf8 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e006      	b.n	8006aa0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e000      	b.n	8006aa0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006a9e:	2302      	movs	r3, #2
  }
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b0ae      	sub	sp, #184	@ 0xb8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ad2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8006adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11b      	bne.n	8006b1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ae4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d015      	beq.n	8006b1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006af0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006af4:	f003 0320 	and.w	r3, r3, #32
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8297 	beq.w	8007040 <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	4798      	blx	r3
      }
      return;
 8006b1a:	e291      	b.n	8007040 <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80fd 	beq.w	8006d20 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006b2a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d14 <HAL_UART_IRQHandler+0x26c>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b36:	4b78      	ldr	r3, [pc, #480]	@ (8006d18 <HAL_UART_IRQHandler+0x270>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80f0 	beq.w	8006d20 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d011      	beq.n	8006b70 <HAL_UART_IRQHandler+0xc8>
 8006b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b66:	f043 0201 	orr.w	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d011      	beq.n	8006ba0 <HAL_UART_IRQHandler+0xf8>
 8006b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b96:	f043 0204 	orr.w	r2, r3, #4
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d011      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x128>
 8006bac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	f043 0202 	orr.w	r2, r3, #2
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d017      	beq.n	8006c0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bec:	4b49      	ldr	r3, [pc, #292]	@ (8006d14 <HAL_UART_IRQHandler+0x26c>)
 8006bee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c02:	f043 0208 	orr.w	r2, r3, #8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d012      	beq.n	8006c3e <HAL_UART_IRQHandler+0x196>
 8006c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00c      	beq.n	8006c3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f000 81fd 	beq.w	8007044 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d013      	beq.n	8006c7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d105      	bne.n	8006c6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d007      	beq.n	8006c7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c92:	2b40      	cmp	r3, #64	@ 0x40
 8006c94:	d005      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02e      	beq.n	8006d00 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fe74 	bl	8007990 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb2:	2b40      	cmp	r3, #64	@ 0x40
 8006cb4:	d120      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc6:	4a15      	ldr	r2, [pc, #84]	@ (8006d1c <HAL_UART_IRQHandler+0x274>)
 8006cc8:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fa fe67 	bl	80019a4 <HAL_DMA_Abort_IT>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d019      	beq.n	8006d10 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006cea:	4610      	mov	r0, r2
 8006cec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cee:	e00f      	b.n	8006d10 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f9c5 	bl	8007080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf6:	e00b      	b.n	8006d10 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f9c1 	bl	8007080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfe:	e007      	b.n	8006d10 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f9bd 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006d0e:	e199      	b.n	8007044 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	bf00      	nop
    return;
 8006d12:	e197      	b.n	8007044 <HAL_UART_IRQHandler+0x59c>
 8006d14:	10000001 	.word	0x10000001
 8006d18:	04000120 	.word	0x04000120
 8006d1c:	08007a5d 	.word	0x08007a5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f040 8142 	bne.w	8006fae <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 813b 	beq.w	8006fae <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006d3c:	f003 0310 	and.w	r3, r3, #16
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 8134 	beq.w	8006fae <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b40      	cmp	r3, #64	@ 0x40
 8006d5a:	f040 80aa 	bne.w	8006eb2 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d68:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8006d6c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8084 	beq.w	8006e7e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d7c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d27c      	bcs.n	8006e7e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d96:	2b81      	cmp	r3, #129	@ 0x81
 8006d98:	d060      	beq.n	8006e5c <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006daa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006dc0:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e2      	bne.n	8006d9a <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006df8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006dfe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e3      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e2a:	f023 0310 	bic.w	r3, r3, #16
 8006e2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e3e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e4      	bne.n	8006e1a <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fa fd28 	bl	80018ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fa f978 	bl	800116c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e7c:	e0e4      	b.n	8007048 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e84:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	f040 80dd 	bne.w	8007048 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e96:	2b81      	cmp	r3, #129	@ 0x81
 8006e98:	f040 80d6 	bne.w	8007048 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa f95e 	bl	800116c <HAL_UARTEx_RxEventCallback>
      return;
 8006eb0:	e0ca      	b.n	8007048 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80bc 	beq.w	800704c <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 8006ed4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80b7 	beq.w	800704c <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	e853 3f00 	ldrex	r3, [r3]
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e4      	bne.n	8006ede <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	623b      	str	r3, [r7, #32]
   return(result);
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f2a:	f023 0301 	bic.w	r3, r3, #1
 8006f2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3308      	adds	r3, #8
 8006f38:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006f3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e1      	bne.n	8006f14 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0310 	bic.w	r3, r3, #16
 8006f78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f86:	61fb      	str	r3, [r7, #28]
 8006f88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	69b9      	ldr	r1, [r7, #24]
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	617b      	str	r3, [r7, #20]
   return(result);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e4      	bne.n	8006f64 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fa0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fa f8e0 	bl	800116c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fac:	e04e      	b.n	800704c <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d014      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d008      	beq.n	8006fe4 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d03a      	beq.n	8007050 <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
    }
    return;
 8006fe2:	e035      	b.n	8007050 <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <HAL_UART_IRQHandler+0x55c>
 8006ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fd3f 	bl	8007a80 <UART_EndTransmit_IT>
    return;
 8007002:	e026      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d009      	beq.n	8007024 <HAL_UART_IRQHandler+0x57c>
 8007010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007014:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 fa9d 	bl	800855c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007022:	e016      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007024:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <HAL_UART_IRQHandler+0x5aa>
 8007030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007034:	2b00      	cmp	r3, #0
 8007036:	da0c      	bge.n	8007052 <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fa85 	bl	8008548 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800703e:	e008      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
      return;
 8007040:	bf00      	nop
 8007042:	e006      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
    return;
 8007044:	bf00      	nop
 8007046:	e004      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
      return;
 8007048:	bf00      	nop
 800704a:	e002      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
      return;
 800704c:	bf00      	nop
 800704e:	e000      	b.n	8007052 <HAL_UART_IRQHandler+0x5aa>
    return;
 8007050:	bf00      	nop
  }
}
 8007052:	37b8      	adds	r7, #184	@ 0xb8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007098:	b094      	sub	sp, #80	@ 0x50
 800709a:	af00      	add	r7, sp, #0
 800709c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b7e      	ldr	r3, [pc, #504]	@ (80072a4 <UART_SetConfig+0x210>)
 80070aa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	431a      	orrs	r2, r3
 80070b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4977      	ldr	r1, [pc, #476]	@ (80072a8 <UART_SetConfig+0x214>)
 80070cc:	4019      	ands	r1, r3
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d4:	430b      	orrs	r3, r1
 80070d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	68d9      	ldr	r1, [r3, #12]
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	ea40 0301 	orr.w	r3, r0, r1
 80070ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b6a      	ldr	r3, [pc, #424]	@ (80072a4 <UART_SetConfig+0x210>)
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d009      	beq.n	8007114 <UART_SetConfig+0x80>
 8007100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	4b69      	ldr	r3, [pc, #420]	@ (80072ac <UART_SetConfig+0x218>)
 8007106:	429a      	cmp	r2, r3
 8007108:	d004      	beq.n	8007114 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	6a1a      	ldr	r2, [r3, #32]
 800710e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007110:	4313      	orrs	r3, r2
 8007112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800711e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007128:	430b      	orrs	r3, r1
 800712a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800712c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	f023 000f 	bic.w	r0, r3, #15
 8007136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007138:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800713a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	ea40 0301 	orr.w	r3, r0, r1
 8007142:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b59      	ldr	r3, [pc, #356]	@ (80072b0 <UART_SetConfig+0x21c>)
 800714a:	429a      	cmp	r2, r3
 800714c:	d102      	bne.n	8007154 <UART_SetConfig+0xc0>
 800714e:	2301      	movs	r3, #1
 8007150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007152:	e029      	b.n	80071a8 <UART_SetConfig+0x114>
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b56      	ldr	r3, [pc, #344]	@ (80072b4 <UART_SetConfig+0x220>)
 800715a:	429a      	cmp	r2, r3
 800715c:	d102      	bne.n	8007164 <UART_SetConfig+0xd0>
 800715e:	2302      	movs	r3, #2
 8007160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007162:	e021      	b.n	80071a8 <UART_SetConfig+0x114>
 8007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b53      	ldr	r3, [pc, #332]	@ (80072b8 <UART_SetConfig+0x224>)
 800716a:	429a      	cmp	r2, r3
 800716c:	d102      	bne.n	8007174 <UART_SetConfig+0xe0>
 800716e:	2304      	movs	r3, #4
 8007170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007172:	e019      	b.n	80071a8 <UART_SetConfig+0x114>
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4b50      	ldr	r3, [pc, #320]	@ (80072bc <UART_SetConfig+0x228>)
 800717a:	429a      	cmp	r2, r3
 800717c:	d102      	bne.n	8007184 <UART_SetConfig+0xf0>
 800717e:	2308      	movs	r3, #8
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007182:	e011      	b.n	80071a8 <UART_SetConfig+0x114>
 8007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	4b4d      	ldr	r3, [pc, #308]	@ (80072c0 <UART_SetConfig+0x22c>)
 800718a:	429a      	cmp	r2, r3
 800718c:	d102      	bne.n	8007194 <UART_SetConfig+0x100>
 800718e:	2310      	movs	r3, #16
 8007190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007192:	e009      	b.n	80071a8 <UART_SetConfig+0x114>
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b42      	ldr	r3, [pc, #264]	@ (80072a4 <UART_SetConfig+0x210>)
 800719a:	429a      	cmp	r2, r3
 800719c:	d102      	bne.n	80071a4 <UART_SetConfig+0x110>
 800719e:	2320      	movs	r3, #32
 80071a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a2:	e001      	b.n	80071a8 <UART_SetConfig+0x114>
 80071a4:	2300      	movs	r3, #0
 80071a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	4b3d      	ldr	r3, [pc, #244]	@ (80072a4 <UART_SetConfig+0x210>)
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d005      	beq.n	80071be <UART_SetConfig+0x12a>
 80071b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b3d      	ldr	r3, [pc, #244]	@ (80072ac <UART_SetConfig+0x218>)
 80071b8:	429a      	cmp	r2, r3
 80071ba:	f040 8085 	bne.w	80072c8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071c0:	2200      	movs	r2, #0
 80071c2:	623b      	str	r3, [r7, #32]
 80071c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80071c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80071ca:	f7fd fc6f 	bl	8004aac <HAL_RCCEx_GetPeriphCLKFreq>
 80071ce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80071d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 80e8 	beq.w	80073a8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	4a39      	ldr	r2, [pc, #228]	@ (80072c4 <UART_SetConfig+0x230>)
 80071de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e2:	461a      	mov	r2, r3
 80071e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d305      	bcc.n	8007208 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007204:	429a      	cmp	r2, r3
 8007206:	d903      	bls.n	8007210 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800720e:	e048      	b.n	80072a2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007212:	2200      	movs	r2, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	61fa      	str	r2, [r7, #28]
 8007218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	4a29      	ldr	r2, [pc, #164]	@ (80072c4 <UART_SetConfig+0x230>)
 800721e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007222:	b29b      	uxth	r3, r3
 8007224:	2200      	movs	r2, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	617a      	str	r2, [r7, #20]
 800722a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800722e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007232:	f7f9 f821 	bl	8000278 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4610      	mov	r0, r2
 800723c:	4619      	mov	r1, r3
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	020b      	lsls	r3, r1, #8
 8007248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800724c:	0202      	lsls	r2, r0, #8
 800724e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007250:	6849      	ldr	r1, [r1, #4]
 8007252:	0849      	lsrs	r1, r1, #1
 8007254:	2000      	movs	r0, #0
 8007256:	460c      	mov	r4, r1
 8007258:	4605      	mov	r5, r0
 800725a:	eb12 0804 	adds.w	r8, r2, r4
 800725e:	eb43 0905 	adc.w	r9, r3, r5
 8007262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	60bb      	str	r3, [r7, #8]
 800726a:	60fa      	str	r2, [r7, #12]
 800726c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 f800 	bl	8000278 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4613      	mov	r3, r2
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007286:	d308      	bcc.n	800729a <UART_SetConfig+0x206>
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800728e:	d204      	bcs.n	800729a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007296:	60da      	str	r2, [r3, #12]
 8007298:	e003      	b.n	80072a2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80072a0:	e082      	b.n	80073a8 <UART_SetConfig+0x314>
 80072a2:	e081      	b.n	80073a8 <UART_SetConfig+0x314>
 80072a4:	46002400 	.word	0x46002400
 80072a8:	cfff69f3 	.word	0xcfff69f3
 80072ac:	56002400 	.word	0x56002400
 80072b0:	40013800 	.word	0x40013800
 80072b4:	40004400 	.word	0x40004400
 80072b8:	40004800 	.word	0x40004800
 80072bc:	40004c00 	.word	0x40004c00
 80072c0:	40005000 	.word	0x40005000
 80072c4:	08008b34 	.word	0x08008b34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072d0:	d13c      	bne.n	800734c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d4:	2200      	movs	r2, #0
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072de:	f7fd fbe5 	bl	8004aac <HAL_RCCEx_GetPeriphCLKFreq>
 80072e2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d05e      	beq.n	80073a8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ee:	4a39      	ldr	r2, [pc, #228]	@ (80073d4 <UART_SetConfig+0x340>)
 80072f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072f4:	461a      	mov	r2, r3
 80072f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072fc:	005a      	lsls	r2, r3, #1
 80072fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	441a      	add	r2, r3
 8007306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	fbb2 f3f3 	udiv	r3, r2, r3
 800730e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007312:	2b0f      	cmp	r3, #15
 8007314:	d916      	bls.n	8007344 <UART_SetConfig+0x2b0>
 8007316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800731c:	d212      	bcs.n	8007344 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800731e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007320:	b29b      	uxth	r3, r3
 8007322:	f023 030f 	bic.w	r3, r3, #15
 8007326:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	b29b      	uxth	r3, r3
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	b29a      	uxth	r2, r3
 8007334:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007336:	4313      	orrs	r3, r2
 8007338:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	e031      	b.n	80073a8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800734a:	e02d      	b.n	80073a8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800734c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800734e:	2200      	movs	r2, #0
 8007350:	469a      	mov	sl, r3
 8007352:	4693      	mov	fp, r2
 8007354:	4650      	mov	r0, sl
 8007356:	4659      	mov	r1, fp
 8007358:	f7fd fba8 	bl	8004aac <HAL_RCCEx_GetPeriphCLKFreq>
 800735c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800735e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d021      	beq.n	80073a8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	4a1a      	ldr	r2, [pc, #104]	@ (80073d4 <UART_SetConfig+0x340>)
 800736a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800736e:	461a      	mov	r2, r3
 8007370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007372:	fbb3 f2f2 	udiv	r2, r3, r2
 8007376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	441a      	add	r2, r3
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	fbb2 f3f3 	udiv	r3, r2, r3
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d909      	bls.n	80073a2 <UART_SetConfig+0x30e>
 800738e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007394:	d205      	bcs.n	80073a2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007398:	b29a      	uxth	r2, r3
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	e002      	b.n	80073a8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073aa:	2201      	movs	r2, #1
 80073ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	2201      	movs	r2, #1
 80073b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ba:	2200      	movs	r2, #0
 80073bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	2200      	movs	r2, #0
 80073c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80073c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3750      	adds	r7, #80	@ 0x50
 80073cc:	46bd      	mov	sp, r7
 80073ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d2:	bf00      	nop
 80073d4:	08008b34 	.word	0x08008b34

080073d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01a      	beq.n	80074ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074d6:	d10a      	bne.n	80074ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b098      	sub	sp, #96	@ 0x60
 8007520:	af02      	add	r7, sp, #8
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800752c:	f7fa f81e 	bl	800156c <HAL_GetTick>
 8007530:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b08      	cmp	r3, #8
 800753e:	d12f      	bne.n	80075a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007540:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007548:	2200      	movs	r2, #0
 800754a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f88e 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d022      	beq.n	80075a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800756e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007578:	647b      	str	r3, [r7, #68]	@ 0x44
 800757a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800757e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e6      	bne.n	800755a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e063      	b.n	8007668 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d149      	bne.n	8007642 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b6:	2200      	movs	r2, #0
 80075b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f857 	bl	8007670 <UART_WaitOnFlagUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d03c      	beq.n	8007642 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	623b      	str	r3, [r7, #32]
   return(result);
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	60fb      	str	r3, [r7, #12]
   return(result);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800761a:	61fa      	str	r2, [r7, #28]
 800761c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761e:	69b9      	ldr	r1, [r7, #24]
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	617b      	str	r3, [r7, #20]
   return(result);
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e5      	bne.n	80075fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e012      	b.n	8007668 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2220      	movs	r2, #32
 8007646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3758      	adds	r7, #88	@ 0x58
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	4613      	mov	r3, r2
 800767e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007680:	e04f      	b.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d04b      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768a:	f7f9 ff6f 	bl	800156c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	429a      	cmp	r2, r3
 8007698:	d302      	bcc.n	80076a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e04e      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d037      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b80      	cmp	r3, #128	@ 0x80
 80076b6:	d034      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b40      	cmp	r3, #64	@ 0x40
 80076bc:	d031      	beq.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d110      	bne.n	80076ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2208      	movs	r2, #8
 80076d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f95b 	bl	8007990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2208      	movs	r2, #8
 80076de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e029      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076fc:	d111      	bne.n	8007722 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f941 	bl	8007990 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e00f      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69da      	ldr	r2, [r3, #28]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4013      	ands	r3, r2
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	429a      	cmp	r2, r3
 8007730:	bf0c      	ite	eq
 8007732:	2301      	moveq	r3, #1
 8007734:	2300      	movne	r3, #0
 8007736:	b2db      	uxtb	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	429a      	cmp	r2, r3
 800773e:	d0a0      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800774c:	b480      	push	{r7}
 800774e:	b0a3      	sub	sp, #140	@ 0x8c
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800777e:	d10e      	bne.n	800779e <UART_Start_Receive_IT+0x52>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d105      	bne.n	8007794 <UART_Start_Receive_IT+0x48>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800778e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007792:	e02d      	b.n	80077f0 <UART_Start_Receive_IT+0xa4>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	22ff      	movs	r2, #255	@ 0xff
 8007798:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800779c:	e028      	b.n	80077f0 <UART_Start_Receive_IT+0xa4>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10d      	bne.n	80077c2 <UART_Start_Receive_IT+0x76>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d104      	bne.n	80077b8 <UART_Start_Receive_IT+0x6c>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	22ff      	movs	r2, #255	@ 0xff
 80077b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077b6:	e01b      	b.n	80077f0 <UART_Start_Receive_IT+0xa4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	227f      	movs	r2, #127	@ 0x7f
 80077bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077c0:	e016      	b.n	80077f0 <UART_Start_Receive_IT+0xa4>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077ca:	d10d      	bne.n	80077e8 <UART_Start_Receive_IT+0x9c>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <UART_Start_Receive_IT+0x92>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	227f      	movs	r2, #127	@ 0x7f
 80077d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077dc:	e008      	b.n	80077f0 <UART_Start_Receive_IT+0xa4>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	223f      	movs	r2, #63	@ 0x3f
 80077e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80077e6:	e003      	b.n	80077f0 <UART_Start_Receive_IT+0xa4>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2222      	movs	r2, #34	@ 0x22
 80077fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3308      	adds	r3, #8
 8007806:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007824:	673a      	str	r2, [r7, #112]	@ 0x70
 8007826:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800782a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007832:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e3      	bne.n	8007800 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007840:	d14f      	bne.n	80078e2 <UART_Start_Receive_IT+0x196>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	429a      	cmp	r2, r3
 800784c:	d349      	bcc.n	80078e2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007856:	d107      	bne.n	8007868 <UART_Start_Receive_IT+0x11c>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a47      	ldr	r2, [pc, #284]	@ (8007980 <UART_Start_Receive_IT+0x234>)
 8007864:	675a      	str	r2, [r3, #116]	@ 0x74
 8007866:	e002      	b.n	800786e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4a46      	ldr	r2, [pc, #280]	@ (8007984 <UART_Start_Receive_IT+0x238>)
 800786c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01a      	beq.n	80078ac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800788a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800789a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800789e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80078a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e4      	bne.n	8007876 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80078cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80078ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80078da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e5      	bne.n	80078ac <UART_Start_Receive_IT+0x160>
 80078e0:	e046      	b.n	8007970 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ea:	d107      	bne.n	80078fc <UART_Start_Receive_IT+0x1b0>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4a24      	ldr	r2, [pc, #144]	@ (8007988 <UART_Start_Receive_IT+0x23c>)
 80078f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80078fa:	e002      	b.n	8007902 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a23      	ldr	r2, [pc, #140]	@ (800798c <UART_Start_Receive_IT+0x240>)
 8007900:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d019      	beq.n	800793e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	e853 3f00 	ldrex	r3, [r3]
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800791e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
 800792a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800792e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e6      	bne.n	800790a <UART_Start_Receive_IT+0x1be>
 800793c:	e018      	b.n	8007970 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	613b      	str	r3, [r7, #16]
   return(result);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f043 0320 	orr.w	r3, r3, #32
 8007952:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800795c:	623b      	str	r3, [r7, #32]
 800795e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	69f9      	ldr	r1, [r7, #28]
 8007962:	6a3a      	ldr	r2, [r7, #32]
 8007964:	e841 2300 	strex	r3, r2, [r1]
 8007968:	61bb      	str	r3, [r7, #24]
   return(result);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1e6      	bne.n	800793e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	378c      	adds	r7, #140	@ 0x8c
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	080081d1 	.word	0x080081d1
 8007984:	08007e61 	.word	0x08007e61
 8007988:	08007c9d 	.word	0x08007c9d
 800798c:	08007ad9 	.word	0x08007ad9

08007990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b095      	sub	sp, #84	@ 0x54
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e6      	bne.n	8007998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e3      	bne.n	80079ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d118      	bne.n	8007a3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6979      	ldr	r1, [r7, #20]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	613b      	str	r3, [r7, #16]
   return(result);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e6      	bne.n	8007a0a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007a50:	bf00      	nop
 8007a52:	3754      	adds	r7, #84	@ 0x54
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fb04 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a9c:	61fb      	str	r3, [r7, #28]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6979      	ldr	r1, [r7, #20]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e6      	bne.n	8007a88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fac5 	bl	8007058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ace:	bf00      	nop
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b09c      	sub	sp, #112	@ 0x70
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ae6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af0:	2b22      	cmp	r3, #34	@ 0x22
 8007af2:	f040 80c3 	bne.w	8007c7c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007b04:	b2d9      	uxtb	r1, r3
 8007b06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b10:	400a      	ands	r2, r1
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 80a6 	bne.w	8007c8c <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e6      	bne.n	8007b40 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3308      	adds	r3, #8
 8007b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b84:	f023 0301 	bic.w	r3, r3, #1
 8007b88:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b92:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e5      	bne.n	8007b72 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a35      	ldr	r2, [pc, #212]	@ (8007c94 <UART_RxISR_8BIT+0x1bc>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d024      	beq.n	8007c0e <UART_RxISR_8BIT+0x136>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a33      	ldr	r2, [pc, #204]	@ (8007c98 <UART_RxISR_8BIT+0x1c0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01f      	beq.n	8007c0e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d018      	beq.n	8007c0e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d12e      	bne.n	8007c74 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f023 0310 	bic.w	r3, r3, #16
 8007c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	69b9      	ldr	r1, [r7, #24]
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	617b      	str	r3, [r7, #20]
   return(result);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e6      	bne.n	8007c1c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d103      	bne.n	8007c64 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2210      	movs	r2, #16
 8007c62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7f9 fa7d 	bl	800116c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c72:	e00b      	b.n	8007c8c <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff f9f9 	bl	800706c <HAL_UART_RxCpltCallback>
}
 8007c7a:	e007      	b.n	8007c8c <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0208 	orr.w	r2, r2, #8
 8007c8a:	619a      	str	r2, [r3, #24]
}
 8007c8c:	bf00      	nop
 8007c8e:	3770      	adds	r7, #112	@ 0x70
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	46002400 	.word	0x46002400
 8007c98:	56002400 	.word	0x56002400

08007c9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b09c      	sub	sp, #112	@ 0x70
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007caa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cb4:	2b22      	cmp	r3, #34	@ 0x22
 8007cb6:	f040 80c3 	bne.w	8007e40 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007cca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007cce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	b29a      	uxth	r2, r3
 8007cd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 80a6 	bne.w	8007e50 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d18:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d22:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3308      	adds	r3, #8
 8007d54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d56:	643a      	str	r2, [r7, #64]	@ 0x40
 8007d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e5      	bne.n	8007d36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a35      	ldr	r2, [pc, #212]	@ (8007e58 <UART_RxISR_16BIT+0x1bc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d024      	beq.n	8007dd2 <UART_RxISR_16BIT+0x136>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a33      	ldr	r2, [pc, #204]	@ (8007e5c <UART_RxISR_16BIT+0x1c0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01f      	beq.n	8007dd2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d018      	beq.n	8007dd2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dc0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e6      	bne.n	8007da0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d12e      	bne.n	8007e38 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f023 0310 	bic.w	r3, r3, #16
 8007df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dfe:	61bb      	str	r3, [r7, #24]
 8007e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6979      	ldr	r1, [r7, #20]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e6      	bne.n	8007de0 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d103      	bne.n	8007e28 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2210      	movs	r2, #16
 8007e26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7f9 f99b 	bl	800116c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e36:	e00b      	b.n	8007e50 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff f917 	bl	800706c <HAL_UART_RxCpltCallback>
}
 8007e3e:	e007      	b.n	8007e50 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0208 	orr.w	r2, r2, #8
 8007e4e:	619a      	str	r2, [r3, #24]
}
 8007e50:	bf00      	nop
 8007e52:	3770      	adds	r7, #112	@ 0x70
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	46002400 	.word	0x46002400
 8007e5c:	56002400 	.word	0x56002400

08007e60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b0ac      	sub	sp, #176	@ 0xb0
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e96:	2b22      	cmp	r3, #34	@ 0x22
 8007e98:	f040 8188 	bne.w	80081ac <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ea2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ea6:	e12b      	b.n	8008100 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eae:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eb2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007eb6:	b2d9      	uxtb	r1, r3
 8007eb8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec2:	400a      	ands	r2, r1
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d053      	beq.n	8007fa2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d011      	beq.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2201      	movs	r2, #1
 8007f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f20:	f043 0201 	orr.w	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d011      	beq.n	8007f5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2202      	movs	r2, #2
 8007f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f50:	f043 0204 	orr.w	r2, r3, #4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f5e:	f003 0304 	and.w	r3, r3, #4
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d011      	beq.n	8007f8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2204      	movs	r2, #4
 8007f78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f80:	f043 0202 	orr.w	r2, r3, #2
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d006      	beq.n	8007fa2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff f873 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 80a8 	bne.w	8008100 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007fd4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007fd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e4      	bne.n	8007fb0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3308      	adds	r3, #8
 8007fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3308      	adds	r3, #8
 800800a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800800e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008010:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008014:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800801c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e1      	bne.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a62      	ldr	r2, [pc, #392]	@ (80081c4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d026      	beq.n	800808e <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a60      	ldr	r2, [pc, #384]	@ (80081c8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d021      	beq.n	800808e <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01a      	beq.n	800808e <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008060:	e853 3f00 	ldrex	r3, [r3]
 8008064:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008068:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800806c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800807a:	657b      	str	r3, [r7, #84]	@ 0x54
 800807c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008080:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e4      	bne.n	8008058 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008092:	2b01      	cmp	r3, #1
 8008094:	d130      	bne.n	80080f8 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	f023 0310 	bic.w	r3, r3, #16
 80080b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080be:	643b      	str	r3, [r7, #64]	@ 0x40
 80080c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e4      	bne.n	800809c <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d103      	bne.n	80080e8 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2210      	movs	r2, #16
 80080e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7f9 f83b 	bl	800116c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80080f6:	e00e      	b.n	8008116 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe ffb7 	bl	800706c <HAL_UART_RxCpltCallback>
        break;
 80080fe:	e00a      	b.n	8008116 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008100:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008104:	2b00      	cmp	r3, #0
 8008106:	d006      	beq.n	8008116 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8008108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f aec9 	bne.w	8007ea8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800811c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008120:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008124:	2b00      	cmp	r3, #0
 8008126:	d049      	beq.n	80081bc <UART_RxISR_8BIT_FIFOEN+0x35c>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800812e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008132:	429a      	cmp	r2, r3
 8008134:	d242      	bcs.n	80081bc <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	61fb      	str	r3, [r7, #28]
   return(result);
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800814c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3308      	adds	r3, #8
 8008156:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800815a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800815c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008162:	e841 2300 	strex	r3, r2, [r1]
 8008166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e3      	bne.n	8008136 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a16      	ldr	r2, [pc, #88]	@ (80081cc <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8008172:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	60bb      	str	r3, [r7, #8]
   return(result);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f043 0320 	orr.w	r3, r3, #32
 8008188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	6979      	ldr	r1, [r7, #20]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	613b      	str	r3, [r7, #16]
   return(result);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e4      	bne.n	8008174 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081aa:	e007      	b.n	80081bc <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	699a      	ldr	r2, [r3, #24]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0208 	orr.w	r2, r2, #8
 80081ba:	619a      	str	r2, [r3, #24]
}
 80081bc:	bf00      	nop
 80081be:	37b0      	adds	r7, #176	@ 0xb0
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	46002400 	.word	0x46002400
 80081c8:	56002400 	.word	0x56002400
 80081cc:	08007ad9 	.word	0x08007ad9

080081d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b0ae      	sub	sp, #184	@ 0xb8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80081de:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008206:	2b22      	cmp	r3, #34	@ 0x22
 8008208:	f040 818c 	bne.w	8008524 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008212:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008216:	e12f      	b.n	8008478 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800822a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800822e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008232:	4013      	ands	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800823a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008240:	1c9a      	adds	r2, r3, #2
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	2b00      	cmp	r3, #0
 800826c:	d053      	beq.n	8008316 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800826e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d011      	beq.n	800829e <UART_RxISR_16BIT_FIFOEN+0xce>
 800827a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800827e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00b      	beq.n	800829e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2201      	movs	r2, #1
 800828c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008294:	f043 0201 	orr.w	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800829e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d011      	beq.n	80082ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80082aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2202      	movs	r2, #2
 80082bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c4:	f043 0204 	orr.w	r2, r3, #4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d011      	beq.n	80082fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80082da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2204      	movs	r2, #4
 80082ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f4:	f043 0202 	orr.w	r2, r3, #2
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7fe feb9 	bl	8007080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	f040 80aa 	bne.w	8008478 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800834a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800834e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e2      	bne.n	8008324 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800836e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008374:	f023 0301 	bic.w	r3, r3, #1
 8008378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008388:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800838c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e1      	bne.n	800835e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a62      	ldr	r2, [pc, #392]	@ (800853c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d026      	beq.n	8008406 <UART_RxISR_16BIT_FIFOEN+0x236>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a60      	ldr	r2, [pc, #384]	@ (8008540 <UART_RxISR_16BIT_FIFOEN+0x370>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d021      	beq.n	8008406 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01a      	beq.n	8008406 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e4      	bne.n	80083d0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800840a:	2b01      	cmp	r3, #1
 800840c:	d130      	bne.n	8008470 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008424:	f023 0310 	bic.w	r3, r3, #16
 8008428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008436:	647b      	str	r3, [r7, #68]	@ 0x44
 8008438:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800843c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e4      	bne.n	8008414 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	f003 0310 	and.w	r3, r3, #16
 8008454:	2b10      	cmp	r3, #16
 8008456:	d103      	bne.n	8008460 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2210      	movs	r2, #16
 800845e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7f8 fe7f 	bl	800116c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800846e:	e00e      	b.n	800848e <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7fe fdfb 	bl	800706c <HAL_UART_RxCpltCallback>
        break;
 8008476:	e00a      	b.n	800848e <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008478:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800847c:	2b00      	cmp	r3, #0
 800847e:	d006      	beq.n	800848e <UART_RxISR_16BIT_FIFOEN+0x2be>
 8008480:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b00      	cmp	r3, #0
 800848a:	f47f aec5 	bne.w	8008218 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008494:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008498:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800849c:	2b00      	cmp	r3, #0
 800849e:	d049      	beq.n	8008534 <UART_RxISR_16BIT_FIFOEN+0x364>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80084a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d242      	bcs.n	8008534 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	623b      	str	r3, [r7, #32]
   return(result);
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3308      	adds	r3, #8
 80084ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80084d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80084d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e3      	bne.n	80084ae <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a16      	ldr	r2, [pc, #88]	@ (8008544 <UART_RxISR_16BIT_FIFOEN+0x374>)
 80084ea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f043 0320 	orr.w	r3, r3, #32
 8008500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	69b9      	ldr	r1, [r7, #24]
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	617b      	str	r3, [r7, #20]
   return(result);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e4      	bne.n	80084ec <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008522:	e007      	b.n	8008534 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0208 	orr.w	r2, r2, #8
 8008532:	619a      	str	r2, [r3, #24]
}
 8008534:	bf00      	nop
 8008536:	37b8      	adds	r7, #184	@ 0xb8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	46002400 	.word	0x46002400
 8008540:	56002400 	.word	0x56002400
 8008544:	08007c9d 	.word	0x08007c9d

08008548 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_UARTEx_DisableFifoMode+0x16>
 8008582:	2302      	movs	r3, #2
 8008584:	e027      	b.n	80085d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2224      	movs	r2, #36	@ 0x24
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0201 	bic.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e02d      	b.n	8008656 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2224      	movs	r2, #36	@ 0x24
 8008606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0201 	bic.w	r2, r2, #1
 8008620:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f8ae 	bl	8008798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008672:	2302      	movs	r3, #2
 8008674:	e02d      	b.n	80086d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2224      	movs	r2, #36	@ 0x24
 8008682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0201 	bic.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 f870 	bl	8008798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b08c      	sub	sp, #48	@ 0x30
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d14a      	bne.n	800878e <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80086fe:	88fb      	ldrh	r3, [r7, #6]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e043      	b.n	8008790 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008712:	2b40      	cmp	r3, #64	@ 0x40
 8008714:	d107      	bne.n	8008726 <HAL_UARTEx_ReceiveToIdle_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008724:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	461a      	mov	r2, r3
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff f807 	bl	800774c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008742:	2b01      	cmp	r3, #1
 8008744:	d11d      	bne.n	8008782 <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2210      	movs	r2, #16
 800874c:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	617b      	str	r3, [r7, #20]
   return(result);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f043 0310 	orr.w	r3, r3, #16
 8008762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	627b      	str	r3, [r7, #36]	@ 0x24
 800876e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6a39      	ldr	r1, [r7, #32]
 8008772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	61fb      	str	r3, [r7, #28]
   return(result);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e6      	bne.n	800874e <HAL_UARTEx_ReceiveToIdle_IT+0x74>
 8008780:	e002      	b.n	8008788 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800878c:	e000      	b.n	8008790 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800878e:	2302      	movs	r3, #2
  }
}
 8008790:	4618      	mov	r0, r3
 8008792:	3730      	adds	r7, #48	@ 0x30
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d108      	bne.n	80087ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087b8:	e031      	b.n	800881e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ba:	2308      	movs	r3, #8
 80087bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087be:	2308      	movs	r3, #8
 80087c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	0e5b      	lsrs	r3, r3, #25
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	0f5b      	lsrs	r3, r3, #29
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	7b3a      	ldrb	r2, [r7, #12]
 80087e6:	4911      	ldr	r1, [pc, #68]	@ (800882c <UARTEx_SetNbDataToProcess+0x94>)
 80087e8:	5c8a      	ldrb	r2, [r1, r2]
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087ee:	7b3a      	ldrb	r2, [r7, #12]
 80087f0:	490f      	ldr	r1, [pc, #60]	@ (8008830 <UARTEx_SetNbDataToProcess+0x98>)
 80087f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	7b7a      	ldrb	r2, [r7, #13]
 8008804:	4909      	ldr	r1, [pc, #36]	@ (800882c <UARTEx_SetNbDataToProcess+0x94>)
 8008806:	5c8a      	ldrb	r2, [r1, r2]
 8008808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800880c:	7b7a      	ldrb	r2, [r7, #13]
 800880e:	4908      	ldr	r1, [pc, #32]	@ (8008830 <UARTEx_SetNbDataToProcess+0x98>)
 8008810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008812:	fb93 f3f2 	sdiv	r3, r3, r2
 8008816:	b29a      	uxth	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800881e:	bf00      	nop
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	08008b4c 	.word	0x08008b4c
 8008830:	08008b54 	.word	0x08008b54

08008834 <malloc>:
 8008834:	4b02      	ldr	r3, [pc, #8]	@ (8008840 <malloc+0xc>)
 8008836:	4601      	mov	r1, r0
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	f000 b825 	b.w	8008888 <_malloc_r>
 800883e:	bf00      	nop
 8008840:	2000000c 	.word	0x2000000c

08008844 <sbrk_aligned>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	4e0f      	ldr	r6, [pc, #60]	@ (8008884 <sbrk_aligned+0x40>)
 8008848:	460c      	mov	r4, r1
 800884a:	4605      	mov	r5, r0
 800884c:	6831      	ldr	r1, [r6, #0]
 800884e:	b911      	cbnz	r1, 8008856 <sbrk_aligned+0x12>
 8008850:	f000 f8ae 	bl	80089b0 <_sbrk_r>
 8008854:	6030      	str	r0, [r6, #0]
 8008856:	4621      	mov	r1, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f000 f8a9 	bl	80089b0 <_sbrk_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d103      	bne.n	800886a <sbrk_aligned+0x26>
 8008862:	f04f 34ff 	mov.w	r4, #4294967295
 8008866:	4620      	mov	r0, r4
 8008868:	bd70      	pop	{r4, r5, r6, pc}
 800886a:	1cc4      	adds	r4, r0, #3
 800886c:	f024 0403 	bic.w	r4, r4, #3
 8008870:	42a0      	cmp	r0, r4
 8008872:	d0f8      	beq.n	8008866 <sbrk_aligned+0x22>
 8008874:	1a21      	subs	r1, r4, r0
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f89a 	bl	80089b0 <_sbrk_r>
 800887c:	3001      	adds	r0, #1
 800887e:	d1f2      	bne.n	8008866 <sbrk_aligned+0x22>
 8008880:	e7ef      	b.n	8008862 <sbrk_aligned+0x1e>
 8008882:	bf00      	nop
 8008884:	20000278 	.word	0x20000278

08008888 <_malloc_r>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	1ccd      	adds	r5, r1, #3
 800888e:	4606      	mov	r6, r0
 8008890:	f025 0503 	bic.w	r5, r5, #3
 8008894:	3508      	adds	r5, #8
 8008896:	2d0c      	cmp	r5, #12
 8008898:	bf38      	it	cc
 800889a:	250c      	movcc	r5, #12
 800889c:	2d00      	cmp	r5, #0
 800889e:	db01      	blt.n	80088a4 <_malloc_r+0x1c>
 80088a0:	42a9      	cmp	r1, r5
 80088a2:	d904      	bls.n	80088ae <_malloc_r+0x26>
 80088a4:	230c      	movs	r3, #12
 80088a6:	6033      	str	r3, [r6, #0]
 80088a8:	2000      	movs	r0, #0
 80088aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008984 <_malloc_r+0xfc>
 80088b2:	f000 f869 	bl	8008988 <__malloc_lock>
 80088b6:	f8d8 3000 	ldr.w	r3, [r8]
 80088ba:	461c      	mov	r4, r3
 80088bc:	bb44      	cbnz	r4, 8008910 <_malloc_r+0x88>
 80088be:	4629      	mov	r1, r5
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff ffbf 	bl	8008844 <sbrk_aligned>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	4604      	mov	r4, r0
 80088ca:	d158      	bne.n	800897e <_malloc_r+0xf6>
 80088cc:	f8d8 4000 	ldr.w	r4, [r8]
 80088d0:	4627      	mov	r7, r4
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	d143      	bne.n	800895e <_malloc_r+0xd6>
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	d04b      	beq.n	8008972 <_malloc_r+0xea>
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	4639      	mov	r1, r7
 80088de:	4630      	mov	r0, r6
 80088e0:	eb04 0903 	add.w	r9, r4, r3
 80088e4:	f000 f864 	bl	80089b0 <_sbrk_r>
 80088e8:	4581      	cmp	r9, r0
 80088ea:	d142      	bne.n	8008972 <_malloc_r+0xea>
 80088ec:	6821      	ldr	r1, [r4, #0]
 80088ee:	4630      	mov	r0, r6
 80088f0:	1a6d      	subs	r5, r5, r1
 80088f2:	4629      	mov	r1, r5
 80088f4:	f7ff ffa6 	bl	8008844 <sbrk_aligned>
 80088f8:	3001      	adds	r0, #1
 80088fa:	d03a      	beq.n	8008972 <_malloc_r+0xea>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	442b      	add	r3, r5
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	f8d8 3000 	ldr.w	r3, [r8]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	bb62      	cbnz	r2, 8008964 <_malloc_r+0xdc>
 800890a:	f8c8 7000 	str.w	r7, [r8]
 800890e:	e00f      	b.n	8008930 <_malloc_r+0xa8>
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	1b52      	subs	r2, r2, r5
 8008914:	d420      	bmi.n	8008958 <_malloc_r+0xd0>
 8008916:	2a0b      	cmp	r2, #11
 8008918:	d917      	bls.n	800894a <_malloc_r+0xc2>
 800891a:	1961      	adds	r1, r4, r5
 800891c:	42a3      	cmp	r3, r4
 800891e:	6025      	str	r5, [r4, #0]
 8008920:	bf18      	it	ne
 8008922:	6059      	strne	r1, [r3, #4]
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	bf08      	it	eq
 8008928:	f8c8 1000 	streq.w	r1, [r8]
 800892c:	5162      	str	r2, [r4, r5]
 800892e:	604b      	str	r3, [r1, #4]
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f82f 	bl	8008994 <__malloc_unlock>
 8008936:	f104 000b 	add.w	r0, r4, #11
 800893a:	1d23      	adds	r3, r4, #4
 800893c:	f020 0007 	bic.w	r0, r0, #7
 8008940:	1ac2      	subs	r2, r0, r3
 8008942:	bf1c      	itt	ne
 8008944:	1a1b      	subne	r3, r3, r0
 8008946:	50a3      	strne	r3, [r4, r2]
 8008948:	e7af      	b.n	80088aa <_malloc_r+0x22>
 800894a:	6862      	ldr	r2, [r4, #4]
 800894c:	42a3      	cmp	r3, r4
 800894e:	bf0c      	ite	eq
 8008950:	f8c8 2000 	streq.w	r2, [r8]
 8008954:	605a      	strne	r2, [r3, #4]
 8008956:	e7eb      	b.n	8008930 <_malloc_r+0xa8>
 8008958:	4623      	mov	r3, r4
 800895a:	6864      	ldr	r4, [r4, #4]
 800895c:	e7ae      	b.n	80088bc <_malloc_r+0x34>
 800895e:	463c      	mov	r4, r7
 8008960:	687f      	ldr	r7, [r7, #4]
 8008962:	e7b6      	b.n	80088d2 <_malloc_r+0x4a>
 8008964:	461a      	mov	r2, r3
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	42a3      	cmp	r3, r4
 800896a:	d1fb      	bne.n	8008964 <_malloc_r+0xdc>
 800896c:	2300      	movs	r3, #0
 800896e:	6053      	str	r3, [r2, #4]
 8008970:	e7de      	b.n	8008930 <_malloc_r+0xa8>
 8008972:	230c      	movs	r3, #12
 8008974:	4630      	mov	r0, r6
 8008976:	6033      	str	r3, [r6, #0]
 8008978:	f000 f80c 	bl	8008994 <__malloc_unlock>
 800897c:	e794      	b.n	80088a8 <_malloc_r+0x20>
 800897e:	6005      	str	r5, [r0, #0]
 8008980:	e7d6      	b.n	8008930 <_malloc_r+0xa8>
 8008982:	bf00      	nop
 8008984:	2000027c 	.word	0x2000027c

08008988 <__malloc_lock>:
 8008988:	4801      	ldr	r0, [pc, #4]	@ (8008990 <__malloc_lock+0x8>)
 800898a:	f000 b84b 	b.w	8008a24 <__retarget_lock_acquire_recursive>
 800898e:	bf00      	nop
 8008990:	200003bc 	.word	0x200003bc

08008994 <__malloc_unlock>:
 8008994:	4801      	ldr	r0, [pc, #4]	@ (800899c <__malloc_unlock+0x8>)
 8008996:	f000 b846 	b.w	8008a26 <__retarget_lock_release_recursive>
 800899a:	bf00      	nop
 800899c:	200003bc 	.word	0x200003bc

080089a0 <memset>:
 80089a0:	4402      	add	r2, r0
 80089a2:	4603      	mov	r3, r0
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d100      	bne.n	80089aa <memset+0xa>
 80089a8:	4770      	bx	lr
 80089aa:	f803 1b01 	strb.w	r1, [r3], #1
 80089ae:	e7f9      	b.n	80089a4 <memset+0x4>

080089b0 <_sbrk_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	2300      	movs	r3, #0
 80089b4:	4d05      	ldr	r5, [pc, #20]	@ (80089cc <_sbrk_r+0x1c>)
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7f8 fb48 	bl	8001050 <_sbrk>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_sbrk_r+0x1a>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_sbrk_r+0x1a>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	200003b8 	.word	0x200003b8

080089d0 <__errno>:
 80089d0:	4b01      	ldr	r3, [pc, #4]	@ (80089d8 <__errno+0x8>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	2000000c 	.word	0x2000000c

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	@ (8008a14 <__libc_init_array+0x38>)
 80089e0:	2600      	movs	r6, #0
 80089e2:	4c0d      	ldr	r4, [pc, #52]	@ (8008a18 <__libc_init_array+0x3c>)
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	@ (8008a1c <__libc_init_array+0x40>)
 80089ee:	2600      	movs	r6, #0
 80089f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008a20 <__libc_init_array+0x44>)
 80089f2:	f000 f827 	bl	8008a44 <_init>
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	3601      	adds	r6, #1
 8008a06:	4798      	blx	r3
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	3601      	adds	r6, #1
 8008a10:	4798      	blx	r3
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08008b64 	.word	0x08008b64
 8008a18:	08008b64 	.word	0x08008b64
 8008a1c:	08008b64 	.word	0x08008b64
 8008a20:	08008b68 	.word	0x08008b68

08008a24 <__retarget_lock_acquire_recursive>:
 8008a24:	4770      	bx	lr

08008a26 <__retarget_lock_release_recursive>:
 8008a26:	4770      	bx	lr

08008a28 <memcpy>:
 8008a28:	440a      	add	r2, r1
 8008a2a:	1e43      	subs	r3, r0, #1
 8008a2c:	4291      	cmp	r1, r2
 8008a2e:	d100      	bne.n	8008a32 <memcpy+0xa>
 8008a30:	4770      	bx	lr
 8008a32:	b510      	push	{r4, lr}
 8008a34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a38:	4291      	cmp	r1, r2
 8008a3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3e:	d1f9      	bne.n	8008a34 <memcpy+0xc>
 8008a40:	bd10      	pop	{r4, pc}
	...

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
