
health_monitoring_wearable_mainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000869c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080088d4  080088d4  000098d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080089d4  080089d4  000099d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080089dc  080089dc  000099dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080089e0  080089e0  000099e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  080089e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000371  2000005c  08008a40  0000a05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  200003cd  08008a40  0000a3cd  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c2dc  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000356e  00000000  00000000  0002636e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018a0  00000000  00000000  000298e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000132a  00000000  00000000  0002b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000367ff  00000000  00000000  0002c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f25b  00000000  00000000  00062ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157f8c  00000000  00000000  00081f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d9e90  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c9c  00000000  00000000  001d9ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001e0b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	080088bc 	.word	0x080088bc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	080088bc 	.word	0x080088bc

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <data_handler_dispatcher>:
void data_handler_notify_stop_stream(void) {
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_STOP_STREAM, data_handler->payload, 1, 0);
}

void data_handler_dispatcher(UART_CommandPacket_t* cmd) {
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
    data_handler->data_cmd = (Data_CmdID_t)cmd->cmd_type;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <data_handler_dispatcher+0x7c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7852      	ldrb	r2, [r2, #1]
 8000604:	701a      	strb	r2, [r3, #0]
    memcpy(data_handler->payload, cmd->payload, 5);
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6858      	ldr	r0, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3303      	adds	r3, #3
 8000610:	2205      	movs	r2, #5
 8000612:	4619      	mov	r1, r3
 8000614:	f008 f944 	bl	80088a0 <memcpy>
    data_handler->lenght=cmd->payload_len;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7892      	ldrb	r2, [r2, #2]
 8000620:	731a      	strb	r2, [r3, #12]

    //TODO: filter if the message is to configure something or to request a cmd

    sensor_interface_handle_cmd(data_handler->data_cmd, data_handler->payload, data_handler->lenght, data_handler->payload_out, &(data_handler->lenght_out));
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	7818      	ldrb	r0, [r3, #0]
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6859      	ldr	r1, [r3, #4]
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	7b1a      	ldrb	r2, [r3, #12]
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	689c      	ldr	r4, [r3, #8]
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	330d      	adds	r3, #13
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4623      	mov	r3, r4
 8000644:	f000 fa42 	bl	8000acc <sensor_interface_handle_cmd>
    UART_Handler_t* uart = uart_handler_get();
 8000648:	f000 fddc 	bl	8001204 <uart_handler_get>
 800064c:	60f8      	str	r0, [r7, #12]
    uart->send_response(data_handler->data_cmd, data_handler->payload_out, data_handler->lenght_out );
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	7810      	ldrb	r0, [r2, #0]
 8000658:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	6891      	ldr	r1, [r2, #8]
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	7b52      	ldrb	r2, [r2, #13]
 8000664:	4798      	blx	r3
//            break;
//        default:
//            // Unknown command handling
//            break;
//    }
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bd90      	pop	{r4, r7, pc}
 800066e:	bf00      	nop
 8000670:	20000078 	.word	0x20000078

08000674 <data_handler_Init>:
//static void data_handler_req_stop_stream(void) {
//	//TODO:sensor_stream_stop();
//    data_handler_notify_stop_stream();
//}

void data_handler_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 8000678:	2010      	movs	r0, #16
 800067a:	f008 f817 	bl	80086ac <malloc>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <data_handler_Init+0x48>)
 8000684:	601a      	str	r2, [r3, #0]
    data_handler->payload = data_handler_buffer;
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <data_handler_Init+0x48>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <data_handler_Init+0x4c>)
 800068c:	605a      	str	r2, [r3, #4]
    data_handler->payload_out = data_handler_buffer_out;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <data_handler_Init+0x48>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <data_handler_Init+0x50>)
 8000694:	609a      	str	r2, [r3, #8]
    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <data_handler_Init+0x48>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	220a      	movs	r2, #10
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f008 f8b9 	bl	8008818 <memset>
    memset(data_handler->payload_out, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <data_handler_Init+0x48>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	220a      	movs	r2, #10
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f008 f8b1 	bl	8008818 <memset>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000078 	.word	0x20000078
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	20000088 	.word	0x20000088

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fdd0 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f816 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f9bc 	bl	8000a50 <MX_GPIO_Init>
  MX_I2C2_Init();
 80006d8:	f000 f872 	bl	80007c0 <MX_I2C2_Init>
  MX_RTC_Init();
 80006dc:	f000 f8c4 	bl	8000868 <MX_RTC_Init>
  MX_TIM16_Init();
 80006e0:	f000 f944 	bl	800096c <MX_TIM16_Init>
  MX_UART4_Init();
 80006e4:	f000 f968 	bl	80009b8 <MX_UART4_Init>
  MX_ICACHE_Init();
 80006e8:	f000 f8aa 	bl	8000840 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  uart_handler_Init(&huart4);
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <main+0x34>)
 80006ee:	f000 fd3d 	bl	800116c <uart_handler_Init>
  data_handler_Init();
 80006f2:	f7ff ffbf 	bl	8000674 <data_handler_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f6:	bf00      	nop
 80006f8:	e7fd      	b.n	80006f6 <main+0x2e>
 80006fa:	bf00      	nop
 80006fc:	20000164 	.word	0x20000164

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09e      	sub	sp, #120	@ 0x78
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	2260      	movs	r2, #96	@ 0x60
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f008 f882 	bl	8008818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
 8000722:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000724:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000728:	f001 fbf6 	bl	8001f18 <HAL_PWREx_ControlVoltageScaling>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000732:	f000 f9c5 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000736:	230a      	movs	r3, #10
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000744:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000752:	2302      	movs	r3, #2
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800075e:	2308      	movs	r3, #8
 8000760:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800076e:	230c      	movs	r3, #12
 8000770:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fc58 	bl	8002030 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000786:	f000 f99b 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	231f      	movs	r3, #31
 800078c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2303      	movs	r3, #3
 8000790:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	2103      	movs	r1, #3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fb1e 	bl	8002de8 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007b2:	f000 f985 	bl	8000ac0 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3778      	adds	r7, #120	@ 0x78
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <MX_I2C2_Init+0x78>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007cc:	4a1b      	ldr	r2, [pc, #108]	@ (800083c <MX_I2C2_Init+0x7c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <MX_I2C2_Init+0x74>)
 80007fc:	f001 fa10 	bl	8001c20 <HAL_I2C_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000806:	f000 f95b 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4809      	ldr	r0, [pc, #36]	@ (8000834 <MX_I2C2_Init+0x74>)
 800080e:	f001 fabc 	bl	8001d8a <HAL_I2CEx_ConfigAnalogFilter>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000818:	f000 f952 	bl	8000ac0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_I2C2_Init+0x74>)
 8000820:	f001 fafe 	bl	8001e20 <HAL_I2CEx_ConfigDigitalFilter>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082a:	f000 f949 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000094 	.word	0x20000094
 8000838:	40005800 	.word	0x40005800
 800083c:	20a0c4df 	.word	0x20a0c4df

08000840 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000844:	2000      	movs	r0, #0
 8000846:	f001 fb37 	bl	8001eb8 <HAL_ICACHE_ConfigAssociativityMode>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000850:	f000 f936 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000854:	f001 fb50 	bl	8001ef8 <HAL_ICACHE_Enable>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800085e:	f000 f92f 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08e      	sub	sp, #56	@ 0x38
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000896:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <MX_RTC_Init+0xfc>)
 8000898:	4a33      	ldr	r2, [pc, #204]	@ (8000968 <MX_RTC_Init+0x100>)
 800089a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800089c:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <MX_RTC_Init+0xfc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008a2:	4b30      	ldr	r3, [pc, #192]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008a4:	227f      	movs	r2, #127	@ 0x7f
 80008a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008aa:	22ff      	movs	r2, #255	@ 0xff
 80008ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008c0:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008c8:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80008ce:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d4:	4823      	ldr	r0, [pc, #140]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008d6:	f005 fb37 	bl	8005f48 <HAL_RTC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008e0:	f000 f8ee 	bl	8000ac0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	@ (8000964 <MX_RTC_Init+0xfc>)
 80008fc:	f005 fd9c 	bl	8006438 <HAL_RTCEx_PrivilegeModeSet>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000906:	f000 f8db 	bl	8000ac0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800090a:	2300      	movs	r3, #0
 800090c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800090e:	2300      	movs	r3, #0
 8000910:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000912:	2300      	movs	r3, #0
 8000914:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	480f      	ldr	r0, [pc, #60]	@ (8000964 <MX_RTC_Init+0xfc>)
 8000928:	f005 fb98 	bl	800605c <HAL_RTC_SetTime>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000932:	f000 f8c5 	bl	8000ac0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000936:	2301      	movs	r3, #1
 8000938:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800093a:	2301      	movs	r3, #1
 800093c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800093e:	2301      	movs	r3, #1
 8000940:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_RTC_Init+0xfc>)
 800094e:	f005 fc21 	bl	8006194 <HAL_RTC_SetDate>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000958:	f000 f8b2 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	3738      	adds	r7, #56	@ 0x38
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000e8 	.word	0x200000e8
 8000968:	46007800 	.word	0x46007800

0800096c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_TIM16_Init+0x44>)
 8000972:	4a10      	ldr	r2, [pc, #64]	@ (80009b4 <MX_TIM16_Init+0x48>)
 8000974:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_TIM16_Init+0x44>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_TIM16_Init+0x44>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_TIM16_Init+0x44>)
 8000984:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000988:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_TIM16_Init+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <MX_TIM16_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_TIM16_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_TIM16_Init+0x44>)
 800099e:	f005 fd79 	bl	8006494 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80009a8:	f000 f88a 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000118 	.word	0x20000118
 80009b4:	40014400 	.word	0x40014400

080009b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <MX_UART4_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_UART4_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_UART4_Init+0x90>)
 8000a02:	f005 fe9f 	bl	8006744 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f858 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_UART4_Init+0x90>)
 8000a14:	f007 fd21 	bl	800845a <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f84f 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <MX_UART4_Init+0x90>)
 8000a26:	f007 fd56 	bl	80084d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f846 	bl	8000ac0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_UART4_Init+0x90>)
 8000a36:	f007 fcd7 	bl	80083e8 <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f83e 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000164 	.word	0x20000164
 8000a4c:	40004c00 	.word	0x40004c00

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a5c:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7a:	4a10      	ldr	r2, [pc, #64]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a98:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_GPIO_Init+0x6c>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	46020c00 	.word	0x46020c00

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <sensor_interface_handle_cmd>:
            temp->decode_i2c_response(i2c_rx_buf, 4);
        }
    }
}

void sensor_interface_handle_cmd(uint8_t cmd_id, uint8_t* payload, uint8_t len, uint8_t* payload_out, uint8_t* len_out) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	4613      	mov	r3, r2
 8000adc:	73bb      	strb	r3, [r7, #14]


    switch (cmd_id) {
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d002      	beq.n	8000aea <sensor_interface_handle_cmd+0x1e>
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d023      	beq.n	8000b30 <sensor_interface_handle_cmd+0x64>
            // TODO: Add support for composing full sensor packet with all sensor readings
            break;

        default:
            // Unknown command
            break;
 8000ae8:	e025      	b.n	8000b36 <sensor_interface_handle_cmd+0x6a>
		if (payload[0] == 0x02) {
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d120      	bne.n	8000b34 <sensor_interface_handle_cmd+0x68>
			Temp_Sensor_t* env_temp = temp_sensor_get();
 8000af2:	f000 fa3f 	bl	8000f74 <temp_sensor_get>
 8000af6:	6178      	str	r0, [r7, #20]
			if (env_temp && env_temp->get_last_n_data_serial_format) {
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01a      	beq.n	8000b34 <sensor_interface_handle_cmd+0x68>
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d016      	beq.n	8000b34 <sensor_interface_handle_cmd+0x68>
				payload_out[0]=0x02;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	701a      	strb	r2, [r3, #0]
				(*len_out)=env_temp->get_last_n_data_serial_format(1,payload_out+1);
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	3201      	adds	r2, #1
 8000b14:	4611      	mov	r1, r2
 8000b16:	2001      	movs	r0, #1
 8000b18:	4798      	blx	r3
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	701a      	strb	r2, [r3, #0]
				(*len_out)= (*len_out)+1;
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
 8000b2c:	701a      	strb	r2, [r3, #0]
            break;
 8000b2e:	e001      	b.n	8000b34 <sensor_interface_handle_cmd+0x68>
            break;
 8000b30:	bf00      	nop
 8000b32:	e000      	b.n	8000b36 <sensor_interface_handle_cmd+0x6a>
            break;
 8000b34:	bf00      	nop
    }
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_MspInit+0x30>)
 8000b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b4c:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <HAL_MspInit+0x30>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_MspInit+0x30>)
 8000b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	46020c00 	.word	0x46020c00

08000b74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0bc      	sub	sp, #240	@ 0xf0
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	22c8      	movs	r2, #200	@ 0xc8
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 fe3f 	bl	8008818 <memset>
  if(hi2c->Instance==I2C2)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c48 <HAL_I2C_MspInit+0xd4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d14c      	bne.n	8000c3e <HAL_I2C_MspInit+0xca>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ba4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f002 fce5 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000bc4:	f7ff ff7c 	bl	8000ac0 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc8:	4b20      	ldr	r3, [pc, #128]	@ (8000c4c <HAL_I2C_MspInit+0xd8>)
 8000bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bce:	4a1f      	ldr	r2, [pc, #124]	@ (8000c4c <HAL_I2C_MspInit+0xd8>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <HAL_I2C_MspInit+0xd8>)
 8000bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000be6:	2330      	movs	r3, #48	@ 0x30
 8000be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bec:	2312      	movs	r3, #18
 8000bee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bfe:	2304      	movs	r3, #4
 8000c00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <HAL_I2C_MspInit+0xdc>)
 8000c0c:	f000 fe30 	bl	8001870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_I2C_MspInit+0xd8>)
 8000c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c16:	4a0d      	ldr	r2, [pc, #52]	@ (8000c4c <HAL_I2C_MspInit+0xd8>)
 8000c18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_I2C_MspInit+0xd8>)
 8000c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2039      	movs	r0, #57	@ 0x39
 8000c34:	f000 fc9a 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000c38:	2039      	movs	r0, #57	@ 0x39
 8000c3a:	f000 fcb1 	bl	80015a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c3e:	bf00      	nop
 8000c40:	37f0      	adds	r7, #240	@ 0xf0
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	46020c00 	.word	0x46020c00
 8000c50:	42021c00 	.word	0x42021c00

08000c54 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0b6      	sub	sp, #216	@ 0xd8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	22c8      	movs	r2, #200	@ 0xc8
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f007 fdd7 	bl	8008818 <memset>
  if(hrtc->Instance==RTC)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce4 <HAL_RTC_MspInit+0x90>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d132      	bne.n	8000cda <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fc7b 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000c98:	f7ff ff12 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ca2:	4a11      	ldr	r2, [pc, #68]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ca8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000cae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd0:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_RTC_MspInit+0x94>)
 8000cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	37d8      	adds	r7, #216	@ 0xd8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	46007800 	.word	0x46007800
 8000ce8:	46020c00 	.word	0x46020c00

08000cec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <HAL_TIM_Base_MspInit+0x3c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10e      	bne.n	8000d1c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d04:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_TIM_Base_MspInit+0x40>)
 8000d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_TIM_Base_MspInit+0x40>)
 8000d10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40014400 	.word	0x40014400
 8000d2c:	46020c00 	.word	0x46020c00

08000d30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0bc      	sub	sp, #240	@ 0xf0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	22c8      	movs	r2, #200	@ 0xc8
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f007 fd61 	bl	8008818 <memset>
  if(huart->Instance==UART4)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8000e04 <HAL_UART_MspInit+0xd4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d14d      	bne.n	8000dfc <HAL_UART_MspInit+0xcc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d60:	f04f 0208 	mov.w	r2, #8
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4618      	mov	r0, r3
 8000d76:	f002 fc07 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d80:	f7ff fe9e 	bl	8000ac0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d84:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_UART_MspInit+0xd8>)
 8000d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <HAL_UART_MspInit+0xd8>)
 8000d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d90:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_UART_MspInit+0xd8>)
 8000d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_UART_MspInit+0xd8>)
 8000da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da8:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_UART_MspInit+0xd8>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_MspInit+0xd8>)
 8000db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000dc0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dda:	2308      	movs	r3, #8
 8000ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <HAL_UART_MspInit+0xdc>)
 8000de8:	f000 fd42 	bl	8001870 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2040      	movs	r0, #64	@ 0x40
 8000df2:	f000 fbbb 	bl	800156c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000df6:	2040      	movs	r0, #64	@ 0x40
 8000df8:	f000 fbd2 	bl	80015a0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37f0      	adds	r7, #240	@ 0xf0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004c00 	.word	0x40004c00
 8000e08:	46020c00 	.word	0x46020c00
 8000e0c:	42020800 	.word	0x42020800

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e66:	f000 faa9 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <I2C2_EV_IRQHandler+0x10>)
 8000e76:	f000 ff6e 	bl	8001d56 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000094 	.word	0x20000094

08000e84 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <UART4_IRQHandler+0x10>)
 8000e8a:	f005 fd49 	bl	8006920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000164 	.word	0x20000164

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	@ (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	@ (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f007 fcbe 	bl	8008848 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200c0000 	.word	0x200c0000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200001f8 	.word	0x200001f8
 8000f00:	200003d0 	.word	0x200003d0

08000f04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f08:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <SystemInit+0x68>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <SystemInit+0x68>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000f18:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <SystemInit+0x6c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <SystemInit+0x6c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <SystemInit+0x6c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <SystemInit+0x6c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <SystemInit+0x6c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <SystemInit+0x6c>)
 8000f36:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000f3a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000f3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <SystemInit+0x6c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <SystemInit+0x6c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a09      	ldr	r2, [pc, #36]	@ (8000f70 <SystemInit+0x6c>)
 8000f4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <SystemInit+0x6c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <SystemInit+0x68>)
 8000f5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f5e:	609a      	str	r2, [r3, #8]
  #endif
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	46020c00 	.word	0x46020c00

08000f74 <temp_sensor_get>:
        temp_sensor = NULL;
    }
}


Temp_Sensor_t* temp_sensor_get(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
    return temp_sensor;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <temp_sensor_get+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200001fc 	.word	0x200001fc

08000f8c <Calculate_CRC>:

// Forward declarations
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len);

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73bb      	strb	r3, [r7, #14]
 8000fa0:	e009      	b.n	8000fb6 <Calculate_CRC+0x2a>
        crc ^= data[i];
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	781a      	ldrb	r2, [r3, #0]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	4053      	eors	r3, r2
 8000fae:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
 8000fb6:	7bba      	ldrb	r2, [r7, #14]
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d3f1      	bcc.n	8000fa2 <Calculate_CRC+0x16>
    }
    return crc;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
    if (Size >= 7 && rx_buffer[0] == 0xAA) {
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d90a      	bls.n	8000ff4 <HAL_UARTEx_RxEventCallback+0x28>
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <HAL_UARTEx_RxEventCallback+0x40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2baa      	cmp	r3, #170	@ 0xaa
 8000fe4:	d106      	bne.n	8000ff4 <HAL_UARTEx_RxEventCallback+0x28>
        uart_handler->process_recived_pck(rx_buffer, Size);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x44>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4806      	ldr	r0, [pc, #24]	@ (800100c <HAL_UARTEx_RxEventCallback+0x40>)
 8000ff2:	4798      	blx	r3
    }
    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_UARTEx_RxEventCallback+0x44>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2240      	movs	r2, #64	@ 0x40
 8000ffc:	4903      	ldr	r1, [pc, #12]	@ (800100c <HAL_UARTEx_RxEventCallback+0x40>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 faa7 	bl	8008552 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000244 	.word	0x20000244
 8001010:	20000200 	.word	0x20000200

08001014 <uart_handler_Process_Received_pck>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
    if (size < 7) return;
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	2b06      	cmp	r3, #6
 8001024:	d945      	bls.n	80010b2 <uart_handler_Process_Received_pck+0x9e>

    uint8_t received_crc = pck[size - 1];
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	3b01      	subs	r3, #1
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
    uint8_t calculated_crc = Calculate_CRC(&pck[1], size - 2); // exclude start byte and CRC
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3b02      	subs	r3, #2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4619      	mov	r1, r3
 8001040:	4610      	mov	r0, r2
 8001042:	f7ff ffa3 	bl	8000f8c <Calculate_CRC>
 8001046:	4603      	mov	r3, r0
 8001048:	73bb      	strb	r3, [r7, #14]
    if (received_crc != calculated_crc) {
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	429a      	cmp	r2, r3
 8001050:	d004      	beq.n	800105c <uart_handler_Process_Received_pck+0x48>
        uart_handler->state = UART_STATE_ERROR;
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2203      	movs	r2, #3
 8001058:	701a      	strb	r2, [r3, #0]
        return;
 800105a:	e02b      	b.n	80010b4 <uart_handler_Process_Received_pck+0xa0>
    }

    uart_handler->cmd_packet->header = pck[0];
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	701a      	strb	r2, [r3, #0]
    uart_handler->cmd_packet->cmd_type = pck[1];
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	7852      	ldrb	r2, [r2, #1]
 8001072:	705a      	strb	r2, [r3, #1]
    uart_handler->cmd_packet->payload_len = pck[2];
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	7892      	ldrb	r2, [r2, #2]
 800107e:	709a      	strb	r2, [r3, #2]
    memcpy(uart_handler->cmd_packet->payload, &pck[3], 4);
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	3303      	adds	r3, #3
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	3203      	adds	r2, #3
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet->crc = received_crc;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    uart_handler->state = UART_STATE_PROCESSING;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2202      	movs	r2, #2
 80010a2:	701a      	strb	r2, [r3, #0]

    // Here you should now call your command dispatcher logic:
    data_handler_dispatcher(uart_handler->cmd_packet);
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <uart_handler_Process_Received_pck+0xa8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff faa2 	bl	80005f4 <data_handler_dispatcher>
 80010b0:	e000      	b.n	80010b4 <uart_handler_Process_Received_pck+0xa0>
    if (size < 7) return;
 80010b2:	bf00      	nop
}
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000200 	.word	0x20000200

080010c0 <uart_handler_Send_Response>:

static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len) {
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = tx_buffer;
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <uart_handler_Send_Response+0xa4>)
 80010d2:	60fb      	str	r3, [r7, #12]
    uint8_t idx = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	72fb      	strb	r3, [r7, #11]

    buf[idx++] = 0xAA;                     // Start byte
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	72fa      	strb	r2, [r7, #11]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	22aa      	movs	r2, #170	@ 0xaa
 80010e6:	701a      	strb	r2, [r3, #0]
    buf[idx++] = cmd;                  // Response CMD/status
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	72fa      	strb	r2, [r7, #11]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	701a      	strb	r2, [r3, #0]
    buf[idx++] = payload_len;             // Payload length
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	72fa      	strb	r2, [r7, #11]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	701a      	strb	r2, [r3, #0]

    memcpy(&buf[idx], payload, payload_len);
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	79ba      	ldrb	r2, [r7, #6]
 8001110:	6839      	ldr	r1, [r7, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f007 fbc4 	bl	80088a0 <memcpy>
    idx += payload_len;
 8001118:	7afa      	ldrb	r2, [r7, #11]
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	4413      	add	r3, r2
 800111e:	72fb      	strb	r3, [r7, #11]


    buf[idx] = Calculate_CRC(&buf[1], idx - 1); // CRC over CMD + LEN + payload + timestamp
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1c58      	adds	r0, r3, #1
 8001124:	7afb      	ldrb	r3, [r7, #11]
 8001126:	3b01      	subs	r3, #1
 8001128:	b2d9      	uxtb	r1, r3
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	18d4      	adds	r4, r2, r3
 8001130:	f7ff ff2c 	bl	8000f8c <Calculate_CRC>
 8001134:	4603      	mov	r3, r0
 8001136:	7023      	strb	r3, [r4, #0]
    idx++;
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	3301      	adds	r3, #1
 800113c:	72fb      	strb	r3, [r7, #11]

    HAL_UART_Transmit(uart_handler->huart, buf, idx, HAL_MAX_DELAY);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <uart_handler_Send_Response+0xa8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68d8      	ldr	r0, [r3, #12]
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	b29a      	uxth	r2, r3
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	68f9      	ldr	r1, [r7, #12]
 800114e:	f005 fb49 	bl	80067e4 <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 8001152:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <uart_handler_Send_Response+0xa8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	20000204 	.word	0x20000204
 8001168:	20000200 	.word	0x20000200

0800116c <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 8001174:	2020      	movs	r0, #32
 8001176:	f007 fa99 	bl	80086ac <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <uart_handler_Init+0x84>)
 8001180:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <uart_handler_Init+0x84>)
 8001184:	681c      	ldr	r4, [r3, #0]
 8001186:	203e      	movs	r0, #62	@ 0x3e
 8001188:	f007 fa90 	bl	80086ac <malloc>
 800118c:	4603      	mov	r3, r0
 800118e:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <uart_handler_Init+0x84>)
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	203e      	movs	r0, #62	@ 0x3e
 8001196:	f007 fa89 	bl	80086ac <malloc>
 800119a:	4603      	mov	r3, r0
 800119c:	60a3      	str	r3, [r4, #8]

    uart_handler->huart = huart;
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <uart_handler_Init+0x84>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	60da      	str	r2, [r3, #12]
    uart_handler->state = UART_STATE_IDLE;
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <uart_handler_Init+0x84>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <uart_handler_Init+0x84>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	223a      	movs	r2, #58	@ 0x3a
 80011b4:	705a      	strb	r2, [r3, #1]
    uart_handler->rx_buffer = rx_buffer;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <uart_handler_Init+0x84>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	@ (80011f4 <uart_handler_Init+0x88>)
 80011bc:	61da      	str	r2, [r3, #28]
    uart_handler->tx_buffer = tx_buffer;
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <uart_handler_Init+0x84>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <uart_handler_Init+0x8c>)
 80011c4:	619a      	str	r2, [r3, #24]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <uart_handler_Init+0x84>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <uart_handler_Init+0x90>)
 80011cc:	611a      	str	r2, [r3, #16]
    uart_handler->send_response = uart_handler_Send_Response;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <uart_handler_Init+0x84>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <uart_handler_Init+0x94>)
 80011d4:	615a      	str	r2, [r3, #20]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <uart_handler_Init+0x84>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2240      	movs	r2, #64	@ 0x40
 80011de:	4905      	ldr	r1, [pc, #20]	@ (80011f4 <uart_handler_Init+0x88>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f007 f9b6 	bl	8008552 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000200 	.word	0x20000200
 80011f4:	20000244 	.word	0x20000244
 80011f8:	20000204 	.word	0x20000204
 80011fc:	08001015 	.word	0x08001015
 8001200:	080010c1 	.word	0x080010c1

08001204 <uart_handler_get>:
        memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
        memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
    }
}

UART_Handler_t* uart_handler_get(void) {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    return uart_handler;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <uart_handler_get+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000200 	.word	0x20000200

0800121c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800121c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001254 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001220:	f7ff fe70 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001224:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001226:	e003      	b.n	8001230 <LoopCopyDataInit>

08001228 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800122a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800122c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800122e:	3104      	adds	r1, #4

08001230 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001230:	480a      	ldr	r0, [pc, #40]	@ (800125c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001234:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001236:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001238:	d3f6      	bcc.n	8001228 <CopyDataInit>
	ldr	r2, =_sbss
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <LoopForever+0x12>)
	b	LoopFillZerobss
 800123c:	e002      	b.n	8001244 <LoopFillZerobss>

0800123e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800123e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001240:	f842 3b04 	str.w	r3, [r2], #4

08001244 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <LoopForever+0x16>)
	cmp	r2, r3
 8001246:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001248:	d3f9      	bcc.n	800123e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800124a:	f007 fb03 	bl	8008854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800124e:	f7ff fa3b 	bl	80006c8 <main>

08001252 <LoopForever>:

LoopForever:
    b LoopForever
 8001252:	e7fe      	b.n	8001252 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001254:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001258:	080089e4 	.word	0x080089e4
	ldr	r0, =_sdata
 800125c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001260:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001264:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001268:	200003cd 	.word	0x200003cd

0800126c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800126c:	e7fe      	b.n	800126c <ADC1_IRQHandler>
	...

08001270 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_Init+0x50>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <HAL_Init+0x50>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 f968 	bl	8001556 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001286:	f001 ffa1 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800128a:	4602      	mov	r2, r0
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_Init+0x54>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <HAL_Init+0x58>)
 8001296:	5ccb      	ldrb	r3, [r1, r3]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_Init+0x5c>)
 800129e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80012a0:	2004      	movs	r0, #4
 80012a2:	f000 f9ad 	bl	8001600 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a6:	200f      	movs	r0, #15
 80012a8:	f000 f812 	bl	80012d0 <HAL_InitTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e002      	b.n	80012bc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012b6:	f7ff fc43 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40022000 	.word	0x40022000
 80012c4:	46020c00 	.word	0x46020c00
 80012c8:	080088d4 	.word	0x080088d4
 80012cc:	20000000 	.word	0x20000000

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <HAL_InitTick+0xdc>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e05c      	b.n	80013a2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80012e8:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <HAL_InitTick+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d10c      	bne.n	800130e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_InitTick+0xe4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <HAL_InitTick+0xdc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e037      	b.n	800137e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800130e:	f000 f9cf 	bl	80016b0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001312:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d023      	beq.n	8001362 <HAL_InitTick+0x92>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d82d      	bhi.n	800137c <HAL_InitTick+0xac>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_InitTick+0x5e>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d00d      	beq.n	8001348 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800132c:	e026      	b.n	800137c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <HAL_InitTick+0xe4>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <HAL_InitTick+0xdc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800133c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001340:	fbb2 f3f3 	udiv	r3, r2, r3
 8001344:	60fb      	str	r3, [r7, #12]
        break;
 8001346:	e01a      	b.n	800137e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_InitTick+0xdc>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	fbb3 f3f2 	udiv	r3, r3, r2
 8001356:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
        break;
 8001360:	e00d      	b.n	800137e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0xdc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	60fb      	str	r3, [r7, #12]
        break;
 800137a:	e000      	b.n	800137e <HAL_InitTick+0xae>
        break;
 800137c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f91c 	bl	80015bc <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e009      	b.n	80013a2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138e:	2200      	movs	r2, #0
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	f04f 30ff 	mov.w	r0, #4294967295
 8001396:	f000 f8e9 	bl	800156c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800139a:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_InitTick+0xe8>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	e000e010 	.word	0xe000e010
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000284 	.word	0x20000284

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000284 	.word	0x20000284

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	@ (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	@ (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	@ (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff4c 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800157a:	f7ff ff63 	bl	8001444 <__NVIC_GetPriorityGrouping>
 800157e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	6978      	ldr	r0, [r7, #20]
 8001586:	f7ff ffb3 	bl	80014f0 <NVIC_EncodePriority>
 800158a:	4602      	mov	r2, r0
 800158c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff82 	bl	800149c <__NVIC_SetPriority>
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff56 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00d      	b.n	80015ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_SYSTICK_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <HAL_SYSTICK_Config+0x40>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_SYSTICK_Config+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <HAL_SYSTICK_Config+0x40>)
 80015e6:	f043 0303 	orr.w	r3, r3, #3
 80015ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b04      	cmp	r3, #4
 800160c:	d844      	bhi.n	8001698 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800160e:	a201      	add	r2, pc, #4	@ (adr r2, 8001614 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001637 	.word	0x08001637
 8001618:	08001655 	.word	0x08001655
 800161c:	08001677 	.word	0x08001677
 8001620:	08001699 	.word	0x08001699
 8001624:	08001629 	.word	0x08001629
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6013      	str	r3, [r2, #0]
      break;
 8001634:	e031      	b.n	800169a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001636:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001642:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800164a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001652:	e022      	b.n	800169a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800166a:	4a10      	ldr	r2, [pc, #64]	@ (80016ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800166c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001670:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001674:	e011      	b.n	800169a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800168e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001696:	e000      	b.n	800169a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001698:	bf00      	nop
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010
 80016ac:	46020c00 	.word	0x46020c00

080016b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80016c2:	2304      	movs	r3, #4
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	e021      	b.n	800170c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80016d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80016da:	d011      	beq.n	8001700 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80016e2:	d810      	bhi.n	8001706 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016f0:	d003      	beq.n	80016fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80016f2:	e008      	b.n	8001706 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
        break;
 80016f8:	e008      	b.n	800170c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80016fa:	2301      	movs	r3, #1
 80016fc:	607b      	str	r3, [r7, #4]
        break;
 80016fe:	e005      	b.n	800170c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001700:	2302      	movs	r3, #2
 8001702:	607b      	str	r3, [r7, #4]
        break;
 8001704:	e002      	b.n	800170c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
        break;
 800170a:	bf00      	nop
    }
  }
  return systick_source;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010
 8001720:	46020c00 	.word	0x46020c00

08001724 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800172c:	f7ff fe5a 	bl	80013e4 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e06b      	b.n	8001814 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d008      	beq.n	800175a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e05c      	b.n	8001814 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695a      	ldr	r2, [r3, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0204 	orr.w	r2, r2, #4
 8001768:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2205      	movs	r2, #5
 800176e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001772:	e020      	b.n	80017b6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001774:	f7ff fe36 	bl	80013e4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b05      	cmp	r3, #5
 8001780:	d919      	bls.n	80017b6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2203      	movs	r2, #3
 8001792:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800179a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a6:	2201      	movs	r2, #1
 80017a8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e02e      	b.n	8001814 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0d7      	beq.n	8001774 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0202 	orr.w	r2, r2, #2
 80017d2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2204      	movs	r2, #4
 80017d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80017e4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017fe:	2201      	movs	r2, #1
 8001800:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2200      	movs	r2, #0
 8001808:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e019      	b.n	8001862 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d004      	beq.n	8001844 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2220      	movs	r2, #32
 800183e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e00e      	b.n	8001862 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2204      	movs	r2, #4
 8001848:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001882:	e1ba      	b.n	8001bfa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 81aa 	beq.w	8001bf4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a55      	ldr	r2, [pc, #340]	@ (80019f8 <HAL_GPIO_Init+0x188>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d15d      	bne.n	8001964 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80018ae:	2201      	movs	r2, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80018d8:	4a48      	ldr	r2, [pc, #288]	@ (80019fc <HAL_GPIO_Init+0x18c>)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018e0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80018e2:	4a46      	ldr	r2, [pc, #280]	@ (80019fc <HAL_GPIO_Init+0x18c>)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	3208      	adds	r2, #8
 80018f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	220f      	movs	r2, #15
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	4013      	ands	r3, r2
 8001910:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220b      	movs	r2, #11
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	4313      	orrs	r3, r2
 8001924:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3208      	adds	r2, #8
 800192e:	69f9      	ldr	r1, [r7, #28]
 8001930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	4013      	ands	r3, r2
 800194a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2202      	movs	r2, #2
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	4313      	orrs	r3, r2
 800195a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	69fa      	ldr	r2, [r7, #28]
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e067      	b.n	8001a34 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x104>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b12      	cmp	r3, #18
 8001972:	d145      	bne.n	8001a00 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4013      	ands	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f003 020f 	and.w	r2, r3, #15
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	69f9      	ldr	r1, [r7, #28]
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e01e      	b.n	8001a34 <HAL_GPIO_Init+0x1c4>
 80019f6:	bf00      	nop
 80019f8:	46020000 	.word	0x46020000
 80019fc:	0800892c 	.word	0x0800892c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	69fa      	ldr	r2, [r7, #28]
 8001a32:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d00b      	beq.n	8001a54 <HAL_GPIO_Init+0x1e4>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d130      	bne.n	8001ab6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 0201 	and.w	r2, r3, #1
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d017      	beq.n	8001aee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d07c      	beq.n	8001bf4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001afa:	4a47      	ldr	r2, [pc, #284]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3318      	adds	r3, #24
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0a9a      	lsrs	r2, r3, #10
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_GPIO_Init+0x3ac>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	00d2      	lsls	r2, r2, #3
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b36:	4938      	ldr	r1, [pc, #224]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3318      	adds	r3, #24
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001b44:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001b68:	4a2b      	ldr	r2, [pc, #172]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001b92:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001b98:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b9e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001bbe:	4a16      	ldr	r2, [pc, #88]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_GPIO_Init+0x3a8>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f ae3d 	bne.w	8001884 <HAL_GPIO_Init+0x14>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	3724      	adds	r7, #36	@ 0x24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	46022000 	.word	0x46022000
 8001c1c:	002f7f7f 	.word	0x002f7f7f

08001c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e08d      	b.n	8001d4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe ff94 	bl	8000b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	@ 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e006      	b.n	8001ca8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ca6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d108      	bne.n	8001cc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	e007      	b.n	8001cd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69d9      	ldr	r1, [r3, #28]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
  }
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d138      	bne.n	8001e12 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e032      	b.n	8001e14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2224      	movs	r2, #36	@ 0x24
 8001dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ddc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	d139      	bne.n	8001eaa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e033      	b.n	8001eac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	@ 0x24
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eaa:	2302      	movs	r3, #2
  }
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e007      	b.n	8001ee6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	@ (8001ef4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0204 	bic.w	r2, r3, #4
 8001ede:	4905      	ldr	r1, [pc, #20]	@ (8001ef4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40030400 	.word	0x40030400

08001ef8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_ICACHE_Enable+0x1c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <HAL_ICACHE_Enable+0x1c>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40030400 	.word	0x40030400

08001f18 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001f20:	4b39      	ldr	r3, [pc, #228]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f28:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d10b      	bne.n	8001f4a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f38:	d905      	bls.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001f3a:	4b33      	ldr	r3, [pc, #204]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4a32      	ldr	r2, [pc, #200]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f44:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e057      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f50:	d90a      	bls.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001f52:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f64:	60d3      	str	r3, [r2, #12]
 8001f66:	e007      	b.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001f68:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001f70:	4925      	ldr	r1, [pc, #148]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001f78:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a24      	ldr	r2, [pc, #144]	@ (8002010 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	099b      	lsrs	r3, r3, #6
 8001f84:	2232      	movs	r2, #50	@ 0x32
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	4a21      	ldr	r2, [pc, #132]	@ (8002010 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	3301      	adds	r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001f96:	e002      	b.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f3      	bne.n	8001f98 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01b      	beq.n	8001fee <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	099b      	lsrs	r3, r3, #6
 8001fc2:	2232      	movs	r2, #50	@ 0x32
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001fd4:	e002      	b.n	8001fdc <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f3      	bne.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e000      	b.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	46020800 	.word	0x46020800
 800200c:	20000000 	.word	0x20000000
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <HAL_PWREx_GetVoltageRange+0x18>)
 800201a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	46020800 	.word	0x46020800

08002030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	@ 0x38
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	f000 bec8 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204a:	4b99      	ldr	r3, [pc, #612]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002054:	4b96      	ldr	r3, [pc, #600]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 816c 	beq.w	8002344 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800206c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <HAL_RCC_OscConfig+0x52>
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	2b0c      	cmp	r3, #12
 8002076:	f040 80de 	bne.w	8002236 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800207a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207c:	2b01      	cmp	r3, #1
 800207e:	f040 80da 	bne.w	8002236 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	f000 bea5 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002094:	4b86      	ldr	r3, [pc, #536]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d004      	beq.n	80020aa <HAL_RCC_OscConfig+0x7a>
 80020a0:	4b83      	ldr	r3, [pc, #524]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80020a8:	e005      	b.n	80020b6 <HAL_RCC_OscConfig+0x86>
 80020aa:	4b81      	ldr	r3, [pc, #516]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80020ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020b0:	041b      	lsls	r3, r3, #16
 80020b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d255      	bcs.n	8002166 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 f9d9 	bl	800347c <RCC_SetFlashLatencyFromMSIRange>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f000 be82 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80020d6:	4b76      	ldr	r3, [pc, #472]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4a75      	ldr	r2, [pc, #468]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80020dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020e0:	6093      	str	r3, [r2, #8]
 80020e2:	4b73      	ldr	r3, [pc, #460]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	4970      	ldr	r1, [pc, #448]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80020fc:	d309      	bcc.n	8002112 <HAL_RCC_OscConfig+0xe2>
 80020fe:	4b6c      	ldr	r3, [pc, #432]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f023 021f 	bic.w	r2, r3, #31
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4969      	ldr	r1, [pc, #420]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
 8002110:	e07e      	b.n	8002210 <HAL_RCC_OscConfig+0x1e0>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	da0a      	bge.n	8002130 <HAL_RCC_OscConfig+0x100>
 800211a:	4b65      	ldr	r3, [pc, #404]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	015b      	lsls	r3, r3, #5
 8002128:	4961      	ldr	r1, [pc, #388]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800212a:	4313      	orrs	r3, r2
 800212c:	60cb      	str	r3, [r1, #12]
 800212e:	e06f      	b.n	8002210 <HAL_RCC_OscConfig+0x1e0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002138:	d30a      	bcc.n	8002150 <HAL_RCC_OscConfig+0x120>
 800213a:	4b5d      	ldr	r3, [pc, #372]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	4959      	ldr	r1, [pc, #356]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800214a:	4313      	orrs	r3, r2
 800214c:	60cb      	str	r3, [r1, #12]
 800214e:	e05f      	b.n	8002210 <HAL_RCC_OscConfig+0x1e0>
 8002150:	4b57      	ldr	r3, [pc, #348]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	03db      	lsls	r3, r3, #15
 800215e:	4954      	ldr	r1, [pc, #336]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002160:	4313      	orrs	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
 8002164:	e054      	b.n	8002210 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002166:	4b52      	ldr	r3, [pc, #328]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4a51      	ldr	r2, [pc, #324]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800216c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002170:	6093      	str	r3, [r2, #8]
 8002172:	4b4f      	ldr	r3, [pc, #316]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	494c      	ldr	r1, [pc, #304]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002188:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800218c:	d309      	bcc.n	80021a2 <HAL_RCC_OscConfig+0x172>
 800218e:	4b48      	ldr	r3, [pc, #288]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f023 021f 	bic.w	r2, r3, #31
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4945      	ldr	r1, [pc, #276]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e028      	b.n	80021f4 <HAL_RCC_OscConfig+0x1c4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da0a      	bge.n	80021c0 <HAL_RCC_OscConfig+0x190>
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	493d      	ldr	r1, [pc, #244]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60cb      	str	r3, [r1, #12]
 80021be:	e019      	b.n	80021f4 <HAL_RCC_OscConfig+0x1c4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c8:	d30a      	bcc.n	80021e0 <HAL_RCC_OscConfig+0x1b0>
 80021ca:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	029b      	lsls	r3, r3, #10
 80021d8:	4935      	ldr	r1, [pc, #212]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	60cb      	str	r3, [r1, #12]
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0x1c4>
 80021e0:	4b33      	ldr	r3, [pc, #204]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	03db      	lsls	r3, r3, #15
 80021ee:	4930      	ldr	r1, [pc, #192]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10a      	bne.n	8002210 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 f93c 	bl	800347c <RCC_SetFlashLatencyFromMSIRange>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f000 bde5 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002210:	f001 f8de 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002214:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_OscConfig+0x284>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f859 	bl	80012d0 <HAL_InitTick>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 808a 	beq.w	8002342 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800222e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002232:	f000 bdd2 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d066      	beq.n	800230c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800223e:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1b      	ldr	r2, [pc, #108]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800224a:	f7ff f8cb 	bl	80013e4 <HAL_GetTick>
 800224e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002250:	e009      	b.n	8002266 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002252:	f7ff f8c7 	bl	80013e4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d902      	bls.n	8002266 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	f000 bdba 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ef      	beq.n	8002252 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002272:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4a0e      	ldr	r2, [pc, #56]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800227c:	6093      	str	r3, [r2, #8]
 800227e:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	4909      	ldr	r1, [pc, #36]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002298:	d30e      	bcc.n	80022b8 <HAL_RCC_OscConfig+0x288>
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f023 021f 	bic.w	r2, r3, #31
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4902      	ldr	r1, [pc, #8]	@ (80022b0 <HAL_RCC_OscConfig+0x280>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60cb      	str	r3, [r1, #12]
 80022ac:	e04a      	b.n	8002344 <HAL_RCC_OscConfig+0x314>
 80022ae:	bf00      	nop
 80022b0:	46020c00 	.word	0x46020c00
 80022b4:	20000004 	.word	0x20000004
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	2b00      	cmp	r3, #0
 80022be:	da0a      	bge.n	80022d6 <HAL_RCC_OscConfig+0x2a6>
 80022c0:	4b98      	ldr	r3, [pc, #608]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	4995      	ldr	r1, [pc, #596]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
 80022d4:	e036      	b.n	8002344 <HAL_RCC_OscConfig+0x314>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022de:	d30a      	bcc.n	80022f6 <HAL_RCC_OscConfig+0x2c6>
 80022e0:	4b90      	ldr	r3, [pc, #576]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	498d      	ldr	r1, [pc, #564]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e026      	b.n	8002344 <HAL_RCC_OscConfig+0x314>
 80022f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	03db      	lsls	r3, r3, #15
 8002304:	4987      	ldr	r1, [pc, #540]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
 800230a:	e01b      	b.n	8002344 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800230c:	4b85      	ldr	r3, [pc, #532]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a84      	ldr	r2, [pc, #528]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002318:	f7ff f864 	bl	80013e4 <HAL_GetTick>
 800231c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800231e:	e009      	b.n	8002334 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002320:	f7ff f860 	bl	80013e4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	f000 bd53 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002334:	4b7b      	ldr	r3, [pc, #492]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ef      	bne.n	8002320 <HAL_RCC_OscConfig+0x2f0>
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002342:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 808b 	beq.w	8002468 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002354:	2b08      	cmp	r3, #8
 8002356:	d005      	beq.n	8002364 <HAL_RCC_OscConfig+0x334>
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d109      	bne.n	8002372 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	2b03      	cmp	r3, #3
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d17d      	bne.n	8002468 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	f000 bd34 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x35a>
 800237c:	4b69      	ldr	r3, [pc, #420]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a68      	ldr	r2, [pc, #416]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	e041      	b.n	800240e <HAL_RCC_OscConfig+0x3de>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002392:	d112      	bne.n	80023ba <HAL_RCC_OscConfig+0x38a>
 8002394:	4b63      	ldr	r3, [pc, #396]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a62      	ldr	r2, [pc, #392]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b60      	ldr	r3, [pc, #384]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e029      	b.n	800240e <HAL_RCC_OscConfig+0x3de>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x3ba>
 80023c4:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a56      	ldr	r2, [pc, #344]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b54      	ldr	r3, [pc, #336]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a53      	ldr	r2, [pc, #332]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b51      	ldr	r3, [pc, #324]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e011      	b.n	800240e <HAL_RCC_OscConfig+0x3de>
 80023ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b48      	ldr	r3, [pc, #288]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800240c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d014      	beq.n	8002440 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002416:	f7fe ffe5 	bl	80013e4 <HAL_GetTick>
 800241a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241c:	e009      	b.n	8002432 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241e:	f7fe ffe1 	bl	80013e4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	@ 0x64
 800242a:	d902      	bls.n	8002432 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	f000 bcd4 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	4b3c      	ldr	r3, [pc, #240]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ef      	beq.n	800241e <HAL_RCC_OscConfig+0x3ee>
 800243e:	e013      	b.n	8002468 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002440:	f7fe ffd0 	bl	80013e4 <HAL_GetTick>
 8002444:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	e009      	b.n	800245c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe ffcc 	bl	80013e4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d902      	bls.n	800245c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	f000 bcbf 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245c:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ef      	bne.n	8002448 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05f      	beq.n	8002534 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	2b04      	cmp	r3, #4
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x456>
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d114      	bne.n	80024aa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002482:	2b02      	cmp	r3, #2
 8002484:	d111      	bne.n	80024aa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d102      	bne.n	8002494 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f000 bca3 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	4920      	ldr	r1, [pc, #128]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024a8:	e044      	b.n	8002534 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024be:	f7fe ff91 	bl	80013e4 <HAL_GetTick>
 80024c2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c4:	e009      	b.n	80024da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe ff8d 	bl	80013e4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d902      	bls.n	80024da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	f000 bc80 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ef      	beq.n	80024c6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	490b      	ldr	r1, [pc, #44]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	610b      	str	r3, [r1, #16]
 80024fa:	e01b      	b.n	8002534 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002506:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002508:	f7fe ff6c 	bl	80013e4 <HAL_GetTick>
 800250c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe ff68 	bl	80013e4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d904      	bls.n	8002528 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	f000 bc5b 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
 8002524:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	4baf      	ldr	r3, [pc, #700]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ed      	bne.n	8002510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80c8 	beq.w	80026d2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002548:	4ba7      	ldr	r3, [pc, #668]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d111      	bne.n	800257a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4ba4      	ldr	r3, [pc, #656]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800255c:	4aa2      	ldr	r2, [pc, #648]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002566:	4ba0      	ldr	r3, [pc, #640]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800257a:	4b9c      	ldr	r3, [pc, #624]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d119      	bne.n	80025ba <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002586:	4b99      	ldr	r3, [pc, #612]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	4a98      	ldr	r2, [pc, #608]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe ff27 	bl	80013e4 <HAL_GetTick>
 8002596:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe ff23 	bl	80013e4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d902      	bls.n	80025ae <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	f000 bc16 	b.w	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80025ae:	4b8f      	ldr	r3, [pc, #572]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ef      	beq.n	800259a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d05f      	beq.n	8002682 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80025c2:	4b89      	ldr	r3, [pc, #548]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80025c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d037      	beq.n	8002648 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e3f4      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01b      	beq.n	8002632 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80025fa:	4b7b      	ldr	r3, [pc, #492]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80025fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002600:	4a79      	ldr	r2, [pc, #484]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002602:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002606:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800260a:	f7fe feeb 	bl	80013e4 <HAL_GetTick>
 800260e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fee7 	bl	80013e4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b05      	cmp	r3, #5
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e3da      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002624:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800262a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002632:	4b6d      	ldr	r3, [pc, #436]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002638:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4969      	ldr	r1, [pc, #420]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002648:	4b67      	ldr	r3, [pc, #412]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 800264a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800264e:	4a66      	ldr	r2, [pc, #408]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002650:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002658:	f7fe fec4 	bl	80013e4 <HAL_GetTick>
 800265c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7fe fec0 	bl	80013e4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b05      	cmp	r3, #5
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e3b3      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002672:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x630>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002682:	4b59      	ldr	r3, [pc, #356]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002688:	4a57      	ldr	r2, [pc, #348]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 800268a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800268e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002692:	f7fe fea7 	bl	80013e4 <HAL_GetTick>
 8002696:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe fea3 	bl	80013e4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e396      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80026ac:	4b4e      	ldr	r3, [pc, #312]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80026ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b49      	ldr	r3, [pc, #292]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c8:	4a47      	ldr	r2, [pc, #284]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80026ca:	f023 0304 	bic.w	r3, r3, #4
 80026ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8111 	beq.w	8002902 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026e6:	4b40      	ldr	r3, [pc, #256]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f4:	4b3c      	ldr	r3, [pc, #240]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fa:	4a3b      	ldr	r2, [pc, #236]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002704:	4b38      	ldr	r3, [pc, #224]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002718:	4b34      	ldr	r3, [pc, #208]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d118      	bne.n	8002756 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	4a30      	ldr	r2, [pc, #192]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002730:	f7fe fe58 	bl	80013e4 <HAL_GetTick>
 8002734:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7fe fe54 	bl	80013e4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e347      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800274a:	4b28      	ldr	r3, [pc, #160]	@ (80027ec <HAL_RCC_OscConfig+0x7bc>)
 800274c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d01f      	beq.n	80027a2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800276e:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002784:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800278e:	e018      	b.n	80027c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002790:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002796:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80027a0:	e00f      	b.n	80027c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80027a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027a8:	4a0f      	ldr	r2, [pc, #60]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b8:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <HAL_RCC_OscConfig+0x7b8>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d057      	beq.n	800287a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80027ca:	f7fe fe0b 	bl	80013e4 <HAL_GetTick>
 80027ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d0:	e00e      	b.n	80027f0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fe07 	bl	80013e4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d905      	bls.n	80027f0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e2f8      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
 80027e8:	46020c00 	.word	0x46020c00
 80027ec:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80027f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0e9      	beq.n	80027d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01b      	beq.n	8002842 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800280a:	4b96      	ldr	r3, [pc, #600]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800280c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002810:	4a94      	ldr	r2, [pc, #592]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fde2 	bl	80013e4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e2d3      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002832:	4b8c      	ldr	r3, [pc, #560]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002838:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ed      	beq.n	800281c <HAL_RCC_OscConfig+0x7ec>
 8002840:	e053      	b.n	80028ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002842:	4b88      	ldr	r3, [pc, #544]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002848:	4a86      	ldr	r2, [pc, #536]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800284a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800284e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fdc6 	bl	80013e4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e2b7      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800286a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800286c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ed      	bne.n	8002854 <HAL_RCC_OscConfig+0x824>
 8002878:	e037      	b.n	80028ea <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800287a:	f7fe fdb3 	bl	80013e4 <HAL_GetTick>
 800287e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fdaf 	bl	80013e4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e2a0      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002898:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800289a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ed      	bne.n	8002882 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80028a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80028a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01a      	beq.n	80028ea <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80028b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80028b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80028bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fd8d 	bl	80013e4 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e27e      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80028dc:	4b61      	ldr	r3, [pc, #388]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80028de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ed      	bne.n	80028c6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80028f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80028fa:	f023 0304 	bic.w	r3, r3, #4
 80028fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d036      	beq.n	800297c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d019      	beq.n	800294a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002916:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800291c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002920:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002922:	f7fe fd5f 	bl	80013e4 <HAL_GetTick>
 8002926:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292a:	f7fe fd5b 	bl	80013e4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e24e      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800293c:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x8fa>
 8002948:	e018      	b.n	800297c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a45      	ldr	r2, [pc, #276]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002954:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002956:	f7fe fd45 	bl	80013e4 <HAL_GetTick>
 800295a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7fe fd41 	bl	80013e4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e234      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002970:	4b3c      	ldr	r3, [pc, #240]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d036      	beq.n	80029f6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	2b00      	cmp	r3, #0
 800298e:	d019      	beq.n	80029c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002990:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a33      	ldr	r2, [pc, #204]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800299a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800299c:	f7fe fd22 	bl	80013e4 <HAL_GetTick>
 80029a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80029a4:	f7fe fd1e 	bl	80013e4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e211      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80029b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x974>
 80029c2:	e018      	b.n	80029f6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80029c4:	4b27      	ldr	r3, [pc, #156]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a26      	ldr	r2, [pc, #152]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80029ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80029d0:	f7fe fd08 	bl	80013e4 <HAL_GetTick>
 80029d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80029d8:	f7fe fd04 	bl	80013e4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e1f7      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80029ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07f      	beq.n	8002b02 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d062      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	4a15      	ldr	r2, [pc, #84]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a14:	6093      	str	r3, [r2, #8]
 8002a16:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a22:	4910      	ldr	r1, [pc, #64]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a30:	d309      	bcc.n	8002a46 <HAL_RCC_OscConfig+0xa16>
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 021f 	bic.w	r2, r3, #31
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4909      	ldr	r1, [pc, #36]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
 8002a44:	e02a      	b.n	8002a9c <HAL_RCC_OscConfig+0xa6c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	da0c      	bge.n	8002a68 <HAL_RCC_OscConfig+0xa38>
 8002a4e:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	015b      	lsls	r3, r3, #5
 8002a5c:	4901      	ldr	r1, [pc, #4]	@ (8002a64 <HAL_RCC_OscConfig+0xa34>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60cb      	str	r3, [r1, #12]
 8002a62:	e01b      	b.n	8002a9c <HAL_RCC_OscConfig+0xa6c>
 8002a64:	46020c00 	.word	0x46020c00
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a70:	d30a      	bcc.n	8002a88 <HAL_RCC_OscConfig+0xa58>
 8002a72:	4ba1      	ldr	r3, [pc, #644]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	499d      	ldr	r1, [pc, #628]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60cb      	str	r3, [r1, #12]
 8002a86:	e009      	b.n	8002a9c <HAL_RCC_OscConfig+0xa6c>
 8002a88:	4b9b      	ldr	r3, [pc, #620]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	03db      	lsls	r3, r3, #15
 8002a96:	4998      	ldr	r1, [pc, #608]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002a9c:	4b96      	ldr	r3, [pc, #600]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a95      	ldr	r2, [pc, #596]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002aa2:	f043 0310 	orr.w	r3, r3, #16
 8002aa6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002aa8:	f7fe fc9c 	bl	80013e4 <HAL_GetTick>
 8002aac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ab0:	f7fe fc98 	bl	80013e4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e18b      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xa80>
 8002ace:	e018      	b.n	8002b02 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002ad0:	4b89      	ldr	r3, [pc, #548]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a88      	ldr	r2, [pc, #544]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002ad6:	f023 0310 	bic.w	r3, r3, #16
 8002ada:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002adc:	f7fe fc82 	bl	80013e4 <HAL_GetTick>
 8002ae0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002ae4:	f7fe fc7e 	bl	80013e4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e171      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002af6:	4b80      	ldr	r3, [pc, #512]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8166 	beq.w	8002dd8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b12:	4b79      	ldr	r3, [pc, #484]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	f000 80f2 	beq.w	8002d04 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	f040 80c5 	bne.w	8002cb4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b73      	ldr	r3, [pc, #460]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a72      	ldr	r2, [pc, #456]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b34:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002b36:	f7fe fc55 	bl	80013e4 <HAL_GetTick>
 8002b3a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fc51 	bl	80013e4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e144      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b50:	4b69      	ldr	r3, [pc, #420]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5c:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d111      	bne.n	8002b8e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b63      	ldr	r3, [pc, #396]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b70:	4a61      	ldr	r2, [pc, #388]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cfc <HAL_RCC_OscConfig+0xccc>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b9a:	d102      	bne.n	8002ba2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002ba2:	4b56      	ldr	r3, [pc, #344]	@ (8002cfc <HAL_RCC_OscConfig+0xccc>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4a55      	ldr	r2, [pc, #340]	@ (8002cfc <HAL_RCC_OscConfig+0xccc>)
 8002ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bac:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002bae:	4b52      	ldr	r3, [pc, #328]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bc2:	3a01      	subs	r2, #1
 8002bc4:	0212      	lsls	r2, r2, #8
 8002bc6:	4311      	orrs	r1, r2
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	494a      	ldr	r1, [pc, #296]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002bd4:	4b48      	ldr	r3, [pc, #288]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bd8:	4b49      	ldr	r3, [pc, #292]	@ (8002d00 <HAL_RCC_OscConfig+0xcd0>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002be0:	3a01      	subs	r2, #1
 8002be2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002bea:	3a01      	subs	r2, #1
 8002bec:	0252      	lsls	r2, r2, #9
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	0412      	lsls	r2, r2, #16
 8002bfa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002c04:	3a01      	subs	r2, #1
 8002c06:	0612      	lsls	r2, r2, #24
 8002c08:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	493a      	ldr	r1, [pc, #232]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002c14:	4b38      	ldr	r3, [pc, #224]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	4a37      	ldr	r2, [pc, #220]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c1a:	f023 0310 	bic.w	r3, r3, #16
 8002c1e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	4a34      	ldr	r2, [pc, #208]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002c2a:	4b33      	ldr	r3, [pc, #204]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	4a32      	ldr	r2, [pc, #200]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c30:	f043 0310 	orr.w	r3, r3, #16
 8002c34:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3a:	f023 020c 	bic.w	r2, r3, #12
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	492d      	ldr	r1, [pc, #180]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002c50:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_RCC_OscConfig+0xccc>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a29      	ldr	r2, [pc, #164]	@ (8002cfc <HAL_RCC_OscConfig+0xccc>)
 8002c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002c5c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b24      	ldr	r3, [pc, #144]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6a:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b20      	ldr	r3, [pc, #128]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1f      	ldr	r2, [pc, #124]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c80:	f7fe fbb0 	bl	80013e4 <HAL_GetTick>
 8002c84:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fbac 	bl	80013e4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e09f      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c9a:	4b17      	ldr	r3, [pc, #92]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ca6:	4b14      	ldr	r3, [pc, #80]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	4a13      	ldr	r2, [pc, #76]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cb0:	6293      	str	r3, [r2, #40]	@ 0x28
 8002cb2:	e091      	b.n	8002dd8 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002cc0:	f7fe fb90 	bl	80013e4 <HAL_GetTick>
 8002cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fb8c 	bl	80013e4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e07f      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002cda:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002ce6:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	4a03      	ldr	r2, [pc, #12]	@ (8002cf8 <HAL_RCC_OscConfig+0xcc8>)
 8002cec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002cf0:	f023 0303 	bic.w	r3, r3, #3
 8002cf4:	6293      	str	r3, [r2, #40]	@ 0x28
 8002cf6:	e06f      	b.n	8002dd8 <HAL_RCC_OscConfig+0xda8>
 8002cf8:	46020c00 	.word	0x46020c00
 8002cfc:	46020800 	.word	0x46020800
 8002d00:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002d04:	4b37      	ldr	r3, [pc, #220]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d039      	beq.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d132      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d129      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d122      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d111      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d108      	bne.n	8002d8c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	0e1b      	lsrs	r3, r3, #24
 8002d7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e024      	b.n	8002dda <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d01a      	beq.n	8002dd8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002da2:	4b10      	ldr	r3, [pc, #64]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	4a0f      	ldr	r2, [pc, #60]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002da8:	f023 0310 	bic.w	r3, r3, #16
 8002dac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe fb19 	bl	80013e4 <HAL_GetTick>
 8002db2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8002db4:	bf00      	nop
 8002db6:	f7fe fb15 	bl	80013e4 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d0f9      	beq.n	8002db6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	4a07      	ldr	r2, [pc, #28]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <HAL_RCC_OscConfig+0xdb4>)
 8002dd2:	f043 0310 	orr.w	r3, r3, #16
 8002dd6:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3738      	adds	r7, #56	@ 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	46020c00 	.word	0x46020c00

08002de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e1d9      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800306c <HAL_RCC_ClockConfig+0x284>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d910      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b98      	ldr	r3, [pc, #608]	@ (800306c <HAL_RCC_ClockConfig+0x284>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 020f 	bic.w	r2, r3, #15
 8002e12:	4996      	ldr	r1, [pc, #600]	@ (800306c <HAL_RCC_ClockConfig+0x284>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b94      	ldr	r3, [pc, #592]	@ (800306c <HAL_RCC_ClockConfig+0x284>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e1c1      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d908      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002e48:	4b89      	ldr	r3, [pc, #548]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	4986      	ldr	r1, [pc, #536]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	4b81      	ldr	r3, [pc, #516]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d909      	bls.n	8002e8c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002e78:	4b7d      	ldr	r3, [pc, #500]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	497a      	ldr	r1, [pc, #488]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b74      	ldr	r3, [pc, #464]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b71      	ldr	r3, [pc, #452]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	496e      	ldr	r1, [pc, #440]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	4b69      	ldr	r3, [pc, #420]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d908      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002ed6:	4b66      	ldr	r3, [pc, #408]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 020f 	bic.w	r2, r3, #15
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4963      	ldr	r1, [pc, #396]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80d2 	beq.w	800309a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d143      	bne.n	8002f8a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b5b      	ldr	r3, [pc, #364]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d110      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	4b57      	ldr	r3, [pc, #348]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f16:	4a56      	ldr	r2, [pc, #344]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002f20:	4b53      	ldr	r3, [pc, #332]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8002f32:	f7fe fa57 	bl	80013e4 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002f38:	4b4e      	ldr	r3, [pc, #312]	@ (8003074 <HAL_RCC_ClockConfig+0x28c>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00f      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002f46:	f7fe fa4d 	bl	80013e4 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e12b      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002f58:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <HAL_RCC_ClockConfig+0x28c>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b41      	ldr	r3, [pc, #260]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f70:	4a3f      	ldr	r2, [pc, #252]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d121      	bne.n	8002fca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e112      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e106      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002faa:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0fa      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fba:	4b2d      	ldr	r3, [pc, #180]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0f2      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8002fca:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f023 0203 	bic.w	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	4926      	ldr	r1, [pc, #152]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002fdc:	f7fe fa02 	bl	80013e4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d112      	bne.n	8003010 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe f9fa 	bl	80013e4 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0d6      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003002:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_ClockConfig+0x204>
 800300e:	e044      	b.n	800309a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d112      	bne.n	800303e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301a:	f7fe f9e3 	bl	80013e4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0bf      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003030:	4b0f      	ldr	r3, [pc, #60]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_ClockConfig+0x232>
 800303c:	e02d      	b.n	800309a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d123      	bne.n	800308e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7fe f9cc 	bl	80013e4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e0a8      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800305e:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <HAL_RCC_ClockConfig+0x288>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ee      	bne.n	8003048 <HAL_RCC_ClockConfig+0x260>
 800306a:	e016      	b.n	800309a <HAL_RCC_ClockConfig+0x2b2>
 800306c:	40022000 	.word	0x40022000
 8003070:	46020c00 	.word	0x46020c00
 8003074:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe f9b4 	bl	80013e4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e090      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800308e:	4b4a      	ldr	r3, [pc, #296]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d1ee      	bne.n	8003078 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d208      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80030b6:	4b40      	ldr	r3, [pc, #256]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 020f 	bic.w	r2, r3, #15
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	493d      	ldr	r1, [pc, #244]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b3c      	ldr	r3, [pc, #240]	@ (80031bc <HAL_RCC_ClockConfig+0x3d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d210      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b39      	ldr	r3, [pc, #228]	@ (80031bc <HAL_RCC_ClockConfig+0x3d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 020f 	bic.w	r2, r3, #15
 80030de:	4937      	ldr	r1, [pc, #220]	@ (80031bc <HAL_RCC_ClockConfig+0x3d4>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b35      	ldr	r3, [pc, #212]	@ (80031bc <HAL_RCC_ClockConfig+0x3d4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e05b      	b.n	80031b0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003110:	429a      	cmp	r2, r3
 8003112:	d208      	bcs.n	8003126 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003114:	4b28      	ldr	r3, [pc, #160]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4925      	ldr	r1, [pc, #148]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d012      	beq.n	8003158 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	4b20      	ldr	r3, [pc, #128]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003140:	429a      	cmp	r2, r3
 8003142:	d209      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003144:	4b1c      	ldr	r3, [pc, #112]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4919      	ldr	r1, [pc, #100]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003170:	429a      	cmp	r2, r3
 8003172:	d208      	bcs.n	8003186 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003174:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	490d      	ldr	r1, [pc, #52]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_RCC_ClockConfig+0x3d0>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	490a      	ldr	r1, [pc, #40]	@ (80031c0 <HAL_RCC_ClockConfig+0x3d8>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x3dc>)
 800319e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031a0:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <HAL_RCC_ClockConfig+0x3e0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe f893 	bl	80012d0 <HAL_InitTick>
 80031aa:	4603      	mov	r3, r0
 80031ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	46020c00 	.word	0x46020c00
 80031bc:	40022000 	.word	0x40022000
 80031c0:	080088d4 	.word	0x080088d4
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b08b      	sub	sp, #44	@ 0x2c
 80031d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b78      	ldr	r3, [pc, #480]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e4:	4b75      	ldr	r3, [pc, #468]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d121      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d11e      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003200:	4b6e      	ldr	r3, [pc, #440]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800320c:	4b6b      	ldr	r3, [pc, #428]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800320e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003212:	0b1b      	lsrs	r3, r3, #12
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	e005      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800321c:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	0f1b      	lsrs	r3, r3, #28
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003228:	4a65      	ldr	r2, [pc, #404]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d110      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800323c:	e00d      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800323e:	4b5f      	ldr	r3, [pc, #380]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b04      	cmp	r3, #4
 8003248:	d102      	bne.n	8003250 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800324a:	4b5e      	ldr	r3, [pc, #376]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	e004      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d101      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003256:	4b5b      	ldr	r3, [pc, #364]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003258:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	f040 80a5 	bne.w	80033ac <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003262:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800326c:	4b53      	ldr	r3, [pc, #332]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800327a:	4b50      	ldr	r3, [pc, #320]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003286:	4b4d      	ldr	r3, [pc, #308]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	08db      	lsrs	r3, r3, #3
 800328c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	fb02 f303 	mul.w	r3, r2, r3
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d003      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0xe4>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d022      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x128>
 80032ae:	e043      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80033c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b3e      	ldr	r3, [pc, #248]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80032c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80032d2:	ed97 6a01 	vldr	s12, [r7, #4]
 80032d6:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80033cc <HAL_RCC_GetSysClockFreq+0x200>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032f2:	e046      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80033c8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003316:	ed97 6a01 	vldr	s12, [r7, #4]
 800331a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80033cc <HAL_RCC_GetSysClockFreq+0x200>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003336:	e024      	b.n	8003382 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003350:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003360:	ed97 6a01 	vldr	s12, [r7, #4]
 8003364:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80033cc <HAL_RCC_GetSysClockFreq+0x200>
 8003368:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800336c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003374:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003380:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003382:	4b0e      	ldr	r3, [pc, #56]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003386:	0e1b      	lsrs	r3, r3, #24
 8003388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800338c:	3301      	adds	r3, #1
 800338e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800339a:	edd7 6a07 	vldr	s13, [r7, #28]
 800339e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a6:	ee17 3a90 	vmov	r3, s15
 80033aa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80033ac:	6a3b      	ldr	r3, [r7, #32]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	372c      	adds	r7, #44	@ 0x2c
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	46020c00 	.word	0x46020c00
 80033c0:	080088ec 	.word	0x080088ec
 80033c4:	00f42400 	.word	0x00f42400
 80033c8:	4b742400 	.word	0x4b742400
 80033cc:	46000000 	.word	0x46000000

080033d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033d4:	f7ff fefa 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <HAL_RCC_GetHCLKFreq+0x28>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4906      	ldr	r1, [pc, #24]	@ (80033fc <HAL_RCC_GetHCLKFreq+0x2c>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a05      	ldr	r2, [pc, #20]	@ (8003400 <HAL_RCC_GetHCLKFreq+0x30>)
 80033ec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80033ee:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <HAL_RCC_GetHCLKFreq+0x30>)
 80033f0:	681b      	ldr	r3, [r3, #0]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	46020c00 	.word	0x46020c00
 80033fc:	080088d4 	.word	0x080088d4
 8003400:	20000000 	.word	0x20000000

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003408:	f7ff ffe2 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	@ (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	46020c00 	.word	0x46020c00
 8003428:	080088e4 	.word	0x080088e4

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8003430:	f7ff ffce 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	@ (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	46020c00 	.word	0x46020c00
 8003450:	080088e4 	.word	0x080088e4

08003454 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8003458:	f7ff ffba 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_RCC_GetPCLK3Freq+0x20>)
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	@ (8003478 <HAL_RCC_GetPCLK3Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	46020c00 	.word	0x46020c00
 8003478:	080088e4 	.word	0x080088e4

0800347c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003484:	4b3e      	ldr	r3, [pc, #248]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003492:	f7fe fdbf 	bl	8002014 <HAL_PWREx_GetVoltageRange>
 8003496:	6178      	str	r0, [r7, #20]
 8003498:	e019      	b.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a0:	4a37      	ldr	r2, [pc, #220]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80034aa:	4b35      	ldr	r3, [pc, #212]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b8:	f7fe fdac 	bl	8002014 <HAL_PWREx_GetVoltageRange>
 80034bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003580 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80034c6:	f023 0304 	bic.w	r3, r3, #4
 80034ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034d4:	d003      	beq.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x62>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034dc:	d109      	bne.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034e4:	d202      	bcs.n	80034ec <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80034e6:	2301      	movs	r3, #1
 80034e8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80034ea:	e033      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80034f0:	e030      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f8:	d208      	bcs.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003500:	d102      	bne.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003502:	2303      	movs	r3, #3
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e025      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e035      	b.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003512:	d90f      	bls.n	8003534 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003520:	d902      	bls.n	8003528 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e015      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003528:	2301      	movs	r3, #1
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	e012      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e00f      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800353a:	d109      	bne.n	8003550 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003542:	d102      	bne.n	800354a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003544:	2301      	movs	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e004      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800354a:	2302      	movs	r3, #2
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	e001      	b.n	8003554 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003550:	2301      	movs	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003554:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 020f 	bic.w	r2, r3, #15
 800355c:	4909      	ldr	r1, [pc, #36]	@ (8003584 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003564:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	46020c00 	.word	0x46020c00
 8003584:	40022000 	.word	0x40022000

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b0ba      	sub	sp, #232	@ 0xe8
 800358e:	af00      	add	r7, sp, #0
 8003590:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003594:	2300      	movs	r3, #0
 8003596:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800359a:	2300      	movs	r3, #0
 800359c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f002 0401 	and.w	r4, r2, #1
 80035ac:	2500      	movs	r5, #0
 80035ae:	ea54 0305 	orrs.w	r3, r4, r5
 80035b2:	d00b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80035b4:	4bcb      	ldr	r3, [pc, #812]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ba:	f023 0103 	bic.w	r1, r3, #3
 80035be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	4ac7      	ldr	r2, [pc, #796]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f002 0802 	and.w	r8, r2, #2
 80035d8:	f04f 0900 	mov.w	r9, #0
 80035dc:	ea58 0309 	orrs.w	r3, r8, r9
 80035e0:	d00b      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80035e2:	4bc0      	ldr	r3, [pc, #768]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035e8:	f023 010c 	bic.w	r1, r3, #12
 80035ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f2:	4abc      	ldr	r2, [pc, #752]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f002 0a04 	and.w	sl, r2, #4
 8003606:	f04f 0b00 	mov.w	fp, #0
 800360a:	ea5a 030b 	orrs.w	r3, sl, fp
 800360e:	d00b      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003610:	4bb4      	ldr	r3, [pc, #720]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003616:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800361a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	4ab0      	ldr	r2, [pc, #704]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003622:	430b      	orrs	r3, r1
 8003624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f002 0308 	and.w	r3, r2, #8
 8003634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800363e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003642:	460b      	mov	r3, r1
 8003644:	4313      	orrs	r3, r2
 8003646:	d00b      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003648:	4ba6      	ldr	r3, [pc, #664]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800364e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	4aa2      	ldr	r2, [pc, #648]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800365a:	430b      	orrs	r3, r1
 800365c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f002 0310 	and.w	r3, r2, #16
 800366c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003676:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800367a:	460b      	mov	r3, r1
 800367c:	4313      	orrs	r3, r2
 800367e:	d00b      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003680:	4b98      	ldr	r3, [pc, #608]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003686:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800368a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	4a94      	ldr	r2, [pc, #592]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003692:	430b      	orrs	r3, r1
 8003694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 0320 	and.w	r3, r2, #32
 80036a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d00b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80036b8:	4b8a      	ldr	r3, [pc, #552]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036be:	f023 0107 	bic.w	r1, r3, #7
 80036c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c8:	4a86      	ldr	r2, [pc, #536]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d00b      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80036f0:	4b7c      	ldr	r3, [pc, #496]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036f6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003700:	4a78      	ldr	r2, [pc, #480]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003702:	430b      	orrs	r3, r1
 8003704:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800371e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d00b      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003728:	4b6e      	ldr	r3, [pc, #440]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800372a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800372e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003738:	4a6a      	ldr	r2, [pc, #424]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800373a:	430b      	orrs	r3, r1
 800373c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800374c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003756:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d00b      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003760:	4b60      	ldr	r3, [pc, #384]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003766:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800376a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003770:	4a5c      	ldr	r2, [pc, #368]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003772:	430b      	orrs	r3, r1
 8003774:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800378e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d00b      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003798:	4b52      	ldr	r3, [pc, #328]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800379a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800379e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80037a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a8:	4a4e      	ldr	r2, [pc, #312]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80037bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80037ca:	460b      	mov	r3, r1
 80037cc:	4313      	orrs	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80037d0:	4b44      	ldr	r3, [pc, #272]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037d6:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80037da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037e0:	4a40      	ldr	r2, [pc, #256]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037e2:	430b      	orrs	r3, r1
 80037e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80037f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80037fe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d00b      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003808:	4b36      	ldr	r3, [pc, #216]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003818:	4a32      	ldr	r2, [pc, #200]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381a:	430b      	orrs	r3, r1
 800381c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003820:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800382c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003836:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d00c      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003840:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003846:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800384a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800384e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003852:	4a24      	ldr	r2, [pc, #144]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003854:	430b      	orrs	r3, r1
 8003856:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800385a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003866:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003868:	2300      	movs	r3, #0
 800386a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800386c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003870:	460b      	mov	r3, r1
 8003872:	4313      	orrs	r3, r2
 8003874:	d04f      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	2b80      	cmp	r3, #128	@ 0x80
 8003880:	d02d      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003882:	2b80      	cmp	r3, #128	@ 0x80
 8003884:	d827      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003886:	2b60      	cmp	r3, #96	@ 0x60
 8003888:	d02e      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800388a:	2b60      	cmp	r3, #96	@ 0x60
 800388c:	d823      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	d006      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003892:	2b40      	cmp	r3, #64	@ 0x40
 8003894:	d81f      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x326>
 800389a:	2b20      	cmp	r3, #32
 800389c:	d011      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800389e:	e01a      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038a0:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038ac:	e01d      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b2:	3308      	adds	r3, #8
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 fa17 	bl	8005ce8 <RCCEx_PLL2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038c0:	e013      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038c6:	332c      	adds	r3, #44	@ 0x2c
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 faa5 	bl	8005e18 <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038d4:	e009      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80038dc:	e005      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80038de:	bf00      	nop
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x362>
 80038e2:	bf00      	nop
 80038e4:	46020c00 	.word	0x46020c00
        break;
 80038e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10d      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80038f2:	4bb6      	ldr	r3, [pc, #728]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80038f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038f8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80038fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003904:	4ab1      	ldr	r2, [pc, #708]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003906:	430b      	orrs	r3, r1
 8003908:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003912:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003922:	673b      	str	r3, [r7, #112]	@ 0x70
 8003924:	2300      	movs	r3, #0
 8003926:	677b      	str	r3, [r7, #116]	@ 0x74
 8003928:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d053      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393e:	d033      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003944:	d82c      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800394a:	d02f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x424>
 800394c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003950:	d826      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003956:	d008      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8003958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800395c:	d820      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8003962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003966:	d011      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003968:	e01a      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800396a:	4b98      	ldr	r3, [pc, #608]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	4a97      	ldr	r2, [pc, #604]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003976:	e01a      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800397c:	3308      	adds	r3, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f002 f9b2 	bl	8005ce8 <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800398a:	e010      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800398c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003990:	332c      	adds	r3, #44	@ 0x2c
 8003992:	4618      	mov	r0, r3
 8003994:	f002 fa40 	bl	8005e18 <RCCEx_PLL3_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800399e:	e006      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039a6:	e002      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80039ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10d      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80039b6:	4b85      	ldr	r3, [pc, #532]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80039b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80039c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c8:	4a80      	ldr	r2, [pc, #512]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80039d0:	e003      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80039da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039e8:	2300      	movs	r3, #0
 80039ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80039f0:	460b      	mov	r3, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	d046      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80039f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003a02:	d028      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003a04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003a08:	d821      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003a0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a0e:	d022      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a14:	d81b      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003a16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a1a:	d01c      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003a1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a20:	d815      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2c:	d80f      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d011      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a36:	d00e      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8003a38:	e009      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3e:	3308      	adds	r3, #8
 8003a40:	4618      	mov	r0, r3
 8003a42:	f002 f951 	bl	8005ce8 <RCCEx_PLL2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a4c:	e004      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003a54:	e000      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8003a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a58:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10d      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003a60:	4b5a      	ldr	r3, [pc, #360]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003a62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a66:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a72:	4a56      	ldr	r2, [pc, #344]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a7a:	e003      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a80:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a92:	2300      	movs	r3, #0
 8003a94:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a96:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	d03f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003aa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d81e      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003aac:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003af3 	.word	0x08003af3
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003ad7 	.word	0x08003ad7
 8003ac0:	08003af3 	.word	0x08003af3
 8003ac4:	08003af3 	.word	0x08003af3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ac8:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	4a3f      	ldr	r2, [pc, #252]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003ad4:	e00e      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ada:	332c      	adds	r3, #44	@ 0x2c
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 f99b 	bl	8005e18 <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003ae8:	e004      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8003af2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003af4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003afc:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003afe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b02:	f023 0107 	bic.w	r1, r3, #7
 8003b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b1c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d04d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b48:	d028      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8003b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b4e:	d821      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003b50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b54:	d024      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003b56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b5a:	d81b      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b60:	d00e      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8003b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b66:	d815      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b70:	d110      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b72:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	4a15      	ldr	r2, [pc, #84]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003b7e:	e012      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b84:	332c      	adds	r3, #44	@ 0x2c
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 f946 	bl	8005e18 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b92:	e008      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8003ba4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003ba6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d110      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc0:	4a02      	ldr	r2, [pc, #8]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003bca:	bf00      	nop
 8003bcc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003be4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003be6:	2300      	movs	r3, #0
 8003be8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f000 80b5 	beq.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d113      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	4b9a      	ldr	r3, [pc, #616]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c10:	4a98      	ldr	r2, [pc, #608]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c1a:	4b96      	ldr	r3, [pc, #600]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c32:	4b91      	ldr	r3, [pc, #580]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	4a90      	ldr	r2, [pc, #576]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c3e:	f7fd fbd1 	bl	80013e4 <HAL_GetTick>
 8003c42:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c46:	e00b      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fd fbcc 	bl	80013e4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d903      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c5e:	e005      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c60:	4b85      	ldr	r3, [pc, #532]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ed      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003c6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d165      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c74:	4b7f      	ldr	r3, [pc, #508]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d023      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01b      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c9a:	4b76      	ldr	r3, [pc, #472]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ca8:	4b72      	ldr	r3, [pc, #456]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cae:	4a71      	ldr	r2, [pc, #452]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb8:	4b6e      	ldr	r3, [pc, #440]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cbe:	4a6d      	ldr	r2, [pc, #436]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d019      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fd fb81 	bl	80013e4 <HAL_GetTick>
 8003ce2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce6:	e00d      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fb7c 	bl	80013e4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d903      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8003d02:	e006      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d04:	4b5b      	ldr	r3, [pc, #364]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0ea      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8003d12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10d      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003d1a:	4b56      	ldr	r3, [pc, #344]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003d2c:	4a51      	ldr	r2, [pc, #324]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d3a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003d3e:	e003      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003d44:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d48:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b48      	ldr	r3, [pc, #288]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d56:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d6e:	2300      	movs	r3, #0
 8003d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d042      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d88:	d022      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8003d8a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003d8e:	d81b      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d94:	d011      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x832>
 8003d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d9a:	d815      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d019      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003da4:	d110      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003daa:	3308      	adds	r3, #8
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 ff9b 	bl	8005ce8 <RCCEx_PLL2_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003db8:	e00d      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dba:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003dc6:	e006      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8003dd4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003dd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10d      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8003dde:	4b25      	ldr	r3, [pc, #148]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003de4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003df0:	4a20      	ldr	r2, [pc, #128]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003df2:	430b      	orrs	r3, r1
 8003df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003dfe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e10:	2300      	movs	r3, #0
 8003e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	d032      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2a:	d00b      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e30:	d804      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3a:	d007      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e42:	e004      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003e4c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d112      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003e56:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e5c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e68:	4a02      	ldr	r2, [pc, #8]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e70:	e008      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8003e72:	bf00      	nop
 8003e74:	46020c00 	.word	0x46020c00
 8003e78:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e80:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003e84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e92:	2300      	movs	r3, #0
 8003e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d00c      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8003ea0:	4b98      	ldr	r3, [pc, #608]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003ea2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ea6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8003eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eb2:	4a94      	ldr	r2, [pc, #592]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec8:	2300      	movs	r3, #0
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ecc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d019      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ee4:	4b87      	ldr	r3, [pc, #540]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	4a86      	ldr	r2, [pc, #536]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eee:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003ef0:	4b84      	ldr	r3, [pc, #528]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003ef2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ef6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f02:	4a80      	ldr	r2, [pc, #512]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f20:	460b      	mov	r3, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003f26:	4b77      	ldr	r3, [pc, #476]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f2c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f38:	4972      	ldr	r1, [pc, #456]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f4c:	623b      	str	r3, [r7, #32]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d00c      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003f5c:	4b69      	ldr	r3, [pc, #420]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f6e:	4965      	ldr	r1, [pc, #404]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d00c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003f92:	4b5c      	ldr	r3, [pc, #368]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f98:	f023 0218 	bic.w	r2, r3, #24
 8003f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003fa4:	4957      	ldr	r1, [pc, #348]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d032      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8003fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	4a4a      	ldr	r2, [pc, #296]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fe0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8003fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fee:	d108      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fe76 	bl	8005ce8 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 8004002:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800400a:	4b3e      	ldr	r3, [pc, #248]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800400c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004010:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800401c:	4939      	ldr	r1, [pc, #228]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004024:	e003      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004026:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800402a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800402e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004044:	460b      	mov	r3, r1
 8004046:	4313      	orrs	r3, r2
 8004048:	d03a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800404a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004056:	d00e      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8004058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800405c:	d815      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d017      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004066:	d110      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004068:	4b26      	ldr	r3, [pc, #152]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	4a25      	ldr	r2, [pc, #148]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800406e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004072:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004074:	e00e      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800407a:	3308      	adds	r3, #8
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fe33 	bl	8005ce8 <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8004092:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004094:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800409c:	4b19      	ldr	r3, [pc, #100]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800409e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ae:	4915      	ldr	r1, [pc, #84]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80040bc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80040c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d00c      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80040dc:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040e2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80040e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040ee:	4905      	ldr	r1, [pc, #20]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80040f6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	37e8      	adds	r7, #232	@ 0xe8
 80040fe:	46bd      	mov	sp, r7
 8004100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004104:	46020c00 	.word	0x46020c00

08004108 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	@ 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004110:	4ba6      	ldr	r3, [pc, #664]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004118:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800411a:	4ba4      	ldr	r3, [pc, #656]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004124:	4ba1      	ldr	r3, [pc, #644]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3301      	adds	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004132:	4b9e      	ldr	r3, [pc, #632]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	091b      	lsrs	r3, r3, #4
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800413e:	4b9b      	ldr	r3, [pc, #620]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	08db      	lsrs	r3, r3, #3
 8004144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d062      	beq.n	8004226 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b03      	cmp	r3, #3
 8004164:	f200 8081 	bhi.w	800426a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d024      	beq.n	80041b8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d17a      	bne.n	800426a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80043b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b89      	ldr	r3, [pc, #548]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004196:	ed97 6a02 	vldr	s12, [r7, #8]
 800419a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80043b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041b6:	e08f      	b.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80041b8:	4b7c      	ldr	r3, [pc, #496]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80041c4:	4b79      	ldr	r3, [pc, #484]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	0f1b      	lsrs	r3, r3, #28
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	e006      	b.n	80041de <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80041d0:	4b76      	ldr	r3, [pc, #472]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80041d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	0f1b      	lsrs	r3, r3, #28
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	4a76      	ldr	r2, [pc, #472]	@ (80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	ee07 3a90 	vmov	s15, r3
 80041e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004204:	ed97 6a02 	vldr	s12, [r7, #8]
 8004208:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80043b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800420c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004214:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004218:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004224:	e058      	b.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004230:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8004234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004238:	4b5c      	ldr	r3, [pc, #368]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800423a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004240:	ee07 3a90 	vmov	s15, r3
 8004244:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004248:	ed97 6a02 	vldr	s12, [r7, #8]
 800424c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80043b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8004250:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004254:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8004258:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800425c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004264:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004268:	e036      	b.n	80042d8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800426a:	4b50      	ldr	r3, [pc, #320]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8004276:	4b4d      	ldr	r3, [pc, #308]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0f1b      	lsrs	r3, r3, #28
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8004282:	4b4a      	ldr	r3, [pc, #296]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	0f1b      	lsrs	r3, r3, #28
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	4a49      	ldr	r2, [pc, #292]	@ (80043b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8004292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80043b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80042d8:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d017      	beq.n	8004314 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80042e4:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	0a5b      	lsrs	r3, r3, #9
 80042ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80042f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80042fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430a:	ee17 2a90 	vmov	r2, s15
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e002      	b.n	800431a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800431c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004326:	4b21      	ldr	r3, [pc, #132]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004338:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800433c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004340:	edd7 6a07 	vldr	s13, [r7, #28]
 8004344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434c:	ee17 2a90 	vmov	r2, s15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	e002      	b.n	800435c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d017      	beq.n	8004398 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004368:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800436a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436c:	0e1b      	lsrs	r3, r3, #24
 800436e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800437a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800437e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004382:	edd7 6a07 	vldr	s13, [r7, #28]
 8004386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438e:	ee17 2a90 	vmov	r2, s15
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004396:	e002      	b.n	800439e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
}
 800439e:	bf00      	nop
 80043a0:	3724      	adds	r7, #36	@ 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	46020c00 	.word	0x46020c00
 80043b0:	4b742400 	.word	0x4b742400
 80043b4:	46000000 	.word	0x46000000
 80043b8:	080088ec 	.word	0x080088ec

080043bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	@ 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80043c4:	4ba6      	ldr	r3, [pc, #664]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043cc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80043ce:	4ba4      	ldr	r3, [pc, #656]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80043d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3301      	adds	r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80043e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80043f2:	4b9b      	ldr	r3, [pc, #620]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	08db      	lsrs	r3, r3, #3
 80043f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d062      	beq.n	80044da <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2b03      	cmp	r3, #3
 8004418:	f200 8081 	bhi.w	800451e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d024      	beq.n	800446c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d17a      	bne.n	800451e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004432:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8004436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800443a:	4b89      	ldr	r3, [pc, #548]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800443c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800444a:	ed97 6a02 	vldr	s12, [r7, #8]
 800444e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004452:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004456:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800445a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800445e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800446a:	e08f      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800446c:	4b7c      	ldr	r3, [pc, #496]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004478:	4b79      	ldr	r3, [pc, #484]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	0f1b      	lsrs	r3, r3, #28
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	e006      	b.n	8004492 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8004484:	4b76      	ldr	r3, [pc, #472]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	0f1b      	lsrs	r3, r3, #28
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	4a76      	ldr	r2, [pc, #472]	@ (800466c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80044bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80044c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80044d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d8:	e058      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80044e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80044fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004500:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004504:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004508:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800450c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004510:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8004514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800451c:	e036      	b.n	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800451e:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800452a:	4b4d      	ldr	r3, [pc, #308]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0f1b      	lsrs	r3, r3, #28
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8004536:	4b4a      	ldr	r3, [pc, #296]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	0f1b      	lsrs	r3, r3, #28
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	4a49      	ldr	r2, [pc, #292]	@ (800466c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8004546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	ee07 3a90 	vmov	s15, r3
 8004558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a02 	vldr	s12, [r7, #8]
 800456e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004668 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800458a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800458c:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d017      	beq.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004598:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459c:	0a5b      	lsrs	r3, r3, #9
 800459e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80045aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045be:	ee17 2a90 	vmov	r2, s15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	e002      	b.n	80045ce <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80045ce:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045da:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80045dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045de:	0c1b      	lsrs	r3, r3, #16
 80045e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045e4:	ee07 3a90 	vmov	s15, r3
 80045e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80045ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045f0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80045f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80045f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004600:	ee17 2a90 	vmov	r2, s15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	605a      	str	r2, [r3, #4]
 8004608:	e002      	b.n	8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8004612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d017      	beq.n	800464c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800461c:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800461e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004620:	0e1b      	lsrs	r3, r3, #24
 8004622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800462e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004632:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004636:	edd7 6a07 	vldr	s13, [r7, #28]
 800463a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	ee17 2a90 	vmov	r2, s15
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800464a:	e002      	b.n	8004652 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
}
 8004652:	bf00      	nop
 8004654:	3724      	adds	r7, #36	@ 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	46020c00 	.word	0x46020c00
 8004664:	4b742400 	.word	0x4b742400
 8004668:	46000000 	.word	0x46000000
 800466c:	080088ec 	.word	0x080088ec

08004670 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004678:	4ba6      	ldr	r3, [pc, #664]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800467a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004680:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004682:	4ba4      	ldr	r3, [pc, #656]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800468c:	4ba1      	ldr	r3, [pc, #644]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3301      	adds	r3, #1
 8004698:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800469a:	4b9e      	ldr	r3, [pc, #632]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469e:	091b      	lsrs	r3, r3, #4
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80046a6:	4b9b      	ldr	r3, [pc, #620]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d062      	beq.n	800478e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	f200 8081 	bhi.w	80047d2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d024      	beq.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d17a      	bne.n	80047d2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b89      	ldr	r3, [pc, #548]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80046fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004702:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800470e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800471e:	e08f      	b.n	8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004720:	4b7c      	ldr	r3, [pc, #496]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800472c:	4b79      	ldr	r3, [pc, #484]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	0f1b      	lsrs	r3, r3, #28
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	e006      	b.n	8004746 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8004738:	4b76      	ldr	r3, [pc, #472]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800473a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	0f1b      	lsrs	r3, r3, #28
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	4a76      	ldr	r2, [pc, #472]	@ (8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004770:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004780:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004788:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800478c:	e058      	b.n	8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004798:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800479c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a8:	ee07 3a90 	vmov	s15, r3
 80047ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80047b4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80047b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80047c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80047c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047d0:	e036      	b.n	8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80047d2:	4b50      	ldr	r3, [pc, #320]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80047de:	4b4d      	ldr	r3, [pc, #308]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0f1b      	lsrs	r3, r3, #28
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	e006      	b.n	80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80047ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80047ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	0f1b      	lsrs	r3, r3, #28
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	4a49      	ldr	r2, [pc, #292]	@ (8004920 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80047fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004822:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800491c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800483e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004840:	4b34      	ldr	r3, [pc, #208]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d017      	beq.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800484c:	4b31      	ldr	r3, [pc, #196]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800484e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004850:	0a5b      	lsrs	r3, r3, #9
 8004852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800485e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004862:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004866:	edd7 6a07 	vldr	s13, [r7, #28]
 800486a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800486e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004872:	ee17 2a90 	vmov	r2, s15
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e002      	b.n	8004882 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004882:	4b24      	ldr	r3, [pc, #144]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d017      	beq.n	80048be <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800488e:	4b21      	ldr	r3, [pc, #132]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80048a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b4:	ee17 2a90 	vmov	r2, s15
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	605a      	str	r2, [r3, #4]
 80048bc:	e002      	b.n	80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80048c4:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d017      	beq.n	8004900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048d0:	4b10      	ldr	r3, [pc, #64]	@ (8004914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	0e1b      	lsrs	r3, r3, #24
 80048d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80048e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80048ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f6:	ee17 2a90 	vmov	r2, s15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048fe:	e002      	b.n	8004906 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
}
 8004906:	bf00      	nop
 8004908:	3724      	adds	r7, #36	@ 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	46020c00 	.word	0x46020c00
 8004918:	4b742400 	.word	0x4b742400
 800491c:	46000000 	.word	0x46000000
 8004920:	080088ec 	.word	0x080088ec

08004924 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08e      	sub	sp, #56	@ 0x38
 8004928:	af00      	add	r7, sp, #0
 800492a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800492e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004932:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004936:	430b      	orrs	r3, r1
 8004938:	d145      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800493a:	4ba7      	ldr	r3, [pc, #668]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800493c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004946:	4ba4      	ldr	r3, [pc, #656]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d108      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495a:	d104      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800495c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34
 8004962:	f001 b9b3 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004966:	4b9c      	ldr	r3, [pc, #624]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800496c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004974:	d114      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800497c:	d110      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800497e:	4b96      	ldr	r3, [pc, #600]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800498c:	d103      	bne.n	8004996 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800498e:	23fa      	movs	r3, #250	@ 0xfa
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004992:	f001 b99b 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8004996:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800499c:	f001 b996 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80049a0:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049ac:	d107      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80049ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049b4:	d103      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80049b6:	4b89      	ldr	r3, [pc, #548]	@ (8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80049b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ba:	f001 b987 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c2:	f001 b983 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80049c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80049ce:	430b      	orrs	r3, r1
 80049d0:	d151      	bne.n	8004a76 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80049d2:	4b81      	ldr	r3, [pc, #516]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80049d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049d8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80049dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80049de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e0:	2b80      	cmp	r3, #128	@ 0x80
 80049e2:	d035      	beq.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	2b80      	cmp	r3, #128	@ 0x80
 80049e8:	d841      	bhi.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2b60      	cmp	r3, #96	@ 0x60
 80049ee:	d02a      	beq.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	2b60      	cmp	r3, #96	@ 0x60
 80049f4:	d83b      	bhi.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	2b40      	cmp	r3, #64	@ 0x40
 8004a00:	d835      	bhi.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d012      	beq.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a0e:	e02e      	b.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff fb77 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a1e:	f001 b955 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a22:	f107 0318 	add.w	r3, r7, #24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fcc8 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a30:	f001 b94c 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff fe19 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a42:	f001 b943 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004a46:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a4c:	f001 b93e 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a50:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5c:	d103      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8004a5e:	4b60      	ldr	r3, [pc, #384]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004a60:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004a62:	f001 b933 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a6a:	f001 b92f 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a72:	f001 b92b 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	d158      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004a82:	4b55      	ldr	r3, [pc, #340]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a94:	d03b      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9c:	d846      	bhi.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aa4:	d02e      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aac:	d83e      	bhi.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab4:	d00b      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d836      	bhi.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aca:	d012      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8004acc:	e02e      	b.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fb18 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004adc:	f001 b8f6 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ae0:	f107 0318 	add.w	r3, r7, #24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fc69 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004aee:	f001 b8ed 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004af2:	f107 030c 	add.w	r3, r7, #12
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fdba 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b00:	f001 b8e4 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b04:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b0a:	f001 b8df 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b0e:	4b32      	ldr	r3, [pc, #200]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1a:	d103      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8004b1c:	4b30      	ldr	r3, [pc, #192]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004b20:	f001 b8d4 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b28:	f001 b8d0 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b30:	f001 b8cc 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	d126      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8004b40:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8004b4c:	4b22      	ldr	r3, [pc, #136]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b58:	d106      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d103      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8004b60:	4b1f      	ldr	r3, [pc, #124]	@ (8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b64:	f001 b8b2 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8004b68:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b74:	d107      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7c:	d103      	bne.n	8004b86 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8004b7e:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b82:	f001 b8a3 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b8a:	f001 b89f 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8004b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b92:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8004b96:	430b      	orrs	r3, r1
 8004b98:	d16e      	bne.n	8004c78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bac:	d03d      	beq.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004bb4:	d85c      	bhi.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbc:	d014      	beq.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc4:	d854      	bhi.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01f      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bd2:	d012      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004bd4:	e04c      	b.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004bd6:	bf00      	nop
 8004bd8:	46020c00 	.word	0x46020c00
 8004bdc:	0007a120 	.word	0x0007a120
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fa8b 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bf6:	f001 b869 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bfa:	f107 0318 	add.w	r3, r7, #24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fbdc 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c08:	f001 b860 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004c0c:	4ba7      	ldr	r3, [pc, #668]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c18:	d103      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8004c1a:	4ba5      	ldr	r3, [pc, #660]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004c1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c1e:	f001 b855 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c26:	f001 b851 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d118      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c36:	4b9d      	ldr	r3, [pc, #628]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004c42:	4b9a      	ldr	r3, [pc, #616]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0e1b      	lsrs	r3, r3, #24
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	e006      	b.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004c4e:	4b97      	ldr	r3, [pc, #604]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	0e1b      	lsrs	r3, r3, #24
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	4a95      	ldr	r2, [pc, #596]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004c64:	f001 b832 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c6c:	f001 b82e 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004c74:	f001 b82a 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004c80:	430b      	orrs	r3, r1
 8004c82:	d17f      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004c84:	4b89      	ldr	r3, [pc, #548]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d165      	bne.n	8004d62 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8004c96:	4b85      	ldr	r3, [pc, #532]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c9c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004ca0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004ca8:	d034      	beq.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004cb0:	d853      	bhi.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cc0:	d84b      	bhi.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d016      	beq.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cce:	d009      	beq.n	8004ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004cd0:	e043      	b.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fa16 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004ce0:	f000 bff4 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ce4:	f107 0318 	add.w	r3, r7, #24
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fb67 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004cf2:	f000 bfeb 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d02:	d103      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8004d04:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004d08:	f000 bfe0 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d10:	f000 bfdc 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8004d14:	4b65      	ldr	r3, [pc, #404]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d118      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d20:	4b62      	ldr	r3, [pc, #392]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8004d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	0e1b      	lsrs	r3, r3, #24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	e006      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004d38:	4b5c      	ldr	r3, [pc, #368]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	0e1b      	lsrs	r3, r3, #24
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004d4e:	f000 bfbd 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d56:	f000 bfb9 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8004d5e:	f000 bfb5 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d68:	d108      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff f9ca 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d78:	f000 bfa8 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d80:	f000 bfa4 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8004d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d88:	1e51      	subs	r1, r2, #1
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	d136      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d8e:	4b47      	ldr	r3, [pc, #284]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fe fb44 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8004da4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004da6:	f000 bf91 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d104      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004db0:	f7fe fa0c 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004db4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004db6:	f000 bf89 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004dba:	4b3c      	ldr	r3, [pc, #240]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d103      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8004dce:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd2:	f000 bf7b 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004dd6:	4b35      	ldr	r3, [pc, #212]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d107      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d104      	bne.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8004dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df0:	f000 bf6c 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df8:	f000 bf68 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e00:	1e91      	subs	r1, r2, #2
 8004e02:	430b      	orrs	r3, r1
 8004e04:	d136      	bne.n	8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004e06:	4b29      	ldr	r3, [pc, #164]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0c:	f003 030c 	and.w	r3, r3, #12
 8004e10:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fe faf4 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e1e:	f000 bf55 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d104      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004e28:	f7fe f9d0 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004e2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e2e:	f000 bf4d 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004e32:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d103      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8004e46:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4a:	f000 bf3f 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004e4e:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	2b0c      	cmp	r3, #12
 8004e60:	d104      	bne.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e68:	f000 bf30 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e70:	f000 bf2c 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8004e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e78:	1f11      	subs	r1, r2, #4
 8004e7a:	430b      	orrs	r3, r1
 8004e7c:	d13f      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fe fab8 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004e94:	6378      	str	r0, [r7, #52]	@ 0x34
 8004e96:	f000 bf19 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d10d      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004ea0:	f7fe f994 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004ea4:	6378      	str	r0, [r7, #52]	@ 0x34
 8004ea6:	f000 bf11 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8004eaa:	bf00      	nop
 8004eac:	46020c00 	.word	0x46020c00
 8004eb0:	02dc6c00 	.word	0x02dc6c00
 8004eb4:	080088ec 	.word	0x080088ec
 8004eb8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004ebc:	4ba6      	ldr	r3, [pc, #664]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec8:	d106      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d103      	bne.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8004ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed4:	f000 befa 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004ed8:	4b9f      	ldr	r3, [pc, #636]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d107      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	2b30      	cmp	r3, #48	@ 0x30
 8004eea:	d104      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8004eec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef2:	f000 beeb 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efa:	f000 bee7 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f02:	f1a2 0108 	sub.w	r1, r2, #8
 8004f06:	430b      	orrs	r3, r1
 8004f08:	d136      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004f0a:	4b93      	ldr	r3, [pc, #588]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f14:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f1c:	f7fe fa72 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004f20:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f22:	f000 bed3 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d104      	bne.n	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004f2c:	f7fe f94e 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004f30:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f32:	f000 becb 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004f36:	4b88      	ldr	r3, [pc, #544]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f42:	d106      	bne.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	2b80      	cmp	r3, #128	@ 0x80
 8004f48:	d103      	bne.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8004f4a:	4b84      	ldr	r3, [pc, #528]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4e:	f000 bebd 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004f52:	4b81      	ldr	r3, [pc, #516]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f64:	d104      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6c:	f000 beae 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f74:	f000 beaa 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8004f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f7c:	f1a2 0110 	sub.w	r1, r2, #16
 8004f80:	430b      	orrs	r3, r1
 8004f82:	d139      	bne.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f84:	4b74      	ldr	r3, [pc, #464]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004f96:	f7fe fa35 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004f9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f9c:	f000 be96 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa6:	d104      	bne.n	8004fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004fa8:	f7fe f910 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8004fac:	6378      	str	r0, [r7, #52]	@ 0x34
 8004fae:	f000 be8d 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004fb2:	4b69      	ldr	r3, [pc, #420]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbe:	d107      	bne.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc6:	d103      	bne.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8004fc8:	4b64      	ldr	r3, [pc, #400]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fcc:	f000 be7e 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004fd0:	4b61      	ldr	r3, [pc, #388]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d108      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe4:	d104      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8004fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fec:	f000 be6e 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff4:	f000 be6a 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8004ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffc:	f1a2 0120 	sub.w	r1, r2, #32
 8005000:	430b      	orrs	r3, r1
 8005002:	d158      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005004:	4b54      	ldr	r3, [pc, #336]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005016:	f7fe fa1d 	bl	8003454 <HAL_RCC_GetPCLK3Freq>
 800501a:	6378      	str	r0, [r7, #52]	@ 0x34
 800501c:	f000 be56 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	2b01      	cmp	r3, #1
 8005024:	d104      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005026:	f7fe f8d1 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800502a:	6378      	str	r0, [r7, #52]	@ 0x34
 800502c:	f000 be4e 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005030:	4b49      	ldr	r3, [pc, #292]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503c:	d106      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	2b02      	cmp	r3, #2
 8005042:	d103      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8005044:	4b45      	ldr	r3, [pc, #276]	@ (800515c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8005046:	637b      	str	r3, [r7, #52]	@ 0x34
 8005048:	f000 be40 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800504c:	4b42      	ldr	r3, [pc, #264]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800504e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d107      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	2b03      	cmp	r3, #3
 800505e:	d104      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8005060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
 8005066:	f000 be31 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800506a:	4b3b      	ldr	r3, [pc, #236]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b20      	cmp	r3, #32
 8005074:	d11b      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	2b04      	cmp	r3, #4
 800507a:	d118      	bne.n	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800507c:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005088:	4b33      	ldr	r3, [pc, #204]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	0e1b      	lsrs	r3, r3, #24
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	e006      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8005094:	4b30      	ldr	r3, [pc, #192]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	0e1b      	lsrs	r3, r3, #24
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80050a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050aa:	f000 be0f 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b2:	f000 be0b 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80050b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ba:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80050be:	430b      	orrs	r3, r1
 80050c0:	d172      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80050c2:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80050c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80050cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80050ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d4:	d104      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fe f879 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80050da:	6378      	str	r0, [r7, #52]	@ 0x34
 80050dc:	f000 bdf6 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e6:	d108      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050e8:	f107 0318 	add.w	r3, r7, #24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff f965 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f6:	f000 bde9 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005100:	f7fe f966 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8005104:	6378      	str	r0, [r7, #52]	@ 0x34
 8005106:	f000 bde1 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800510a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005110:	d128      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005112:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b20      	cmp	r3, #32
 800511c:	d118      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800511e:	4b0e      	ldr	r3, [pc, #56]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	e006      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8005136:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8005138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	0e1b      	lsrs	r3, r3, #24
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	4a06      	ldr	r2, [pc, #24]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514a:	637b      	str	r3, [r7, #52]	@ 0x34
 800514c:	f000 bdbe 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
 8005154:	f000 bdba 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005158:	46020c00 	.word	0x46020c00
 800515c:	00f42400 	.word	0x00f42400
 8005160:	080088ec 	.word	0x080088ec
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005164:	4baf      	ldr	r3, [pc, #700]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800516c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005170:	d107      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005178:	d103      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800517a:	4bab      	ldr	r3, [pc, #684]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800517c:	637b      	str	r3, [r7, #52]	@ 0x34
 800517e:	f000 bda5 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005182:	4ba8      	ldr	r3, [pc, #672]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d107      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005196:	d103      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8005198:	4ba3      	ldr	r3, [pc, #652]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
 800519c:	f000 bd96 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a4:	f000 bd92 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80051a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80051b0:	430b      	orrs	r3, r1
 80051b2:	d158      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80051b4:	4b9b      	ldr	r3, [pc, #620]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80051b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d84b      	bhi.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80051c6:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	08005205 	.word	0x08005205
 80051d0:	080051e1 	.word	0x080051e1
 80051d4:	080051f3 	.word	0x080051f3
 80051d8:	0800520f 	.word	0x0800520f
 80051dc:	08005219 	.word	0x08005219
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe ff8f 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051ee:	f000 bd6d 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051f2:	f107 030c 	add.w	r3, r7, #12
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fa3a 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005200:	f000 bd64 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8005204:	f7fe f8e4 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8005208:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800520a:	f000 bd5f 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800520e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005214:	f000 bd5a 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005218:	4b82      	ldr	r3, [pc, #520]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b20      	cmp	r3, #32
 8005222:	d118      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005224:	4b7f      	ldr	r3, [pc, #508]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005230:	4b7c      	ldr	r3, [pc, #496]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	e006      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800523c:	4b79      	ldr	r3, [pc, #484]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800523e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005242:	041b      	lsls	r3, r3, #16
 8005244:	0e1b      	lsrs	r3, r3, #24
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	4a78      	ldr	r2, [pc, #480]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800524c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005252:	f000 bd3b 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800525a:	f000 bd37 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005262:	f000 bd33 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8005266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800526e:	430b      	orrs	r3, r1
 8005270:	d167      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8005272:	4b6c      	ldr	r3, [pc, #432]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005278:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800527c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005284:	d036      	beq.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800528c:	d855      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005294:	d029      	beq.n	80052ea <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800529c:	d84d      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052a4:	d013      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ac:	d845      	bhi.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d015      	beq.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ba:	d13e      	bne.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe ff21 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ca:	f000 bcff 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ce:	f107 030c 	add.w	r3, r7, #12
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f9cc 	bl	8004670 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052dc:	f000 bcf6 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80052e0:	f7fe f876 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80052e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80052e6:	f000 bcf1 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80052ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80052ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052f0:	f000 bcec 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80052f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d118      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005300:	4b48      	ldr	r3, [pc, #288]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800530c:	4b45      	ldr	r3, [pc, #276]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	0e1b      	lsrs	r3, r3, #24
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	e006      	b.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005318:	4b42      	ldr	r3, [pc, #264]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800531a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	0e1b      	lsrs	r3, r3, #24
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	4a41      	ldr	r2, [pc, #260]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8005328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800532e:	f000 bccd 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005336:	f000 bcc9 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800533e:	f000 bcc5 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8005342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005346:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800534a:	430b      	orrs	r3, r1
 800534c:	d14c      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800534e:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005354:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fe f850 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8005364:	6378      	str	r0, [r7, #52]	@ 0x34
 8005366:	f000 bcb1 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800536a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005370:	d104      	bne.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005372:	f7fd ff2b 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8005376:	6378      	str	r0, [r7, #52]	@ 0x34
 8005378:	f000 bca8 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800537c:	4b29      	ldr	r3, [pc, #164]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005388:	d107      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005390:	d103      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8005392:	4b25      	ldr	r3, [pc, #148]	@ (8005428 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8005394:	637b      	str	r3, [r7, #52]	@ 0x34
 8005396:	f000 bc99 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800539a:	4b22      	ldr	r3, [pc, #136]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0320 	and.w	r3, r3, #32
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d11c      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053ac:	d118      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80053ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 80053ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	0e1b      	lsrs	r3, r3, #24
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80053c6:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	0e1b      	lsrs	r3, r3, #24
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	4a15      	ldr	r2, [pc, #84]	@ (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80053d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053da:	637b      	str	r3, [r7, #52]	@ 0x34
 80053dc:	f000 bc76 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e4:	f000 bc72 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80053e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ec:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80053f0:	430b      	orrs	r3, r1
 80053f2:	d153      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80053f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80053f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80053fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005406:	f7fd fffd 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 800540a:	6378      	str	r0, [r7, #52]	@ 0x34
 800540c:	f000 bc5e 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005416:	d10b      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005418:	f7fd fed8 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800541c:	6378      	str	r0, [r7, #52]	@ 0x34
 800541e:	f000 bc55 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005422:	bf00      	nop
 8005424:	46020c00 	.word	0x46020c00
 8005428:	00f42400 	.word	0x00f42400
 800542c:	080088ec 	.word	0x080088ec
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005430:	4ba1      	ldr	r3, [pc, #644]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543c:	d107      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005444:	d103      	bne.n	800544e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8005446:	4b9d      	ldr	r3, [pc, #628]	@ (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
 800544a:	f000 bc3f 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800544e:	4b9a      	ldr	r3, [pc, #616]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d11c      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005460:	d118      	bne.n	8005494 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005462:	4b95      	ldr	r3, [pc, #596]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800546e:	4b92      	ldr	r3, [pc, #584]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0e1b      	lsrs	r3, r3, #24
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	e006      	b.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800547a:	4b8f      	ldr	r3, [pc, #572]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800547c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	0e1b      	lsrs	r3, r3, #24
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	4a8d      	ldr	r2, [pc, #564]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800548a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005490:	f000 bc1c 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	637b      	str	r3, [r7, #52]	@ 0x34
 8005498:	f000 bc18 	b.w	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800549c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a0:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80054a4:	430b      	orrs	r3, r1
 80054a6:	d151      	bne.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80054a8:	4b83      	ldr	r3, [pc, #524]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80054aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b8:	d024      	beq.n	8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80054be:	d842      	bhi.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d00d      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	2b80      	cmp	r3, #128	@ 0x80
 80054ca:	d83c      	bhi.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	d011      	beq.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80054d8:	e035      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80054da:	f7fd ffbb 	bl	8003454 <HAL_RCC_GetPCLK3Freq>
 80054de:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80054e0:	e3f4      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054e2:	4b75      	ldr	r3, [pc, #468]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ee:	d102      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80054f0:	4b72      	ldr	r3, [pc, #456]	@ (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80054f4:	e3ea      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054fa:	e3e7      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80054fc:	f7fd fe66 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8005500:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005502:	e3e3      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005504:	4b6c      	ldr	r3, [pc, #432]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d117      	bne.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005510:	4b69      	ldr	r3, [pc, #420]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800551c:	4b66      	ldr	r3, [pc, #408]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	e006      	b.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005528:	4b63      	ldr	r3, [pc, #396]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800552a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	4a62      	ldr	r2, [pc, #392]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800553e:	e3c5      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005544:	e3c2      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800554a:	e3bf      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800554c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005550:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8005554:	430b      	orrs	r3, r1
 8005556:	d147      	bne.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005558:	4b57      	ldr	r3, [pc, #348]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800555a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800555e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800556a:	f7fd ff4b 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 800556e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005570:	e3ac      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005578:	d103      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800557a:	f7fd fe27 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800557e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005580:	e3a4      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005582:	4b4d      	ldr	r3, [pc, #308]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800558a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800558e:	d106      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005596:	d102      	bne.n	800559e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8005598:	4b48      	ldr	r3, [pc, #288]	@ (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
 800559c:	e396      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800559e:	4b46      	ldr	r3, [pc, #280]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d11b      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80055b0:	d117      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80055b2:	4b41      	ldr	r3, [pc, #260]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 80055be:	4b3e      	ldr	r3, [pc, #248]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	e006      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 80055ca:	4b3b      	ldr	r3, [pc, #236]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055d0:	041b      	lsls	r3, r3, #16
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	4a39      	ldr	r2, [pc, #228]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e0:	e374      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e6:	e371      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80055e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ec:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80055f0:	430b      	orrs	r3, r1
 80055f2:	d16a      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80055f4:	4b30      	ldr	r3, [pc, #192]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80055f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	2b00      	cmp	r3, #0
 8005604:	d120      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005606:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b20      	cmp	r3, #32
 8005610:	d117      	bne.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005612:	4b29      	ldr	r3, [pc, #164]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800561e:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0e1b      	lsrs	r3, r3, #24
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	e006      	b.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800562a:	4b23      	ldr	r3, [pc, #140]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800562c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	0e1b      	lsrs	r3, r3, #24
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	4a21      	ldr	r2, [pc, #132]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005640:	e344      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	@ 0x34
 8005646:	e341      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8005648:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800564a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800564e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005656:	d112      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800565e:	d10e      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005660:	4b15      	ldr	r3, [pc, #84]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800566e:	d102      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8005670:	23fa      	movs	r3, #250	@ 0xfa
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005674:	e32a      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005676:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800567c:	e326      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800567e:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568a:	d106      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005692:	d102      	bne.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8005694:	4b09      	ldr	r3, [pc, #36]	@ (80056bc <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
 8005698:	e318      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800569a:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800569c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d10d      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80056a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056ae:	d109      	bne.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 80056b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b6:	e309      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80056b8:	46020c00 	.word	0x46020c00
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	080088ec 	.word	0x080088ec
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80056c8:	e300      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80056ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056ce:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80056d2:	430b      	orrs	r3, r1
 80056d4:	d164      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80056d6:	4ba2      	ldr	r3, [pc, #648]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80056d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056e0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d120      	bne.n	800572a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80056e8:	4b9d      	ldr	r3, [pc, #628]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d117      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80056f4:	4b9a      	ldr	r3, [pc, #616]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8005700:	4b97      	ldr	r3, [pc, #604]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	0e1b      	lsrs	r3, r3, #24
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	e006      	b.n	800571a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800570c:	4b94      	ldr	r3, [pc, #592]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800570e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005712:	041b      	lsls	r3, r3, #16
 8005714:	0e1b      	lsrs	r3, r3, #24
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	4a92      	ldr	r2, [pc, #584]	@ (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800571c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005720:	637b      	str	r3, [r7, #52]	@ 0x34
 8005722:	e2d3      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	e2d0      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800572a:	4b8d      	ldr	r3, [pc, #564]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800572c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005734:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005738:	d112      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005740:	d10e      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005742:	4b87      	ldr	r3, [pc, #540]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005750:	d102      	bne.n	8005758 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8005752:	23fa      	movs	r3, #250	@ 0xfa
 8005754:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005756:	e2b9      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005758:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800575e:	e2b5      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005760:	4b7f      	ldr	r3, [pc, #508]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800576c:	d106      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005774:	d102      	bne.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8005776:	4b7c      	ldr	r3, [pc, #496]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005778:	637b      	str	r3, [r7, #52]	@ 0x34
 800577a:	e2a7      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800577c:	4b78      	ldr	r3, [pc, #480]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800577e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d107      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005790:	d103      	bne.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
 8005798:	e298      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	@ 0x34
 800579e:	e295      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80057a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80057a8:	430b      	orrs	r3, r1
 80057aa:	d147      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80057ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80057ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057b2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80057be:	f7fd fe21 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 80057c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80057c4:	e282      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80057c6:	4b66      	ldr	r3, [pc, #408]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80057c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057d4:	d112      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057dc:	d10e      	bne.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057de:	4b60      	ldr	r3, [pc, #384]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80057e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057ec:	d102      	bne.n	80057f4 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80057ee:	23fa      	movs	r3, #250	@ 0xfa
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057f2:	e26b      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80057f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80057fa:	e267      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80057fc:	4b58      	ldr	r3, [pc, #352]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005808:	d106      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005810:	d102      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8005812:	4b55      	ldr	r3, [pc, #340]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
 8005816:	e259      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8005818:	4b51      	ldr	r3, [pc, #324]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800581a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b02      	cmp	r3, #2
 8005824:	d107      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800582c:	d103      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800582e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
 8005834:	e24a      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	@ 0x34
 800583a:	e247      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800583c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005840:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005844:	430b      	orrs	r3, r1
 8005846:	d12d      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8005848:	4b45      	ldr	r3, [pc, #276]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800584a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800584e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8005854:	4b42      	ldr	r3, [pc, #264]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005860:	d105      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	2b00      	cmp	r3, #0
 8005866:	d102      	bne.n	800586e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8005868:	4b3f      	ldr	r3, [pc, #252]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800586a:	637b      	str	r3, [r7, #52]	@ 0x34
 800586c:	e22e      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005874:	d107      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fc44 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8005880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005882:	637b      	str	r3, [r7, #52]	@ 0x34
 8005884:	e222      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800588c:	d107      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588e:	f107 0318 	add.w	r3, r7, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fd92 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	637b      	str	r3, [r7, #52]	@ 0x34
 800589c:	e216      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a2:	e213      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80058a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80058ac:	430b      	orrs	r3, r1
 80058ae:	d15d      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80058b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80058b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058b6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80058ba:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c2:	d028      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058ca:	d845      	bhi.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058d2:	d013      	beq.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058da:	d83d      	bhi.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058e8:	d004      	beq.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80058ea:	e035      	b.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7fd fd9e 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 80058f0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058f2:	e1eb      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80058f4:	f7fd fc6a 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80058f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80058fa:	e1e7      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058fc:	4b18      	ldr	r3, [pc, #96]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005908:	d102      	bne.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800590a:	4b17      	ldr	r3, [pc, #92]	@ (8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800590c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800590e:	e1dd      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005914:	e1da      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005916:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b20      	cmp	r3, #32
 8005920:	d117      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005922:	4b0f      	ldr	r3, [pc, #60]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800592e:	4b0c      	ldr	r3, [pc, #48]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0e1b      	lsrs	r3, r3, #24
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	e006      	b.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800593a:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800593c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	0e1b      	lsrs	r3, r3, #24
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	4a06      	ldr	r2, [pc, #24]	@ (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800594a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005950:	e1bc      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005956:	e1b9      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800595c:	e1b6      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800595e:	bf00      	nop
 8005960:	46020c00 	.word	0x46020c00
 8005964:	080088ec 	.word	0x080088ec
 8005968:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800596c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005970:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8005974:	430b      	orrs	r3, r1
 8005976:	d156      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005978:	4ba5      	ldr	r3, [pc, #660]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800597a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800597e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005982:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800598a:	d028      	beq.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005992:	d845      	bhi.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800599a:	d013      	beq.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a2:	d83d      	bhi.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b0:	d004      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 80059b2:	e035      	b.n	8005a20 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80059b4:	f7fd fd26 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 80059b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80059ba:	e187      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80059bc:	f7fd fc06 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 80059c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80059c2:	e183      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80059c4:	4b92      	ldr	r3, [pc, #584]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d0:	d102      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80059d2:	4b90      	ldr	r3, [pc, #576]	@ (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059d6:	e179      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059dc:	e176      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80059de:	4b8c      	ldr	r3, [pc, #560]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d117      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80059ea:	4b89      	ldr	r3, [pc, #548]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80059f6:	4b86      	ldr	r3, [pc, #536]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0e1b      	lsrs	r3, r3, #24
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	e006      	b.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8005a02:	4b83      	ldr	r3, [pc, #524]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	0e1b      	lsrs	r3, r3, #24
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	4a81      	ldr	r2, [pc, #516]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a18:	e158      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a1e:	e155      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a24:	e152      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8005a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a2a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	d177      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005a32:	4b77      	ldr	r3, [pc, #476]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a38:	f003 0318 	and.w	r3, r3, #24
 8005a3c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2b18      	cmp	r3, #24
 8005a42:	d86b      	bhi.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8005a44:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005ab1 	.word	0x08005ab1
 8005a50:	08005b1d 	.word	0x08005b1d
 8005a54:	08005b1d 	.word	0x08005b1d
 8005a58:	08005b1d 	.word	0x08005b1d
 8005a5c:	08005b1d 	.word	0x08005b1d
 8005a60:	08005b1d 	.word	0x08005b1d
 8005a64:	08005b1d 	.word	0x08005b1d
 8005a68:	08005b1d 	.word	0x08005b1d
 8005a6c:	08005ab9 	.word	0x08005ab9
 8005a70:	08005b1d 	.word	0x08005b1d
 8005a74:	08005b1d 	.word	0x08005b1d
 8005a78:	08005b1d 	.word	0x08005b1d
 8005a7c:	08005b1d 	.word	0x08005b1d
 8005a80:	08005b1d 	.word	0x08005b1d
 8005a84:	08005b1d 	.word	0x08005b1d
 8005a88:	08005b1d 	.word	0x08005b1d
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005b1d 	.word	0x08005b1d
 8005a94:	08005b1d 	.word	0x08005b1d
 8005a98:	08005b1d 	.word	0x08005b1d
 8005a9c:	08005b1d 	.word	0x08005b1d
 8005aa0:	08005b1d 	.word	0x08005b1d
 8005aa4:	08005b1d 	.word	0x08005b1d
 8005aa8:	08005b1d 	.word	0x08005b1d
 8005aac:	08005adb 	.word	0x08005adb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8005ab0:	f7fd fcd0 	bl	8003454 <HAL_RCC_GetPCLK3Freq>
 8005ab4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005ab6:	e109      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005ab8:	f7fd fb88 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8005abc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005abe:	e105      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ac0:	4b53      	ldr	r3, [pc, #332]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8005ace:	4b51      	ldr	r3, [pc, #324]	@ (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ad2:	e0fb      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ad8:	e0f8      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005ada:	4b4d      	ldr	r3, [pc, #308]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	d117      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8005af2:	4b47      	ldr	r3, [pc, #284]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0e1b      	lsrs	r3, r3, #24
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	e006      	b.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8005afe:	4b44      	ldr	r3, [pc, #272]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	0e1b      	lsrs	r3, r3, #24
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	4a42      	ldr	r2, [pc, #264]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b14:	e0da      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b1a:	e0d7      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b20:	e0d4      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8005b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b26:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	d155      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8005b2e:	4b38      	ldr	r3, [pc, #224]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b34:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005b38:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b40:	d013      	beq.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b48:	d844      	bhi.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b50:	d013      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b58:	d83c      	bhi.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b66:	d014      	beq.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8005b68:	e034      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fe fc24 	bl	80043bc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b78:	e0a8      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fac2 	bl	8004108 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b88:	e0a0      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8005b8a:	f7fd fb1f 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8005b8e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8005b90:	e09c      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b92:	4b1f      	ldr	r3, [pc, #124]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d117      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8005baa:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	0e1b      	lsrs	r3, r3, #24
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	e006      	b.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8005bb6:	4b16      	ldr	r3, [pc, #88]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	0e1b      	lsrs	r3, r3, #24
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	4a14      	ldr	r2, [pc, #80]	@ (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8005bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bcc:	e07e      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bd2:	e07b      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bd8:	e078      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8005bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bde:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005be2:	430b      	orrs	r3, r1
 8005be4:	d138      	bne.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8005bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d10d      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c0c:	e05e      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8005c0e:	bf00      	nop
 8005c10:	46020c00 	.word	0x46020c00
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	080088ec 	.word	0x080088ec
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8005c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c2a:	d112      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8005c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c32:	d10e      	bne.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c34:	4b28      	ldr	r3, [pc, #160]	@ (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c42:	d102      	bne.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8005c44:	23fa      	movs	r3, #250	@ 0xfa
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c48:	e040      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8005c4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005c50:	e03c      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c56:	e039      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8005c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005c60:	430b      	orrs	r3, r1
 8005c62:	d131      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005c64:	4b1c      	ldr	r3, [pc, #112]	@ (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005c66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c6a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c6e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005c70:	4b19      	ldr	r3, [pc, #100]	@ (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c7c:	d105      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8005c84:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c88:	e020      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8005c8a:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c9e:	d102      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8005ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca4:	e012      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8005cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc0:	e004      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc6:	e001      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3738      	adds	r7, #56	@ 0x38
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	46020c00 	.word	0x46020c00
 8005cdc:	02dc6c00 	.word	0x02dc6c00
 8005ce0:	016e3600 	.word	0x016e3600
 8005ce4:	00f42400 	.word	0x00f42400

08005ce8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8005cf0:	4b47      	ldr	r3, [pc, #284]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a46      	ldr	r2, [pc, #280]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005cf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cfa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cfc:	f7fb fb72 	bl	80013e4 <HAL_GetTick>
 8005d00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d02:	e008      	b.n	8005d16 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d04:	f7fb fb6e 	bl	80013e4 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e077      	b.n	8005e06 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d16:	4b3e      	ldr	r3, [pc, #248]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005d22:	4b3b      	ldr	r3, [pc, #236]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d2a:	f023 0303 	bic.w	r3, r3, #3
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6852      	ldr	r2, [r2, #4]
 8005d36:	3a01      	subs	r2, #1
 8005d38:	0212      	lsls	r2, r2, #8
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	4934      	ldr	r1, [pc, #208]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005d42:	4b33      	ldr	r3, [pc, #204]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d46:	4b33      	ldr	r3, [pc, #204]	@ (8005e14 <RCCEx_PLL2_Config+0x12c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6892      	ldr	r2, [r2, #8]
 8005d4e:	3a01      	subs	r2, #1
 8005d50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68d2      	ldr	r2, [r2, #12]
 8005d58:	3a01      	subs	r2, #1
 8005d5a:	0252      	lsls	r2, r2, #9
 8005d5c:	b292      	uxth	r2, r2
 8005d5e:	4311      	orrs	r1, r2
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6912      	ldr	r2, [r2, #16]
 8005d64:	3a01      	subs	r2, #1
 8005d66:	0412      	lsls	r2, r2, #16
 8005d68:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005d6c:	4311      	orrs	r1, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6952      	ldr	r2, [r2, #20]
 8005d72:	3a01      	subs	r2, #1
 8005d74:	0612      	lsls	r2, r2, #24
 8005d76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	4924      	ldr	r1, [pc, #144]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d82:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	f023 020c 	bic.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	4920      	ldr	r1, [pc, #128]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005d94:	4b1e      	ldr	r3, [pc, #120]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	491c      	ldr	r1, [pc, #112]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8005da2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005da8:	f023 0310 	bic.w	r3, r3, #16
 8005dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005dae:	4b18      	ldr	r3, [pc, #96]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	69d2      	ldr	r2, [r2, #28]
 8005dbe:	00d2      	lsls	r2, r2, #3
 8005dc0:	4913      	ldr	r1, [pc, #76]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8005dc6:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dca:	4a11      	ldr	r2, [pc, #68]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005dcc:	f043 0310 	orr.w	r3, r3, #16
 8005dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005dd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ddc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dde:	f7fb fb01 	bl	80013e4 <HAL_GetTick>
 8005de2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005de4:	e008      	b.n	8005df8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005de6:	f7fb fafd 	bl	80013e4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e006      	b.n	8005e06 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005df8:	4b05      	ldr	r3, [pc, #20]	@ (8005e10 <RCCEx_PLL2_Config+0x128>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0

}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	46020c00 	.word	0x46020c00
 8005e14:	80800000 	.word	0x80800000

08005e18 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8005e20:	4b47      	ldr	r3, [pc, #284]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a46      	ldr	r2, [pc, #280]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e2a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e2c:	f7fb fada 	bl	80013e4 <HAL_GetTick>
 8005e30:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e32:	e008      	b.n	8005e46 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e34:	f7fb fad6 	bl	80013e4 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e077      	b.n	8005f36 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e46:	4b3e      	ldr	r3, [pc, #248]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1f0      	bne.n	8005e34 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005e52:	4b3b      	ldr	r3, [pc, #236]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6811      	ldr	r1, [r2, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6852      	ldr	r2, [r2, #4]
 8005e66:	3a01      	subs	r2, #1
 8005e68:	0212      	lsls	r2, r2, #8
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	4934      	ldr	r1, [pc, #208]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e72:	4b33      	ldr	r3, [pc, #204]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e76:	4b33      	ldr	r3, [pc, #204]	@ (8005f44 <RCCEx_PLL3_Config+0x12c>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6892      	ldr	r2, [r2, #8]
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	68d2      	ldr	r2, [r2, #12]
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	0252      	lsls	r2, r2, #9
 8005e8c:	b292      	uxth	r2, r2
 8005e8e:	4311      	orrs	r1, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6912      	ldr	r2, [r2, #16]
 8005e94:	3a01      	subs	r2, #1
 8005e96:	0412      	lsls	r2, r2, #16
 8005e98:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005e9c:	4311      	orrs	r1, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6952      	ldr	r2, [r2, #20]
 8005ea2:	3a01      	subs	r2, #1
 8005ea4:	0612      	lsls	r2, r2, #24
 8005ea6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	4924      	ldr	r1, [pc, #144]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8005eb2:	4b23      	ldr	r3, [pc, #140]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	f023 020c 	bic.w	r2, r3, #12
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	4920      	ldr	r1, [pc, #128]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	491c      	ldr	r1, [pc, #112]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ed8:	f023 0310 	bic.w	r3, r3, #16
 8005edc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ede:	4b18      	ldr	r3, [pc, #96]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ee6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	69d2      	ldr	r2, [r2, #28]
 8005eee:	00d2      	lsls	r2, r2, #3
 8005ef0:	4913      	ldr	r1, [pc, #76]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8005ef6:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	4a11      	ldr	r2, [pc, #68]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005efc:	f043 0310 	orr.w	r3, r3, #16
 8005f00:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8005f02:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a0e      	ldr	r2, [pc, #56]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f0c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f0e:	f7fb fa69 	bl	80013e4 <HAL_GetTick>
 8005f12:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f14:	e008      	b.n	8005f28 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f16:	f7fb fa65 	bl	80013e4 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e006      	b.n	8005f36 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f28:	4b05      	ldr	r3, [pc, #20]	@ (8005f40 <RCCEx_PLL3_Config+0x128>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	46020c00 	.word	0x46020c00
 8005f44:	80800000 	.word	0x80800000

08005f48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d078      	beq.n	800604c <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fa fe70 	bl	8000c54 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f7c:	4b36      	ldr	r3, [pc, #216]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d058      	beq.n	800603a <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 8005f88:	4b33      	ldr	r3, [pc, #204]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f94:	d053      	beq.n	800603e <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f96:	4b30      	ldr	r3, [pc, #192]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005f98:	22ca      	movs	r2, #202	@ 0xca
 8005f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005f9e:	2253      	movs	r2, #83	@ 0x53
 8005fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9ae 	bl	8006304 <RTC_EnterInitMode>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d13f      	bne.n	8006032 <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005fb2:	4b29      	ldr	r3, [pc, #164]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	4a28      	ldr	r2, [pc, #160]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005fb8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fc0:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005fc2:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6859      	ldr	r1, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	4319      	orrs	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	4920      	ldr	r1, [pc, #128]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	491c      	ldr	r1, [pc, #112]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005fec:	4b1a      	ldr	r3, [pc, #104]	@ (8006058 <HAL_RTC_Init+0x110>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	4916      	ldr	r1, [pc, #88]	@ (8006058 <HAL_RTC_Init+0x110>)
 8006000:	4313      	orrs	r3, r2
 8006002:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9b9 	bl	800637c <RTC_ExitInitMode>
 800600a:	4603      	mov	r3, r0
 800600c:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10e      	bne.n	8006032 <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 8006014:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <HAL_RTC_Init+0x110>)
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a19      	ldr	r1, [r3, #32]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4319      	orrs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	430b      	orrs	r3, r1
 800602c:	490a      	ldr	r1, [pc, #40]	@ (8006058 <HAL_RTC_Init+0x110>)
 800602e:	4313      	orrs	r3, r2
 8006030:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006032:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <HAL_RTC_Init+0x110>)
 8006034:	22ff      	movs	r2, #255	@ 0xff
 8006036:	625a      	str	r2, [r3, #36]	@ 0x24
 8006038:	e001      	b.n	800603e <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d103      	bne.n	800604c <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	46007800 	.word	0x46007800

0800605c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_RTC_SetTime+0x1a>
 8006072:	2302      	movs	r3, #2
 8006074:	e088      	b.n	8006188 <HAL_RTC_SetTime+0x12c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006086:	4b42      	ldr	r3, [pc, #264]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 8006088:	22ca      	movs	r2, #202	@ 0xca
 800608a:	625a      	str	r2, [r3, #36]	@ 0x24
 800608c:	4b40      	ldr	r3, [pc, #256]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 800608e:	2253      	movs	r2, #83	@ 0x53
 8006090:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f936 	bl	8006304 <RTC_EnterInitMode>
 8006098:	4603      	mov	r3, r0
 800609a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d163      	bne.n	800616a <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80060a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ae:	d057      	beq.n	8006160 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d125      	bne.n	8006102 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80060b6:	4b36      	ldr	r3, [pc, #216]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2200      	movs	r2, #0
 80060c6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 f993 	bl	80063f8 <RTC_ByteToBcd2>
 80060d2:	4603      	mov	r3, r0
 80060d4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f98c 	bl	80063f8 <RTC_ByteToBcd2>
 80060e0:	4603      	mov	r3, r0
 80060e2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060e4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	789b      	ldrb	r3, [r3, #2]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f984 	bl	80063f8 <RTC_ByteToBcd2>
 80060f0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060f2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	78db      	ldrb	r3, [r3, #3]
 80060fa:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e017      	b.n	8006132 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006102:	4b23      	ldr	r3, [pc, #140]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d102      	bne.n	8006114 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006120:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006126:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	78db      	ldrb	r3, [r3, #3]
 800612c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006132:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800613a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800613e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006140:	4b13      	ldr	r3, [pc, #76]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	4a12      	ldr	r2, [pc, #72]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 8006146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800614a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800614c:	4b10      	ldr	r3, [pc, #64]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	68d9      	ldr	r1, [r3, #12]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	430b      	orrs	r3, r1
 800615a:	490d      	ldr	r1, [pc, #52]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 800615c:	4313      	orrs	r3, r2
 800615e:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f90b 	bl	800637c <RTC_ExitInitMode>
 8006166:	4603      	mov	r3, r0
 8006168:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800616a:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <HAL_RTC_SetTime+0x134>)
 800616c:	22ff      	movs	r2, #255	@ 0xff
 800616e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006170:	7cfb      	ldrb	r3, [r7, #19]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006186:	7cfb      	ldrb	r3, [r7, #19]
}
 8006188:	4618      	mov	r0, r3
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd90      	pop	{r4, r7, pc}
 8006190:	46007800 	.word	0x46007800

08006194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_RTC_SetDate+0x1a>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e071      	b.n	8006292 <HAL_RTC_SetDate+0xfe>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2202      	movs	r2, #2
 80061ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10e      	bne.n	80061e2 <HAL_RTC_SetDate+0x4e>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	785b      	ldrb	r3, [r3, #1]
 80061d4:	f023 0310 	bic.w	r3, r3, #16
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	330a      	adds	r3, #10
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11c      	bne.n	8006222 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	78db      	ldrb	r3, [r3, #3]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f903 	bl	80063f8 <RTC_ByteToBcd2>
 80061f2:	4603      	mov	r3, r0
 80061f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 f8fc 	bl	80063f8 <RTC_ByteToBcd2>
 8006200:	4603      	mov	r3, r0
 8006202:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006204:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	789b      	ldrb	r3, [r3, #2]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f8f4 	bl	80063f8 <RTC_ByteToBcd2>
 8006210:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006212:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e00e      	b.n	8006240 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800622e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006234:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006240:	4b16      	ldr	r3, [pc, #88]	@ (800629c <HAL_RTC_SetDate+0x108>)
 8006242:	22ca      	movs	r2, #202	@ 0xca
 8006244:	625a      	str	r2, [r3, #36]	@ 0x24
 8006246:	4b15      	ldr	r3, [pc, #84]	@ (800629c <HAL_RTC_SetDate+0x108>)
 8006248:	2253      	movs	r2, #83	@ 0x53
 800624a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f859 	bl	8006304 <RTC_EnterInitMode>
 8006252:	4603      	mov	r3, r0
 8006254:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006256:	7cfb      	ldrb	r3, [r7, #19]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800625c:	4a0f      	ldr	r2, [pc, #60]	@ (800629c <HAL_RTC_SetDate+0x108>)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006264:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006268:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f886 	bl	800637c <RTC_ExitInitMode>
 8006270:	4603      	mov	r3, r0
 8006272:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006274:	4b09      	ldr	r3, [pc, #36]	@ (800629c <HAL_RTC_SetDate+0x108>)
 8006276:	22ff      	movs	r2, #255	@ 0xff
 8006278:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800627a:	7cfb      	ldrb	r3, [r7, #19]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
}
 8006292:	4618      	mov	r0, r3
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}
 800629a:	bf00      	nop
 800629c:	46007800 	.word	0x46007800

080062a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80062a8:	4b15      	ldr	r3, [pc, #84]	@ (8006300 <HAL_RTC_WaitForSynchro+0x60>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <HAL_RTC_WaitForSynchro+0x60>)
 80062ae:	f023 0320 	bic.w	r3, r3, #32
 80062b2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80062b4:	f7fb f896 	bl	80013e4 <HAL_GetTick>
 80062b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062ba:	e013      	b.n	80062e4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062bc:	f7fb f892 	bl	80013e4 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ca:	d90b      	bls.n	80062e4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <HAL_RTC_WaitForSynchro+0x60>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10c      	bne.n	80062f2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2203      	movs	r2, #3
 80062dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e008      	b.n	80062f6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_RTC_WaitForSynchro+0x60>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0e5      	beq.n	80062bc <HAL_RTC_WaitForSynchro+0x1c>
 80062f0:	e000      	b.n	80062f4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80062f2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	46007800 	.word	0x46007800

08006304 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006310:	4b19      	ldr	r3, [pc, #100]	@ (8006378 <RTC_EnterInitMode+0x74>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d128      	bne.n	800636e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800631c:	4b16      	ldr	r3, [pc, #88]	@ (8006378 <RTC_EnterInitMode+0x74>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4a15      	ldr	r2, [pc, #84]	@ (8006378 <RTC_EnterInitMode+0x74>)
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006328:	f7fb f85c 	bl	80013e4 <HAL_GetTick>
 800632c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800632e:	e013      	b.n	8006358 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006330:	f7fb f858 	bl	80013e4 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800633e:	d90b      	bls.n	8006358 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006340:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <RTC_EnterInitMode+0x74>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10f      	bne.n	800636c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2203      	movs	r2, #3
 8006354:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006358:	4b07      	ldr	r3, [pc, #28]	@ (8006378 <RTC_EnterInitMode+0x74>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <RTC_EnterInitMode+0x6a>
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b03      	cmp	r3, #3
 8006368:	d1e2      	bne.n	8006330 <RTC_EnterInitMode+0x2c>
 800636a:	e000      	b.n	800636e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800636c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	46007800 	.word	0x46007800

0800637c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006388:	4b1a      	ldr	r3, [pc, #104]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	4a19      	ldr	r2, [pc, #100]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 800638e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006392:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006394:	4b17      	ldr	r3, [pc, #92]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10c      	bne.n	80063ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ff7d 	bl	80062a0 <HAL_RTC_WaitForSynchro>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01e      	beq.n	80063ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2203      	movs	r2, #3
 80063b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	e017      	b.n	80063ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063ba:	4b0e      	ldr	r3, [pc, #56]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	4a0d      	ldr	r2, [pc, #52]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 80063c0:	f023 0320 	bic.w	r3, r3, #32
 80063c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff ff6a 	bl	80062a0 <HAL_RTC_WaitForSynchro>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2203      	movs	r2, #3
 80063d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063de:	4b05      	ldr	r3, [pc, #20]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	4a04      	ldr	r2, [pc, #16]	@ (80063f4 <RTC_ExitInitMode+0x78>)
 80063e4:	f043 0320 	orr.w	r3, r3, #32
 80063e8:	6193      	str	r3, [r2, #24]
  }
  return status;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	46007800 	.word	0x46007800

080063f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800640a:	e005      	b.n	8006418 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006412:	7afb      	ldrb	r3, [r7, #11]
 8006414:	3b0a      	subs	r3, #10
 8006416:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006418:	7afb      	ldrb	r3, [r7, #11]
 800641a:	2b09      	cmp	r3, #9
 800641c:	d8f6      	bhi.n	800640c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	b2da      	uxtb	r2, r3
 8006426:	7afb      	ldrb	r3, [r7, #11]
 8006428:	4313      	orrs	r3, r2
 800642a:	b2db      	uxtb	r3, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4910      	ldr	r1, [pc, #64]	@ (800648c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800644c:	4313      	orrs	r3, r2
 800644e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	431a      	orrs	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	490c      	ldr	r1, [pc, #48]	@ (8006490 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006460:	4313      	orrs	r3, r2
 8006462:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8006464:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6919      	ldr	r1, [r3, #16]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	041b      	lsls	r3, r3, #16
 8006476:	430b      	orrs	r3, r1
 8006478:	4905      	ldr	r1, [pc, #20]	@ (8006490 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800647a:	4313      	orrs	r3, r2
 800647c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	46007800 	.word	0x46007800
 8006490:	46007c00 	.word	0x46007c00

08006494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e049      	b.n	800653a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fa fc16 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f000 f836 	bl	8006544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a6b      	ldr	r2, [pc, #428]	@ (8006704 <TIM_Base_SetConfig+0x1c0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d02b      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a6a      	ldr	r2, [pc, #424]	@ (8006708 <TIM_Base_SetConfig+0x1c4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d027      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800656a:	d023      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006572:	d01f      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a65      	ldr	r2, [pc, #404]	@ (800670c <TIM_Base_SetConfig+0x1c8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d01b      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a64      	ldr	r2, [pc, #400]	@ (8006710 <TIM_Base_SetConfig+0x1cc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d017      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a63      	ldr	r2, [pc, #396]	@ (8006714 <TIM_Base_SetConfig+0x1d0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a62      	ldr	r2, [pc, #392]	@ (8006718 <TIM_Base_SetConfig+0x1d4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00f      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a61      	ldr	r2, [pc, #388]	@ (800671c <TIM_Base_SetConfig+0x1d8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a60      	ldr	r2, [pc, #384]	@ (8006720 <TIM_Base_SetConfig+0x1dc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a5f      	ldr	r2, [pc, #380]	@ (8006724 <TIM_Base_SetConfig+0x1e0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_Base_SetConfig+0x70>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006728 <TIM_Base_SetConfig+0x1e4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d108      	bne.n	80065c6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a4e      	ldr	r2, [pc, #312]	@ (8006704 <TIM_Base_SetConfig+0x1c0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d043      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a4d      	ldr	r2, [pc, #308]	@ (8006708 <TIM_Base_SetConfig+0x1c4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d03f      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065dc:	d03b      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065e4:	d037      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a48      	ldr	r2, [pc, #288]	@ (800670c <TIM_Base_SetConfig+0x1c8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d033      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a47      	ldr	r2, [pc, #284]	@ (8006710 <TIM_Base_SetConfig+0x1cc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d02f      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a46      	ldr	r2, [pc, #280]	@ (8006714 <TIM_Base_SetConfig+0x1d0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02b      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a45      	ldr	r2, [pc, #276]	@ (8006718 <TIM_Base_SetConfig+0x1d4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d027      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a44      	ldr	r2, [pc, #272]	@ (800671c <TIM_Base_SetConfig+0x1d8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d023      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a43      	ldr	r2, [pc, #268]	@ (8006720 <TIM_Base_SetConfig+0x1dc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01f      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a42      	ldr	r2, [pc, #264]	@ (8006724 <TIM_Base_SetConfig+0x1e0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01b      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a41      	ldr	r2, [pc, #260]	@ (8006728 <TIM_Base_SetConfig+0x1e4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d017      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a40      	ldr	r2, [pc, #256]	@ (800672c <TIM_Base_SetConfig+0x1e8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d013      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a3f      	ldr	r2, [pc, #252]	@ (8006730 <TIM_Base_SetConfig+0x1ec>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00f      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a3e      	ldr	r2, [pc, #248]	@ (8006734 <TIM_Base_SetConfig+0x1f0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00b      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a3d      	ldr	r2, [pc, #244]	@ (8006738 <TIM_Base_SetConfig+0x1f4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d007      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a3c      	ldr	r2, [pc, #240]	@ (800673c <TIM_Base_SetConfig+0x1f8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_Base_SetConfig+0x112>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a3b      	ldr	r2, [pc, #236]	@ (8006740 <TIM_Base_SetConfig+0x1fc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d108      	bne.n	8006668 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800665c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1e      	ldr	r2, [pc, #120]	@ (8006704 <TIM_Base_SetConfig+0x1c0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d023      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <TIM_Base_SetConfig+0x1c4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01f      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a22      	ldr	r2, [pc, #136]	@ (8006724 <TIM_Base_SetConfig+0x1e0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01b      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a21      	ldr	r2, [pc, #132]	@ (8006728 <TIM_Base_SetConfig+0x1e4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d017      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a20      	ldr	r2, [pc, #128]	@ (800672c <TIM_Base_SetConfig+0x1e8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006730 <TIM_Base_SetConfig+0x1ec>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006734 <TIM_Base_SetConfig+0x1f0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <TIM_Base_SetConfig+0x1f4>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <TIM_Base_SetConfig+0x1f8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_Base_SetConfig+0x192>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006740 <TIM_Base_SetConfig+0x1fc>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d103      	bne.n	80066de <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	50012c00 	.word	0x50012c00
 800670c:	40000400 	.word	0x40000400
 8006710:	50000400 	.word	0x50000400
 8006714:	40000800 	.word	0x40000800
 8006718:	50000800 	.word	0x50000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	50000c00 	.word	0x50000c00
 8006724:	40013400 	.word	0x40013400
 8006728:	50013400 	.word	0x50013400
 800672c:	40014000 	.word	0x40014000
 8006730:	50014000 	.word	0x50014000
 8006734:	40014400 	.word	0x40014400
 8006738:	50014400 	.word	0x50014400
 800673c:	40014800 	.word	0x40014800
 8006740:	50014800 	.word	0x50014800

08006744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e042      	b.n	80067dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7fa fae1 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2224      	movs	r2, #36	@ 0x24
 8006772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fd5e 	bl	8007250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fbb9 	bl	8006f0c <UART_SetConfig>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e01b      	b.n	80067dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fddd 	bl	8007394 <UART_CheckIdleState>
 80067da:	4603      	mov	r3, r0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	@ 0x28
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	4613      	mov	r3, r2
 80067f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	f040 808b 	bne.w	8006916 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_UART_Transmit+0x28>
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e083      	b.n	8006918 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681a:	2b80      	cmp	r3, #128	@ 0x80
 800681c:	d107      	bne.n	800682e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800682c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	@ 0x21
 800683a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800683e:	f7fa fdd1 	bl	80013e4 <HAL_GetTick>
 8006842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	88fa      	ldrh	r2, [r7, #6]
 8006848:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	88fa      	ldrh	r2, [r7, #6]
 8006850:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685c:	d108      	bne.n	8006870 <HAL_UART_Transmit+0x8c>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	e003      	b.n	8006878 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006874:	2300      	movs	r3, #0
 8006876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006878:	e030      	b.n	80068dc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2200      	movs	r2, #0
 8006882:	2180      	movs	r1, #128	@ 0x80
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fe2f 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e03d      	b.n	8006918 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	3302      	adds	r3, #2
 80068b6:	61bb      	str	r3, [r7, #24]
 80068b8:	e007      	b.n	80068ca <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	3301      	adds	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1c8      	bne.n	800687a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	2140      	movs	r1, #64	@ 0x40
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fdf8 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e006      	b.n	8006918 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e000      	b.n	8006918 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006916:	2302      	movs	r3, #2
  }
}
 8006918:	4618      	mov	r0, r3
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b0ae      	sub	sp, #184	@ 0xb8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800694a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800694e:	4013      	ands	r3, r2
 8006950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8006954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11b      	bne.n	8006994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800695c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d105      	bne.n	8006980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8297 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
      }
      return;
 8006992:	e291      	b.n	8006eb8 <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80fd 	beq.w	8006b98 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800699e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069a2:	4b7a      	ldr	r3, [pc, #488]	@ (8006b8c <HAL_UART_IRQHandler+0x26c>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069ae:	4b78      	ldr	r3, [pc, #480]	@ (8006b90 <HAL_UART_IRQHandler+0x270>)
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80f0 	beq.w	8006b98 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d011      	beq.n	80069e8 <HAL_UART_IRQHandler+0xc8>
 80069c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80069c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2201      	movs	r2, #1
 80069d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d011      	beq.n	8006a18 <HAL_UART_IRQHandler+0xf8>
 80069f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2202      	movs	r2, #2
 8006a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0e:	f043 0204 	orr.w	r2, r3, #4
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d011      	beq.n	8006a48 <HAL_UART_IRQHandler+0x128>
 8006a24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2204      	movs	r2, #4
 8006a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3e:	f043 0202 	orr.w	r2, r3, #2
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d017      	beq.n	8006a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a64:	4b49      	ldr	r3, [pc, #292]	@ (8006b8c <HAL_UART_IRQHandler+0x26c>)
 8006a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2208      	movs	r2, #8
 8006a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	f043 0208 	orr.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d012      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x196>
 8006a90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00c      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aac:	f043 0220 	orr.w	r2, r3, #32
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 81fd 	beq.w	8006ebc <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d013      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ace:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d005      	beq.n	8006b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006b12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d02e      	beq.n	8006b78 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fe74 	bl	8007808 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	d120      	bne.n	8006b70 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d017      	beq.n	8006b68 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3e:	4a15      	ldr	r2, [pc, #84]	@ (8006b94 <HAL_UART_IRQHandler+0x274>)
 8006b40:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fa fe67 	bl	800181c <HAL_DMA_Abort_IT>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d019      	beq.n	8006b88 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006b62:	4610      	mov	r0, r2
 8006b64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b66:	e00f      	b.n	8006b88 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9c5 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6e:	e00b      	b.n	8006b88 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f9c1 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b76:	e007      	b.n	8006b88 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f9bd 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006b86:	e199      	b.n	8006ebc <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	bf00      	nop
    return;
 8006b8a:	e197      	b.n	8006ebc <HAL_UART_IRQHandler+0x59c>
 8006b8c:	10000001 	.word	0x10000001
 8006b90:	04000120 	.word	0x04000120
 8006b94:	080078d5 	.word	0x080078d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 8142 	bne.w	8006e26 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 813b 	beq.w	8006e26 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 8134 	beq.w	8006e26 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2210      	movs	r2, #16
 8006bc4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	f040 80aa 	bne.w	8006d2a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8006be4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8084 	beq.w	8006cf6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bf4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d27c      	bcs.n	8006cf6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006c02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0e:	2b81      	cmp	r3, #129	@ 0x81
 8006c10:	d060      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c38:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e2      	bne.n	8006c12 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3308      	adds	r3, #8
 8006c52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006c70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e3      	bne.n	8006c4c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9a:	e853 3f00 	ldrex	r3, [r3]
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ca0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca2:	f023 0310 	bic.w	r3, r3, #16
 8006ca6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cb6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e4      	bne.n	8006c92 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fa fd28 	bl	8001724 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fa f96c 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006cf4:	e0e4      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cfc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8006d00:	429a      	cmp	r2, r3
 8006d02:	f040 80dd 	bne.w	8006ec0 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d0e:	2b81      	cmp	r3, #129	@ 0x81
 8006d10:	f040 80d6 	bne.w	8006ec0 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fa f952 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
      return;
 8006d28:	e0ca      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80bc 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 8006d4c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80b7 	beq.w	8006ec4 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e4      	bne.n	8006d56 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006da2:	f023 0301 	bic.w	r3, r3, #1
 8006da6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006db4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e1      	bne.n	8006d8c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f023 0310 	bic.w	r3, r3, #16
 8006df0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006dfe:	61fb      	str	r3, [r7, #28]
 8006e00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	69b9      	ldr	r1, [r7, #24]
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e4      	bne.n	8006ddc <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e18:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fa f8d4 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e24:	e04e      	b.n	8006ec4 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d014      	beq.n	8006e5c <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d105      	bne.n	8006e4a <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d03a      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
    }
    return;
 8006e5a:	e035      	b.n	8006ec8 <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <HAL_UART_IRQHandler+0x55c>
 8006e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fd3f 	bl	80078f8 <UART_EndTransmit_IT>
    return;
 8006e7a:	e026      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d009      	beq.n	8006e9c <HAL_UART_IRQHandler+0x57c>
 8006e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fa9d 	bl	80083d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e9a:	e016      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <HAL_UART_IRQHandler+0x5aa>
 8006ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da0c      	bge.n	8006eca <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fa85 	bl	80083c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eb6:	e008      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
      return;
 8006eb8:	bf00      	nop
 8006eba:	e006      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
    return;
 8006ebc:	bf00      	nop
 8006ebe:	e004      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
      return;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
      return;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <HAL_UART_IRQHandler+0x5aa>
    return;
 8006ec8:	bf00      	nop
  }
}
 8006eca:	37b8      	adds	r7, #184	@ 0xb8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f10:	b094      	sub	sp, #80	@ 0x50
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b7e      	ldr	r3, [pc, #504]	@ (800711c <UART_SetConfig+0x210>)
 8006f22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4977      	ldr	r1, [pc, #476]	@ (8007120 <UART_SetConfig+0x214>)
 8006f44:	4019      	ands	r1, r3
 8006f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5c:	68d9      	ldr	r1, [r3, #12]
 8006f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	ea40 0301 	orr.w	r3, r0, r1
 8006f66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b6a      	ldr	r3, [pc, #424]	@ (800711c <UART_SetConfig+0x210>)
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d009      	beq.n	8006f8c <UART_SetConfig+0x80>
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b69      	ldr	r3, [pc, #420]	@ (8007124 <UART_SetConfig+0x218>)
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d004      	beq.n	8006f8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006f96:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	f023 000f 	bic.w	r0, r3, #15
 8006fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	ea40 0301 	orr.w	r3, r0, r1
 8006fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	4b59      	ldr	r3, [pc, #356]	@ (8007128 <UART_SetConfig+0x21c>)
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d102      	bne.n	8006fcc <UART_SetConfig+0xc0>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fca:	e029      	b.n	8007020 <UART_SetConfig+0x114>
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b56      	ldr	r3, [pc, #344]	@ (800712c <UART_SetConfig+0x220>)
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d102      	bne.n	8006fdc <UART_SetConfig+0xd0>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fda:	e021      	b.n	8007020 <UART_SetConfig+0x114>
 8006fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b53      	ldr	r3, [pc, #332]	@ (8007130 <UART_SetConfig+0x224>)
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d102      	bne.n	8006fec <UART_SetConfig+0xe0>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fea:	e019      	b.n	8007020 <UART_SetConfig+0x114>
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4b50      	ldr	r3, [pc, #320]	@ (8007134 <UART_SetConfig+0x228>)
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d102      	bne.n	8006ffc <UART_SetConfig+0xf0>
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ffa:	e011      	b.n	8007020 <UART_SetConfig+0x114>
 8006ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	4b4d      	ldr	r3, [pc, #308]	@ (8007138 <UART_SetConfig+0x22c>)
 8007002:	429a      	cmp	r2, r3
 8007004:	d102      	bne.n	800700c <UART_SetConfig+0x100>
 8007006:	2310      	movs	r3, #16
 8007008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800700a:	e009      	b.n	8007020 <UART_SetConfig+0x114>
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b42      	ldr	r3, [pc, #264]	@ (800711c <UART_SetConfig+0x210>)
 8007012:	429a      	cmp	r2, r3
 8007014:	d102      	bne.n	800701c <UART_SetConfig+0x110>
 8007016:	2320      	movs	r3, #32
 8007018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800701a:	e001      	b.n	8007020 <UART_SetConfig+0x114>
 800701c:	2300      	movs	r3, #0
 800701e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b3d      	ldr	r3, [pc, #244]	@ (800711c <UART_SetConfig+0x210>)
 8007026:	429a      	cmp	r2, r3
 8007028:	d005      	beq.n	8007036 <UART_SetConfig+0x12a>
 800702a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	4b3d      	ldr	r3, [pc, #244]	@ (8007124 <UART_SetConfig+0x218>)
 8007030:	429a      	cmp	r2, r3
 8007032:	f040 8085 	bne.w	8007140 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007038:	2200      	movs	r2, #0
 800703a:	623b      	str	r3, [r7, #32]
 800703c:	627a      	str	r2, [r7, #36]	@ 0x24
 800703e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007042:	f7fd fc6f 	bl	8004924 <HAL_RCCEx_GetPeriphCLKFreq>
 8007046:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80e8 	beq.w	8007220 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007054:	4a39      	ldr	r2, [pc, #228]	@ (800713c <UART_SetConfig+0x230>)
 8007056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800705a:	461a      	mov	r2, r3
 800705c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800705e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	4613      	mov	r3, r2
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007070:	429a      	cmp	r2, r3
 8007072:	d305      	bcc.n	8007080 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800707a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800707c:	429a      	cmp	r2, r3
 800707e:	d903      	bls.n	8007088 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007086:	e048      	b.n	800711a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708a:	2200      	movs	r2, #0
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	61fa      	str	r2, [r7, #28]
 8007090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007094:	4a29      	ldr	r2, [pc, #164]	@ (800713c <UART_SetConfig+0x230>)
 8007096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800709a:	b29b      	uxth	r3, r3
 800709c:	2200      	movs	r2, #0
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	617a      	str	r2, [r7, #20]
 80070a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070aa:	f7f9 f8e5 	bl	8000278 <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	020b      	lsls	r3, r1, #8
 80070c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070c4:	0202      	lsls	r2, r0, #8
 80070c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070c8:	6849      	ldr	r1, [r1, #4]
 80070ca:	0849      	lsrs	r1, r1, #1
 80070cc:	2000      	movs	r0, #0
 80070ce:	460c      	mov	r4, r1
 80070d0:	4605      	mov	r5, r0
 80070d2:	eb12 0804 	adds.w	r8, r2, r4
 80070d6:	eb43 0905 	adc.w	r9, r3, r5
 80070da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	60fa      	str	r2, [r7, #12]
 80070e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070e8:	4640      	mov	r0, r8
 80070ea:	4649      	mov	r1, r9
 80070ec:	f7f9 f8c4 	bl	8000278 <__aeabi_uldivmod>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4613      	mov	r3, r2
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070fe:	d308      	bcc.n	8007112 <UART_SetConfig+0x206>
 8007100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007106:	d204      	bcs.n	8007112 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800710e:	60da      	str	r2, [r3, #12]
 8007110:	e003      	b.n	800711a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8007118:	e082      	b.n	8007220 <UART_SetConfig+0x314>
 800711a:	e081      	b.n	8007220 <UART_SetConfig+0x314>
 800711c:	46002400 	.word	0x46002400
 8007120:	cfff69f3 	.word	0xcfff69f3
 8007124:	56002400 	.word	0x56002400
 8007128:	40013800 	.word	0x40013800
 800712c:	40004400 	.word	0x40004400
 8007130:	40004800 	.word	0x40004800
 8007134:	40004c00 	.word	0x40004c00
 8007138:	40005000 	.word	0x40005000
 800713c:	080089ac 	.word	0x080089ac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007148:	d13c      	bne.n	80071c4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800714a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800714c:	2200      	movs	r2, #0
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007156:	f7fd fbe5 	bl	8004924 <HAL_RCCEx_GetPeriphCLKFreq>
 800715a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800715c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d05e      	beq.n	8007220 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	4a39      	ldr	r2, [pc, #228]	@ (800724c <UART_SetConfig+0x340>)
 8007168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800716c:	461a      	mov	r2, r3
 800716e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007170:	fbb3 f3f2 	udiv	r3, r3, r2
 8007174:	005a      	lsls	r2, r3, #1
 8007176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	085b      	lsrs	r3, r3, #1
 800717c:	441a      	add	r2, r3
 800717e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	fbb2 f3f3 	udiv	r3, r2, r3
 8007186:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718a:	2b0f      	cmp	r3, #15
 800718c:	d916      	bls.n	80071bc <UART_SetConfig+0x2b0>
 800718e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007194:	d212      	bcs.n	80071bc <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007198:	b29b      	uxth	r3, r3
 800719a:	f023 030f 	bic.w	r3, r3, #15
 800719e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a2:	085b      	lsrs	r3, r3, #1
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80071ae:	4313      	orrs	r3, r2
 80071b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80071b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80071b8:	60da      	str	r2, [r3, #12]
 80071ba:	e031      	b.n	8007220 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80071c2:	e02d      	b.n	8007220 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80071c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071c6:	2200      	movs	r2, #0
 80071c8:	469a      	mov	sl, r3
 80071ca:	4693      	mov	fp, r2
 80071cc:	4650      	mov	r0, sl
 80071ce:	4659      	mov	r1, fp
 80071d0:	f7fd fba8 	bl	8004924 <HAL_RCCEx_GetPeriphCLKFreq>
 80071d4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80071d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d021      	beq.n	8007220 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e0:	4a1a      	ldr	r2, [pc, #104]	@ (800724c <UART_SetConfig+0x340>)
 80071e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80071ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	441a      	add	r2, r3
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007202:	2b0f      	cmp	r3, #15
 8007204:	d909      	bls.n	800721a <UART_SetConfig+0x30e>
 8007206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800720c:	d205      	bcs.n	800721a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800720e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007210:	b29a      	uxth	r2, r3
 8007212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60da      	str	r2, [r3, #12]
 8007218:	e002      	b.n	8007220 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007222:	2201      	movs	r2, #1
 8007224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007232:	2200      	movs	r2, #0
 8007234:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	2200      	movs	r2, #0
 800723a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800723c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007240:	4618      	mov	r0, r3
 8007242:	3750      	adds	r7, #80	@ 0x50
 8007244:	46bd      	mov	sp, r7
 8007246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800724a:	bf00      	nop
 800724c:	080089ac 	.word	0x080089ac

08007250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01a      	beq.n	8007366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800734a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800734e:	d10a      	bne.n	8007366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	605a      	str	r2, [r3, #4]
  }
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b098      	sub	sp, #96	@ 0x60
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a4:	f7fa f81e 	bl	80013e4 <HAL_GetTick>
 80073a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d12f      	bne.n	8007418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c0:	2200      	movs	r2, #0
 80073c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f88e 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d022      	beq.n	8007418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e063      	b.n	80074e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b04      	cmp	r3, #4
 8007424:	d149      	bne.n	80074ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007426:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742e:	2200      	movs	r2, #0
 8007430:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f857 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d03c      	beq.n	80074ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	623b      	str	r3, [r7, #32]
   return(result);
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007460:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	60fb      	str	r3, [r7, #12]
   return(result);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007492:	61fa      	str	r2, [r7, #28]
 8007494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	69b9      	ldr	r1, [r7, #24]
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	617b      	str	r3, [r7, #20]
   return(result);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e012      	b.n	80074e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3758      	adds	r7, #88	@ 0x58
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f8:	e04f      	b.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d04b      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007502:	f7f9 ff6f 	bl	80013e4 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	429a      	cmp	r2, r3
 8007510:	d302      	bcc.n	8007518 <UART_WaitOnFlagUntilTimeout+0x30>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e04e      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d037      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b80      	cmp	r3, #128	@ 0x80
 800752e:	d034      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b40      	cmp	r3, #64	@ 0x40
 8007534:	d031      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d110      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2208      	movs	r2, #8
 800754a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f95b 	bl	8007808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2208      	movs	r2, #8
 8007556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e029      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007574:	d111      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800757e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f941 	bl	8007808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e00f      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d0a0      	beq.n	80074fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b0a3      	sub	sp, #140	@ 0x8c
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	88fa      	ldrh	r2, [r7, #6]
 80075dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f6:	d10e      	bne.n	8007616 <UART_Start_Receive_IT+0x52>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d105      	bne.n	800760c <UART_Start_Receive_IT+0x48>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007606:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800760a:	e02d      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	22ff      	movs	r2, #255	@ 0xff
 8007610:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007614:	e028      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <UART_Start_Receive_IT+0x76>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <UART_Start_Receive_IT+0x6c>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	22ff      	movs	r2, #255	@ 0xff
 800762a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800762e:	e01b      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	227f      	movs	r2, #127	@ 0x7f
 8007634:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007638:	e016      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007642:	d10d      	bne.n	8007660 <UART_Start_Receive_IT+0x9c>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <UART_Start_Receive_IT+0x92>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	227f      	movs	r2, #127	@ 0x7f
 8007650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007654:	e008      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	223f      	movs	r2, #63	@ 0x3f
 800765a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800765e:	e003      	b.n	8007668 <UART_Start_Receive_IT+0xa4>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2222      	movs	r2, #34	@ 0x22
 8007674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800769c:	673a      	str	r2, [r7, #112]	@ 0x70
 800769e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80076a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80076aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e3      	bne.n	8007678 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b8:	d14f      	bne.n	800775a <UART_Start_Receive_IT+0x196>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076c0:	88fa      	ldrh	r2, [r7, #6]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d349      	bcc.n	800775a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ce:	d107      	bne.n	80076e0 <UART_Start_Receive_IT+0x11c>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d103      	bne.n	80076e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	4a47      	ldr	r2, [pc, #284]	@ (80077f8 <UART_Start_Receive_IT+0x234>)
 80076dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80076de:	e002      	b.n	80076e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a46      	ldr	r2, [pc, #280]	@ (80077fc <UART_Start_Receive_IT+0x238>)
 80076e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01a      	beq.n	8007724 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80076fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007712:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007716:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800771e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800773a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007744:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007746:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800774a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_Start_Receive_IT+0x160>
 8007758:	e046      	b.n	80077e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007762:	d107      	bne.n	8007774 <UART_Start_Receive_IT+0x1b0>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4a24      	ldr	r2, [pc, #144]	@ (8007800 <UART_Start_Receive_IT+0x23c>)
 8007770:	675a      	str	r2, [r3, #116]	@ 0x74
 8007772:	e002      	b.n	800777a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a23      	ldr	r2, [pc, #140]	@ (8007804 <UART_Start_Receive_IT+0x240>)
 8007778:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d019      	beq.n	80077b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007796:	677b      	str	r3, [r7, #116]	@ 0x74
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077a8:	e841 2300 	strex	r3, r2, [r1]
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80077ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e6      	bne.n	8007782 <UART_Start_Receive_IT+0x1be>
 80077b4:	e018      	b.n	80077e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	613b      	str	r3, [r7, #16]
   return(result);
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f043 0320 	orr.w	r3, r3, #32
 80077ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d8:	69f9      	ldr	r1, [r7, #28]
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e6      	bne.n	80077b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	378c      	adds	r7, #140	@ 0x8c
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	08008049 	.word	0x08008049
 80077fc:	08007cd9 	.word	0x08007cd9
 8007800:	08007b15 	.word	0x08007b15
 8007804:	08007951 	.word	0x08007951

08007808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b095      	sub	sp, #84	@ 0x54
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800782e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007830:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e6      	bne.n	8007810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	61fb      	str	r3, [r7, #28]
   return(result);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800786c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e3      	bne.n	8007842 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d118      	bne.n	80078b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	647b      	str	r3, [r7, #68]	@ 0x44
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6979      	ldr	r1, [r7, #20]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	613b      	str	r3, [r7, #16]
   return(result);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e6      	bne.n	8007882 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078c8:	bf00      	nop
 80078ca:	3754      	adds	r7, #84	@ 0x54
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fb04 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	e853 3f00 	ldrex	r3, [r3]
 800790c:	60bb      	str	r3, [r7, #8]
   return(result);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	61bb      	str	r3, [r7, #24]
 8007920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6979      	ldr	r1, [r7, #20]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	613b      	str	r3, [r7, #16]
   return(result);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e6      	bne.n	8007900 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fac5 	bl	8006ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007946:	bf00      	nop
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b09c      	sub	sp, #112	@ 0x70
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800795e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007968:	2b22      	cmp	r3, #34	@ 0x22
 800796a:	f040 80c3 	bne.w	8007af4 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007974:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800797c:	b2d9      	uxtb	r1, r3
 800797e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007982:	b2da      	uxtb	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007988:	400a      	ands	r2, r1
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f040 80a6 	bne.w	8007b04 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a35      	ldr	r2, [pc, #212]	@ (8007b0c <UART_RxISR_8BIT+0x1bc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d024      	beq.n	8007a86 <UART_RxISR_8BIT+0x136>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a33      	ldr	r2, [pc, #204]	@ (8007b10 <UART_RxISR_8BIT+0x1c0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d01f      	beq.n	8007a86 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d018      	beq.n	8007a86 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	623b      	str	r3, [r7, #32]
   return(result);
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d12e      	bne.n	8007aec <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f023 0310 	bic.w	r3, r3, #16
 8007aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ab2:	61fb      	str	r3, [r7, #28]
 8007ab4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	69b9      	ldr	r1, [r7, #24]
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e6      	bne.n	8007a94 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	d103      	bne.n	8007adc <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2210      	movs	r2, #16
 8007ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7f9 fa71 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aea:	e00b      	b.n	8007b04 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff f9f9 	bl	8006ee4 <HAL_UART_RxCpltCallback>
}
 8007af2:	e007      	b.n	8007b04 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0208 	orr.w	r2, r2, #8
 8007b02:	619a      	str	r2, [r3, #24]
}
 8007b04:	bf00      	nop
 8007b06:	3770      	adds	r7, #112	@ 0x70
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	46002400 	.word	0x46002400
 8007b10:	56002400 	.word	0x56002400

08007b14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b09c      	sub	sp, #112	@ 0x70
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b2c:	2b22      	cmp	r3, #34	@ 0x22
 8007b2e:	f040 80c3 	bne.w	8007cb8 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007b46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 80a6 	bne.w	8007cc8 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b90:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ba0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e6      	bne.n	8007b7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc0:	f023 0301 	bic.w	r3, r3, #1
 8007bc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007bce:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a35      	ldr	r2, [pc, #212]	@ (8007cd0 <UART_RxISR_16BIT+0x1bc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d024      	beq.n	8007c4a <UART_RxISR_16BIT+0x136>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a33      	ldr	r2, [pc, #204]	@ (8007cd4 <UART_RxISR_16BIT+0x1c0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d01f      	beq.n	8007c4a <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d018      	beq.n	8007c4a <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c38:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d12e      	bne.n	8007cb0 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f023 0310 	bic.w	r3, r3, #16
 8007c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6979      	ldr	r1, [r7, #20]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	613b      	str	r3, [r7, #16]
   return(result);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e6      	bne.n	8007c58 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d103      	bne.n	8007ca0 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2210      	movs	r2, #16
 8007c9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7f9 f98f 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cae:	e00b      	b.n	8007cc8 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff f917 	bl	8006ee4 <HAL_UART_RxCpltCallback>
}
 8007cb6:	e007      	b.n	8007cc8 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	699a      	ldr	r2, [r3, #24]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0208 	orr.w	r2, r2, #8
 8007cc6:	619a      	str	r2, [r3, #24]
}
 8007cc8:	bf00      	nop
 8007cca:	3770      	adds	r7, #112	@ 0x70
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	46002400 	.word	0x46002400
 8007cd4:	56002400 	.word	0x56002400

08007cd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b0ac      	sub	sp, #176	@ 0xb0
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ce6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d0e:	2b22      	cmp	r3, #34	@ 0x22
 8007d10:	f040 8188 	bne.w	8008024 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d1a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d1e:	e12b      	b.n	8007f78 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d2a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007d2e:	b2d9      	uxtb	r1, r3
 8007d30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d3a:	400a      	ands	r2, r1
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	3b01      	subs	r3, #1
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d053      	beq.n	8007e1a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d98:	f043 0201 	orr.w	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d011      	beq.n	8007dd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dc8:	f043 0204 	orr.w	r2, r3, #4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d011      	beq.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2204      	movs	r2, #4
 8007df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007df8:	f043 0202 	orr.w	r2, r3, #2
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff f873 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 80a8 	bne.w	8007f78 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e4c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007e50:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007e58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e4      	bne.n	8007e28 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3308      	adds	r3, #8
 8007e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e86:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007e88:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007e8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007e94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e1      	bne.n	8007e5e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a62      	ldr	r2, [pc, #392]	@ (800803c <UART_RxISR_8BIT_FIFOEN+0x364>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d026      	beq.n	8007f06 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a60      	ldr	r2, [pc, #384]	@ (8008040 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d021      	beq.n	8007f06 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d01a      	beq.n	8007f06 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007ef2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ef4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ef8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e4      	bne.n	8007ed0 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d130      	bne.n	8007f70 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	f023 0310 	bic.w	r3, r3, #16
 8007f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e4      	bne.n	8007f14 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	d103      	bne.n	8007f60 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2210      	movs	r2, #16
 8007f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7f9 f82f 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007f6e:	e00e      	b.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7fe ffb7 	bl	8006ee4 <HAL_UART_RxCpltCallback>
        break;
 8007f76:	e00a      	b.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d006      	beq.n	8007f8e <UART_RxISR_8BIT_FIFOEN+0x2b6>
 8007f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f47f aec9 	bne.w	8007d20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d049      	beq.n	8008034 <UART_RxISR_8BIT_FIFOEN+0x35c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007fa6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d242      	bcs.n	8008034 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3308      	adds	r3, #8
 8007fce:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fda:	e841 2300 	strex	r3, r2, [r1]
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1e3      	bne.n	8007fae <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8007fea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f043 0320 	orr.w	r3, r3, #32
 8008000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6979      	ldr	r1, [r7, #20]
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	613b      	str	r3, [r7, #16]
   return(result);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e4      	bne.n	8007fec <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008022:	e007      	b.n	8008034 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0208 	orr.w	r2, r2, #8
 8008032:	619a      	str	r2, [r3, #24]
}
 8008034:	bf00      	nop
 8008036:	37b0      	adds	r7, #176	@ 0xb0
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	46002400 	.word	0x46002400
 8008040:	56002400 	.word	0x56002400
 8008044:	08007951 	.word	0x08007951

08008048 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b0ae      	sub	sp, #184	@ 0xb8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008056:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800807e:	2b22      	cmp	r3, #34	@ 0x22
 8008080:	f040 818c 	bne.w	800839c <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800808a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800808e:	e12f      	b.n	80082f0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008096:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80080a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80080a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80080aa:	4013      	ands	r3, r2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80080b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b8:	1c9a      	adds	r2, r3, #2
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d053      	beq.n	800818e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d011      	beq.n	8008116 <UART_RxISR_16BIT_FIFOEN+0xce>
 80080f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2201      	movs	r2, #1
 8008104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810c:	f043 0201 	orr.w	r2, r3, #1
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d011      	beq.n	8008146 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2202      	movs	r2, #2
 8008134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800813c:	f043 0204 	orr.w	r2, r3, #4
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2204      	movs	r2, #4
 8008164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816c:	f043 0202 	orr.w	r2, r3, #2
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7fe feb9 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008194:	b29b      	uxth	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 80aa 	bne.w	80082f0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80081c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e2      	bne.n	800819c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3308      	adds	r3, #8
 80081fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80081fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008200:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008204:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800820c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e1      	bne.n	80081d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a62      	ldr	r2, [pc, #392]	@ (80083b4 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d026      	beq.n	800827e <UART_RxISR_16BIT_FIFOEN+0x236>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a60      	ldr	r2, [pc, #384]	@ (80083b8 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d021      	beq.n	800827e <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01a      	beq.n	800827e <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008258:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800825c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800826a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800826c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008270:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008278:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e4      	bne.n	8008248 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008282:	2b01      	cmp	r3, #1
 8008284:	d130      	bne.n	80082e8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800829a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829c:	f023 0310 	bic.w	r3, r3, #16
 80082a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e4      	bne.n	800828c <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d103      	bne.n	80082d8 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2210      	movs	r2, #16
 80082d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7f8 fe73 	bl	8000fcc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80082e6:	e00e      	b.n	8008306 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fe fdfb 	bl	8006ee4 <HAL_UART_RxCpltCallback>
        break;
 80082ee:	e00a      	b.n	8008306 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80082f0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d006      	beq.n	8008306 <UART_RxISR_16BIT_FIFOEN+0x2be>
 80082f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	f47f aec5 	bne.w	8008090 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800830c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008310:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008314:	2b00      	cmp	r3, #0
 8008316:	d049      	beq.n	80083ac <UART_RxISR_16BIT_FIFOEN+0x364>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800831e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008322:	429a      	cmp	r2, r3
 8008324:	d242      	bcs.n	80083ac <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008330:	e853 3f00 	ldrex	r3, [r3]
 8008334:	623b      	str	r3, [r7, #32]
   return(result);
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800833c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3308      	adds	r3, #8
 8008346:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800834a:	633a      	str	r2, [r7, #48]	@ 0x30
 800834c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e3      	bne.n	8008326 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a16      	ldr	r2, [pc, #88]	@ (80083bc <UART_RxISR_16BIT_FIFOEN+0x374>)
 8008362:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	e853 3f00 	ldrex	r3, [r3]
 8008370:	60fb      	str	r3, [r7, #12]
   return(result);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f043 0320 	orr.w	r3, r3, #32
 8008378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008386:	61fb      	str	r3, [r7, #28]
 8008388:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	69b9      	ldr	r1, [r7, #24]
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	617b      	str	r3, [r7, #20]
   return(result);
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e4      	bne.n	8008364 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800839a:	e007      	b.n	80083ac <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0208 	orr.w	r2, r2, #8
 80083aa:	619a      	str	r2, [r3, #24]
}
 80083ac:	bf00      	nop
 80083ae:	37b8      	adds	r7, #184	@ 0xb8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	46002400 	.word	0x46002400
 80083b8:	56002400 	.word	0x56002400
 80083bc:	08007b15 	.word	0x08007b15

080083c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_UARTEx_DisableFifoMode+0x16>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e027      	b.n	800844e <HAL_UARTEx_DisableFifoMode+0x66>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2224      	movs	r2, #36	@ 0x24
 800840a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800842c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800846e:	2302      	movs	r3, #2
 8008470:	e02d      	b.n	80084ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2224      	movs	r2, #36	@ 0x24
 800847e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8ae 	bl	8008610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e02d      	b.n	800854a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2224      	movs	r2, #36	@ 0x24
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f870 	bl	8008610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b08c      	sub	sp, #48	@ 0x30
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	4613      	mov	r3, r2
 800855e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800856c:	2b20      	cmp	r3, #32
 800856e:	d14a      	bne.n	8008606 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e043      	b.n	8008608 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858a:	2b40      	cmp	r3, #64	@ 0x40
 800858c:	d107      	bne.n	800859e <HAL_UARTEx_ReceiveToIdle_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800859c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff f807 	bl	80075c4 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d11d      	bne.n	80085fa <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2210      	movs	r2, #16
 80085c4:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	617b      	str	r3, [r7, #20]
   return(result);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f043 0310 	orr.w	r3, r3, #16
 80085da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085e6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6a39      	ldr	r1, [r7, #32]
 80085ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e6      	bne.n	80085c6 <HAL_UARTEx_ReceiveToIdle_IT+0x74>
 80085f8:	e002      	b.n	8008600 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008600:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008604:	e000      	b.n	8008608 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008606:	2302      	movs	r3, #2
  }
}
 8008608:	4618      	mov	r0, r3
 800860a:	3730      	adds	r7, #48	@ 0x30
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800861c:	2b00      	cmp	r3, #0
 800861e:	d108      	bne.n	8008632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008630:	e031      	b.n	8008696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008632:	2308      	movs	r3, #8
 8008634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008636:	2308      	movs	r3, #8
 8008638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	0e5b      	lsrs	r3, r3, #25
 8008642:	b2db      	uxtb	r3, r3
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	0f5b      	lsrs	r3, r3, #29
 8008652:	b2db      	uxtb	r3, r3
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	7b3a      	ldrb	r2, [r7, #12]
 800865e:	4911      	ldr	r1, [pc, #68]	@ (80086a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008660:	5c8a      	ldrb	r2, [r1, r2]
 8008662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008666:	7b3a      	ldrb	r2, [r7, #12]
 8008668:	490f      	ldr	r1, [pc, #60]	@ (80086a8 <UARTEx_SetNbDataToProcess+0x98>)
 800866a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800866c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	7b7a      	ldrb	r2, [r7, #13]
 800867c:	4909      	ldr	r1, [pc, #36]	@ (80086a4 <UARTEx_SetNbDataToProcess+0x94>)
 800867e:	5c8a      	ldrb	r2, [r1, r2]
 8008680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008684:	7b7a      	ldrb	r2, [r7, #13]
 8008686:	4908      	ldr	r1, [pc, #32]	@ (80086a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800868a:	fb93 f3f2 	sdiv	r3, r3, r2
 800868e:	b29a      	uxth	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	080089c4 	.word	0x080089c4
 80086a8:	080089cc 	.word	0x080089cc

080086ac <malloc>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	@ (80086b8 <malloc+0xc>)
 80086ae:	4601      	mov	r1, r0
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f000 b825 	b.w	8008700 <_malloc_r>
 80086b6:	bf00      	nop
 80086b8:	2000000c 	.word	0x2000000c

080086bc <sbrk_aligned>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	4e0f      	ldr	r6, [pc, #60]	@ (80086fc <sbrk_aligned+0x40>)
 80086c0:	460c      	mov	r4, r1
 80086c2:	4605      	mov	r5, r0
 80086c4:	6831      	ldr	r1, [r6, #0]
 80086c6:	b911      	cbnz	r1, 80086ce <sbrk_aligned+0x12>
 80086c8:	f000 f8ae 	bl	8008828 <_sbrk_r>
 80086cc:	6030      	str	r0, [r6, #0]
 80086ce:	4621      	mov	r1, r4
 80086d0:	4628      	mov	r0, r5
 80086d2:	f000 f8a9 	bl	8008828 <_sbrk_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	d103      	bne.n	80086e2 <sbrk_aligned+0x26>
 80086da:	f04f 34ff 	mov.w	r4, #4294967295
 80086de:	4620      	mov	r0, r4
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	1cc4      	adds	r4, r0, #3
 80086e4:	f024 0403 	bic.w	r4, r4, #3
 80086e8:	42a0      	cmp	r0, r4
 80086ea:	d0f8      	beq.n	80086de <sbrk_aligned+0x22>
 80086ec:	1a21      	subs	r1, r4, r0
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f89a 	bl	8008828 <_sbrk_r>
 80086f4:	3001      	adds	r0, #1
 80086f6:	d1f2      	bne.n	80086de <sbrk_aligned+0x22>
 80086f8:	e7ef      	b.n	80086da <sbrk_aligned+0x1e>
 80086fa:	bf00      	nop
 80086fc:	20000288 	.word	0x20000288

08008700 <_malloc_r>:
 8008700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008704:	1ccd      	adds	r5, r1, #3
 8008706:	4606      	mov	r6, r0
 8008708:	f025 0503 	bic.w	r5, r5, #3
 800870c:	3508      	adds	r5, #8
 800870e:	2d0c      	cmp	r5, #12
 8008710:	bf38      	it	cc
 8008712:	250c      	movcc	r5, #12
 8008714:	2d00      	cmp	r5, #0
 8008716:	db01      	blt.n	800871c <_malloc_r+0x1c>
 8008718:	42a9      	cmp	r1, r5
 800871a:	d904      	bls.n	8008726 <_malloc_r+0x26>
 800871c:	230c      	movs	r3, #12
 800871e:	6033      	str	r3, [r6, #0]
 8008720:	2000      	movs	r0, #0
 8008722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087fc <_malloc_r+0xfc>
 800872a:	f000 f869 	bl	8008800 <__malloc_lock>
 800872e:	f8d8 3000 	ldr.w	r3, [r8]
 8008732:	461c      	mov	r4, r3
 8008734:	bb44      	cbnz	r4, 8008788 <_malloc_r+0x88>
 8008736:	4629      	mov	r1, r5
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff ffbf 	bl	80086bc <sbrk_aligned>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	4604      	mov	r4, r0
 8008742:	d158      	bne.n	80087f6 <_malloc_r+0xf6>
 8008744:	f8d8 4000 	ldr.w	r4, [r8]
 8008748:	4627      	mov	r7, r4
 800874a:	2f00      	cmp	r7, #0
 800874c:	d143      	bne.n	80087d6 <_malloc_r+0xd6>
 800874e:	2c00      	cmp	r4, #0
 8008750:	d04b      	beq.n	80087ea <_malloc_r+0xea>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	4639      	mov	r1, r7
 8008756:	4630      	mov	r0, r6
 8008758:	eb04 0903 	add.w	r9, r4, r3
 800875c:	f000 f864 	bl	8008828 <_sbrk_r>
 8008760:	4581      	cmp	r9, r0
 8008762:	d142      	bne.n	80087ea <_malloc_r+0xea>
 8008764:	6821      	ldr	r1, [r4, #0]
 8008766:	4630      	mov	r0, r6
 8008768:	1a6d      	subs	r5, r5, r1
 800876a:	4629      	mov	r1, r5
 800876c:	f7ff ffa6 	bl	80086bc <sbrk_aligned>
 8008770:	3001      	adds	r0, #1
 8008772:	d03a      	beq.n	80087ea <_malloc_r+0xea>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	442b      	add	r3, r5
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	f8d8 3000 	ldr.w	r3, [r8]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	bb62      	cbnz	r2, 80087dc <_malloc_r+0xdc>
 8008782:	f8c8 7000 	str.w	r7, [r8]
 8008786:	e00f      	b.n	80087a8 <_malloc_r+0xa8>
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	1b52      	subs	r2, r2, r5
 800878c:	d420      	bmi.n	80087d0 <_malloc_r+0xd0>
 800878e:	2a0b      	cmp	r2, #11
 8008790:	d917      	bls.n	80087c2 <_malloc_r+0xc2>
 8008792:	1961      	adds	r1, r4, r5
 8008794:	42a3      	cmp	r3, r4
 8008796:	6025      	str	r5, [r4, #0]
 8008798:	bf18      	it	ne
 800879a:	6059      	strne	r1, [r3, #4]
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	bf08      	it	eq
 80087a0:	f8c8 1000 	streq.w	r1, [r8]
 80087a4:	5162      	str	r2, [r4, r5]
 80087a6:	604b      	str	r3, [r1, #4]
 80087a8:	4630      	mov	r0, r6
 80087aa:	f000 f82f 	bl	800880c <__malloc_unlock>
 80087ae:	f104 000b 	add.w	r0, r4, #11
 80087b2:	1d23      	adds	r3, r4, #4
 80087b4:	f020 0007 	bic.w	r0, r0, #7
 80087b8:	1ac2      	subs	r2, r0, r3
 80087ba:	bf1c      	itt	ne
 80087bc:	1a1b      	subne	r3, r3, r0
 80087be:	50a3      	strne	r3, [r4, r2]
 80087c0:	e7af      	b.n	8008722 <_malloc_r+0x22>
 80087c2:	6862      	ldr	r2, [r4, #4]
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	bf0c      	ite	eq
 80087c8:	f8c8 2000 	streq.w	r2, [r8]
 80087cc:	605a      	strne	r2, [r3, #4]
 80087ce:	e7eb      	b.n	80087a8 <_malloc_r+0xa8>
 80087d0:	4623      	mov	r3, r4
 80087d2:	6864      	ldr	r4, [r4, #4]
 80087d4:	e7ae      	b.n	8008734 <_malloc_r+0x34>
 80087d6:	463c      	mov	r4, r7
 80087d8:	687f      	ldr	r7, [r7, #4]
 80087da:	e7b6      	b.n	800874a <_malloc_r+0x4a>
 80087dc:	461a      	mov	r2, r3
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d1fb      	bne.n	80087dc <_malloc_r+0xdc>
 80087e4:	2300      	movs	r3, #0
 80087e6:	6053      	str	r3, [r2, #4]
 80087e8:	e7de      	b.n	80087a8 <_malloc_r+0xa8>
 80087ea:	230c      	movs	r3, #12
 80087ec:	4630      	mov	r0, r6
 80087ee:	6033      	str	r3, [r6, #0]
 80087f0:	f000 f80c 	bl	800880c <__malloc_unlock>
 80087f4:	e794      	b.n	8008720 <_malloc_r+0x20>
 80087f6:	6005      	str	r5, [r0, #0]
 80087f8:	e7d6      	b.n	80087a8 <_malloc_r+0xa8>
 80087fa:	bf00      	nop
 80087fc:	2000028c 	.word	0x2000028c

08008800 <__malloc_lock>:
 8008800:	4801      	ldr	r0, [pc, #4]	@ (8008808 <__malloc_lock+0x8>)
 8008802:	f000 b84b 	b.w	800889c <__retarget_lock_acquire_recursive>
 8008806:	bf00      	nop
 8008808:	200003cc 	.word	0x200003cc

0800880c <__malloc_unlock>:
 800880c:	4801      	ldr	r0, [pc, #4]	@ (8008814 <__malloc_unlock+0x8>)
 800880e:	f000 b846 	b.w	800889e <__retarget_lock_release_recursive>
 8008812:	bf00      	nop
 8008814:	200003cc 	.word	0x200003cc

08008818 <memset>:
 8008818:	4402      	add	r2, r0
 800881a:	4603      	mov	r3, r0
 800881c:	4293      	cmp	r3, r2
 800881e:	d100      	bne.n	8008822 <memset+0xa>
 8008820:	4770      	bx	lr
 8008822:	f803 1b01 	strb.w	r1, [r3], #1
 8008826:	e7f9      	b.n	800881c <memset+0x4>

08008828 <_sbrk_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	2300      	movs	r3, #0
 800882c:	4d05      	ldr	r5, [pc, #20]	@ (8008844 <_sbrk_r+0x1c>)
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	602b      	str	r3, [r5, #0]
 8008834:	f7f8 fb30 	bl	8000e98 <_sbrk>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d102      	bne.n	8008842 <_sbrk_r+0x1a>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b103      	cbz	r3, 8008842 <_sbrk_r+0x1a>
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	bd38      	pop	{r3, r4, r5, pc}
 8008844:	200003c8 	.word	0x200003c8

08008848 <__errno>:
 8008848:	4b01      	ldr	r3, [pc, #4]	@ (8008850 <__errno+0x8>)
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	2000000c 	.word	0x2000000c

08008854 <__libc_init_array>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	4d0d      	ldr	r5, [pc, #52]	@ (800888c <__libc_init_array+0x38>)
 8008858:	2600      	movs	r6, #0
 800885a:	4c0d      	ldr	r4, [pc, #52]	@ (8008890 <__libc_init_array+0x3c>)
 800885c:	1b64      	subs	r4, r4, r5
 800885e:	10a4      	asrs	r4, r4, #2
 8008860:	42a6      	cmp	r6, r4
 8008862:	d109      	bne.n	8008878 <__libc_init_array+0x24>
 8008864:	4d0b      	ldr	r5, [pc, #44]	@ (8008894 <__libc_init_array+0x40>)
 8008866:	2600      	movs	r6, #0
 8008868:	4c0b      	ldr	r4, [pc, #44]	@ (8008898 <__libc_init_array+0x44>)
 800886a:	f000 f827 	bl	80088bc <_init>
 800886e:	1b64      	subs	r4, r4, r5
 8008870:	10a4      	asrs	r4, r4, #2
 8008872:	42a6      	cmp	r6, r4
 8008874:	d105      	bne.n	8008882 <__libc_init_array+0x2e>
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	f855 3b04 	ldr.w	r3, [r5], #4
 800887c:	3601      	adds	r6, #1
 800887e:	4798      	blx	r3
 8008880:	e7ee      	b.n	8008860 <__libc_init_array+0xc>
 8008882:	f855 3b04 	ldr.w	r3, [r5], #4
 8008886:	3601      	adds	r6, #1
 8008888:	4798      	blx	r3
 800888a:	e7f2      	b.n	8008872 <__libc_init_array+0x1e>
 800888c:	080089dc 	.word	0x080089dc
 8008890:	080089dc 	.word	0x080089dc
 8008894:	080089dc 	.word	0x080089dc
 8008898:	080089e0 	.word	0x080089e0

0800889c <__retarget_lock_acquire_recursive>:
 800889c:	4770      	bx	lr

0800889e <__retarget_lock_release_recursive>:
 800889e:	4770      	bx	lr

080088a0 <memcpy>:
 80088a0:	440a      	add	r2, r1
 80088a2:	1e43      	subs	r3, r0, #1
 80088a4:	4291      	cmp	r1, r2
 80088a6:	d100      	bne.n	80088aa <memcpy+0xa>
 80088a8:	4770      	bx	lr
 80088aa:	b510      	push	{r4, lr}
 80088ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b0:	4291      	cmp	r1, r2
 80088b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b6:	d1f9      	bne.n	80088ac <memcpy+0xc>
 80088b8:	bd10      	pop	{r4, pc}
	...

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
