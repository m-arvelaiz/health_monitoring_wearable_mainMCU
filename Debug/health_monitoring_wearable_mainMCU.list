
health_monitoring_wearable_mainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae30  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800b068  0800b068  0000c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b168  0800b168  0000c168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b170  0800b170  0000c170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b174  0800b174  0000c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800b178  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a1  2000005c  0800b1d4  0000d05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  200003fd  0800b1d4  0000d3fd  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022052  00000000  00000000  0000d092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e4d  00000000  00000000  0002f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cf8  00000000  00000000  00032f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016a1  00000000  00000000  00034c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000370f0  00000000  00000000  000362d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002496c  00000000  00000000  0006d3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159592  00000000  00000000  00091d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eb2bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008004  00000000  00000000  001eb304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001f3308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b050 	.word	0x0800b050

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800b050 	.word	0x0800b050

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <data_handler_dispatcher>:
void data_handler_notify_stop_stream(void) {
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_STOP_STREAM, data_handler->payload, 1, 0);
}

void data_handler_dispatcher(UART_CommandPacket_t* cmd) {
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af02      	add	r7, sp, #8
 80005fa:	6078      	str	r0, [r7, #4]
    data_handler->data_cmd = (Data_CmdID_t)cmd->cmd_type;
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <data_handler_dispatcher+0x7c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7852      	ldrb	r2, [r2, #1]
 8000604:	701a      	strb	r2, [r3, #0]
    memcpy(data_handler->payload, cmd->payload, 5);
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6858      	ldr	r0, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3303      	adds	r3, #3
 8000610:	2205      	movs	r2, #5
 8000612:	4619      	mov	r1, r3
 8000614:	f00a fd0e 	bl	800b034 <memcpy>
    data_handler->lenght=cmd->payload_len;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7892      	ldrb	r2, [r2, #2]
 8000620:	731a      	strb	r2, [r3, #12]

    //TODO: filter if the message is to configure something or to request a cmd

    sensor_interface_handle_cmd(data_handler->data_cmd, data_handler->payload, data_handler->lenght, data_handler->payload_out, &(data_handler->lenght_out));
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	7818      	ldrb	r0, [r3, #0]
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6859      	ldr	r1, [r3, #4]
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	7b1a      	ldrb	r2, [r3, #12]
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	689c      	ldr	r4, [r3, #8]
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	330d      	adds	r3, #13
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4623      	mov	r3, r4
 8000644:	f000 fb84 	bl	8000d50 <sensor_interface_handle_cmd>
    UART_Handler_t* uart = uart_handler_get();
 8000648:	f001 f9b0 	bl	80019ac <uart_handler_get>
 800064c:	60f8      	str	r0, [r7, #12]
    uart->send_response(data_handler->data_cmd, data_handler->payload_out, data_handler->lenght_out );
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a07      	ldr	r2, [pc, #28]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	7810      	ldrb	r0, [r2, #0]
 8000658:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <data_handler_dispatcher+0x7c>)
 800065a:	6812      	ldr	r2, [r2, #0]
 800065c:	6891      	ldr	r1, [r2, #8]
 800065e:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <data_handler_dispatcher+0x7c>)
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	7b52      	ldrb	r2, [r2, #13]
 8000664:	4798      	blx	r3
//            break;
//        default:
//            // Unknown command handling
//            break;
//    }
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bd90      	pop	{r4, r7, pc}
 800066e:	bf00      	nop
 8000670:	20000078 	.word	0x20000078

08000674 <data_handler_Init>:
//static void data_handler_req_stop_stream(void) {
//	//TODO:sensor_stream_stop();
//    data_handler_notify_stop_stream();
//}

void data_handler_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 8000678:	2010      	movs	r0, #16
 800067a:	f00a fbe1 	bl	800ae40 <malloc>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <data_handler_Init+0x48>)
 8000684:	601a      	str	r2, [r3, #0]
    data_handler->payload = data_handler_buffer;
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <data_handler_Init+0x48>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <data_handler_Init+0x4c>)
 800068c:	605a      	str	r2, [r3, #4]
    data_handler->payload_out = data_handler_buffer_out;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <data_handler_Init+0x48>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <data_handler_Init+0x50>)
 8000694:	609a      	str	r2, [r3, #8]
    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <data_handler_Init+0x48>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	220a      	movs	r2, #10
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00a fc83 	bl	800afac <memset>
    memset(data_handler->payload_out, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 80006a6:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <data_handler_Init+0x48>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	220a      	movs	r2, #10
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00a fc7b 	bl	800afac <memset>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000078 	.word	0x20000078
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	20000088 	.word	0x20000088

080006c8 <HAL_I2C_MasterTxCpltCallback>:
// Basic operations
bool i2c_handler_write_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len);
bool i2c_handler_read_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len, uint8_t len_expected);

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(i2c_handler->hi2c==hi2c){
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d11f      	bne.n	800071c <HAL_I2C_MasterTxCpltCallback+0x54>
		if(i2c_handler->operation_type==I2C_OP_TYPE_WRITE_REG){
 80006dc:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	785b      	ldrb	r3, [r3, #1]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d104      	bne.n	80006f0 <HAL_I2C_MasterTxCpltCallback+0x28>
			i2c_handler->state= I2C_STATE_IDLE;
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
			}
		}


	}
}
 80006ee:	e015      	b.n	800071c <HAL_I2C_MasterTxCpltCallback+0x54>
			i2c_handler->state= I2C_STATE_BUSY;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
			if (HAL_I2C_Master_Receive_IT(i2c_handler->hi2c, i2c_handler->last_address << 1,
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6858      	ldr	r0, [r3, #4]
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	b299      	uxth	r1, r3
						i2c_handler->Response_buffer, i2c_handler->response_buffer_lenght) != HAL_OK) {
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			if (HAL_I2C_Master_Receive_IT(i2c_handler->hi2c, i2c_handler->last_address << 1,
 8000718:	f001 ffb6 	bl	8002688 <HAL_I2C_Master_Receive_IT>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000094 	.word	0x20000094

08000728 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
 {
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	if (i2c_handler->hi2c == hi2c) {
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d103      	bne.n	8000744 <HAL_I2C_MasterRxCpltCallback+0x1c>
		i2c_handler->state= I2C_STATE_MSG_WAITING_FOR_PROCESSING;
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2202      	movs	r2, #2
 8000742:	701a      	strb	r2, [r3, #0]
	}
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	20000094 	.word	0x20000094

08000754 <i2c_handler_write_reg>:


bool i2c_handler_write_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	i2c_handler->last_address=device_addr;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	721a      	strb	r2, [r3, #8]

    if (!i2c_handler || !i2c_handler->hi2c ) return false;
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d004      	beq.n	800077e <i2c_handler_write_reg+0x2a>
 8000774:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <i2c_handler_write_reg+0x2e>
 800077e:	2300      	movs	r3, #0
 8000780:	e01d      	b.n	80007be <i2c_handler_write_reg+0x6a>

    i2c_handler->state= I2C_STATE_BUSY;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
    i2c_handler->operation_type= I2C_OP_TYPE_WRITE_REG;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2201      	movs	r2, #1
 8000790:	705a      	strb	r2, [r3, #1]

    if (HAL_I2C_Master_Transmit_IT(i2c_handler->hi2c, device_addr << 1, buffer, len) != HAL_OK) {
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6858      	ldr	r0, [r3, #4]
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	b29b      	uxth	r3, r3
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	b299      	uxth	r1, r3
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	f001 feeb 	bl	8002580 <HAL_I2C_Master_Transmit_IT>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <i2c_handler_write_reg+0x60>
        return false;
 80007b0:	2300      	movs	r3, #0
 80007b2:	e004      	b.n	80007be <i2c_handler_write_reg+0x6a>
    }
    i2c_handler->state= I2C_STATE_IDLE;
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <i2c_handler_write_reg+0x74>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
    return true;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000094 	.word	0x20000094

080007cc <i2c_handler_read_reg>:

bool i2c_handler_read_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len, uint8_t len_expected) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6039      	str	r1, [r7, #0]
 80007d4:	4611      	mov	r1, r2
 80007d6:	461a      	mov	r2, r3
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
 80007dc:	460b      	mov	r3, r1
 80007de:	71bb      	strb	r3, [r7, #6]
 80007e0:	4613      	mov	r3, r2
 80007e2:	717b      	strb	r3, [r7, #5]

	i2c_handler->last_address = device_addr;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <i2c_handler_read_reg+0x84>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	79fa      	ldrb	r2, [r7, #7]
 80007ea:	721a      	strb	r2, [r3, #8]
	i2c_handler->response_buffer_lenght=len_expected;
 80007ec:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <i2c_handler_read_reg+0x84>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	if (!i2c_handler || !i2c_handler->hi2c ){
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <i2c_handler_read_reg+0x84>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <i2c_handler_read_reg+0x3c>
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <i2c_handler_read_reg+0x84>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d101      	bne.n	800080c <i2c_handler_read_reg+0x40>
		return false;
 8000808:	2300      	movs	r3, #0
 800080a:	e01d      	b.n	8000848 <i2c_handler_read_reg+0x7c>
	}
	i2c_handler->state= I2C_STATE_BUSY;
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <i2c_handler_read_reg+0x84>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
	i2c_handler->operation_type= I2C_OP_TYPE_READ_REG;
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <i2c_handler_read_reg+0x84>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2202      	movs	r2, #2
 800081a:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit_IT(i2c_handler->hi2c, device_addr << 1,
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <i2c_handler_read_reg+0x84>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6858      	ldr	r0, [r3, #4]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	b29b      	uxth	r3, r3
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b299      	uxth	r1, r3
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	b29b      	uxth	r3, r3
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	f001 fea6 	bl	8002580 <HAL_I2C_Master_Transmit_IT>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <i2c_handler_read_reg+0x72>
			buffer, len) != HAL_OK) {
		return false;
 800083a:	2300      	movs	r3, #0
 800083c:	e004      	b.n	8000848 <i2c_handler_read_reg+0x7c>
	}
	i2c_handler->state= I2C_STATE_BUSY;
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <i2c_handler_read_reg+0x84>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]



	return true;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000094 	.word	0x20000094

08000854 <i2c_handler_init>:


void i2c_handler_init(I2C_HandleTypeDef* hi2c) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (i2c_handler == NULL) {
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <i2c_handler_init+0x70>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d106      	bne.n	8000872 <i2c_handler_init+0x1e>
        i2c_handler = (I2C_Handler_t*) malloc(sizeof(I2C_Handler_t));
 8000864:	2054      	movs	r0, #84	@ 0x54
 8000866:	f00a faeb 	bl	800ae40 <malloc>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <i2c_handler_init+0x70>)
 8000870:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->hi2c = hi2c;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <i2c_handler_init+0x70>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	605a      	str	r2, [r3, #4]
    i2c_handler->state= I2C_STATE_IDLE;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <i2c_handler_init+0x70>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
    i2c_handler->operation_type=I2C_OP_TYPE_NONE;
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <i2c_handler_init+0x70>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	705a      	strb	r2, [r3, #1]
    memset(i2c_handler->Write_buffer, 0, I2C_MAX_BUFFER_SIZE);
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <i2c_handler_init+0x70>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3309      	adds	r3, #9
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f00a fb89 	bl	800afac <memset>
    memset(i2c_handler->Response_buffer, 0, I2C_MAX_BUFFER_SIZE);
 800089a:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <i2c_handler_init+0x70>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	332a      	adds	r3, #42	@ 0x2a
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f00a fb81 	bl	800afac <memset>
    i2c_handler->read_reg=i2c_handler_read_reg;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <i2c_handler_init+0x70>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a06      	ldr	r2, [pc, #24]	@ (80008c8 <i2c_handler_init+0x74>)
 80008b0:	651a      	str	r2, [r3, #80]	@ 0x50
    i2c_handler->write_reg=i2c_handler_write_reg;
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <i2c_handler_init+0x70>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <i2c_handler_init+0x78>)
 80008b8:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000094 	.word	0x20000094
 80008c8:	080007cd 	.word	0x080007cd
 80008cc:	08000755 	.word	0x08000755

080008d0 <i2c_handler_get>:

I2C_Handler_t* i2c_handler_get(void) {
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
    return i2c_handler;
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <i2c_handler_get+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000094 	.word	0x20000094

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ec:	f001 f894 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f0:	f000 f822 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f4:	f000 f9ca 	bl	8000c8c <MX_GPIO_Init>
  MX_I2C2_Init();
 80008f8:	f000 f87e 	bl	80009f8 <MX_I2C2_Init>
  MX_RTC_Init();
 80008fc:	f000 f8d0 	bl	8000aa0 <MX_RTC_Init>
  MX_TIM16_Init();
 8000900:	f000 f950 	bl	8000ba4 <MX_TIM16_Init>
  MX_UART4_Init();
 8000904:	f000 f976 	bl	8000bf4 <MX_UART4_Init>
  MX_ICACHE_Init();
 8000908:	f000 f8b6 	bl	8000a78 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  uart_handler_Init(&huart4);
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <main+0x44>)
 800090e:	f001 f801 	bl	8001914 <uart_handler_Init>
  data_handler_Init();
 8000912:	f7ff feaf 	bl	8000674 <data_handler_Init>
  i2c_handler_init(&hi2c2);
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <main+0x48>)
 8000918:	f7ff ff9c 	bl	8000854 <i2c_handler_init>
  sensor_interface_init();
 800091c:	f000 fa0c 	bl	8000d38 <sensor_interface_init>

  HAL_TIM_Base_Start_IT(&htim16);
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <main+0x4c>)
 8000922:	f007 ff4d 	bl	80087c0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000926:	bf00      	nop
 8000928:	e7fd      	b.n	8000926 <main+0x3e>
 800092a:	bf00      	nop
 800092c:	20000168 	.word	0x20000168
 8000930:	20000098 	.word	0x20000098
 8000934:	2000011c 	.word	0x2000011c

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	@ 0x78
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	2260      	movs	r2, #96	@ 0x60
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00a fb30 	bl	800afac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
 800095a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800095c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000960:	f003 fc18 	bl	8004194 <HAL_PWREx_ControlVoltageScaling>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800096a:	f000 f9df 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800096e:	230a      	movs	r3, #10
 8000970:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000972:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800097c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098a:	2302      	movs	r3, #2
 800098c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000996:	2308      	movs	r3, #8
 8000998:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80009a6:	230c      	movs	r3, #12
 80009a8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f003 fc7a 	bl	80042ac <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009be:	f000 f9b5 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	231f      	movs	r3, #31
 80009c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	2103      	movs	r1, #3
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 fb40 	bl	8005064 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009ea:	f000 f99f 	bl	8000d2c <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3778      	adds	r7, #120	@ 0x78
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_I2C2_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <MX_I2C2_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <MX_I2C2_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a34:	f001 fd08 	bl	8002448 <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 f975 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a46:	f003 fadd 	bl	8004004 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f96c 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_I2C2_Init+0x74>)
 8000a58:	f003 fb1f 	bl	800409a <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f963 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	40005800 	.word	0x40005800
 8000a74:	20a0c4df 	.word	0x20a0c4df

08000a78 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f003 fb59 	bl	8004134 <HAL_ICACHE_ConfigAssociativityMode>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a88:	f000 f950 	bl	8000d2c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a8c:	f003 fb72 	bl	8004174 <HAL_ICACHE_Enable>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a96:	f000 f949 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000ad0:	4a33      	ldr	r2, [pc, #204]	@ (8000ba0 <MX_RTC_Init+0x100>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ad4:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ada:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000adc:	227f      	movs	r2, #127	@ 0x7f
 8000ade:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000ae2:	22ff      	movs	r2, #255	@ 0xff
 8000ae4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000aec:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af8:	4b28      	ldr	r3, [pc, #160]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b00:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000b06:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b0c:	4823      	ldr	r0, [pc, #140]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000b0e:	f007 fb59 	bl	80081c4 <HAL_RTC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b18:	f000 f908 	bl	8000d2c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000b34:	f007 fdbe 	bl	80086b4 <HAL_RTCEx_PrivilegeModeSet>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b3e:	f000 f8f5 	bl	8000d2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000b60:	f007 fbba 	bl	80082d8 <HAL_RTC_SetTime>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000b6a:	f000 f8df 	bl	8000d2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b72:	2301      	movs	r3, #1
 8000b74:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_RTC_Init+0xfc>)
 8000b86:	f007 fc43 	bl	8008410 <HAL_RTC_SetDate>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000b90:	f000 f8cc 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	@ 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000ec 	.word	0x200000ec
 8000ba0:	46007800 	.word	0x46007800

08000ba4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000baa:	4a11      	ldr	r2, [pc, #68]	@ (8000bf0 <MX_TIM16_Init+0x4c>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12800 - 1;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bb0:	f243 12ff 	movw	r2, #12799	@ 0x31ff
 8000bb4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bbe:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000bc2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM16_Init+0x48>)
 8000bd8:	f007 fd9a 	bl	8008710 <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000be2:	f000 f8a3 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000011c 	.word	0x2000011c
 8000bf0:	40014400 	.word	0x40014400

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	@ (8000c88 <MX_UART4_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c3e:	f008 f94b 	bl	8008ed8 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 f870 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c50:	f009 ffcd 	bl	800abee <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f867 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c62:	f00a f802 	bl	800ac6a <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f85e 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_UART4_Init+0x90>)
 8000c72:	f009 ff83 	bl	800ab7c <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f856 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000168 	.word	0x20000168
 8000c88:	40004c00 	.word	0x40004c00

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c98:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_GPIO_Init+0x6c>)
 8000ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	46020c00 	.word	0x46020c00

08000cfc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM16)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a06      	ldr	r2, [pc, #24]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d105      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x1e>
    {
    	HAL_TIM_Base_Stop_IT(&htim16);
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d10:	f007 fdf6 	bl	8008900 <HAL_TIM_Base_Stop_IT>
        // Your code here: runs every 5 seconds
        //TODO: trigger meassurements
    	HAL_TIM_Base_Start_IT(&htim16);
 8000d14:	4804      	ldr	r0, [pc, #16]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d16:	f007 fd53 	bl	80087c0 <HAL_TIM_Base_Start_IT>
    }

}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40014400 	.word	0x40014400
 8000d28:	2000011c 	.word	0x2000011c

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <Error_Handler+0x8>

08000d38 <sensor_interface_init>:
//sensor_interface_trigger_schedule_t sensor_interface_trigger_schedule_state;
sensor_interface_trigger_schedule_t sensor_interface_schedule;

// Internal buffer for I2C tx/rx

void sensor_interface_init(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	sensor_interface_schedule=TRIGGER_ENV_TEMP;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <sensor_interface_init+0x14>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
    temp_sensor_init(SENSOR_ADDRESS_TEMP_HUM_HTS221);
 8000d42:	205f      	movs	r0, #95	@ 0x5f
 8000d44:	f000 fa7a 	bl	800123c <temp_sensor_init>
    // TODO: Add other sensors
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001fc 	.word	0x200001fc

08000d50 <sensor_interface_handle_cmd>:



}

void sensor_interface_handle_cmd(uint8_t cmd_id, uint8_t* payload, uint8_t len, uint8_t* payload_out, uint8_t* len_out) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	73bb      	strb	r3, [r7, #14]


    switch (cmd_id) {
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d002      	beq.n	8000d6e <sensor_interface_handle_cmd+0x1e>
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	d023      	beq.n	8000db4 <sensor_interface_handle_cmd+0x64>
            // TODO: Add support for composing full sensor packet with all sensor readings
            break;

        default:
            // Unknown command
            break;
 8000d6c:	e025      	b.n	8000dba <sensor_interface_handle_cmd+0x6a>
		if (payload[0] == 0x02) {
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d120      	bne.n	8000db8 <sensor_interface_handle_cmd+0x68>
			Temp_Sensor_t* env_temp = temp_sensor_get();
 8000d76:	f000 faeb 	bl	8001350 <temp_sensor_get>
 8000d7a:	6178      	str	r0, [r7, #20]
			if (env_temp && env_temp->get_last_n_data_serial_format) {
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d01a      	beq.n	8000db8 <sensor_interface_handle_cmd+0x68>
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d016      	beq.n	8000db8 <sensor_interface_handle_cmd+0x68>
				payload_out[0]=0x02;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	701a      	strb	r2, [r3, #0]
				(*len_out)=env_temp->get_last_n_data_serial_format(1,payload_out+1);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	3201      	adds	r2, #1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	4798      	blx	r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	701a      	strb	r2, [r3, #0]
				(*len_out)= (*len_out)+1;
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	6a3b      	ldr	r3, [r7, #32]
 8000db0:	701a      	strb	r2, [r3, #0]
            break;
 8000db2:	e001      	b.n	8000db8 <sensor_interface_handle_cmd+0x68>
            break;
 8000db4:	bf00      	nop
 8000db6:	e000      	b.n	8000dba <sensor_interface_handle_cmd+0x6a>
            break;
 8000db8:	bf00      	nop
    }
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_MspInit+0x30>)
 8000dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000dd0:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <HAL_MspInit+0x30>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_MspInit+0x30>)
 8000ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	46020c00 	.word	0x46020c00

08000df8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0bc      	sub	sp, #240	@ 0xf0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	22c8      	movs	r2, #200	@ 0xc8
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00a f8c7 	bl	800afac <memset>
  if(hi2c->Instance==I2C2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a2e      	ldr	r2, [pc, #184]	@ (8000edc <HAL_I2C_MspInit+0xe4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d154      	bne.n	8000ed2 <HAL_I2C_MspInit+0xda>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e28:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fce1 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000e48:	f7ff ff70 	bl	8000d2c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e52:	4a23      	ldr	r2, [pc, #140]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e6a:	2330      	movs	r3, #48	@ 0x30
 8000e6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e82:	2304      	movs	r3, #4
 8000e84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4815      	ldr	r0, [pc, #84]	@ (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e90:	f001 f902 	bl	8002098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ea0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2039      	movs	r0, #57	@ 0x39
 8000eb8:	f000 ff50 	bl	8001d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ebc:	2039      	movs	r0, #57	@ 0x39
 8000ebe:	f000 ff67 	bl	8001d90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	203a      	movs	r0, #58	@ 0x3a
 8000ec8:	f000 ff48 	bl	8001d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000ecc:	203a      	movs	r0, #58	@ 0x3a
 8000ece:	f000 ff5f 	bl	8001d90 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37f0      	adds	r7, #240	@ 0xf0
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	46020c00 	.word	0x46020c00
 8000ee4:	42021c00 	.word	0x42021c00

08000ee8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0b6      	sub	sp, #216	@ 0xd8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	22c8      	movs	r2, #200	@ 0xc8
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f00a f857 	bl	800afac <memset>
  if(hrtc->Instance==RTC)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1d      	ldr	r2, [pc, #116]	@ (8000f78 <HAL_RTC_MspInit+0x90>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d132      	bne.n	8000f6e <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f08:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fc6f 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000f2c:	f7ff fefe 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f36:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000f46:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f4c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f64:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <HAL_RTC_MspInit+0x94>)
 8000f66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000f6e:	bf00      	nop
 8000f70:	37d8      	adds	r7, #216	@ 0xd8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	46007800 	.word	0x46007800
 8000f7c:	46020c00 	.word	0x46020c00

08000f80 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d116      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_TIM_Base_MspInit+0x4c>)
 8000f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f98:	4a0c      	ldr	r2, [pc, #48]	@ (8000fcc <HAL_TIM_Base_MspInit+0x4c>)
 8000f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f9e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <HAL_TIM_Base_MspInit+0x4c>)
 8000fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2046      	movs	r0, #70	@ 0x46
 8000fb6:	f000 fed1 	bl	8001d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000fba:	2046      	movs	r0, #70	@ 0x46
 8000fbc:	f000 fee8 	bl	8001d90 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40014400 	.word	0x40014400
 8000fcc:	46020c00 	.word	0x46020c00

08000fd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0bc      	sub	sp, #240	@ 0xf0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	22c8      	movs	r2, #200	@ 0xc8
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f009 ffdb 	bl	800afac <memset>
  if(huart->Instance==UART4)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80010a4 <HAL_UART_MspInit+0xd4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d14d      	bne.n	800109c <HAL_UART_MspInit+0xcc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001000:	f04f 0208 	mov.w	r2, #8
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800100c:	2300      	movs	r3, #0
 800100e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4618      	mov	r0, r3
 8001016:	f004 fbf5 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001020:	f7ff fe84 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001024:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <HAL_UART_MspInit+0xd8>)
 8001026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <HAL_UART_MspInit+0xd8>)
 800102c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001030:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <HAL_UART_MspInit+0xd8>)
 8001036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800103a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <HAL_UART_MspInit+0xd8>)
 8001044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001048:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <HAL_UART_MspInit+0xd8>)
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_UART_MspInit+0xd8>)
 8001054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001060:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001064:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800107a:	2308      	movs	r3, #8
 800107c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001080:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001084:	4619      	mov	r1, r3
 8001086:	4809      	ldr	r0, [pc, #36]	@ (80010ac <HAL_UART_MspInit+0xdc>)
 8001088:	f001 f806 	bl	8002098 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2040      	movs	r0, #64	@ 0x40
 8001092:	f000 fe63 	bl	8001d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001096:	2040      	movs	r0, #64	@ 0x40
 8001098:	f000 fe7a 	bl	8001d90 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 800109c:	bf00      	nop
 800109e:	37f0      	adds	r7, #240	@ 0xf0
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40004c00 	.word	0x40004c00
 80010a8:	46020c00 	.word	0x46020c00
 80010ac:	42020800 	.word	0x42020800

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <NMI_Handler+0x4>

080010b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <MemManage_Handler+0x4>

080010c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001106:	f000 fd2d 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <I2C2_EV_IRQHandler+0x10>)
 8001116:	f001 fb3b 	bl	8002790 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000098 	.word	0x20000098

08001124 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001128:	4802      	ldr	r0, [pc, #8]	@ (8001134 <I2C2_ER_IRQHandler+0x10>)
 800112a:	f001 fb4b 	bl	80027c4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000098 	.word	0x20000098

08001138 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800113c:	4802      	ldr	r0, [pc, #8]	@ (8001148 <UART4_IRQHandler+0x10>)
 800113e:	f007 ffb9 	bl	80090b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000168 	.word	0x20000168

0800114c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <TIM16_IRQHandler+0x10>)
 8001152:	f007 fc04 	bl	800895e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000011c 	.word	0x2000011c

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f009 ff24 	bl	800afdc <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200c0000 	.word	0x200c0000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000200 	.word	0x20000200
 80011c8:	20000400 	.word	0x20000400

080011cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <SystemInit+0x68>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <SystemInit+0x68>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <SystemInit+0x6c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <SystemInit+0x6c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <SystemInit+0x6c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <SystemInit+0x6c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <SystemInit+0x6c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <SystemInit+0x6c>)
 80011fe:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001202:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001206:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <SystemInit+0x6c>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <SystemInit+0x6c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <SystemInit+0x6c>)
 8001214:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <SystemInit+0x6c>)
 800121c:	2200      	movs	r2, #0
 800121e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <SystemInit+0x68>)
 8001222:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001226:	609a      	str	r2, [r3, #8]
  #endif
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	46020c00 	.word	0x46020c00

0800123c <temp_sensor_init>:


// === Public API ===


void temp_sensor_init(uint8_t address) {
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
    if (temp_sensor == NULL) {
 8001246:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <temp_sensor_init+0xf4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d106      	bne.n	800125c <temp_sensor_init+0x20>
        temp_sensor = (Temp_Sensor_t*) malloc(sizeof(Temp_Sensor_t));
 800124e:	2070      	movs	r0, #112	@ 0x70
 8001250:	f009 fdf6 	bl	800ae40 <malloc>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <temp_sensor_init+0xf4>)
 800125a:	601a      	str	r2, [r3, #0]
    }


    memset(temp_sensor, 0, sizeof(Temp_Sensor_t));
 800125c:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <temp_sensor_init+0xf4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2270      	movs	r2, #112	@ 0x70
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f009 fea1 	bl	800afac <memset>

	temp_sensor->i2c_address = address;
 800126a:	4b31      	ldr	r3, [pc, #196]	@ (8001330 <temp_sensor_init+0xf4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	79fa      	ldrb	r2, [r7, #7]
 8001270:	701a      	strb	r2, [r3, #0]
	temp_sensor->format_uart_response = temp_format_uart_response;
 8001272:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <temp_sensor_init+0xf4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a2f      	ldr	r2, [pc, #188]	@ (8001334 <temp_sensor_init+0xf8>)
 8001278:	659a      	str	r2, [r3, #88]	@ 0x58
//	temp_sensor->prepare_i2c_request = temp_prepare_i2c_request;
	temp_sensor->decode_i2c_response = temp_decode_i2c_response;
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <temp_sensor_init+0xf4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a2e      	ldr	r2, [pc, #184]	@ (8001338 <temp_sensor_init+0xfc>)
 8001280:	669a      	str	r2, [r3, #104]	@ 0x68
	temp_sensor->get_last_data = temp_sensor_get_last_temp_data;
 8001282:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <temp_sensor_init+0xf4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2d      	ldr	r2, [pc, #180]	@ (800133c <temp_sensor_init+0x100>)
 8001288:	65da      	str	r2, [r3, #92]	@ 0x5c
	temp_sensor->get_last_n_data = temp_sensor_get_last_n_data;
 800128a:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <temp_sensor_init+0xf4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a2c      	ldr	r2, [pc, #176]	@ (8001340 <temp_sensor_init+0x104>)
 8001290:	661a      	str	r2, [r3, #96]	@ 0x60
	temp_sensor->get_last_n_data_serial_format = temp_sensor_get_last_n_temp_data_serial_format;
 8001292:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <temp_sensor_init+0xf4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <temp_sensor_init+0x108>)
 8001298:	665a      	str	r2, [r3, #100]	@ 0x64
	temp_sensor->trigger_data_collection=temp_sensor_trigger_data_collection;
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <temp_sensor_init+0xf4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2a      	ldr	r2, [pc, #168]	@ (8001348 <temp_sensor_init+0x10c>)
 80012a0:	66da      	str	r2, [r3, #108]	@ 0x6c
	memset(temp_data_ptr_buffer, 0, sizeof(temp_data_ptr_buffer));
 80012a2:	2228      	movs	r2, #40	@ 0x28
 80012a4:	2100      	movs	r1, #0
 80012a6:	4829      	ldr	r0, [pc, #164]	@ (800134c <temp_sensor_init+0x110>)
 80012a8:	f009 fe80 	bl	800afac <memset>

	// TODO: Perform initial I2C check or sensor config if needed

	I2C_Handler_t* i2c_handle=i2c_handler_get();
 80012ac:	f7ff fb10 	bl	80008d0 <i2c_handler_get>
 80012b0:	6178      	str	r0, [r7, #20]
	uint8_t reg = TEMP_SENSOR_HTS221_WHO_AM_I_REG;
 80012b2:	230f      	movs	r3, #15
 80012b4:	74fb      	strb	r3, [r7, #19]

	// Step 1: Check WHO_AM_I
	if (!i2c_handle->read_reg(temp_sensor->i2c_address, &reg, 1, 1)){
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 80012ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <temp_sensor_init+0xf4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	7818      	ldrb	r0, [r3, #0]
 80012c0:	f107 0113 	add.w	r1, r7, #19
 80012c4:	2301      	movs	r3, #1
 80012c6:	2201      	movs	r2, #1
 80012c8:	47a0      	blx	r4

	}
	HAL_Delay(10); // Optional: wait for completion
 80012ca:	200a      	movs	r0, #10
 80012cc:	f000 fc6a 	bl	8001ba4 <HAL_Delay>

	if(i2c_handle->state==I2C_STATE_MSG_WAITING_FOR_PROCESSING){
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d106      	bne.n	80012e6 <temp_sensor_init+0xaa>
		i2c_handle->state=I2C_STATE_IDLE;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]
		if (i2c_handle->Response_buffer[0] = TEMP_SENSOR_HTS221_WHO_AM_I_VAL){
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	22bc      	movs	r2, #188	@ 0xbc
 80012e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

		}
	}

	// Step 2: Optional - Reboot memory content
	uint8_t reboot_cmd[2] = { TEMP_SENSOR_HTS221_CTRL_REG2, 0x80 };  // BOOT bit = 1
 80012e6:	f248 0321 	movw	r3, #32801	@ 0x8021
 80012ea:	823b      	strh	r3, [r7, #16]
	if (!i2c_handler_write_reg(temp_sensor->i2c_address, reboot_cmd, 2)){
 80012ec:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <temp_sensor_init+0xf4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2202      	movs	r2, #2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fa2a 	bl	8000754 <i2c_handler_write_reg>

	}
	HAL_Delay(15);  // Wait for reboot
 8001300:	200f      	movs	r0, #15
 8001302:	f000 fc4f 	bl	8001ba4 <HAL_Delay>
	if (i2c_handle->state == I2C_STATE_IDLE) {
		//OKK
	}

	// Step 3: Enable sensor in continuous mode at 1 Hz
	uint8_t init_cmd[2] = { TEMP_SENSOR_HTS221_CTRL_REG1, 0x81 };  // PD=1, BDU=0, ODR=1Hz
 8001306:	f248 1320 	movw	r3, #33056	@ 0x8120
 800130a:	81bb      	strh	r3, [r7, #12]
	if (!i2c_handler_write_reg(temp_sensor->i2c_address, init_cmd, 2)){
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <temp_sensor_init+0xf4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2202      	movs	r2, #2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fa1a 	bl	8000754 <i2c_handler_write_reg>

	}

	HAL_Delay(15);  // Wait for reboot
 8001320:	200f      	movs	r0, #15
 8001322:	f000 fc3f 	bl	8001ba4 <HAL_Delay>
	if (i2c_handle->state == I2C_STATE_IDLE) {
			//OKK
	}
}
 8001326:	bf00      	nop
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
 800132e:	bf00      	nop
 8001330:	20000204 	.word	0x20000204
 8001334:	08001369 	.word	0x08001369
 8001338:	08001641 	.word	0x08001641
 800133c:	08001415 	.word	0x08001415
 8001340:	08001461 	.word	0x08001461
 8001344:	080014f9 	.word	0x080014f9
 8001348:	08001705 	.word	0x08001705
 800134c:	20000208 	.word	0x20000208

08001350 <temp_sensor_get>:
        temp_sensor = NULL;
    }
}


Temp_Sensor_t* temp_sensor_get(void) {
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
    return temp_sensor;
 8001354:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <temp_sensor_get+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000204 	.word	0x20000204

08001368 <temp_format_uart_response>:


// === Local Functions ===

static void temp_format_uart_response(uint8_t* payload_out) {
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    Temp_Data_t* last = &temp_sensor->history[
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <temp_format_uart_response+0xa4>)
 8001372:	6818      	ldr	r0, [r3, #0]
        (temp_sensor->head_index - 1 + TEMP_HUMIDITY_SENSOR_HISTORY_SIZE) % TEMP_HUMIDITY_SENSOR_HISTORY_SIZE];
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <temp_format_uart_response+0xa4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800137c:	f103 0109 	add.w	r1, r3, #9
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <temp_format_uart_response+0xa8>)
 8001382:	fb83 2301 	smull	r2, r3, r3, r1
 8001386:	109a      	asrs	r2, r3, #2
 8001388:	17cb      	asrs	r3, r1, #31
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	1aca      	subs	r2, r1, r3
    Temp_Data_t* last = &temp_sensor->history[
 8001396:	00d3      	lsls	r3, r2, #3
 8001398:	4403      	add	r3, r0
 800139a:	3304      	adds	r3, #4
 800139c:	60fb      	str	r3, [r7, #12]

    payload_out[0] = (last->temperature >> 8) & 0xFF;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	889b      	ldrh	r3, [r3, #4]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	701a      	strb	r2, [r3, #0]
    payload_out[1] = (last->temperature >> 0) & 0xFF;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	889a      	ldrh	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
    payload_out[2] = 0x00;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3302      	adds	r3, #2
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    payload_out[3] = 0x00;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3303      	adds	r3, #3
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    payload_out[4] = (last->timestamp >> 24) & 0xFF;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0e1a      	lsrs	r2, r3, #24
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3304      	adds	r3, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
    payload_out[5] = (last->timestamp >> 16) & 0xFF;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	0c1a      	lsrs	r2, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3305      	adds	r3, #5
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]
    payload_out[6] = (last->timestamp >> 8) & 0xFF;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0a1a      	lsrs	r2, r3, #8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3306      	adds	r3, #6
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
    payload_out[7] = (last->timestamp >> 0) & 0xFF;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3307      	adds	r3, #7
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]


}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000204 	.word	0x20000204
 8001410:	66666667 	.word	0x66666667

08001414 <temp_sensor_get_last_temp_data>:
/**
 * @brief Retrieve last Temp_Data_t pointer from history.
 *
 */

Temp_Data_t* temp_sensor_get_last_temp_data(){
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
	 Temp_Data_t* last = &temp_sensor->history[
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <temp_sensor_get_last_temp_data+0x44>)
 800141c:	6818      	ldr	r0, [r3, #0]
	        (temp_sensor->head_index - 1 + TEMP_HUMIDITY_SENSOR_HISTORY_SIZE) % TEMP_HUMIDITY_SENSOR_HISTORY_SIZE];
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <temp_sensor_get_last_temp_data+0x44>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001426:	f103 0109 	add.w	r1, r3, #9
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <temp_sensor_get_last_temp_data+0x48>)
 800142c:	fb83 2301 	smull	r2, r3, r3, r1
 8001430:	109a      	asrs	r2, r3, #2
 8001432:	17cb      	asrs	r3, r1, #31
 8001434:	1ad2      	subs	r2, r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	1aca      	subs	r2, r1, r3
	 Temp_Data_t* last = &temp_sensor->history[
 8001440:	00d3      	lsls	r3, r2, #3
 8001442:	4403      	add	r3, r0
 8001444:	3304      	adds	r3, #4
 8001446:	607b      	str	r3, [r7, #4]
	return last;
 8001448:	687b      	ldr	r3, [r7, #4]
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000204 	.word	0x20000204
 800145c:	66666667 	.word	0x66666667

08001460 <temp_sensor_get_last_n_data>:
/**
 * @brief Retrieve last n Temp_Data_t pointers from history.
 * Result is stored in a static buffer and ordered from newest to oldest.
 */

static Temp_Data_t** temp_sensor_get_last_n_data(uint8_t n) {
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
    if (!temp_sensor || n == 0 || n > temp_sensor->count) {
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <temp_sensor_get_last_n_data+0x8c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <temp_sensor_get_last_n_data+0x26>
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <temp_sensor_get_last_n_data+0x26>
 8001478:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <temp_sensor_get_last_n_data+0x8c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	429a      	cmp	r2, r3
 8001484:	d901      	bls.n	800148a <temp_sensor_get_last_n_data+0x2a>
        return NULL; // Invalid request
 8001486:	2300      	movs	r3, #0
 8001488:	e029      	b.n	80014de <temp_sensor_get_last_n_data+0x7e>
    }

    for (uint8_t i = 0; i < n; ++i) {
 800148a:	2300      	movs	r3, #0
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e021      	b.n	80014d4 <temp_sensor_get_last_n_data+0x74>
        int index = (temp_sensor->head_index - 1 - i + TEMP_HUMIDITY_SENSOR_HISTORY_SIZE) % TEMP_HUMIDITY_SENSOR_HISTORY_SIZE;
 8001490:	4b16      	ldr	r3, [pc, #88]	@ (80014ec <temp_sensor_get_last_n_data+0x8c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f103 020a 	add.w	r2, r3, #10
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <temp_sensor_get_last_n_data+0x90>)
 80014a4:	fb83 1302 	smull	r1, r3, r3, r2
 80014a8:	1099      	asrs	r1, r3, #2
 80014aa:	17d3      	asrs	r3, r2, #31
 80014ac:	1ac9      	subs	r1, r1, r3
 80014ae:	460b      	mov	r3, r1
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	60bb      	str	r3, [r7, #8]
        temp_data_ptr_buffer[i] = &temp_sensor->history[index];
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <temp_sensor_get_last_n_data+0x8c>)
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	00d2      	lsls	r2, r2, #3
 80014c4:	440a      	add	r2, r1
 80014c6:	3204      	adds	r2, #4
 80014c8:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <temp_sensor_get_last_n_data+0x94>)
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < n; ++i) {
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3d9      	bcc.n	8001490 <temp_sensor_get_last_n_data+0x30>
    }

    return temp_data_ptr_buffer;
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <temp_sensor_get_last_n_data+0x94>)
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000204 	.word	0x20000204
 80014f0:	66666667 	.word	0x66666667
 80014f4:	20000208 	.word	0x20000208

080014f8 <temp_sensor_get_last_n_temp_data_serial_format>:
 * - Bytes 2-5: timestamp (4 bytes, MSB first)
 *
 * Return the lenght of the output data
 */

uint8_t temp_sensor_get_last_n_temp_data_serial_format(uint8_t n, uint8_t* out_buffer) {
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
    if (!temp_sensor || !out_buffer || n == 0 || n > temp_sensor->count) {
 8001504:	4b4c      	ldr	r3, [pc, #304]	@ (8001638 <temp_sensor_get_last_n_temp_data_serial_format+0x140>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00c      	beq.n	8001526 <temp_sensor_get_last_n_temp_data_serial_format+0x2e>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <temp_sensor_get_last_n_temp_data_serial_format+0x2e>
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <temp_sensor_get_last_n_temp_data_serial_format+0x2e>
 8001518:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <temp_sensor_get_last_n_temp_data_serial_format+0x140>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001520:	79fa      	ldrb	r2, [r7, #7]
 8001522:	429a      	cmp	r2, r3
 8001524:	d901      	bls.n	800152a <temp_sensor_get_last_n_temp_data_serial_format+0x32>
        return 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	e07f      	b.n	800162a <temp_sensor_get_last_n_temp_data_serial_format+0x132>
    }

    uint8_t i;
    for (i = 0; i <= n; ++i) {
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
 800152e:	e075      	b.n	800161c <temp_sensor_get_last_n_temp_data_serial_format+0x124>
        int index = (temp_sensor->head_index - 1 - i + TEMP_HUMIDITY_SENSOR_HISTORY_SIZE) % TEMP_HUMIDITY_SENSOR_HISTORY_SIZE;
 8001530:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <temp_sensor_get_last_n_temp_data_serial_format+0x140>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001538:	1e5a      	subs	r2, r3, #1
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f103 020a 	add.w	r2, r3, #10
 8001542:	4b3e      	ldr	r3, [pc, #248]	@ (800163c <temp_sensor_get_last_n_temp_data_serial_format+0x144>)
 8001544:	fb83 1302 	smull	r1, r3, r3, r2
 8001548:	1099      	asrs	r1, r3, #2
 800154a:	17d3      	asrs	r3, r2, #31
 800154c:	1ac9      	subs	r1, r1, r3
 800154e:	460b      	mov	r3, r1
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	613b      	str	r3, [r7, #16]
        Temp_Data_t* data = &temp_sensor->history[index];
 800155a:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <temp_sensor_get_last_n_temp_data_serial_format+0x140>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	3304      	adds	r3, #4
 8001566:	60fb      	str	r3, [r7, #12]

		// Pack: [TEMP x100 MSB, LSB], [TIMESTAMP MSB to LSB]
		out_buffer[i * 8 + 0] = ((data->temperature * 100) >> 8) & 0xFF;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	889b      	ldrh	r3, [r3, #4]
 800156c:	461a      	mov	r2, r3
 800156e:	2364      	movs	r3, #100	@ 0x64
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	121a      	asrs	r2, r3, #8
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4619      	mov	r1, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	440b      	add	r3, r1
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
		out_buffer[i * 8 + 1] = ((data->temperature * 100) >> 0) & 0xFF;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	3301      	adds	r3, #1
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	4611      	mov	r1, r2
 8001598:	0089      	lsls	r1, r1, #2
 800159a:	440a      	add	r2, r1
 800159c:	4611      	mov	r1, r2
 800159e:	0088      	lsls	r0, r1, #2
 80015a0:	4611      	mov	r1, r2
 80015a2:	4602      	mov	r2, r0
 80015a4:	440a      	add	r2, r1
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	701a      	strb	r2, [r3, #0]
		out_buffer[i * 8 + 2] = 0x00;
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	3302      	adds	r3, #2
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
		out_buffer[i * 8 + 3] = 0x00;
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	3303      	adds	r3, #3
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
		out_buffer[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0e19      	lsrs	r1, r3, #24
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	3304      	adds	r3, #4
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
		out_buffer[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c19      	lsrs	r1, r3, #16
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	3305      	adds	r3, #5
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
		out_buffer[i * 8 + 6] = (data->timestamp >> 8)  & 0xFF;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0a19      	lsrs	r1, r3, #8
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	3306      	adds	r3, #6
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	b2ca      	uxtb	r2, r1
 8001602:	701a      	strb	r2, [r3, #0]
        out_buffer[i * 8 + 7] = (data->timestamp >> 0)  & 0xFF;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	3307      	adds	r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
    for (i = 0; i <= n; ++i) {
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	3301      	adds	r3, #1
 800161a:	75fb      	strb	r3, [r7, #23]
 800161c:	7dfa      	ldrb	r2, [r7, #23]
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	429a      	cmp	r2, r3
 8001622:	d985      	bls.n	8001530 <temp_sensor_get_last_n_temp_data_serial_format+0x38>
    }

    return (i*8);
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	b2db      	uxtb	r3, r3
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000204 	.word	0x20000204
 800163c:	66666667 	.word	0x66666667

08001640 <temp_decode_i2c_response>:
//                temp->decode_i2c_response(i2c_rx_buf, 4);
//            }
//        }
//}

static void temp_decode_i2c_response(uint8_t* data, uint8_t len) {
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
    if (len < 4) {

    } // Expecting at least temp + hum

    Temp_Data_t sample;
    sample.temperature = (data[0] << 8) | data[1];
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3301      	adds	r3, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21b      	sxth	r3, r3
 8001662:	b29b      	uxth	r3, r3
 8001664:	81bb      	strh	r3, [r7, #12]
    sample.humidity    = (data[2] << 8) | data[3];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3302      	adds	r3, #2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b21b      	sxth	r3, r3
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3303      	adds	r3, #3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21b      	sxth	r3, r3
 800167e:	b29b      	uxth	r3, r3
 8001680:	81fb      	strh	r3, [r7, #14]

    // TODO: Replace with real-time acquisition
    sample.timestamp = 0x60D4A000; // Fixed dummy Unix timestamp
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <temp_decode_i2c_response+0xb8>)
 8001684:	60bb      	str	r3, [r7, #8]

    temp_sensor->history[temp_sensor->head_index] = sample;
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <temp_decode_i2c_response+0xbc>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <temp_decode_i2c_response+0xbc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	3304      	adds	r3, #4
 8001698:	f107 0208 	add.w	r2, r7, #8
 800169c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a0:	e883 0003 	stmia.w	r3, {r0, r1}
    temp_sensor->head_index = (temp_sensor->head_index + 1) % TEMP_HUMIDITY_SENSOR_HISTORY_SIZE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <temp_decode_i2c_response+0xbc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80016ac:	1c5a      	adds	r2, r3, #1
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <temp_decode_i2c_response+0xc0>)
 80016b0:	fb83 1302 	smull	r1, r3, r3, r2
 80016b4:	1099      	asrs	r1, r3, #2
 80016b6:	17d3      	asrs	r3, r2, #31
 80016b8:	1ac9      	subs	r1, r1, r3
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	1ad1      	subs	r1, r2, r3
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <temp_decode_i2c_response+0xbc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    if (temp_sensor->count < TEMP_HUMIDITY_SENSOR_HISTORY_SIZE)
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <temp_decode_i2c_response+0xbc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80016d6:	2b09      	cmp	r3, #9
 80016d8:	d807      	bhi.n	80016ea <temp_decode_i2c_response+0xaa>
        temp_sensor->count++;
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <temp_decode_i2c_response+0xbc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f893 2055 	ldrb.w	r2, [r3, #85]	@ 0x55
 80016e2:	3201      	adds	r2, #1
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	60d4a000 	.word	0x60d4a000
 80016fc:	20000204 	.word	0x20000204
 8001700:	66666667 	.word	0x66666667

08001704 <temp_sensor_trigger_data_collection>:

bool temp_sensor_trigger_data_collection(){
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
	I2C_Handler_t* i2c_handle=i2c_handler_get();
 800170a:	f7ff f8e1 	bl	80008d0 <i2c_handler_get>
 800170e:	6078      	str	r0, [r7, #4]

	uint8_t reg = TEMP_SENSOR_HTS221_HUMIDITY_OUT_L | 0x80; // Auto-increment
 8001710:	23a8      	movs	r3, #168	@ 0xa8
 8001712:	70fb      	strb	r3, [r7, #3]
	i2c_handle->read_reg(temp_sensor->i2c_address, &reg, 1, 4);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <temp_sensor_trigger_data_collection+0x2c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	7818      	ldrb	r0, [r3, #0]
 800171e:	1cf9      	adds	r1, r7, #3
 8001720:	2304      	movs	r3, #4
 8001722:	2201      	movs	r2, #1
 8001724:	47a0      	blx	r4


}
 8001726:	bf00      	nop
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	20000204 	.word	0x20000204

08001734 <Calculate_CRC>:

// Forward declarations
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len);

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001744:	2300      	movs	r3, #0
 8001746:	73bb      	strb	r3, [r7, #14]
 8001748:	e009      	b.n	800175e <Calculate_CRC+0x2a>
        crc ^= data[i];
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4053      	eors	r3, r2
 8001756:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	3301      	adds	r3, #1
 800175c:	73bb      	strb	r3, [r7, #14]
 800175e:	7bba      	ldrb	r2, [r7, #14]
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3f1      	bcc.n	800174a <Calculate_CRC+0x16>
    }
    return crc;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
    if (Size >= 7 && rx_buffer[0] == 0xAA) {
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	2b06      	cmp	r3, #6
 8001784:	d90a      	bls.n	800179c <HAL_UARTEx_RxEventCallback+0x28>
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_UARTEx_RxEventCallback+0x40>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2baa      	cmp	r3, #170	@ 0xaa
 800178c:	d106      	bne.n	800179c <HAL_UARTEx_RxEventCallback+0x28>
        uart_handler->process_recived_pck(rx_buffer, Size);
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_UARTEx_RxEventCallback+0x44>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	4611      	mov	r1, r2
 8001798:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <HAL_UARTEx_RxEventCallback+0x40>)
 800179a:	4798      	blx	r3
    }
    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_UARTEx_RxEventCallback+0x44>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2240      	movs	r2, #64	@ 0x40
 80017a4:	4903      	ldr	r1, [pc, #12]	@ (80017b4 <HAL_UARTEx_RxEventCallback+0x40>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f009 fa9d 	bl	800ace6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000274 	.word	0x20000274
 80017b8:	20000230 	.word	0x20000230

080017bc <uart_handler_Process_Received_pck>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
    if (size < 7) return;
 80017c8:	887b      	ldrh	r3, [r7, #2]
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d945      	bls.n	800185a <uart_handler_Process_Received_pck+0x9e>

    uint8_t received_crc = pck[size - 1];
 80017ce:	887b      	ldrh	r3, [r7, #2]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	73fb      	strb	r3, [r7, #15]
    uint8_t calculated_crc = Calculate_CRC(&pck[1], size - 2); // exclude start byte and CRC
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	3b02      	subs	r3, #2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f7ff ffa3 	bl	8001734 <Calculate_CRC>
 80017ee:	4603      	mov	r3, r0
 80017f0:	73bb      	strb	r3, [r7, #14]
    if (received_crc != calculated_crc) {
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d004      	beq.n	8001804 <uart_handler_Process_Received_pck+0x48>
        uart_handler->state = UART_STATE_ERROR;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2203      	movs	r2, #3
 8001800:	701a      	strb	r2, [r3, #0]
        return;
 8001802:	e02b      	b.n	800185c <uart_handler_Process_Received_pck+0xa0>
    }

    uart_handler->cmd_packet->header = pck[0];
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
    uart_handler->cmd_packet->cmd_type = pck[1];
 8001810:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	7852      	ldrb	r2, [r2, #1]
 800181a:	705a      	strb	r2, [r3, #1]
    uart_handler->cmd_packet->payload_len = pck[2];
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	7892      	ldrb	r2, [r2, #2]
 8001826:	709a      	strb	r2, [r3, #2]
    memcpy(uart_handler->cmd_packet->payload, &pck[3], 4);
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	3303      	adds	r3, #3
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	3203      	adds	r2, #3
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet->crc = received_crc;
 8001838:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    uart_handler->state = UART_STATE_PROCESSING;
 8001844:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]

    // Here you should now call your command dispatcher logic:
    data_handler_dispatcher(uart_handler->cmd_packet);
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <uart_handler_Process_Received_pck+0xa8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fece 	bl	80005f4 <data_handler_dispatcher>
 8001858:	e000      	b.n	800185c <uart_handler_Process_Received_pck+0xa0>
    if (size < 7) return;
 800185a:	bf00      	nop
}
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000230 	.word	0x20000230

08001868 <uart_handler_Send_Response>:

static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = tx_buffer;
 8001878:	4b24      	ldr	r3, [pc, #144]	@ (800190c <uart_handler_Send_Response+0xa4>)
 800187a:	60fb      	str	r3, [r7, #12]
    uint8_t idx = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	72fb      	strb	r3, [r7, #11]

    buf[idx++] = 0xAA;                     // Start byte
 8001880:	7afb      	ldrb	r3, [r7, #11]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	72fa      	strb	r2, [r7, #11]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	22aa      	movs	r2, #170	@ 0xaa
 800188e:	701a      	strb	r2, [r3, #0]
    buf[idx++] = cmd;                  // Response CMD/status
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	72fa      	strb	r2, [r7, #11]
 8001896:	461a      	mov	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	79fa      	ldrb	r2, [r7, #7]
 800189e:	701a      	strb	r2, [r3, #0]
    buf[idx++] = payload_len;             // Payload length
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	72fa      	strb	r2, [r7, #11]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	79ba      	ldrb	r2, [r7, #6]
 80018ae:	701a      	strb	r2, [r3, #0]

    memcpy(&buf[idx], payload, payload_len);
 80018b0:	7afb      	ldrb	r3, [r7, #11]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	79ba      	ldrb	r2, [r7, #6]
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f009 fbba 	bl	800b034 <memcpy>
    idx += payload_len;
 80018c0:	7afa      	ldrb	r2, [r7, #11]
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	4413      	add	r3, r2
 80018c6:	72fb      	strb	r3, [r7, #11]


    buf[idx] = Calculate_CRC(&buf[1], idx - 1); // CRC over CMD + LEN + payload + timestamp
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1c58      	adds	r0, r3, #1
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b2d9      	uxtb	r1, r3
 80018d2:	7afb      	ldrb	r3, [r7, #11]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	18d4      	adds	r4, r2, r3
 80018d8:	f7ff ff2c 	bl	8001734 <Calculate_CRC>
 80018dc:	4603      	mov	r3, r0
 80018de:	7023      	strb	r3, [r4, #0]
    idx++;
 80018e0:	7afb      	ldrb	r3, [r7, #11]
 80018e2:	3301      	adds	r3, #1
 80018e4:	72fb      	strb	r3, [r7, #11]

    HAL_UART_Transmit(uart_handler->huart, buf, idx, HAL_MAX_DELAY);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <uart_handler_Send_Response+0xa8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d8      	ldr	r0, [r3, #12]
 80018ec:	7afb      	ldrb	r3, [r7, #11]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	f007 fb3f 	bl	8008f78 <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 80018fa:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <uart_handler_Send_Response+0xa8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	20000234 	.word	0x20000234
 8001910:	20000230 	.word	0x20000230

08001914 <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 800191c:	2020      	movs	r0, #32
 800191e:	f009 fa8f 	bl	800ae40 <malloc>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <uart_handler_Init+0x84>)
 8001928:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <uart_handler_Init+0x84>)
 800192c:	681c      	ldr	r4, [r3, #0]
 800192e:	203e      	movs	r0, #62	@ 0x3e
 8001930:	f009 fa86 	bl	800ae40 <malloc>
 8001934:	4603      	mov	r3, r0
 8001936:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8001938:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <uart_handler_Init+0x84>)
 800193a:	681c      	ldr	r4, [r3, #0]
 800193c:	203e      	movs	r0, #62	@ 0x3e
 800193e:	f009 fa7f 	bl	800ae40 <malloc>
 8001942:	4603      	mov	r3, r0
 8001944:	60a3      	str	r3, [r4, #8]

    uart_handler->huart = huart;
 8001946:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <uart_handler_Init+0x84>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	60da      	str	r2, [r3, #12]
    uart_handler->state = UART_STATE_IDLE;
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <uart_handler_Init+0x84>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <uart_handler_Init+0x84>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	223a      	movs	r2, #58	@ 0x3a
 800195c:	705a      	strb	r2, [r3, #1]
    uart_handler->rx_buffer = rx_buffer;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <uart_handler_Init+0x84>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <uart_handler_Init+0x88>)
 8001964:	61da      	str	r2, [r3, #28]
    uart_handler->tx_buffer = tx_buffer;
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <uart_handler_Init+0x84>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <uart_handler_Init+0x8c>)
 800196c:	619a      	str	r2, [r3, #24]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <uart_handler_Init+0x84>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <uart_handler_Init+0x90>)
 8001974:	611a      	str	r2, [r3, #16]
    uart_handler->send_response = uart_handler_Send_Response;
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <uart_handler_Init+0x84>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <uart_handler_Init+0x94>)
 800197c:	615a      	str	r2, [r3, #20]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <uart_handler_Init+0x84>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	4905      	ldr	r1, [pc, #20]	@ (800199c <uart_handler_Init+0x88>)
 8001988:	4618      	mov	r0, r3
 800198a:	f009 f9ac 	bl	800ace6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	20000230 	.word	0x20000230
 800199c:	20000274 	.word	0x20000274
 80019a0:	20000234 	.word	0x20000234
 80019a4:	080017bd 	.word	0x080017bd
 80019a8:	08001869 	.word	0x08001869

080019ac <uart_handler_get>:
        memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
        memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
    }
}

UART_Handler_t* uart_handler_get(void) {
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
    return uart_handler;
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <uart_handler_get+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000230 	.word	0x20000230

080019c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019fc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c8:	f7ff fc00 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019ce:	e003      	b.n	80019d8 <LoopCopyDataInit>

080019d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019d6:	3104      	adds	r1, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019d8:	480a      	ldr	r0, [pc, #40]	@ (8001a04 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019e0:	d3f6      	bcc.n	80019d0 <CopyDataInit>
	ldr	r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LoopForever+0x12>)
	b	LoopFillZerobss
 80019e4:	e002      	b.n	80019ec <LoopFillZerobss>

080019e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019e8:	f842 3b04 	str.w	r3, [r2], #4

080019ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <LoopForever+0x16>)
	cmp	r2, r3
 80019ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019f0:	d3f9      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f2:	f009 faf9 	bl	800afe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f6:	f7fe ff77 	bl	80008e8 <main>

080019fa <LoopForever>:

LoopForever:
    b LoopForever
 80019fa:	e7fe      	b.n	80019fa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80019fc:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a00:	0800b178 	.word	0x0800b178
	ldr	r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a08:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001a0c:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001a10:	200003fd 	.word	0x200003fd

08001a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_Init+0x50>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_Init+0x50>)
 8001a22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 f98c 	bl	8001d46 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001a2e:	f003 fd0b 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_Init+0x54>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <HAL_Init+0x58>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	4a0b      	ldr	r2, [pc, #44]	@ (8001a74 <HAL_Init+0x5c>)
 8001a46:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a48:	2004      	movs	r0, #4
 8001a4a:	f000 f9d1 	bl	8001df0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f000 f812 	bl	8001a78 <HAL_InitTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e002      	b.n	8001a64 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5e:	f7ff f9b1 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	46020c00 	.word	0x46020c00
 8001a70:	0800b068 	.word	0x0800b068
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a84:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <HAL_InitTick+0xdc>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e05c      	b.n	8001b4a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001a90:	4b31      	ldr	r3, [pc, #196]	@ (8001b58 <HAL_InitTick+0xe0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_InitTick+0xe4>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <HAL_InitTick+0xdc>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e037      	b.n	8001b26 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001ab6:	f000 f9f3 	bl	8001ea0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001aba:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d023      	beq.n	8001b0a <HAL_InitTick+0x92>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d82d      	bhi.n	8001b24 <HAL_InitTick+0xac>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_InitTick+0x5e>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00d      	beq.n	8001af0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001ad4:	e026      	b.n	8001b24 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001ad6:	4b21      	ldr	r3, [pc, #132]	@ (8001b5c <HAL_InitTick+0xe4>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <HAL_InitTick+0xdc>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	60fb      	str	r3, [r7, #12]
        break;
 8001aee:	e01a      	b.n	8001b26 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_InitTick+0xdc>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001afe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	60fb      	str	r3, [r7, #12]
        break;
 8001b08:	e00d      	b.n	8001b26 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_InitTick+0xdc>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	60fb      	str	r3, [r7, #12]
        break;
 8001b22:	e000      	b.n	8001b26 <HAL_InitTick+0xae>
        break;
 8001b24:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f940 	bl	8001dac <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e009      	b.n	8001b4a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b36:	2200      	movs	r2, #0
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3e:	f000 f90d 	bl	8001d5c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001b42:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_InitTick+0xe8>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000008 	.word	0x20000008
 8001b58:	e000e010 	.word	0xe000e010
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	200002b4 	.word	0x200002b4

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200002b4 	.word	0x200002b4

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	@ (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ff4c 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6a:	f7ff ff63 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001d6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	6978      	ldr	r0, [r7, #20]
 8001d76:	f7ff ffb3 	bl	8001ce0 <NVIC_EncodePriority>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff82 	bl	8001c8c <__NVIC_SetPriority>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff56 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00d      	b.n	8001dde <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <HAL_SYSTICK_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <HAL_SYSTICK_Config+0x40>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_SYSTICK_Config+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <HAL_SYSTICK_Config+0x40>)
 8001dd6:	f043 0303 	orr.w	r3, r3, #3
 8001dda:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d844      	bhi.n	8001e88 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001e04 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e27 	.word	0x08001e27
 8001e08:	08001e45 	.word	0x08001e45
 8001e0c:	08001e67 	.word	0x08001e67
 8001e10:	08001e89 	.word	0x08001e89
 8001e14:	08001e19 	.word	0x08001e19
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6013      	str	r3, [r2, #0]
      break;
 8001e24:	e031      	b.n	8001e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e38:	4a18      	ldr	r2, [pc, #96]	@ (8001e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e3a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e42:	e022      	b.n	8001e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e5a:	4a10      	ldr	r2, [pc, #64]	@ (8001e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e64:	e011      	b.n	8001e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e66:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e78:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001e86:	e000      	b.n	8001e8a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001e88:	bf00      	nop
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010
 8001e9c:	46020c00 	.word	0x46020c00

08001ea0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e021      	b.n	8001efc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8001ec2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001eca:	d011      	beq.n	8001ef0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ed2:	d810      	bhi.n	8001ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ee0:	d003      	beq.n	8001eea <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001ee2:	e008      	b.n	8001ef6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
        break;
 8001ee8:	e008      	b.n	8001efc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001eea:	2301      	movs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
        break;
 8001eee:	e005      	b.n	8001efc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	607b      	str	r3, [r7, #4]
        break;
 8001ef4:	e002      	b.n	8001efc <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
        break;
 8001efa:	bf00      	nop
    }
  }
  return systick_source;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000e010 	.word	0xe000e010
 8001f10:	46020c00 	.word	0x46020c00

08001f14 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001f1c:	f7ff fe36 	bl	8001b8c <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e06b      	b.n	8002004 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d008      	beq.n	8001f4a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e05c      	b.n	8002004 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0204 	orr.w	r2, r2, #4
 8001f58:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001f62:	e020      	b.n	8001fa6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001f64:	f7ff fe12 	bl	8001b8c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d919      	bls.n	8001fa6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	f043 0210 	orr.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2203      	movs	r2, #3
 8001f82:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f96:	2201      	movs	r2, #1
 8001f98:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e02e      	b.n	8002004 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0d7      	beq.n	8001f64 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0202 	orr.w	r2, r2, #2
 8001fc2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001fd4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fee:	2201      	movs	r2, #1
 8001ff0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e019      	b.n	8002052 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d004      	beq.n	8002034 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e00e      	b.n	8002052 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800206c:	b2db      	uxtb	r3, r3
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	b2db      	uxtb	r3, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	@ 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020aa:	e1ba      	b.n	8002422 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	4013      	ands	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 81aa 	beq.w	800241c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a55      	ldr	r2, [pc, #340]	@ (8002220 <HAL_GPIO_Init+0x188>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d15d      	bne.n	800218c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80020d6:	2201      	movs	r2, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002100:	4a48      	ldr	r2, [pc, #288]	@ (8002224 <HAL_GPIO_Init+0x18c>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002108:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800210a:	4a46      	ldr	r2, [pc, #280]	@ (8002224 <HAL_GPIO_Init+0x18c>)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	3208      	adds	r2, #8
 800211e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002122:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	4013      	ands	r3, r2
 8002138:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220b      	movs	r2, #11
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	4313      	orrs	r3, r2
 800214c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	3208      	adds	r2, #8
 8002156:	69f9      	ldr	r1, [r7, #28]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	4013      	ands	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2202      	movs	r2, #2
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4313      	orrs	r3, r2
 8002182:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e067      	b.n	800225c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x104>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b12      	cmp	r3, #18
 800219a:	d145      	bne.n	8002228 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	08da      	lsrs	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3208      	adds	r2, #8
 80021a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	4013      	ands	r3, r2
 80021be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 020f 	and.w	r2, r3, #15
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69f9      	ldr	r1, [r7, #28]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4313      	orrs	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e01e      	b.n	800225c <HAL_GPIO_Init+0x1c4>
 800221e:	bf00      	nop
 8002220:	46020000 	.word	0x46020000
 8002224:	0800b0c0 	.word	0x0800b0c0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	4013      	ands	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	4313      	orrs	r3, r2
 8002254:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	69fa      	ldr	r2, [r7, #28]
 800225a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d00b      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d007      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002270:	2b11      	cmp	r3, #17
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b12      	cmp	r3, #18
 800227a:	d130      	bne.n	80022de <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	4013      	ands	r3, r2
 8002292:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80022b2:	2201      	movs	r2, #1
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	4013      	ands	r3, r2
 80022c0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0201 	and.w	r2, r3, #1
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d017      	beq.n	8002316 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	2203      	movs	r2, #3
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	4313      	orrs	r3, r2
 800230e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d07c      	beq.n	800241c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002322:	4a47      	ldr	r2, [pc, #284]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3318      	adds	r3, #24
 800232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	220f      	movs	r2, #15
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	4013      	ands	r3, r2
 8002344:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	0a9a      	lsrs	r2, r3, #10
 800234a:	4b3e      	ldr	r3, [pc, #248]	@ (8002444 <HAL_GPIO_Init+0x3ac>)
 800234c:	4013      	ands	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	f002 0203 	and.w	r2, r2, #3
 8002354:	00d2      	lsls	r2, r2, #3
 8002356:	4093      	lsls	r3, r2
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	4313      	orrs	r3, r2
 800235c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800235e:	4938      	ldr	r1, [pc, #224]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3318      	adds	r3, #24
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800236c:	4b34      	ldr	r3, [pc, #208]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43db      	mvns	r3, r3
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	4013      	ands	r3, r2
 800237a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002390:	4a2b      	ldr	r2, [pc, #172]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 80023c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	4013      	ands	r3, r2
 80023d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80023e6:	4a16      	ldr	r2, [pc, #88]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 80023f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <HAL_GPIO_Init+0x3a8>)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f ae3d 	bne.w	80020ac <HAL_GPIO_Init+0x14>
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	3724      	adds	r7, #36	@ 0x24
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	46022000 	.word	0x46022000
 8002444:	002f7f7f 	.word	0x002f7f7f

08002448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e08d      	b.n	8002576 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fcc2 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	@ 0x24
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002498:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	e006      	b.n	80024d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d108      	bne.n	80024ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	e007      	b.n	80024fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800251c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69d9      	ldr	r1, [r3, #28]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	461a      	mov	r2, r3
 800258c:	460b      	mov	r3, r1
 800258e:	817b      	strh	r3, [r7, #10]
 8002590:	4613      	mov	r3, r2
 8002592:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b20      	cmp	r3, #32
 800259e:	d167      	bne.n	8002670 <HAL_I2C_Master_Transmit_IT+0xf0>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ae:	d101      	bne.n	80025b4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
 80025b2:	e05e      	b.n	8002672 <HAL_I2C_Master_Transmit_IT+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Master_Transmit_IT+0x42>
 80025be:	2302      	movs	r3, #2
 80025c0:	e057      	b.n	8002672 <HAL_I2C_Master_Transmit_IT+0xf2>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2221      	movs	r2, #33	@ 0x21
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2210      	movs	r2, #16
 80025d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	893a      	ldrh	r2, [r7, #8]
 80025ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a23      	ldr	r2, [pc, #140]	@ (800267c <HAL_I2C_Master_Transmit_IT+0xfc>)
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_I2C_Master_Transmit_IT+0x100>)
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2bff      	cmp	r3, #255	@ 0xff
 8002600:	d906      	bls.n	8002610 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	22ff      	movs	r2, #255	@ 0xff
 8002606:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e007      	b.n	8002620 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800261a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    /* Check if the Autonomous mode is enabled */
    if ((hi2c->Instance->AUTOCR & I2C_AUTOCR_TRIGEN) == I2C_AUTOCR_TRIGEN)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800262e:	d10b      	bne.n	8002648 <HAL_I2C_Master_Transmit_IT+0xc8>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_NO_START_WRITE);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	8979      	ldrh	r1, [r7, #10]
 8002638:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f001 fbcb 	bl	8003ddc <I2C_TransferConfig>
 8002646:	e009      	b.n	800265c <HAL_I2C_Master_Transmit_IT+0xdc>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_I2C_Master_Transmit_IT+0x104>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f001 fbc0 	bl	8003ddc <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002664:	2101      	movs	r1, #1
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f001 fbea 	bl	8003e40 <I2C_Enable_IRQ>

    return HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	e000      	b.n	8002672 <HAL_I2C_Master_Transmit_IT+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	ffff0000 	.word	0xffff0000
 8002680:	0800292f 	.word	0x0800292f
 8002684:	80002000 	.word	0x80002000

08002688 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	460b      	mov	r3, r1
 8002696:	817b      	strh	r3, [r7, #10]
 8002698:	4613      	mov	r3, r2
 800269a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d166      	bne.n	8002776 <HAL_I2C_Master_Receive_IT+0xee>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026b6:	d101      	bne.n	80026bc <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	e05d      	b.n	8002778 <HAL_I2C_Master_Receive_IT+0xf0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Master_Receive_IT+0x42>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e056      	b.n	8002778 <HAL_I2C_Master_Receive_IT+0xf0>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2222      	movs	r2, #34	@ 0x22
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2210      	movs	r2, #16
 80026de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	893a      	ldrh	r2, [r7, #8]
 80026f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a22      	ldr	r2, [pc, #136]	@ (8002780 <HAL_I2C_Master_Receive_IT+0xf8>)
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a21      	ldr	r2, [pc, #132]	@ (8002784 <HAL_I2C_Master_Receive_IT+0xfc>)
 80026fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2bff      	cmp	r3, #255	@ 0xff
 8002708:	d906      	bls.n	8002718 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	22ff      	movs	r2, #255	@ 0xff
 800270e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e007      	b.n	8002728 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002726:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    /* Check if the Autonomous mode is enabled */
    if ((hi2c->Instance->AUTOCR & I2C_AUTOCR_TRIGEN) == I2C_AUTOCR_TRIGEN)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002736:	d10a      	bne.n	800274e <HAL_I2C_Master_Receive_IT+0xc6>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_NO_START_READ);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273c:	b2da      	uxtb	r2, r3
 800273e:	8979      	ldrh	r1, [r7, #10]
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_I2C_Master_Receive_IT+0x100>)
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f001 fb48 	bl	8003ddc <I2C_TransferConfig>
 800274c:	e009      	b.n	8002762 <HAL_I2C_Master_Receive_IT+0xda>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002752:	b2da      	uxtb	r2, r3
 8002754:	8979      	ldrh	r1, [r7, #10]
 8002756:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <HAL_I2C_Master_Receive_IT+0x104>)
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f001 fb3d 	bl	8003ddc <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800276a:	2102      	movs	r1, #2
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f001 fb67 	bl	8003e40 <I2C_Enable_IRQ>

    return HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	e000      	b.n	8002778 <HAL_I2C_Master_Receive_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	ffff0000 	.word	0xffff0000
 8002784:	0800292f 	.word	0x0800292f
 8002788:	80000400 	.word	0x80000400
 800278c:	80002400 	.word	0x80002400

08002790 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	68f9      	ldr	r1, [r7, #12]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
  }
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	09db      	lsrs	r3, r3, #7
 80027ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002808:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	0a9b      	lsrs	r3, r3, #10
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	09db      	lsrs	r3, r3, #7
 800281a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	f043 0208 	orr.w	r2, r3, #8
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002836:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	0a5b      	lsrs	r3, r3, #9
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	09db      	lsrs	r3, r3, #7
 8002848:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002864:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 030b 	and.w	r3, r3, #11
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002876:	68f9      	ldr	r1, [r7, #12]
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f001 f955 	bl	8003b28 <I2C_ITError>
  }
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
 80028ba:	4613      	mov	r3, r2
 80028bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b088      	sub	sp, #32
 8002932:	af02      	add	r7, sp, #8
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <I2C_Master_ISR_IT+0x1e>
 8002948:	2302      	movs	r3, #2
 800294a:	e114      	b.n	8002b76 <I2C_Master_ISR_IT+0x248>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f001 f9e8 	bl	8003d56 <I2C_Flush_TXDR>
 8002986:	e0e1      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d023      	beq.n	80029dc <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01d      	beq.n	80029dc <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029da:	e0b7      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01e      	beq.n	8002a26 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d018      	beq.n	8002a26 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a24:	e092      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	09db      	lsrs	r3, r3, #7
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d05d      	beq.n	8002aee <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d057      	beq.n	8002aee <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d040      	beq.n	8002aca <I2C_Master_ISR_IT+0x19c>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d13c      	bne.n	8002aca <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a5c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2bff      	cmp	r3, #255	@ 0xff
 8002a66:	d90e      	bls.n	8002a86 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	22ff      	movs	r2, #255	@ 0xff
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8a79      	ldrh	r1, [r7, #18]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f001 f9ac 	bl	8003ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a84:	e032      	b.n	8002aec <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a98:	d00b      	beq.n	8002ab2 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002aa4:	8a79      	ldrh	r1, [r7, #18]
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	9000      	str	r0, [sp, #0]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f001 f996 	bl	8003ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab0:	e01c      	b.n	8002aec <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	8a79      	ldrh	r1, [r7, #18]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f001 f98a 	bl	8003ddc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac8:	e010      	b.n	8002aec <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ad8:	d003      	beq.n	8002ae2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fcec 	bl	80034b8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae0:	e034      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ae2:	2140      	movs	r1, #64	@ 0x40
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f001 f81f 	bl	8003b28 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aea:	e02f      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
 8002aec:	e02e      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d022      	beq.n	8002b4c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b1e:	d015      	beq.n	8002b4c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b28:	d108      	bne.n	8002b3c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fcbb 	bl	80034b8 <I2C_ITMasterSeqCplt>
 8002b42:	e003      	b.n	8002b4c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b44:	2140      	movs	r1, #64	@ 0x40
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 ffee 	bl	8003b28 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d009      	beq.n	8002b6c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fd42 	bl	80035f0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <I2C_Slave_ISR_IT+0x24>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0ed      	b.n	8002d7e <I2C_Slave_ISR_IT+0x200>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002bc2:	6939      	ldr	r1, [r7, #16]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 fddd 	bl	8003784 <I2C_ITSlaveCplt>
 8002bca:	e0d3      	b.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d04d      	beq.n	8002c74 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d047      	beq.n	8002c74 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d128      	bne.n	8002c40 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b28      	cmp	r3, #40	@ 0x28
 8002bf8:	d108      	bne.n	8002c0c <I2C_Slave_ISR_IT+0x8e>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c00:	d104      	bne.n	8002c0c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c02:	6939      	ldr	r1, [r7, #16]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 ff39 	bl	8003a7c <I2C_ITListenCplt>
 8002c0a:	e032      	b.n	8002c72 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b29      	cmp	r3, #41	@ 0x29
 8002c16:	d10e      	bne.n	8002c36 <I2C_Slave_ISR_IT+0xb8>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c1e:	d00a      	beq.n	8002c36 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2210      	movs	r2, #16
 8002c26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f001 f894 	bl	8003d56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fc7f 	bl	8003532 <I2C_ITSlaveSeqCplt>
 8002c34:	e01d      	b.n	8002c72 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c3e:	e096      	b.n	8002d6e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2210      	movs	r2, #16
 8002c46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <I2C_Slave_ISR_IT+0xe6>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	f040 8085 	bne.w	8002d6e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 ff5c 	bl	8003b28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c70:	e07d      	b.n	8002d6e <I2C_Slave_ISR_IT+0x1f0>
 8002c72:	e07c      	b.n	8002d6e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d030      	beq.n	8002ce2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02a      	beq.n	8002ce2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d14f      	bne.n	8002d72 <I2C_Slave_ISR_IT+0x1f4>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cd8:	d04b      	beq.n	8002d72 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fc29 	bl	8003532 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ce0:	e047      	b.n	8002d72 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002cfa:	6939      	ldr	r1, [r7, #16]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fb57 	bl	80033b0 <I2C_ITAddrCplt>
 8002d02:	e037      	b.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d031      	beq.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02b      	beq.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d018      	beq.n	8002d58 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d56:	e00d      	b.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d5e:	d002      	beq.n	8002d66 <I2C_Slave_ISR_IT+0x1e8>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fbe3 	bl	8003532 <I2C_ITSlaveSeqCplt>
 8002d6c:	e002      	b.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002d72:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b088      	sub	sp, #32
 8002d8a:	af02      	add	r7, sp, #8
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <I2C_Master_ISR_DMA+0x1a>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0e1      	b.n	8002f64 <I2C_Master_ISR_DMA+0x1de>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	091b      	lsrs	r3, r3, #4
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d011      	beq.n	8002de4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dcc:	f043 0204 	orr.w	r2, r3, #4
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f001 f832 	bl	8003e40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 ffba 	bl	8003d56 <I2C_Flush_TXDR>
 8002de2:	e0ba      	b.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	09db      	lsrs	r3, r3, #7
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d072      	beq.n	8002ed6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	099b      	lsrs	r3, r3, #6
 8002df4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d06c      	beq.n	8002ed6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e0a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04e      	beq.n	8002eb4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e22:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2bff      	cmp	r3, #255	@ 0xff
 8002e2c:	d906      	bls.n	8002e3c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	22ff      	movs	r2, #255	@ 0xff
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e010      	b.n	8002e5e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e4e:	d003      	beq.n	8002e58 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e002      	b.n	8002e5e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e5c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	8a79      	ldrh	r1, [r7, #18]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 ffb5 	bl	8003ddc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b22      	cmp	r3, #34	@ 0x22
 8002e8e:	d108      	bne.n	8002ea2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e9e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002ea0:	e05b      	b.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002eb2:	e052      	b.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ec2:	d003      	beq.n	8002ecc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 faf7 	bl	80034b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002eca:	e046      	b.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ecc:	2140      	movs	r1, #64	@ 0x40
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fe2a 	bl	8003b28 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002ed4:	e041      	b.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d029      	beq.n	8002f36 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d023      	beq.n	8002f36 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d119      	bne.n	8002f2c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f06:	d027      	beq.n	8002f58 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f10:	d108      	bne.n	8002f24 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f20:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002f22:	e019      	b.n	8002f58 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fac7 	bl	80034b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002f2a:	e015      	b.n	8002f58 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f2c:	2140      	movs	r1, #64	@ 0x40
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fdfa 	bl	8003b28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f34:	e010      	b.n	8002f58 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fb4d 	bl	80035f0 <I2C_ITMasterCplt>
 8002f56:	e000      	b.n	8002f5a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002f58:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002f78:	4b92      	ldr	r3, [pc, #584]	@ (80031c4 <I2C_Mem_ISR_DMA+0x258>)
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <I2C_Mem_ISR_DMA+0x1e>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e118      	b.n	80031bc <I2C_Mem_ISR_DMA+0x250>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d017      	beq.n	8002fce <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2210      	movs	r2, #16
 8002fb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f043 0204 	orr.w	r2, r3, #4
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 ff3d 	bl	8003e40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fec5 	bl	8003d56 <I2C_Flush_TXDR>
 8002fcc:	e0f1      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00f      	beq.n	8002ffa <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ff8:	e0db      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	09db      	lsrs	r3, r3, #7
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d060      	beq.n	80030c8 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800300e:	2b00      	cmp	r3, #0
 8003010:	d05a      	beq.n	80030c8 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003012:	2101      	movs	r1, #1
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 ff97 	bl	8003f48 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800301a:	2110      	movs	r1, #16
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 ff0f 	bl	8003e40 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d048      	beq.n	80030be <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	2bff      	cmp	r3, #255	@ 0xff
 8003034:	d910      	bls.n	8003058 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	22ff      	movs	r2, #255	@ 0xff
 800303a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003040:	b299      	uxth	r1, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003046:	b2da      	uxtb	r2, r3
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fec3 	bl	8003ddc <I2C_TransferConfig>
 8003056:	e011      	b.n	800307c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003066:	b299      	uxth	r1, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	b2da      	uxtb	r2, r3
 800306e:	2300      	movs	r3, #0
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 feb0 	bl	8003ddc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b22      	cmp	r3, #34	@ 0x22
 8003098:	d108      	bne.n	80030ac <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80030aa:	e082      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030ba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80030bc:	e079      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fd31 	bl	8003b28 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80030c6:	e074      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d05e      	beq.n	8003192 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d058      	beq.n	8003192 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030e0:	2101      	movs	r1, #1
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 ff30 	bl	8003f48 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80030e8:	2110      	movs	r1, #16
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fea8 	bl	8003e40 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b22      	cmp	r3, #34	@ 0x22
 80030fa:	d101      	bne.n	8003100 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80030fc:	4b32      	ldr	r3, [pc, #200]	@ (80031c8 <I2C_Mem_ISR_DMA+0x25c>)
 80030fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2bff      	cmp	r3, #255	@ 0xff
 8003108:	d910      	bls.n	800312c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	22ff      	movs	r2, #255	@ 0xff
 800310e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003114:	b299      	uxth	r1, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311a:	b2da      	uxtb	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fe59 	bl	8003ddc <I2C_TransferConfig>
 800312a:	e011      	b.n	8003150 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313a:	b299      	uxth	r1, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	b2da      	uxtb	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fe46 	bl	8003ddc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b22      	cmp	r3, #34	@ 0x22
 800316c:	d108      	bne.n	8003180 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800317c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800317e:	e018      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800318e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003190:	e00f      	b.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fa1f 	bl	80035f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	80002000 	.word	0x80002000
 80031c8:	80002400 	.word	0x80002400

080031cc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b089      	sub	sp, #36	@ 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <I2C_Slave_ISR_DMA+0x24>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0db      	b.n	80033a8 <I2C_Slave_ISR_DMA+0x1dc>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fab6 	bl	8003784 <I2C_ITSlaveCplt>
 8003218:	e0c1      	b.n	800339e <I2C_Slave_ISR_DMA+0x1d2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80ab 	beq.w	800337e <I2C_Slave_ISR_DMA+0x1b2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a4 	beq.w	800337e <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0b9b      	lsrs	r3, r3, #14
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0bdb      	lsrs	r3, r3, #15
 8003246:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8090 	beq.w	8003370 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d015      	beq.n	8003284 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0bdb      	lsrs	r3, r3, #15
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00f      	beq.n	8003284 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326c:	b29c      	uxth	r4, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe ff01 	bl	800207a <HAL_DMAEx_GetFifoLevel>
 8003278:	4603      	mov	r3, r0
 800327a:	4423      	add	r3, r4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <I2C_Slave_ISR_DMA+0xec>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0b9b      	lsrs	r3, r3, #14
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00f      	beq.n	80032b8 <I2C_Slave_ISR_DMA+0xec>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a0:	b29c      	uxth	r4, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fee7 	bl	800207a <HAL_DMAEx_GetFifoLevel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4423      	add	r3, r4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <I2C_Slave_ISR_DMA+0xec>
          {
            treatdmanack = 1U;
 80032b4:	2301      	movs	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d128      	bne.n	8003310 <I2C_Slave_ISR_DMA+0x144>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b28      	cmp	r3, #40	@ 0x28
 80032c8:	d108      	bne.n	80032dc <I2C_Slave_ISR_DMA+0x110>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d0:	d104      	bne.n	80032dc <I2C_Slave_ISR_DMA+0x110>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fbd1 	bl	8003a7c <I2C_ITListenCplt>
 80032da:	e048      	b.n	800336e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b29      	cmp	r3, #41	@ 0x29
 80032e6:	d10e      	bne.n	8003306 <I2C_Slave_ISR_DMA+0x13a>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032ee:	d00a      	beq.n	8003306 <I2C_Slave_ISR_DMA+0x13a>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2210      	movs	r2, #16
 80032f6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fd2c 	bl	8003d56 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f917 	bl	8003532 <I2C_ITSlaveSeqCplt>
 8003304:	e033      	b.n	800336e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800330e:	e034      	b.n	800337a <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2210      	movs	r2, #16
 8003316:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	f043 0204 	orr.w	r2, r3, #4
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <I2C_Slave_ISR_DMA+0x16e>
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003338:	d11f      	bne.n	800337a <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	2b21      	cmp	r3, #33	@ 0x21
 800333e:	d002      	beq.n	8003346 <I2C_Slave_ISR_DMA+0x17a>
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b29      	cmp	r3, #41	@ 0x29
 8003344:	d103      	bne.n	800334e <I2C_Slave_ISR_DMA+0x182>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	@ 0x21
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
 800334c:	e008      	b.n	8003360 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	2b22      	cmp	r3, #34	@ 0x22
 8003352:	d002      	beq.n	800335a <I2C_Slave_ISR_DMA+0x18e>
 8003354:	7dfb      	ldrb	r3, [r7, #23]
 8003356:	2b2a      	cmp	r3, #42	@ 0x2a
 8003358:	d102      	bne.n	8003360 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2222      	movs	r2, #34	@ 0x22
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003364:	4619      	mov	r1, r3
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fbde 	bl	8003b28 <I2C_ITError>
      if (treatdmanack == 1U)
 800336c:	e005      	b.n	800337a <I2C_Slave_ISR_DMA+0x1ae>
 800336e:	e004      	b.n	800337a <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2210      	movs	r2, #16
 8003376:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003378:	e011      	b.n	800339e <I2C_Slave_ISR_DMA+0x1d2>
      if (treatdmanack == 1U)
 800337a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800337c:	e00f      	b.n	800339e <I2C_Slave_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	08db      	lsrs	r3, r3, #3
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <I2C_Slave_ISR_DMA+0x1d2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <I2C_Slave_ISR_DMA+0x1d2>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f809 	bl	80033b0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3724      	adds	r7, #36	@ 0x24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd90      	pop	{r4, r7, pc}

080033b0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033c6:	2b28      	cmp	r3, #40	@ 0x28
 80033c8:	d16a      	bne.n	80034a0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	0c1b      	lsrs	r3, r3, #16
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80033e8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003404:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d138      	bne.n	8003480 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	09db      	lsrs	r3, r3, #7
 8003412:	b29a      	uxth	r2, r3
 8003414:	89bb      	ldrh	r3, [r7, #12]
 8003416:	4053      	eors	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	f003 0306 	and.w	r3, r3, #6
 800341e:	2b00      	cmp	r3, #0
 8003420:	d11c      	bne.n	800345c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	2b02      	cmp	r3, #2
 8003436:	d13b      	bne.n	80034b0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2208      	movs	r2, #8
 8003444:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800344e:	89ba      	ldrh	r2, [r7, #12]
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fa2a 	bl	80028ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800345a:	e029      	b.n	80034b0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003460:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fd6f 	bl	8003f48 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003472:	89ba      	ldrh	r2, [r7, #12]
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fa18 	bl	80028ae <HAL_I2C_AddrCallback>
}
 800347e:	e017      	b.n	80034b0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003480:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fd5f 	bl	8003f48 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003492:	89ba      	ldrh	r2, [r7, #12]
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fa08 	bl	80028ae <HAL_I2C_AddrCallback>
}
 800349e:	e007      	b.n	80034b0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2208      	movs	r2, #8
 80034a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b21      	cmp	r3, #33	@ 0x21
 80034d2:	d115      	bne.n	8003500 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2211      	movs	r2, #17
 80034e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034e8:	2101      	movs	r1, #1
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fd2c 	bl	8003f48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fd f8e5 	bl	80006c8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034fe:	e014      	b.n	800352a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2212      	movs	r2, #18
 800350c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003514:	2102      	movs	r1, #2
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fd16 	bl	8003f48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fd f8ff 	bl	8000728 <HAL_I2C_MasterRxCpltCallback>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	0b9b      	lsrs	r3, r3, #14
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e00d      	b.n	8003584 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	0bdb      	lsrs	r3, r3, #15
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003582:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b29      	cmp	r3, #41	@ 0x29
 800358e:	d112      	bne.n	80035b6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2228      	movs	r2, #40	@ 0x28
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2221      	movs	r2, #33	@ 0x21
 800359c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800359e:	2101      	movs	r1, #1
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fcd1 	bl	8003f48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff f969 	bl	8002886 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80035b4:	e017      	b.n	80035e6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c0:	d111      	bne.n	80035e6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2228      	movs	r2, #40	@ 0x28
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2222      	movs	r2, #34	@ 0x22
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80035d0:	2102      	movs	r1, #2
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fcb8 	bl	8003f48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff f95a 	bl	800289a <HAL_I2C_SlaveRxCpltCallback>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2220      	movs	r2, #32
 8003604:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b21      	cmp	r3, #33	@ 0x21
 8003610:	d107      	bne.n	8003622 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003612:	2101      	movs	r1, #1
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fc97 	bl	8003f48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2211      	movs	r2, #17
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003620:	e00c      	b.n	800363c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b22      	cmp	r3, #34	@ 0x22
 800362c:	d106      	bne.n	800363c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800362e:	2102      	movs	r1, #2
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fc89 	bl	8003f48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2212      	movs	r2, #18
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b4d      	ldr	r3, [pc, #308]	@ (800377c <I2C_ITMasterCplt+0x18c>)
 8003648:	400b      	ands	r3, r1
 800364a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a4a      	ldr	r2, [pc, #296]	@ (8003780 <I2C_ITMasterCplt+0x190>)
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d009      	beq.n	8003678 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2210      	movs	r2, #16
 800366a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b60      	cmp	r3, #96	@ 0x60
 8003682:	d10b      	bne.n	800369c <I2C_ITMasterCplt+0xac>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	b2db      	uxtb	r3, r3
 8003698:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800369a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fb5a 	bl	8003d56 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b60      	cmp	r3, #96	@ 0x60
 80036b2:	d002      	beq.n	80036ba <I2C_ITMasterCplt+0xca>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	4619      	mov	r1, r3
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fa31 	bl	8003b28 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036c6:	e054      	b.n	8003772 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b21      	cmp	r3, #33	@ 0x21
 80036d2:	d124      	bne.n	800371e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b40      	cmp	r3, #64	@ 0x40
 80036ec:	d10b      	bne.n	8003706 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff f8ed 	bl	80028de <HAL_I2C_MemTxCpltCallback>
}
 8003704:	e035      	b.n	8003772 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fc ffd6 	bl	80006c8 <HAL_I2C_MasterTxCpltCallback>
}
 800371c:	e029      	b.n	8003772 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b22      	cmp	r3, #34	@ 0x22
 8003728:	d123      	bne.n	8003772 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b40      	cmp	r3, #64	@ 0x40
 8003742:	d10b      	bne.n	800375c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff f8cc 	bl	80028f2 <HAL_I2C_MemRxCpltCallback>
}
 800375a:	e00a      	b.n	8003772 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fc ffdb 	bl	8000728 <HAL_I2C_MasterRxCpltCallback>
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	fe00e800 	.word	0xfe00e800
 8003780:	ffff0000 	.word	0xffff0000

08003784 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2220      	movs	r2, #32
 80037ae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037b0:	7afb      	ldrb	r3, [r7, #11]
 80037b2:	2b21      	cmp	r3, #33	@ 0x21
 80037b4:	d002      	beq.n	80037bc <I2C_ITSlaveCplt+0x38>
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	2b29      	cmp	r3, #41	@ 0x29
 80037ba:	d108      	bne.n	80037ce <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80037bc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fbc1 	bl	8003f48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2221      	movs	r2, #33	@ 0x21
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80037cc:	e019      	b.n	8003802 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	2b22      	cmp	r3, #34	@ 0x22
 80037d2:	d002      	beq.n	80037da <I2C_ITSlaveCplt+0x56>
 80037d4:	7afb      	ldrb	r3, [r7, #11]
 80037d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80037d8:	d108      	bne.n	80037ec <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80037da:	f248 0102 	movw	r1, #32770	@ 0x8002
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fbb2 	bl	8003f48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2222      	movs	r2, #34	@ 0x22
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037ea:	e00a      	b.n	8003802 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80037ec:	7afb      	ldrb	r3, [r7, #11]
 80037ee:	2b28      	cmp	r3, #40	@ 0x28
 80037f0:	d107      	bne.n	8003802 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80037f2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fba6 	bl	8003f48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003810:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b95      	ldr	r3, [pc, #596]	@ (8003a74 <I2C_ITSlaveCplt+0x2f0>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa97 	bl	8003d56 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	0b9b      	lsrs	r3, r3, #14
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01c      	beq.n	800386e <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003842:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d032      	beq.n	80038b2 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003854:	b29c      	uxth	r4, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fc0d 	bl	800207a <HAL_DMAEx_GetFifoLevel>
 8003860:	4603      	mov	r3, r0
 8003862:	b29b      	uxth	r3, r3
 8003864:	4423      	add	r3, r4
 8003866:	b29a      	uxth	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800386c:	e021      	b.n	80038b2 <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	0bdb      	lsrs	r3, r3, #15
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01b      	beq.n	80038b2 <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003888:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00f      	beq.n	80038b2 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389a:	b29c      	uxth	r4, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fbea 	bl	800207a <HAL_DMAEx_GetFifoLevel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4423      	add	r3, r4
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d020      	beq.n	8003900 <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f043 0204 	orr.w	r2, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d04a      	beq.n	80039b8 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d128      	bne.n	800398a <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b28      	cmp	r3, #40	@ 0x28
 8003942:	d108      	bne.n	8003956 <I2C_ITSlaveCplt+0x1d2>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394a:	d104      	bne.n	8003956 <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f894 	bl	8003a7c <I2C_ITListenCplt>
 8003954:	e030      	b.n	80039b8 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b29      	cmp	r3, #41	@ 0x29
 8003960:	d10e      	bne.n	8003980 <I2C_ITSlaveCplt+0x1fc>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003968:	d00a      	beq.n	8003980 <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f9ef 	bl	8003d56 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff fdda 	bl	8003532 <I2C_ITSlaveSeqCplt>
 800397e:	e01b      	b.n	80039b8 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2210      	movs	r2, #16
 8003986:	61da      	str	r2, [r3, #28]
 8003988:	e016      	b.n	80039b8 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <I2C_ITSlaveCplt+0x228>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039aa:	d105      	bne.n	80039b8 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	4619      	mov	r1, r3
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8b8 	bl	8003b28 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8a7 	bl	8003b28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b28      	cmp	r3, #40	@ 0x28
 80039e4:	d141      	bne.n	8003a6a <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f847 	bl	8003a7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039ee:	e03c      	b.n	8003a6a <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039f8:	d014      	beq.n	8003a24 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff fd99 	bl	8003532 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <I2C_ITSlaveCplt+0x2f4>)
 8003a04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fe ff54 	bl	80028ca <HAL_I2C_ListenCpltCallback>
}
 8003a22:	e022      	b.n	8003a6a <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b22      	cmp	r3, #34	@ 0x22
 8003a2e:	d10e      	bne.n	8003a4e <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe ff27 	bl	800289a <HAL_I2C_SlaveRxCpltCallback>
}
 8003a4c:	e00d      	b.n	8003a6a <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fe ff0e 	bl	8002886 <HAL_I2C_SlaveTxCpltCallback>
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	fe00e800 	.word	0xfe00e800
 8003a78:	ffff0000 	.word	0xffff0000

08003a7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a26      	ldr	r2, [pc, #152]	@ (8003b24 <I2C_ITListenCplt+0xa8>)
 8003a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d022      	beq.n	8003afa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003afa:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa22 	bl	8003f48 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2210      	movs	r2, #16
 8003b0a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fe fed8 	bl	80028ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	ffff0000 	.word	0xffff0000

08003b28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b38:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a6d      	ldr	r2, [pc, #436]	@ (8003cfc <I2C_ITError+0x1d4>)
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b28      	cmp	r3, #40	@ 0x28
 8003b5e:	d005      	beq.n	8003b6c <I2C_ITError+0x44>
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b29      	cmp	r3, #41	@ 0x29
 8003b64:	d002      	beq.n	8003b6c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6a:	d10b      	bne.n	8003b84 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b6c:	2103      	movs	r1, #3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f9ea 	bl	8003f48 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2228      	movs	r2, #40	@ 0x28
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a60      	ldr	r2, [pc, #384]	@ (8003d00 <I2C_ITError+0x1d8>)
 8003b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b82:	e030      	b.n	8003be6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b84:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f9dd 	bl	8003f48 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8e1 	bl	8003d56 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b60      	cmp	r3, #96	@ 0x60
 8003b9e:	d01f      	beq.n	8003be0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d114      	bne.n	8003be0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d109      	bne.n	8003bd8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d039      	beq.n	8003c68 <I2C_ITError+0x140>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b11      	cmp	r3, #17
 8003bf8:	d002      	beq.n	8003c00 <I2C_ITError+0xd8>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b21      	cmp	r3, #33	@ 0x21
 8003bfe:	d133      	bne.n	8003c68 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0e:	d107      	bne.n	8003c20 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fa1a 	bl	800205e <HAL_DMA_GetState>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d017      	beq.n	8003c60 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c34:	4a33      	ldr	r2, [pc, #204]	@ (8003d04 <I2C_ITError+0x1dc>)
 8003c36:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe f9e1 	bl	800200c <HAL_DMA_Abort_IT>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d04d      	beq.n	8003cec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c5e:	e045      	b.n	8003cec <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f851 	bl	8003d08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c66:	e041      	b.n	8003cec <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d039      	beq.n	8003ce4 <I2C_ITError+0x1bc>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b12      	cmp	r3, #18
 8003c74:	d002      	beq.n	8003c7c <I2C_ITError+0x154>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b22      	cmp	r3, #34	@ 0x22
 8003c7a:	d133      	bne.n	8003ce4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c8a:	d107      	bne.n	8003c9c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe f9dc 	bl	800205e <HAL_DMA_GetState>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d017      	beq.n	8003cdc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	4a14      	ldr	r2, [pc, #80]	@ (8003d04 <I2C_ITError+0x1dc>)
 8003cb2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f9a3 	bl	800200c <HAL_DMA_Abort_IT>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d011      	beq.n	8003cf0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cda:	e009      	b.n	8003cf0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f813 	bl	8003d08 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce2:	e005      	b.n	8003cf0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f80f 	bl	8003d08 <I2C_TreatErrorCallback>
  }
}
 8003cea:	e002      	b.n	8003cf2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cf0:	bf00      	nop
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	ffff0000 	.word	0xffff0000
 8003d00:	08002b7f 	.word	0x08002b7f
 8003d04:	08003d9f 	.word	0x08003d9f

08003d08 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b60      	cmp	r3, #96	@ 0x60
 8003d1a:	d10e      	bne.n	8003d3a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fe fdf1 	bl	800291a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d38:	e009      	b.n	8003d4e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fe fddc 	bl	8002906 <HAL_I2C_ErrorCallback>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d103      	bne.n	8003d74 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d007      	beq.n	8003d92 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	619a      	str	r2, [r3, #24]
  }
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc8:	2200      	movs	r2, #0
 8003dca:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f7ff ff9b 	bl	8003d08 <I2C_TreatErrorCallback>
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	4613      	mov	r3, r2
 8003dec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df4:	7a7b      	ldrb	r3, [r7, #9]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dfc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e0a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	0d5b      	lsrs	r3, r3, #21
 8003e16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e1a:	4b08      	ldr	r3, [pc, #32]	@ (8003e3c <I2C_TransferConfig+0x60>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	ea02 0103 	and.w	r1, r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	03ff63ff 	.word	0x03ff63ff

08003e40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e54:	4a39      	ldr	r2, [pc, #228]	@ (8003f3c <I2C_Enable_IRQ+0xfc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d032      	beq.n	8003ec0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003e5e:	4a38      	ldr	r2, [pc, #224]	@ (8003f40 <I2C_Enable_IRQ+0x100>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d02d      	beq.n	8003ec0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003e68:	4a36      	ldr	r2, [pc, #216]	@ (8003f44 <I2C_Enable_IRQ+0x104>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d028      	beq.n	8003ec0 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da03      	bge.n	8003e7e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003e7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003e8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e90:	887b      	ldrh	r3, [r7, #2]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003ea0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d103      	bne.n	8003eb0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003eae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d133      	bne.n	8003f1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f043 0320 	orr.w	r3, r3, #32
 8003ebc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ebe:	e02e      	b.n	8003f1e <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da03      	bge.n	8003ed0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ece:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003ee0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003ef2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d103      	bne.n	8003f02 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003f00:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d103      	bne.n	8003f10 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d103      	bne.n	8003f1e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f1c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6819      	ldr	r1, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	08002d87 	.word	0x08002d87
 8003f40:	080031cd 	.word	0x080031cd
 8003f44:	08002f6d 	.word	0x08002f6d

08003f48 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00f      	beq.n	8003f82 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003f68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f76:	2b28      	cmp	r3, #40	@ 0x28
 8003f78:	d003      	beq.n	8003f82 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003f80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f82:	887b      	ldrh	r3, [r7, #2]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00f      	beq.n	8003fac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003f92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fa0:	2b28      	cmp	r3, #40	@ 0x28
 8003fa2:	d003      	beq.n	8003fac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003faa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da03      	bge.n	8003fbc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d103      	bne.n	8003fca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003fc8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d103      	bne.n	8003fd8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d103      	bne.n	8003fe6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b20      	cmp	r3, #32
 8004018:	d138      	bne.n	800408c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004024:	2302      	movs	r3, #2
 8004026:	e032      	b.n	800408e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	@ 0x24
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800409a:	b480      	push	{r7}
 800409c:	b085      	sub	sp, #20
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d139      	bne.n	8004124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e033      	b.n	8004126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2224      	movs	r2, #36	@ 0x24
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e007      	b.n	8004162 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004152:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 0204 	bic.w	r2, r3, #4
 800415a:	4905      	ldr	r1, [pc, #20]	@ (8004170 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40030400 	.word	0x40030400

08004174 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <HAL_ICACHE_Enable+0x1c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a04      	ldr	r2, [pc, #16]	@ (8004190 <HAL_ICACHE_Enable+0x1c>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40030400 	.word	0x40030400

08004194 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800419c:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d10b      	bne.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b4:	d905      	bls.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80041b6:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e057      	b.n	8004276 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041cc:	d90a      	bls.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80041ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4313      	orrs	r3, r2
 80041da:	4a2a      	ldr	r2, [pc, #168]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80041dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041e0:	60d3      	str	r3, [r2, #12]
 80041e2:	e007      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80041e4:	4b27      	ldr	r3, [pc, #156]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80041ec:	4925      	ldr	r1, [pc, #148]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80041f4:	4b24      	ldr	r3, [pc, #144]	@ (8004288 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a24      	ldr	r2, [pc, #144]	@ (800428c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	2232      	movs	r2, #50	@ 0x32
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	4a21      	ldr	r2, [pc, #132]	@ (800428c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004212:	e002      	b.n	800421a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800421a:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f3      	bne.n	8004214 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01b      	beq.n	800426a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004232:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	2232      	movs	r2, #50	@ 0x32
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	4a11      	ldr	r2, [pc, #68]	@ (800428c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004250:	e002      	b.n	8004258 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b01      	subs	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004258:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800425a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800425c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f3      	bne.n	8004252 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e000      	b.n	8004276 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	46020800 	.word	0x46020800
 8004288:	20000000 	.word	0x20000000
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004294:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	46020800 	.word	0x46020800

080042ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08e      	sub	sp, #56	@ 0x38
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f000 bec8 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b99      	ldr	r3, [pc, #612]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d0:	4b96      	ldr	r3, [pc, #600]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 816c 	beq.w	80045c0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_RCC_OscConfig+0x52>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	f040 80de 	bne.w	80044b2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 80da 	bne.w	80044b2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	f000 bea5 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004310:	4b86      	ldr	r3, [pc, #536]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <HAL_RCC_OscConfig+0x7a>
 800431c:	4b83      	ldr	r3, [pc, #524]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004324:	e005      	b.n	8004332 <HAL_RCC_OscConfig+0x86>
 8004326:	4b81      	ldr	r3, [pc, #516]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004332:	4293      	cmp	r3, r2
 8004334:	d255      	bcs.n	80043e2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	4618      	mov	r0, r3
 8004342:	f001 f9d9 	bl	80056f8 <RCC_SetFlashLatencyFromMSIRange>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	f000 be82 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004352:	4b76      	ldr	r3, [pc, #472]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	4a75      	ldr	r2, [pc, #468]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004358:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800435c:	6093      	str	r3, [r2, #8]
 800435e:	4b73      	ldr	r3, [pc, #460]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	4970      	ldr	r1, [pc, #448]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004378:	d309      	bcc.n	800438e <HAL_RCC_OscConfig+0xe2>
 800437a:	4b6c      	ldr	r3, [pc, #432]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 021f 	bic.w	r2, r3, #31
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4969      	ldr	r1, [pc, #420]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004388:	4313      	orrs	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
 800438c:	e07e      	b.n	800448c <HAL_RCC_OscConfig+0x1e0>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0a      	bge.n	80043ac <HAL_RCC_OscConfig+0x100>
 8004396:	4b65      	ldr	r3, [pc, #404]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	015b      	lsls	r3, r3, #5
 80043a4:	4961      	ldr	r1, [pc, #388]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60cb      	str	r3, [r1, #12]
 80043aa:	e06f      	b.n	800448c <HAL_RCC_OscConfig+0x1e0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b4:	d30a      	bcc.n	80043cc <HAL_RCC_OscConfig+0x120>
 80043b6:	4b5d      	ldr	r3, [pc, #372]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	4959      	ldr	r1, [pc, #356]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60cb      	str	r3, [r1, #12]
 80043ca:	e05f      	b.n	800448c <HAL_RCC_OscConfig+0x1e0>
 80043cc:	4b57      	ldr	r3, [pc, #348]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	03db      	lsls	r3, r3, #15
 80043da:	4954      	ldr	r1, [pc, #336]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	60cb      	str	r3, [r1, #12]
 80043e0:	e054      	b.n	800448c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80043e2:	4b52      	ldr	r3, [pc, #328]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	4a51      	ldr	r2, [pc, #324]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043ec:	6093      	str	r3, [r2, #8]
 80043ee:	4b4f      	ldr	r3, [pc, #316]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	494c      	ldr	r1, [pc, #304]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004408:	d309      	bcc.n	800441e <HAL_RCC_OscConfig+0x172>
 800440a:	4b48      	ldr	r3, [pc, #288]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 021f 	bic.w	r2, r3, #31
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	4945      	ldr	r1, [pc, #276]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004418:	4313      	orrs	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
 800441c:	e028      	b.n	8004470 <HAL_RCC_OscConfig+0x1c4>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	da0a      	bge.n	800443c <HAL_RCC_OscConfig+0x190>
 8004426:	4b41      	ldr	r3, [pc, #260]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	015b      	lsls	r3, r3, #5
 8004434:	493d      	ldr	r1, [pc, #244]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004436:	4313      	orrs	r3, r2
 8004438:	60cb      	str	r3, [r1, #12]
 800443a:	e019      	b.n	8004470 <HAL_RCC_OscConfig+0x1c4>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004444:	d30a      	bcc.n	800445c <HAL_RCC_OscConfig+0x1b0>
 8004446:	4b39      	ldr	r3, [pc, #228]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	029b      	lsls	r3, r3, #10
 8004454:	4935      	ldr	r1, [pc, #212]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004456:	4313      	orrs	r3, r2
 8004458:	60cb      	str	r3, [r1, #12]
 800445a:	e009      	b.n	8004470 <HAL_RCC_OscConfig+0x1c4>
 800445c:	4b33      	ldr	r3, [pc, #204]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	03db      	lsls	r3, r3, #15
 800446a:	4930      	ldr	r1, [pc, #192]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 800446c:	4313      	orrs	r3, r2
 800446e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	4618      	mov	r0, r3
 800447c:	f001 f93c 	bl	80056f8 <RCC_SetFlashLatencyFromMSIRange>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f000 bde5 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800448c:	f001 f8de 	bl	800564c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004490:	4b27      	ldr	r3, [pc, #156]	@ (8004530 <HAL_RCC_OscConfig+0x284>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd faef 	bl	8001a78 <HAL_InitTick>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80044a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 808a 	beq.w	80045be <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80044aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044ae:	f000 bdd2 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d066      	beq.n	8004588 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80044ba:	4b1c      	ldr	r3, [pc, #112]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1b      	ldr	r2, [pc, #108]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80044c6:	f7fd fb61 	bl	8001b8c <HAL_GetTick>
 80044ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044cc:	e009      	b.n	80044e2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ce:	f7fd fb5d 	bl	8001b8c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d902      	bls.n	80044e2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	f000 bdba 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ef      	beq.n	80044ce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80044ee:	4b0f      	ldr	r3, [pc, #60]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4a0e      	ldr	r2, [pc, #56]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80044f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044f8:	6093      	str	r3, [r2, #8]
 80044fa:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	4909      	ldr	r1, [pc, #36]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004514:	d30e      	bcc.n	8004534 <HAL_RCC_OscConfig+0x288>
 8004516:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f023 021f 	bic.w	r2, r3, #31
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4902      	ldr	r1, [pc, #8]	@ (800452c <HAL_RCC_OscConfig+0x280>)
 8004524:	4313      	orrs	r3, r2
 8004526:	60cb      	str	r3, [r1, #12]
 8004528:	e04a      	b.n	80045c0 <HAL_RCC_OscConfig+0x314>
 800452a:	bf00      	nop
 800452c:	46020c00 	.word	0x46020c00
 8004530:	20000004 	.word	0x20000004
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	da0a      	bge.n	8004552 <HAL_RCC_OscConfig+0x2a6>
 800453c:	4b98      	ldr	r3, [pc, #608]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	015b      	lsls	r3, r3, #5
 800454a:	4995      	ldr	r1, [pc, #596]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	60cb      	str	r3, [r1, #12]
 8004550:	e036      	b.n	80045c0 <HAL_RCC_OscConfig+0x314>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d30a      	bcc.n	8004572 <HAL_RCC_OscConfig+0x2c6>
 800455c:	4b90      	ldr	r3, [pc, #576]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	029b      	lsls	r3, r3, #10
 800456a:	498d      	ldr	r1, [pc, #564]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	4313      	orrs	r3, r2
 800456e:	60cb      	str	r3, [r1, #12]
 8004570:	e026      	b.n	80045c0 <HAL_RCC_OscConfig+0x314>
 8004572:	4b8b      	ldr	r3, [pc, #556]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	03db      	lsls	r3, r3, #15
 8004580:	4987      	ldr	r1, [pc, #540]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	60cb      	str	r3, [r1, #12]
 8004586:	e01b      	b.n	80045c0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004588:	4b85      	ldr	r3, [pc, #532]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a84      	ldr	r2, [pc, #528]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004594:	f7fd fafa 	bl	8001b8c <HAL_GetTick>
 8004598:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800459a:	e009      	b.n	80045b0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800459c:	f7fd faf6 	bl	8001b8c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d902      	bls.n	80045b0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	f000 bd53 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80045b0:	4b7b      	ldr	r3, [pc, #492]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ef      	bne.n	800459c <HAL_RCC_OscConfig+0x2f0>
 80045bc:	e000      	b.n	80045c0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 808b 	beq.w	80046e4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_OscConfig+0x334>
 80045d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d109      	bne.n	80045ee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d17d      	bne.n	80046e4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f000 bd34 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x35a>
 80045f8:	4b69      	ldr	r3, [pc, #420]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e041      	b.n	800468a <HAL_RCC_OscConfig+0x3de>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800460e:	d112      	bne.n	8004636 <HAL_RCC_OscConfig+0x38a>
 8004610:	4b63      	ldr	r3, [pc, #396]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a62      	ldr	r2, [pc, #392]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004616:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b60      	ldr	r3, [pc, #384]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5f      	ldr	r2, [pc, #380]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004622:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b5d      	ldr	r3, [pc, #372]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5c      	ldr	r2, [pc, #368]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800462e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	e029      	b.n	800468a <HAL_RCC_OscConfig+0x3de>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800463e:	d112      	bne.n	8004666 <HAL_RCC_OscConfig+0x3ba>
 8004640:	4b57      	ldr	r3, [pc, #348]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a56      	ldr	r2, [pc, #344]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	4b54      	ldr	r3, [pc, #336]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a53      	ldr	r2, [pc, #332]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b51      	ldr	r3, [pc, #324]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a50      	ldr	r2, [pc, #320]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	e011      	b.n	800468a <HAL_RCC_OscConfig+0x3de>
 8004666:	4b4e      	ldr	r3, [pc, #312]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a4d      	ldr	r2, [pc, #308]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800466c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b4b      	ldr	r3, [pc, #300]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a4a      	ldr	r2, [pc, #296]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	4b48      	ldr	r3, [pc, #288]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a47      	ldr	r2, [pc, #284]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004684:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004688:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d014      	beq.n	80046bc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004692:	f7fd fa7b 	bl	8001b8c <HAL_GetTick>
 8004696:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004698:	e009      	b.n	80046ae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800469a:	f7fd fa77 	bl	8001b8c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b64      	cmp	r3, #100	@ 0x64
 80046a6:	d902      	bls.n	80046ae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	f000 bcd4 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ae:	4b3c      	ldr	r3, [pc, #240]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ef      	beq.n	800469a <HAL_RCC_OscConfig+0x3ee>
 80046ba:	e013      	b.n	80046e4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80046bc:	f7fd fa66 	bl	8001b8c <HAL_GetTick>
 80046c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046c2:	e009      	b.n	80046d8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c4:	f7fd fa62 	bl	8001b8c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b64      	cmp	r3, #100	@ 0x64
 80046d0:	d902      	bls.n	80046d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	f000 bcbf 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046d8:	4b31      	ldr	r3, [pc, #196]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ef      	bne.n	80046c4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05f      	beq.n	80047b0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d005      	beq.n	8004702 <HAL_RCC_OscConfig+0x456>
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d114      	bne.n	8004726 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d111      	bne.n	8004726 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f000 bca3 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b23      	ldr	r3, [pc, #140]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	4920      	ldr	r1, [pc, #128]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004720:	4313      	orrs	r3, r2
 8004722:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004724:	e044      	b.n	80047b0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d024      	beq.n	8004778 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800472e:	4b1c      	ldr	r3, [pc, #112]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004738:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800473a:	f7fd fa27 	bl	8001b8c <HAL_GetTick>
 800473e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004740:	e009      	b.n	8004756 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004742:	f7fd fa23 	bl	8001b8c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d902      	bls.n	8004756 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	f000 bc80 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0ef      	beq.n	8004742 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004762:	4b0f      	ldr	r3, [pc, #60]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	490b      	ldr	r1, [pc, #44]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	610b      	str	r3, [r1, #16]
 8004776:	e01b      	b.n	80047b0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004778:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a08      	ldr	r2, [pc, #32]	@ (80047a0 <HAL_RCC_OscConfig+0x4f4>)
 800477e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004782:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004784:	f7fd fa02 	bl	8001b8c <HAL_GetTick>
 8004788:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478c:	f7fd f9fe 	bl	8001b8c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d904      	bls.n	80047a4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	f000 bc5b 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
 80047a0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047a4:	4baf      	ldr	r3, [pc, #700]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ed      	bne.n	800478c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80c8 	beq.w	800494e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c4:	4ba7      	ldr	r3, [pc, #668]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d111      	bne.n	80047f6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d2:	4ba4      	ldr	r3, [pc, #656]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80047d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d8:	4aa2      	ldr	r2, [pc, #648]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80047e2:	4ba0      	ldr	r3, [pc, #640]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80047e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 80047f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d119      	bne.n	8004836 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004802:	4b99      	ldr	r3, [pc, #612]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 8004804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004806:	4a98      	ldr	r2, [pc, #608]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fd f9bd 	bl	8001b8c <HAL_GetTick>
 8004812:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004814:	e009      	b.n	800482a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fd f9b9 	bl	8001b8c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d902      	bls.n	800482a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	f000 bc16 	b.w	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800482a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ef      	beq.n	8004816 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d05f      	beq.n	80048fe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800483e:	4b89      	ldr	r3, [pc, #548]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004844:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004850:	429a      	cmp	r2, r3
 8004852:	d037      	beq.n	80048c4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d006      	beq.n	800486c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e3f4      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01b      	beq.n	80048ae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004876:	4b7b      	ldr	r3, [pc, #492]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487c:	4a79      	ldr	r2, [pc, #484]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 800487e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004886:	f7fd f981 	bl	8001b8c <HAL_GetTick>
 800488a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800488e:	f7fd f97d 	bl	8001b8c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b05      	cmp	r3, #5
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e3da      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80048a0:	4b70      	ldr	r3, [pc, #448]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80048a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ef      	bne.n	800488e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80048ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80048b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4969      	ldr	r1, [pc, #420]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80048c4:	4b67      	ldr	r3, [pc, #412]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80048c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048ca:	4a66      	ldr	r2, [pc, #408]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80048cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80048d4:	f7fd f95a 	bl	8001b8c <HAL_GetTick>
 80048d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048dc:	f7fd f956 	bl	8001b8c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e3b3      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80048ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80048f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0ef      	beq.n	80048dc <HAL_RCC_OscConfig+0x630>
 80048fc:	e01b      	b.n	8004936 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80048fe:	4b59      	ldr	r3, [pc, #356]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004904:	4a57      	ldr	r2, [pc, #348]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004906:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800490a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800490e:	f7fd f93d 	bl	8001b8c <HAL_GetTick>
 8004912:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004916:	f7fd f939 	bl	8001b8c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b05      	cmp	r3, #5
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e396      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004928:	4b4e      	ldr	r3, [pc, #312]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 800492a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800492e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ef      	bne.n	8004916 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004936:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493e:	4b49      	ldr	r3, [pc, #292]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004944:	4a47      	ldr	r2, [pc, #284]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004946:	f023 0304 	bic.w	r3, r3, #4
 800494a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8111 	beq.w	8004b7e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800495c:	2300      	movs	r3, #0
 800495e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004962:	4b40      	ldr	r3, [pc, #256]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d111      	bne.n	8004994 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b3c      	ldr	r3, [pc, #240]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004976:	4a3b      	ldr	r2, [pc, #236]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004980:	4b38      	ldr	r3, [pc, #224]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004994:	4b34      	ldr	r3, [pc, #208]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d118      	bne.n	80049d2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80049a0:	4b31      	ldr	r3, [pc, #196]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	4a30      	ldr	r2, [pc, #192]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ac:	f7fd f8ee 	bl	8001b8c <HAL_GetTick>
 80049b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b4:	f7fd f8ea 	bl	8001b8c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e347      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80049c6:	4b28      	ldr	r3, [pc, #160]	@ (8004a68 <HAL_RCC_OscConfig+0x7bc>)
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01f      	beq.n	8004a1e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80049ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80049f2:	f043 0304 	orr.w	r3, r3, #4
 80049f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 80049fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a00:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a02:	f043 0301 	orr.w	r3, r3, #1
 8004a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a0a:	e018      	b.n	8004a3e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a0c:	4b15      	ldr	r3, [pc, #84]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a12:	4a14      	ldr	r2, [pc, #80]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a14:	f043 0301 	orr.w	r3, r3, #1
 8004a18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a1c:	e00f      	b.n	8004a3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a24:	4a0f      	ldr	r2, [pc, #60]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a34:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <HAL_RCC_OscConfig+0x7b8>)
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d057      	beq.n	8004af6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004a46:	f7fd f8a1 	bl	8001b8c <HAL_GetTick>
 8004a4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4c:	e00e      	b.n	8004a6c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd f89d 	bl	8001b8c <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d905      	bls.n	8004a6c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e2f8      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
 8004a64:	46020c00 	.word	0x46020c00
 8004a68:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6c:	4b9c      	ldr	r3, [pc, #624]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0e9      	beq.n	8004a4e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01b      	beq.n	8004abe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a86:	4b96      	ldr	r3, [pc, #600]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a8c:	4a94      	ldr	r2, [pc, #592]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a98:	f7fd f878 	bl	8001b8c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e2d3      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004aae:	4b8c      	ldr	r3, [pc, #560]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0ed      	beq.n	8004a98 <HAL_RCC_OscConfig+0x7ec>
 8004abc:	e053      	b.n	8004b66 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004abe:	4b88      	ldr	r3, [pc, #544]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac4:	4a86      	ldr	r2, [pc, #536]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fd f85c 	bl	8001b8c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e2b7      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ae6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ed      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x824>
 8004af4:	e037      	b.n	8004b66 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004af6:	f7fd f849 	bl	8001b8c <HAL_GetTick>
 8004afa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afe:	f7fd f845 	bl	8001b8c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e2a0      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b14:	4b72      	ldr	r3, [pc, #456]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1ed      	bne.n	8004afe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004b22:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01a      	beq.n	8004b66 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b30:	4b6b      	ldr	r3, [pc, #428]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b36:	4a6a      	ldr	r2, [pc, #424]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fd f823 	bl	8001b8c <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e27e      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b58:	4b61      	ldr	r3, [pc, #388]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ed      	bne.n	8004b42 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b66:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b74:	4a5a      	ldr	r2, [pc, #360]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b76:	f023 0304 	bic.w	r3, r3, #4
 8004b7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d036      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d019      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004b92:	4b53      	ldr	r3, [pc, #332]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a52      	ldr	r2, [pc, #328]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004b98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b9c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b9e:	f7fc fff5 	bl	8001b8c <HAL_GetTick>
 8004ba2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba6:	f7fc fff1 	bl	8001b8c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e24e      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004bb8:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x8fa>
 8004bc4:	e018      	b.n	8004bf8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004bc6:	4b46      	ldr	r3, [pc, #280]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a45      	ldr	r2, [pc, #276]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bd0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004bd2:	f7fc ffdb 	bl	8001b8c <HAL_GetTick>
 8004bd6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bda:	f7fc ffd7 	bl	8001b8c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e234      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bec:	4b3c      	ldr	r3, [pc, #240]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d036      	beq.n	8004c72 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d019      	beq.n	8004c40 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004c0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a33      	ldr	r2, [pc, #204]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004c18:	f7fc ffb8 	bl	8001b8c <HAL_GetTick>
 8004c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004c20:	f7fc ffb4 	bl	8001b8c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e211      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004c32:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x974>
 8004c3e:	e018      	b.n	8004c72 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004c40:	4b27      	ldr	r3, [pc, #156]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a26      	ldr	r2, [pc, #152]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004c4c:	f7fc ff9e 	bl	8001b8c <HAL_GetTick>
 8004c50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004c54:	f7fc ff9a 	bl	8001b8c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1f7      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004c66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d07f      	beq.n	8004d7e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d062      	beq.n	8004d4c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004c86:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c90:	6093      	str	r3, [r2, #8]
 8004c92:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	4910      	ldr	r1, [pc, #64]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004cac:	d309      	bcc.n	8004cc2 <HAL_RCC_OscConfig+0xa16>
 8004cae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f023 021f 	bic.w	r2, r3, #31
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	4909      	ldr	r1, [pc, #36]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60cb      	str	r3, [r1, #12]
 8004cc0:	e02a      	b.n	8004d18 <HAL_RCC_OscConfig+0xa6c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da0c      	bge.n	8004ce4 <HAL_RCC_OscConfig+0xa38>
 8004cca:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	015b      	lsls	r3, r3, #5
 8004cd8:	4901      	ldr	r1, [pc, #4]	@ (8004ce0 <HAL_RCC_OscConfig+0xa34>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60cb      	str	r3, [r1, #12]
 8004cde:	e01b      	b.n	8004d18 <HAL_RCC_OscConfig+0xa6c>
 8004ce0:	46020c00 	.word	0x46020c00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d30a      	bcc.n	8004d04 <HAL_RCC_OscConfig+0xa58>
 8004cee:	4ba1      	ldr	r3, [pc, #644]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	499d      	ldr	r1, [pc, #628]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60cb      	str	r3, [r1, #12]
 8004d02:	e009      	b.n	8004d18 <HAL_RCC_OscConfig+0xa6c>
 8004d04:	4b9b      	ldr	r3, [pc, #620]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	03db      	lsls	r3, r3, #15
 8004d12:	4998      	ldr	r1, [pc, #608]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004d18:	4b96      	ldr	r3, [pc, #600]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a95      	ldr	r2, [pc, #596]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d1e:	f043 0310 	orr.w	r3, r3, #16
 8004d22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004d24:	f7fc ff32 	bl	8001b8c <HAL_GetTick>
 8004d28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004d2c:	f7fc ff2e 	bl	8001b8c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e18b      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004d3e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0xa80>
 8004d4a:	e018      	b.n	8004d7e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004d4c:	4b89      	ldr	r3, [pc, #548]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a88      	ldr	r2, [pc, #544]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d52:	f023 0310 	bic.w	r3, r3, #16
 8004d56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004d58:	f7fc ff18 	bl	8001b8c <HAL_GetTick>
 8004d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004d60:	f7fc ff14 	bl	8001b8c <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e171      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004d72:	4b80      	ldr	r3, [pc, #512]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8166 	beq.w	8005054 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d8e:	4b79      	ldr	r3, [pc, #484]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	f000 80f2 	beq.w	8004f80 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	f040 80c5 	bne.w	8004f30 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004da6:	4b73      	ldr	r3, [pc, #460]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a72      	ldr	r2, [pc, #456]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004dac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004db2:	f7fc feeb 	bl	8001b8c <HAL_GetTick>
 8004db6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dba:	f7fc fee7 	bl	8001b8c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e144      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dcc:	4b69      	ldr	r3, [pc, #420]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dd8:	4b66      	ldr	r3, [pc, #408]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d111      	bne.n	8004e0a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b63      	ldr	r3, [pc, #396]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dec:	4a61      	ldr	r2, [pc, #388]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004df6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f78 <HAL_RCC_OscConfig+0xccc>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e16:	d102      	bne.n	8004e1e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004e1e:	4b56      	ldr	r3, [pc, #344]	@ (8004f78 <HAL_RCC_OscConfig+0xccc>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4a55      	ldr	r2, [pc, #340]	@ (8004f78 <HAL_RCC_OscConfig+0xccc>)
 8004e24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e28:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004e2a:	4b52      	ldr	r3, [pc, #328]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e3e:	3a01      	subs	r2, #1
 8004e40:	0212      	lsls	r2, r2, #8
 8004e42:	4311      	orrs	r1, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	494a      	ldr	r1, [pc, #296]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e50:	4b48      	ldr	r3, [pc, #288]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e54:	4b49      	ldr	r3, [pc, #292]	@ (8004f7c <HAL_RCC_OscConfig+0xcd0>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e66:	3a01      	subs	r2, #1
 8004e68:	0252      	lsls	r2, r2, #9
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e72:	3a01      	subs	r2, #1
 8004e74:	0412      	lsls	r2, r2, #16
 8004e76:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004e7a:	4311      	orrs	r1, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e80:	3a01      	subs	r2, #1
 8004e82:	0612      	lsls	r2, r2, #24
 8004e84:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	493a      	ldr	r1, [pc, #232]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004e90:	4b38      	ldr	r3, [pc, #224]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	4a37      	ldr	r2, [pc, #220]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004e96:	f023 0310 	bic.w	r3, r3, #16
 8004e9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea0:	4a34      	ldr	r2, [pc, #208]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004ea6:	4b33      	ldr	r3, [pc, #204]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	4a32      	ldr	r2, [pc, #200]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004eac:	f043 0310 	orr.w	r3, r3, #16
 8004eb0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004eb2:	4b30      	ldr	r3, [pc, #192]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	f023 020c 	bic.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebe:	492d      	ldr	r1, [pc, #180]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f78 <HAL_RCC_OscConfig+0xccc>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a29      	ldr	r2, [pc, #164]	@ (8004f78 <HAL_RCC_OscConfig+0xccc>)
 8004ed2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004ed8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b24      	ldr	r3, [pc, #144]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee6:	4a23      	ldr	r2, [pc, #140]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004efc:	f7fc fe46 	bl	8001b8c <HAL_GetTick>
 8004f00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fc fe42 	bl	8001b8c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e09f      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f16:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f22:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f26:	4a13      	ldr	r2, [pc, #76]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f2c:	6293      	str	r3, [r2, #40]	@ 0x28
 8004f2e:	e091      	b.n	8005054 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0f      	ldr	r2, [pc, #60]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f3c:	f7fc fe26 	bl	8001b8c <HAL_GetTick>
 8004f40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fc fe22 	bl	8001b8c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e07f      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f56:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004f62:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	4a03      	ldr	r2, [pc, #12]	@ (8004f74 <HAL_RCC_OscConfig+0xcc8>)
 8004f68:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004f6c:	f023 0303 	bic.w	r3, r3, #3
 8004f70:	6293      	str	r3, [r2, #40]	@ 0x28
 8004f72:	e06f      	b.n	8005054 <HAL_RCC_OscConfig+0xda8>
 8004f74:	46020c00 	.word	0x46020c00
 8004f78:	46020800 	.word	0x46020800
 8004f7c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004f80:	4b37      	ldr	r3, [pc, #220]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f86:	4b36      	ldr	r3, [pc, #216]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 8004f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d039      	beq.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0203 	and.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d132      	bne.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d129      	bne.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d122      	bne.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fcc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d11a      	bne.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	0a5b      	lsrs	r3, r3, #9
 8004fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d111      	bne.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d108      	bne.n	8005008 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	0e1b      	lsrs	r3, r3, #24
 8004ffa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e024      	b.n	8005056 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800500c:	4b14      	ldr	r3, [pc, #80]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800501a:	429a      	cmp	r2, r3
 800501c:	d01a      	beq.n	8005054 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800501e:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	4a0f      	ldr	r2, [pc, #60]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fc fdaf 	bl	8001b8c <HAL_GetTick>
 800502e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005030:	bf00      	nop
 8005032:	f7fc fdab 	bl	8001b8c <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	4293      	cmp	r3, r2
 800503c:	d0f9      	beq.n	8005032 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	4a07      	ldr	r2, [pc, #28]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	4a04      	ldr	r2, [pc, #16]	@ (8005060 <HAL_RCC_OscConfig+0xdb4>)
 800504e:	f043 0310 	orr.w	r3, r3, #16
 8005052:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3738      	adds	r7, #56	@ 0x38
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	46020c00 	.word	0x46020c00

08005064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e1d9      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005078:	4b9b      	ldr	r3, [pc, #620]	@ (80052e8 <HAL_RCC_ClockConfig+0x284>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d910      	bls.n	80050a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b98      	ldr	r3, [pc, #608]	@ (80052e8 <HAL_RCC_ClockConfig+0x284>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 020f 	bic.w	r2, r3, #15
 800508e:	4996      	ldr	r1, [pc, #600]	@ (80052e8 <HAL_RCC_ClockConfig+0x284>)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005096:	4b94      	ldr	r3, [pc, #592]	@ (80052e8 <HAL_RCC_ClockConfig+0x284>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e1c1      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	695a      	ldr	r2, [r3, #20]
 80050b8:	4b8c      	ldr	r3, [pc, #560]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d908      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80050c4:	4b89      	ldr	r3, [pc, #548]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	4986      	ldr	r1, [pc, #536]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d012      	beq.n	8005108 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	4b81      	ldr	r3, [pc, #516]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d909      	bls.n	8005108 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80050f4:	4b7d      	ldr	r3, [pc, #500]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	497a      	ldr	r1, [pc, #488]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005104:	4313      	orrs	r3, r2
 8005106:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d010      	beq.n	8005136 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	4b74      	ldr	r3, [pc, #464]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005120:	429a      	cmp	r2, r3
 8005122:	d908      	bls.n	8005136 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005124:	4b71      	ldr	r3, [pc, #452]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	496e      	ldr	r1, [pc, #440]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005132:	4313      	orrs	r3, r2
 8005134:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	4b69      	ldr	r3, [pc, #420]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	429a      	cmp	r2, r3
 8005150:	d908      	bls.n	8005164 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005152:	4b66      	ldr	r3, [pc, #408]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f023 020f 	bic.w	r2, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4963      	ldr	r1, [pc, #396]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005160:	4313      	orrs	r3, r2
 8005162:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80d2 	beq.w	8005316 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b03      	cmp	r3, #3
 800517c:	d143      	bne.n	8005206 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517e:	4b5b      	ldr	r3, [pc, #364]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d110      	bne.n	80051ae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800518c:	4b57      	ldr	r3, [pc, #348]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005192:	4a56      	ldr	r2, [pc, #344]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005194:	f043 0304 	orr.w	r3, r3, #4
 8005198:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800519c:	4b53      	ldr	r3, [pc, #332]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80051ae:	f7fc fced 	bl	8001b8c <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80051b4:	4b4e      	ldr	r3, [pc, #312]	@ (80052f0 <HAL_RCC_ClockConfig+0x28c>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00f      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80051c2:	f7fc fce3 	bl	8001b8c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e12b      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80051d4:	4b46      	ldr	r3, [pc, #280]	@ (80052f0 <HAL_RCC_ClockConfig+0x28c>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80051e6:	4b41      	ldr	r3, [pc, #260]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80051e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ec:	4a3f      	ldr	r2, [pc, #252]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80051ee:	f023 0304 	bic.w	r3, r3, #4
 80051f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80051f6:	4b3d      	ldr	r3, [pc, #244]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d121      	bne.n	8005246 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e112      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520e:	4b37      	ldr	r3, [pc, #220]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d115      	bne.n	8005246 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e106      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d107      	bne.n	8005236 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005226:	4b31      	ldr	r3, [pc, #196]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e0fa      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005236:	4b2d      	ldr	r3, [pc, #180]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0f2      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005246:	4b29      	ldr	r3, [pc, #164]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f023 0203 	bic.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4926      	ldr	r1, [pc, #152]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005254:	4313      	orrs	r3, r2
 8005256:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005258:	f7fc fc98 	bl	8001b8c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b03      	cmp	r3, #3
 8005264:	d112      	bne.n	800528c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fc fc90 	bl	8001b8c <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0d6      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800527e:	4b1b      	ldr	r3, [pc, #108]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d1ee      	bne.n	8005268 <HAL_RCC_ClockConfig+0x204>
 800528a:	e044      	b.n	8005316 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d112      	bne.n	80052ba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005294:	e00a      	b.n	80052ac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005296:	f7fc fc79 	bl	8001b8c <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e0bf      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052ac:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 030c 	and.w	r3, r3, #12
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d1ee      	bne.n	8005296 <HAL_RCC_ClockConfig+0x232>
 80052b8:	e02d      	b.n	8005316 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d123      	bne.n	800530a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052c2:	e00a      	b.n	80052da <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c4:	f7fc fc62 	bl	8001b8c <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e0a8      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80052da:	4b04      	ldr	r3, [pc, #16]	@ (80052ec <HAL_RCC_ClockConfig+0x288>)
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1ee      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x260>
 80052e6:	e016      	b.n	8005316 <HAL_RCC_ClockConfig+0x2b2>
 80052e8:	40022000 	.word	0x40022000
 80052ec:	46020c00 	.word	0x46020c00
 80052f0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f4:	f7fc fc4a 	bl	8001b8c <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e090      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800530a:	4b4a      	ldr	r3, [pc, #296]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b04      	cmp	r3, #4
 8005314:	d1ee      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d010      	beq.n	8005344 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4b43      	ldr	r3, [pc, #268]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	429a      	cmp	r2, r3
 8005330:	d208      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005332:	4b40      	ldr	r3, [pc, #256]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 020f 	bic.w	r2, r3, #15
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	493d      	ldr	r1, [pc, #244]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 8005340:	4313      	orrs	r3, r2
 8005342:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005344:	4b3c      	ldr	r3, [pc, #240]	@ (8005438 <HAL_RCC_ClockConfig+0x3d4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d210      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b39      	ldr	r3, [pc, #228]	@ (8005438 <HAL_RCC_ClockConfig+0x3d4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 020f 	bic.w	r2, r3, #15
 800535a:	4937      	ldr	r1, [pc, #220]	@ (8005438 <HAL_RCC_ClockConfig+0x3d4>)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b35      	ldr	r3, [pc, #212]	@ (8005438 <HAL_RCC_ClockConfig+0x3d4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e05b      	b.n	800542c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d010      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800538c:	429a      	cmp	r2, r3
 800538e:	d208      	bcs.n	80053a2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005390:	4b28      	ldr	r3, [pc, #160]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	4925      	ldr	r1, [pc, #148]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d012      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053bc:	429a      	cmp	r2, r3
 80053be:	d209      	bcs.n	80053d4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80053c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	4919      	ldr	r1, [pc, #100]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0310 	and.w	r3, r3, #16
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	4b13      	ldr	r3, [pc, #76]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 80053e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d208      	bcs.n	8005402 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80053f0:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	490d      	ldr	r1, [pc, #52]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005402:	f000 f821 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8005406:	4602      	mov	r2, r0
 8005408:	4b0a      	ldr	r3, [pc, #40]	@ (8005434 <HAL_RCC_ClockConfig+0x3d0>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	490a      	ldr	r1, [pc, #40]	@ (800543c <HAL_RCC_ClockConfig+0x3d8>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <HAL_RCC_ClockConfig+0x3dc>)
 800541a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800541c:	4b09      	ldr	r3, [pc, #36]	@ (8005444 <HAL_RCC_ClockConfig+0x3e0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fc fb29 	bl	8001a78 <HAL_InitTick>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]

  return status;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	46020c00 	.word	0x46020c00
 8005438:	40022000 	.word	0x40022000
 800543c:	0800b068 	.word	0x0800b068
 8005440:	20000000 	.word	0x20000000
 8005444:	20000004 	.word	0x20000004

08005448 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b08b      	sub	sp, #44	@ 0x2c
 800544c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005456:	4b78      	ldr	r3, [pc, #480]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005460:	4b75      	ldr	r3, [pc, #468]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x34>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d121      	bne.n	80054ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d11e      	bne.n	80054ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800547c:	4b6e      	ldr	r3, [pc, #440]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005488:	4b6b      	ldr	r3, [pc, #428]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800548a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800548e:	0b1b      	lsrs	r3, r3, #12
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
 8005496:	e005      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005498:	4b67      	ldr	r3, [pc, #412]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	0f1b      	lsrs	r3, r3, #28
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054a4:	4a65      	ldr	r2, [pc, #404]	@ (800563c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d110      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054b8:	e00d      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d102      	bne.n	80054cc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	e004      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80054d4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b0c      	cmp	r3, #12
 80054da:	f040 80a5 	bne.w	8005628 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80054de:	4b56      	ldr	r3, [pc, #344]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80054e8:	4b53      	ldr	r3, [pc, #332]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80054f6:	4b50      	ldr	r3, [pc, #320]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	091b      	lsrs	r3, r3, #4
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005502:	4b4d      	ldr	r3, [pc, #308]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	08db      	lsrs	r3, r3, #3
 8005508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	fb02 f303 	mul.w	r3, r2, r3
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d003      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0xe4>
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d022      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x128>
 800552a:	e043      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005644 <HAL_RCC_GetSysClockFreq+0x1fc>
 800553a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553e:	4b3e      	ldr	r3, [pc, #248]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800554e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005552:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005648 <HAL_RCC_GetSysClockFreq+0x200>
 8005556:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800555a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800555e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005562:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800556e:	e046      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005644 <HAL_RCC_GetSysClockFreq+0x1fc>
 800557e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005582:	4b2d      	ldr	r3, [pc, #180]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005592:	ed97 6a01 	vldr	s12, [r7, #4]
 8005596:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005648 <HAL_RCC_GetSysClockFreq+0x200>
 800559a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800559e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80055a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b2:	e024      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b6:	ee07 3a90 	vmov	s15, r3
 80055ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d4:	ee07 3a90 	vmov	s15, r3
 80055d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80055dc:	ed97 6a01 	vldr	s12, [r7, #4]
 80055e0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005648 <HAL_RCC_GetSysClockFreq+0x200>
 80055e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80055ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80055fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005602:	0e1b      	lsrs	r3, r3, #24
 8005604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005608:	3301      	adds	r3, #1
 800560a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005616:	edd7 6a07 	vldr	s13, [r7, #28]
 800561a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800561e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005622:	ee17 3a90 	vmov	r3, s15
 8005626:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005628:	6a3b      	ldr	r3, [r7, #32]
}
 800562a:	4618      	mov	r0, r3
 800562c:	372c      	adds	r7, #44	@ 0x2c
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	46020c00 	.word	0x46020c00
 800563c:	0800b080 	.word	0x0800b080
 8005640:	00f42400 	.word	0x00f42400
 8005644:	4b742400 	.word	0x4b742400
 8005648:	46000000 	.word	0x46000000

0800564c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005650:	f7ff fefa 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b07      	ldr	r3, [pc, #28]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x28>)
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	4906      	ldr	r1, [pc, #24]	@ (8005678 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005660:	5ccb      	ldrb	r3, [r1, r3]
 8005662:	fa22 f303 	lsr.w	r3, r2, r3
 8005666:	4a05      	ldr	r2, [pc, #20]	@ (800567c <HAL_RCC_GetHCLKFreq+0x30>)
 8005668:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800566a:	4b04      	ldr	r3, [pc, #16]	@ (800567c <HAL_RCC_GetHCLKFreq+0x30>)
 800566c:	681b      	ldr	r3, [r3, #0]
}
 800566e:	4618      	mov	r0, r3
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	46020c00 	.word	0x46020c00
 8005678:	0800b068 	.word	0x0800b068
 800567c:	20000000 	.word	0x20000000

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005684:	f7ff ffe2 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4903      	ldr	r1, [pc, #12]	@ (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	46020c00 	.word	0x46020c00
 80056a4:	0800b078 	.word	0x0800b078

080056a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80056ac:	f7ff ffce 	bl	800564c <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	46020c00 	.word	0x46020c00
 80056cc:	0800b078 	.word	0x0800b078

080056d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80056d4:	f7ff ffba 	bl	800564c <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4903      	ldr	r1, [pc, #12]	@ (80056f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	46020c00 	.word	0x46020c00
 80056f4:	0800b078 	.word	0x0800b078

080056f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005700:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800570e:	f7fe fdbf 	bl	8004290 <HAL_PWREx_GetVoltageRange>
 8005712:	6178      	str	r0, [r7, #20]
 8005714:	e019      	b.n	800574a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005716:	4b39      	ldr	r3, [pc, #228]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800571c:	4a37      	ldr	r2, [pc, #220]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800571e:	f043 0304 	orr.w	r3, r3, #4
 8005722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005726:	4b35      	ldr	r3, [pc, #212]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005734:	f7fe fdac 	bl	8004290 <HAL_PWREx_GetVoltageRange>
 8005738:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800573a:	4b30      	ldr	r3, [pc, #192]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005740:	4a2e      	ldr	r2, [pc, #184]	@ (80057fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005742:	f023 0304 	bic.w	r3, r3, #4
 8005746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005750:	d003      	beq.n	800575a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005758:	d109      	bne.n	800576e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005760:	d202      	bcs.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005762:	2301      	movs	r3, #1
 8005764:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005766:	e033      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800576c:	e030      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005774:	d208      	bcs.n	8005788 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577c:	d102      	bne.n	8005784 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800577e:	2303      	movs	r3, #3
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	e025      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e035      	b.n	80057f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800578e:	d90f      	bls.n	80057b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800579c:	d902      	bls.n	80057a4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e015      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80057a4:	2301      	movs	r3, #1
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e012      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80057aa:	2300      	movs	r3, #0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	e00f      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b6:	d109      	bne.n	80057cc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057be:	d102      	bne.n	80057c6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80057c0:	2301      	movs	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	e004      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80057c6:	2302      	movs	r3, #2
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e001      	b.n	80057d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80057cc:	2301      	movs	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f023 020f 	bic.w	r2, r3, #15
 80057d8:	4909      	ldr	r1, [pc, #36]	@ (8005800 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80057e0:	4b07      	ldr	r3, [pc, #28]	@ (8005800 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d001      	beq.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	46020c00 	.word	0x46020c00
 8005800:	40022000 	.word	0x40022000

08005804 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b0ba      	sub	sp, #232	@ 0xe8
 800580a:	af00      	add	r7, sp, #0
 800580c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005810:	2300      	movs	r3, #0
 8005812:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005816:	2300      	movs	r3, #0
 8005818:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800581c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f002 0401 	and.w	r4, r2, #1
 8005828:	2500      	movs	r5, #0
 800582a:	ea54 0305 	orrs.w	r3, r4, r5
 800582e:	d00b      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005830:	4bcb      	ldr	r3, [pc, #812]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005836:	f023 0103 	bic.w	r1, r3, #3
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800583e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005840:	4ac7      	ldr	r2, [pc, #796]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005842:	430b      	orrs	r3, r1
 8005844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 0802 	and.w	r8, r2, #2
 8005854:	f04f 0900 	mov.w	r9, #0
 8005858:	ea58 0309 	orrs.w	r3, r8, r9
 800585c:	d00b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800585e:	4bc0      	ldr	r3, [pc, #768]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005864:	f023 010c 	bic.w	r1, r3, #12
 8005868:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	4abc      	ldr	r2, [pc, #752]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005870:	430b      	orrs	r3, r1
 8005872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f002 0a04 	and.w	sl, r2, #4
 8005882:	f04f 0b00 	mov.w	fp, #0
 8005886:	ea5a 030b 	orrs.w	r3, sl, fp
 800588a:	d00b      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800588c:	4bb4      	ldr	r3, [pc, #720]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800588e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005892:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	4ab0      	ldr	r2, [pc, #704]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800589e:	430b      	orrs	r3, r1
 80058a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f002 0308 	and.w	r3, r2, #8
 80058b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058be:	460b      	mov	r3, r1
 80058c0:	4313      	orrs	r3, r2
 80058c2:	d00b      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80058c4:	4ba6      	ldr	r3, [pc, #664]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80058ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d4:	4aa2      	ldr	r2, [pc, #648]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d6:	430b      	orrs	r3, r1
 80058d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f002 0310 	and.w	r3, r2, #16
 80058e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4313      	orrs	r3, r2
 80058fa:	d00b      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80058fc:	4b98      	ldr	r3, [pc, #608]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005902:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800590a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800590c:	4a94      	ldr	r2, [pc, #592]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590e:	430b      	orrs	r3, r1
 8005910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f002 0320 	and.w	r3, r2, #32
 8005920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005924:	2300      	movs	r3, #0
 8005926:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800592a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d00b      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005934:	4b8a      	ldr	r3, [pc, #552]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800593a:	f023 0107 	bic.w	r1, r3, #7
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005944:	4a86      	ldr	r2, [pc, #536]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005946:	430b      	orrs	r3, r1
 8005948:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800594c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	d00b      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800596c:	4b7c      	ldr	r3, [pc, #496]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005972:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800597a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800597c:	4a78      	ldr	r2, [pc, #480]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800597e:	430b      	orrs	r3, r1
 8005980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800599a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800599e:	460b      	mov	r3, r1
 80059a0:	4313      	orrs	r3, r2
 80059a2:	d00b      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80059a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b6:	430b      	orrs	r3, r1
 80059b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80059c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80059d2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d00b      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80059dc:	4b60      	ldr	r3, [pc, #384]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ee:	430b      	orrs	r3, r1
 80059f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a0a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005a14:	4b52      	ldr	r3, [pc, #328]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a1a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a24:	4a4e      	ldr	r2, [pc, #312]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a26:	430b      	orrs	r3, r1
 8005a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005a38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a42:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005a4c:	4b44      	ldr	r3, [pc, #272]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a52:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a5c:	4a40      	ldr	r2, [pc, #256]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005a70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a74:	2300      	movs	r3, #0
 8005a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a7a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4313      	orrs	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005a84:	4b36      	ldr	r3, [pc, #216]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a8a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a94:	4a32      	ldr	r2, [pc, #200]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a96:	430b      	orrs	r3, r1
 8005a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ab2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d00c      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005abc:	4b28      	ldr	r3, [pc, #160]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ace:	4a24      	ldr	r2, [pc, #144]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ae2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ae8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005aec:	460b      	mov	r3, r1
 8005aee:	4313      	orrs	r3, r2
 8005af0:	d04f      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005afa:	2b80      	cmp	r3, #128	@ 0x80
 8005afc:	d02d      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005afe:	2b80      	cmp	r3, #128	@ 0x80
 8005b00:	d827      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b02:	2b60      	cmp	r3, #96	@ 0x60
 8005b04:	d02e      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005b06:	2b60      	cmp	r3, #96	@ 0x60
 8005b08:	d823      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b0a:	2b40      	cmp	r3, #64	@ 0x40
 8005b0c:	d006      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005b0e:	2b40      	cmp	r3, #64	@ 0x40
 8005b10:	d81f      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d011      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005b1a:	e01a      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b1c:	4b10      	ldr	r3, [pc, #64]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	4a0f      	ldr	r2, [pc, #60]	@ (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b26:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b28:	e01d      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b2e:	3308      	adds	r3, #8
 8005b30:	4618      	mov	r0, r3
 8005b32:	f002 fa17 	bl	8007f64 <RCCEx_PLL2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b3c:	e013      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b42:	332c      	adds	r3, #44	@ 0x2c
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 faa5 	bl	8008094 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b50:	e009      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b58:	e005      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005b5e:	bf00      	nop
 8005b60:	46020c00 	.word	0x46020c00
        break;
 8005b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10d      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005b6e:	4bb6      	ldr	r3, [pc, #728]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b74:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b80:	4ab1      	ldr	r2, [pc, #708]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b82:	430b      	orrs	r3, r1
 8005b84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b88:	e003      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b8e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ba4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d053      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bba:	d033      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc0:	d82c      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc6:	d02f      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005bc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bcc:	d826      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd8:	d820      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be2:	d011      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005be4:	e01a      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005be6:	4b98      	ldr	r3, [pc, #608]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	4a97      	ldr	r2, [pc, #604]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005bf2:	e01a      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 f9b2 	bl	8007f64 <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005c06:	e010      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c0c:	332c      	adds	r3, #44	@ 0x2c
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f002 fa40 	bl	8008094 <RCCEx_PLL3_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005c1a:	e006      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c22:	e002      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10d      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005c32:	4b85      	ldr	r3, [pc, #532]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c38:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c44:	4a80      	ldr	r2, [pc, #512]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c4c:	e003      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c52:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c64:	2300      	movs	r3, #0
 8005c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c68:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	d046      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c7a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c7e:	d028      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005c80:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c84:	d821      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005c86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c8a:	d022      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005c8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c90:	d81b      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005c92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c96:	d01c      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005c98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c9c:	d815      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca2:	d008      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca8:	d80f      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005cb4:	e009      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cba:	3308      	adds	r3, #8
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f002 f951 	bl	8007f64 <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ce2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cee:	4a56      	ldr	r2, [pc, #344]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005cf6:	e003      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cfc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005d00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d0e:	2300      	movs	r3, #0
 8005d10:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d16:	460b      	mov	r3, r1
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	d03f      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d81e      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005d28:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d6f 	.word	0x08005d6f
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d53 	.word	0x08005d53
 8005d3c:	08005d6f 	.word	0x08005d6f
 8005d40:	08005d6f 	.word	0x08005d6f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d44:	4b40      	ldr	r3, [pc, #256]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d48:	4a3f      	ldr	r2, [pc, #252]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d4e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005d50:	e00e      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d56:	332c      	adds	r3, #44	@ 0x2c
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f002 f99b 	bl	8008094 <RCCEx_PLL3_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d64:	e004      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005d6e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005d78:	4b33      	ldr	r3, [pc, #204]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005d7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d7e:	f023 0107 	bic.w	r1, r3, #7
 8005d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005d98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005da8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005daa:	2300      	movs	r3, #0
 8005dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d04d      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dc4:	d028      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005dc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dca:	d821      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005dcc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dd0:	d024      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005dd2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005dd6:	d81b      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ddc:	d00e      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005dde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005de2:	d815      	bhi.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dec:	d110      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dee:	4b16      	ldr	r3, [pc, #88]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df2:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005df8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005dfa:	e012      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e00:	332c      	adds	r3, #44	@ 0x2c
 8005e02:	4618      	mov	r0, r3
 8005e04:	f002 f946 	bl	8008094 <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e0e:	e008      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005e16:	e004      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005e20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d110      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005e2a:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e3c:	4a02      	ldr	r2, [pc, #8]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e44:	e006      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005e46:	bf00      	nop
 8005e48:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005e50:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005e60:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e62:	2300      	movs	r3, #0
 8005e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f000 80b5 	beq.w	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e78:	4b9d      	ldr	r3, [pc, #628]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d113      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	4b9a      	ldr	r3, [pc, #616]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e8c:	4a98      	ldr	r2, [pc, #608]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e96:	4b96      	ldr	r3, [pc, #600]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005eae:	4b91      	ldr	r3, [pc, #580]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	4a90      	ldr	r2, [pc, #576]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eba:	f7fb fe67 	bl	8001b8c <HAL_GetTick>
 8005ebe:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005ec2:	e00b      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec4:	f7fb fe62 	bl	8001b8c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d903      	bls.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005eda:	e005      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005edc:	4b85      	ldr	r3, [pc, #532]	@ (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ed      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005ee8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d165      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d023      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f0a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01b      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f16:	4b76      	ldr	r3, [pc, #472]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f24:	4b72      	ldr	r3, [pc, #456]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f2a:	4a71      	ldr	r2, [pc, #452]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f34:	4b6e      	ldr	r3, [pc, #440]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f3a:	4a6d      	ldr	r2, [pc, #436]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f44:	4a6a      	ldr	r2, [pc, #424]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5a:	f7fb fe17 	bl	8001b8c <HAL_GetTick>
 8005f5e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f62:	e00d      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fb fe12 	bl	8001b8c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f6e:	1ad2      	subs	r2, r2, r3
 8005f70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d903      	bls.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005f7e:	e006      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f80:	4b5b      	ldr	r3, [pc, #364]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0ea      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005f8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10d      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005f96:	4b56      	ldr	r3, [pc, #344]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005fa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fa8:	4a51      	ldr	r2, [pc, #324]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005faa:	430b      	orrs	r3, r1
 8005fac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fb6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005fba:	e003      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005fc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fc4:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d107      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fcc:	4b48      	ldr	r3, [pc, #288]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd2:	4a47      	ldr	r2, [pc, #284]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005fd4:	f023 0304 	bic.w	r3, r3, #4
 8005fd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fea:	2300      	movs	r3, #0
 8005fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d042      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006000:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006004:	d022      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006006:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800600a:	d81b      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800600c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006010:	d011      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006016:	d815      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d019      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800601c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006020:	d110      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006026:	3308      	adds	r3, #8
 8006028:	4618      	mov	r0, r3
 800602a:	f001 ff9b 	bl	8007f64 <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006034:	e00d      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006036:	4b2e      	ldr	r3, [pc, #184]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800603c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006040:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006042:	e006      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800604a:	e002      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800604c:	bf00      	nop
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006050:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006052:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800605a:	4b25      	ldr	r3, [pc, #148]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800605c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006060:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800606c:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800606e:	430b      	orrs	r3, r1
 8006070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006076:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800607a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800607e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800608a:	643b      	str	r3, [r7, #64]	@ 0x40
 800608c:	2300      	movs	r3, #0
 800608e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006090:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d032      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800609a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800609e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80060a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ac:	d804      	bhi.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d008      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060b6:	d007      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80060be:	e004      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80060c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80060ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d112      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80060d2:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80060d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060e4:	4a02      	ldr	r2, [pc, #8]	@ (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80060e6:	430b      	orrs	r3, r1
 80060e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80060ec:	e008      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80060ee:	bf00      	nop
 80060f0:	46020c00 	.word	0x46020c00
 80060f4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80060fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800610c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800610e:	2300      	movs	r3, #0
 8006110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006112:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006116:	460b      	mov	r3, r1
 8006118:	4313      	orrs	r3, r2
 800611a:	d00c      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800611c:	4b98      	ldr	r3, [pc, #608]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800611e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006122:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8006126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800612a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800612e:	4a94      	ldr	r2, [pc, #592]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006130:	430b      	orrs	r3, r1
 8006132:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
 8006144:	2300      	movs	r3, #0
 8006146:	637b      	str	r3, [r7, #52]	@ 0x34
 8006148:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800614c:	460b      	mov	r3, r1
 800614e:	4313      	orrs	r3, r2
 8006150:	d019      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800615a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800615e:	d105      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006160:	4b87      	ldr	r3, [pc, #540]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	4a86      	ldr	r2, [pc, #536]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800616c:	4b84      	ldr	r3, [pc, #528]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800616e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006172:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800617a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800617e:	4a80      	ldr	r2, [pc, #512]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006180:	430b      	orrs	r3, r1
 8006182:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006194:	2300      	movs	r3, #0
 8006196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006198:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800619c:	460b      	mov	r3, r1
 800619e:	4313      	orrs	r3, r2
 80061a0:	d00c      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80061a2:	4b77      	ldr	r3, [pc, #476]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061b4:	4972      	ldr	r1, [pc, #456]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80061bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80061c8:	623b      	str	r3, [r7, #32]
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80061d2:	460b      	mov	r3, r1
 80061d4:	4313      	orrs	r3, r2
 80061d6:	d00c      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80061d8:	4b69      	ldr	r3, [pc, #420]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061ea:	4965      	ldr	r1, [pc, #404]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80061f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	d00c      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800620e:	4b5c      	ldr	r3, [pc, #368]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006214:	f023 0218 	bic.w	r2, r3, #24
 8006218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800621c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006220:	4957      	ldr	r1, [pc, #348]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006230:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800623e:	460b      	mov	r3, r1
 8006240:	4313      	orrs	r3, r2
 8006242:	d032      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006244:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800624c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006250:	d105      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006252:	4b4b      	ldr	r3, [pc, #300]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006256:	4a4a      	ldr	r2, [pc, #296]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800625c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800625e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006266:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800626a:	d108      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800626c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006270:	3308      	adds	r3, #8
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fe76 	bl	8007f64 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800627e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10d      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006286:	4b3e      	ldr	r3, [pc, #248]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800628c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006290:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006298:	4939      	ldr	r1, [pc, #228]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80062a0:	e003      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80062a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80062aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80062c0:	460b      	mov	r3, r1
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d03a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80062c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062d2:	d00e      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80062d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062d8:	d815      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d017      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80062de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062e2:	d110      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e4:	4b26      	ldr	r3, [pc, #152]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80062e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e8:	4a25      	ldr	r2, [pc, #148]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80062ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80062f0:	e00e      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062f6:	3308      	adds	r3, #8
 80062f8:	4618      	mov	r0, r3
 80062fa:	f001 fe33 	bl	8007f64 <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006304:	e004      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800630c:	e000      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800630e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006310:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10d      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006318:	4b19      	ldr	r3, [pc, #100]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800631a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800631e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800632a:	4915      	ldr	r1, [pc, #84]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006332:	e003      	b.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006338:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800633c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006344:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006348:	603b      	str	r3, [r7, #0]
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006352:	460b      	mov	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	d00c      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006358:	4b09      	ldr	r3, [pc, #36]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800635a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800635e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800636a:	4905      	ldr	r1, [pc, #20]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006372:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8006376:	4618      	mov	r0, r3
 8006378:	37e8      	adds	r7, #232	@ 0xe8
 800637a:	46bd      	mov	sp, r7
 800637c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006380:	46020c00 	.word	0x46020c00

08006384 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006384:	b480      	push	{r7}
 8006386:	b089      	sub	sp, #36	@ 0x24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800638c:	4ba6      	ldr	r3, [pc, #664]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800638e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006394:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006396:	4ba4      	ldr	r3, [pc, #656]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80063a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	0a1b      	lsrs	r3, r3, #8
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	3301      	adds	r3, #1
 80063ac:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80063ae:	4b9e      	ldr	r3, [pc, #632]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80063ba:	4b9b      	ldr	r3, [pc, #620]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	08db      	lsrs	r3, r3, #3
 80063c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d062      	beq.n	80064a2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b03      	cmp	r3, #3
 80063e0:	f200 8081 	bhi.w	80064e6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d024      	beq.n	8006434 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d17a      	bne.n	80064e6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800662c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80063fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006402:	4b89      	ldr	r3, [pc, #548]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006412:	ed97 6a02 	vldr	s12, [r7, #8]
 8006416:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006630 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800641a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800641e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006426:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800642a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006432:	e08f      	b.n	8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006434:	4b7c      	ldr	r3, [pc, #496]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006440:	4b79      	ldr	r3, [pc, #484]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	0f1b      	lsrs	r3, r3, #28
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	e006      	b.n	800645a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800644c:	4b76      	ldr	r3, [pc, #472]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800644e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	0f1b      	lsrs	r3, r3, #28
 8006456:	f003 030f 	and.w	r3, r3, #15
 800645a:	4a76      	ldr	r2, [pc, #472]	@ (8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800645c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006480:	ed97 6a02 	vldr	s12, [r7, #8]
 8006484:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006630 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006490:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006494:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a0:	e058      	b.n	8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ac:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800662c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80064b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b4:	4b5c      	ldr	r3, [pc, #368]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064bc:	ee07 3a90 	vmov	s15, r3
 80064c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80064c8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006630 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80064cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80064d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064e4:	e036      	b.n	8006554 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80064e6:	4b50      	ldr	r3, [pc, #320]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80064f2:	4b4d      	ldr	r3, [pc, #308]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	0f1b      	lsrs	r3, r3, #28
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	e006      	b.n	800650c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80064fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006504:	041b      	lsls	r3, r3, #16
 8006506:	0f1b      	lsrs	r3, r3, #28
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	4a49      	ldr	r2, [pc, #292]	@ (8006634 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800650e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	ee07 3a90 	vmov	s15, r3
 8006520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006532:	ed97 6a02 	vldr	s12, [r7, #8]
 8006536:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006630 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800653a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006546:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800654a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006552:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006554:	4b34      	ldr	r3, [pc, #208]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006560:	4b31      	ldr	r3, [pc, #196]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006564:	0a5b      	lsrs	r3, r3, #9
 8006566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006576:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800657a:	edd7 6a07 	vldr	s13, [r7, #28]
 800657e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006586:	ee17 2a90 	vmov	r2, s15
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006596:	4b24      	ldr	r3, [pc, #144]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d017      	beq.n	80065d2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065a2:	4b21      	ldr	r3, [pc, #132]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	0c1b      	lsrs	r3, r3, #16
 80065a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80065b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065b8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c8:	ee17 2a90 	vmov	r2, s15
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	e002      	b.n	80065d8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80065d8:	4b13      	ldr	r3, [pc, #76]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d017      	beq.n	8006614 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065e4:	4b10      	ldr	r3, [pc, #64]	@ (8006628 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80065e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e8:	0e1b      	lsrs	r3, r3, #24
 80065ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80065f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80065fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800660a:	ee17 2a90 	vmov	r2, s15
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006612:	e002      	b.n	800661a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
}
 800661a:	bf00      	nop
 800661c:	3724      	adds	r7, #36	@ 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	46020c00 	.word	0x46020c00
 800662c:	4b742400 	.word	0x4b742400
 8006630:	46000000 	.word	0x46000000
 8006634:	0800b080 	.word	0x0800b080

08006638 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006638:	b480      	push	{r7}
 800663a:	b089      	sub	sp, #36	@ 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006640:	4ba6      	ldr	r3, [pc, #664]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800664a:	4ba4      	ldr	r3, [pc, #656]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800664c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006654:	4ba1      	ldr	r3, [pc, #644]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006658:	0a1b      	lsrs	r3, r3, #8
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	3301      	adds	r3, #1
 8006660:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006662:	4b9e      	ldr	r3, [pc, #632]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006666:	091b      	lsrs	r3, r3, #4
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800666e:	4b9b      	ldr	r3, [pc, #620]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	08db      	lsrs	r3, r3, #3
 8006674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006686:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d062      	beq.n	8006756 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2b03      	cmp	r3, #3
 8006694:	f200 8081 	bhi.w	800679a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d024      	beq.n	80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d17a      	bne.n	800679a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b89      	ldr	r3, [pc, #548]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80066c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ca:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e6:	e08f      	b.n	8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80066e8:	4b7c      	ldr	r3, [pc, #496]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80066f4:	4b79      	ldr	r3, [pc, #484]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	0f1b      	lsrs	r3, r3, #28
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	e006      	b.n	800670e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006700:	4b76      	ldr	r3, [pc, #472]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006706:	041b      	lsls	r3, r3, #16
 8006708:	0f1b      	lsrs	r3, r3, #28
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	4a76      	ldr	r2, [pc, #472]	@ (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006714:	ee07 3a90 	vmov	s15, r3
 8006718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	ee07 3a90 	vmov	s15, r3
 8006730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006734:	ed97 6a02 	vldr	s12, [r7, #8]
 8006738:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800673c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006748:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800674c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006754:	e058      	b.n	8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	ee07 3a90 	vmov	s15, r3
 800675c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006760:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006764:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006768:	4b5c      	ldr	r3, [pc, #368]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006778:	ed97 6a02 	vldr	s12, [r7, #8]
 800677c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006780:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006784:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006794:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006798:	e036      	b.n	8006808 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800679a:	4b50      	ldr	r3, [pc, #320]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80067a6:	4b4d      	ldr	r3, [pc, #308]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0f1b      	lsrs	r3, r3, #28
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	e006      	b.n	80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80067b2:	4b4a      	ldr	r3, [pc, #296]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80067b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	0f1b      	lsrs	r3, r3, #28
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	4a49      	ldr	r2, [pc, #292]	@ (80068e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80067c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ea:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80067ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80067fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006806:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006808:	4b34      	ldr	r3, [pc, #208]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006814:	4b31      	ldr	r3, [pc, #196]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	0a5b      	lsrs	r3, r3, #9
 800681a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006826:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800682a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800682e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800683a:	ee17 2a90 	vmov	r2, s15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	601a      	str	r2, [r3, #0]
 8006842:	e002      	b.n	800684a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800684a:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d017      	beq.n	8006886 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006856:	4b21      	ldr	r3, [pc, #132]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685a:	0c1b      	lsrs	r3, r3, #16
 800685c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800686c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006870:	edd7 6a07 	vldr	s13, [r7, #28]
 8006874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800687c:	ee17 2a90 	vmov	r2, s15
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	605a      	str	r2, [r3, #4]
 8006884:	e002      	b.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800688c:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d017      	beq.n	80068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006898:	4b10      	ldr	r3, [pc, #64]	@ (80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800689a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689c:	0e1b      	lsrs	r3, r3, #24
 800689e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80068aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80068b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068be:	ee17 2a90 	vmov	r2, s15
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068c6:	e002      	b.n	80068ce <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	609a      	str	r2, [r3, #8]
}
 80068ce:	bf00      	nop
 80068d0:	3724      	adds	r7, #36	@ 0x24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	46020c00 	.word	0x46020c00
 80068e0:	4b742400 	.word	0x4b742400
 80068e4:	46000000 	.word	0x46000000
 80068e8:	0800b080 	.word	0x0800b080

080068ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	@ 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80068f4:	4ba6      	ldr	r3, [pc, #664]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80068f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068fc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80068fe:	4ba4      	ldr	r3, [pc, #656]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006908:	4ba1      	ldr	r3, [pc, #644]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800690a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690c:	0a1b      	lsrs	r3, r3, #8
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	3301      	adds	r3, #1
 8006914:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006916:	4b9e      	ldr	r3, [pc, #632]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691a:	091b      	lsrs	r3, r3, #4
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006922:	4b9b      	ldr	r3, [pc, #620]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006926:	08db      	lsrs	r3, r3, #3
 8006928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d062      	beq.n	8006a0a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b03      	cmp	r3, #3
 8006948:	f200 8081 	bhi.w	8006a4e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d024      	beq.n	800699c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d17a      	bne.n	8006a4e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006962:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800696a:	4b89      	ldr	r3, [pc, #548]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800696c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800697a:	ed97 6a02 	vldr	s12, [r7, #8]
 800697e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006982:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006986:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800698a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800698e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006996:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800699a:	e08f      	b.n	8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800699c:	4b7c      	ldr	r3, [pc, #496]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80069a8:	4b79      	ldr	r3, [pc, #484]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	0f1b      	lsrs	r3, r3, #28
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	e006      	b.n	80069c2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80069b4:	4b76      	ldr	r3, [pc, #472]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80069b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	0f1b      	lsrs	r3, r3, #28
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	4a76      	ldr	r2, [pc, #472]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80069c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80069f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a08:	e058      	b.n	8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a14:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a30:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a4c:	e036      	b.n	8006abc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006a4e:	4b50      	ldr	r3, [pc, #320]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	0f1b      	lsrs	r3, r3, #28
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006a66:	4b4a      	ldr	r3, [pc, #296]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	0f1b      	lsrs	r3, r3, #28
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	4a49      	ldr	r2, [pc, #292]	@ (8006b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a9e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006abc:	4b34      	ldr	r3, [pc, #208]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d017      	beq.n	8006af8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ac8:	4b31      	ldr	r3, [pc, #196]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006acc:	0a5b      	lsrs	r3, r3, #9
 8006ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ade:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aee:	ee17 2a90 	vmov	r2, s15
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e002      	b.n	8006afe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006afe:	4b24      	ldr	r3, [pc, #144]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b0a:	4b21      	ldr	r3, [pc, #132]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006b1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b20:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b30:	ee17 2a90 	vmov	r2, s15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006b40:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b4c:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b62:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b72:	ee17 2a90 	vmov	r2, s15
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b7a:	e002      	b.n	8006b82 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	609a      	str	r2, [r3, #8]
}
 8006b82:	bf00      	nop
 8006b84:	3724      	adds	r7, #36	@ 0x24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	46020c00 	.word	0x46020c00
 8006b94:	4b742400 	.word	0x4b742400
 8006b98:	46000000 	.word	0x46000000
 8006b9c:	0800b080 	.word	0x0800b080

08006ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08e      	sub	sp, #56	@ 0x38
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bae:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	d145      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006bb6:	4ba7      	ldr	r3, [pc, #668]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006bc2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d108      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd6:	d104      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bde:	f001 b9b3 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006be2:	4b9c      	ldr	r3, [pc, #624]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf0:	d114      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf8:	d110      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bfa:	4b96      	ldr	r3, [pc, #600]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c08:	d103      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006c0a:	23fa      	movs	r3, #250	@ 0xfa
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c0e:	f001 b99b 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c12:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c18:	f001 b996 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c28:	d107      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c30:	d103      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006c32:	4b89      	ldr	r3, [pc, #548]	@ (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c36:	f001 b987 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3e:	f001 b983 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c46:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	d151      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006c4e:	4b81      	ldr	r3, [pc, #516]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c54:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006c58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	2b80      	cmp	r3, #128	@ 0x80
 8006c5e:	d035      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	2b80      	cmp	r3, #128	@ 0x80
 8006c64:	d841      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b60      	cmp	r3, #96	@ 0x60
 8006c6a:	d02a      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	2b60      	cmp	r3, #96	@ 0x60
 8006c70:	d83b      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	2b40      	cmp	r3, #64	@ 0x40
 8006c76:	d009      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	2b40      	cmp	r3, #64	@ 0x40
 8006c7c:	d835      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d012      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006c8a:	e02e      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fb77 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c9a:	f001 b955 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9e:	f107 0318 	add.w	r3, r7, #24
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff fcc8 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cac:	f001 b94c 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fe19 	bl	80068ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cbe:	f001 b943 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006cc2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006cc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cc8:	f001 b93e 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ccc:	4b61      	ldr	r3, [pc, #388]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd8:	d103      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006cda:	4b60      	ldr	r3, [pc, #384]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cde:	f001 b933 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ce6:	f001 b92f 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cee:	f001 b92b 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006cfa:	430b      	orrs	r3, r1
 8006cfc:	d158      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006cfe:	4b55      	ldr	r3, [pc, #340]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d08:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d10:	d03b      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d18:	d846      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d20:	d02e      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d28:	d83e      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d30:	d00b      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d38:	d836      	bhi.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d46:	d012      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006d48:	e02e      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fb18 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d58:	f001 b8f6 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d5c:	f107 0318 	add.w	r3, r7, #24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fc69 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d6a:	f001 b8ed 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fdba 	bl	80068ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d7c:	f001 b8e4 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d80:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d86:	f001 b8df 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d8a:	4b32      	ldr	r3, [pc, #200]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d96:	d103      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006d98:	4b30      	ldr	r3, [pc, #192]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d9c:	f001 b8d4 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da4:	f001 b8d0 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dac:	f001 b8cc 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006db8:	430b      	orrs	r3, r1
 8006dba:	d126      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006dbc:	4b25      	ldr	r3, [pc, #148]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dc6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006dc8:	4b22      	ldr	r3, [pc, #136]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd4:	d106      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de0:	f001 b8b2 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006de4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df0:	d107      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df8:	d103      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006dfa:	4b19      	ldr	r3, [pc, #100]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfe:	f001 b8a3 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e06:	f001 b89f 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006e12:	430b      	orrs	r3, r1
 8006e14:	d16e      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006e16:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e1c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006e20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006e28:	d03d      	beq.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006e30:	d85c      	bhi.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e38:	d014      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e40:	d854      	bhi.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01f      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e4e:	d012      	beq.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006e50:	e04c      	b.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006e52:	bf00      	nop
 8006e54:	46020c00 	.word	0x46020c00
 8006e58:	0007a120 	.word	0x0007a120
 8006e5c:	00f42400 	.word	0x00f42400
 8006e60:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff fa8b 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e72:	f001 b869 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e76:	f107 0318 	add.w	r3, r7, #24
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fbdc 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e84:	f001 b860 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006e88:	4ba7      	ldr	r3, [pc, #668]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e94:	d103      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006e96:	4ba5      	ldr	r3, [pc, #660]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006e98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e9a:	f001 b855 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ea2:	f001 b851 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ea6:	4ba0      	ldr	r3, [pc, #640]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d118      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eb2:	4b9d      	ldr	r3, [pc, #628]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006ebe:	4b9a      	ldr	r3, [pc, #616]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0e1b      	lsrs	r3, r3, #24
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	e006      	b.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006eca:	4b97      	ldr	r3, [pc, #604]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ed0:	041b      	lsls	r3, r3, #16
 8006ed2:	0e1b      	lsrs	r3, r3, #24
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	4a95      	ldr	r2, [pc, #596]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ede:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ee0:	f001 b832 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ee8:	f001 b82e 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef0:	f001 b82a 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef8:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006efc:	430b      	orrs	r3, r1
 8006efe:	d17f      	bne.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f00:	4b89      	ldr	r3, [pc, #548]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d165      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006f12:	4b85      	ldr	r3, [pc, #532]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f18:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006f1c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f24:	d034      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f2c:	d853      	bhi.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f34:	d00b      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f3c:	d84b      	bhi.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d016      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f4a:	d009      	beq.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006f4c:	e043      	b.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff fa16 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006f5c:	f000 bff4 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f60:	f107 0318 	add.w	r3, r7, #24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fb67 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006f6e:	f000 bfeb 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006f72:	4b6d      	ldr	r3, [pc, #436]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f7e:	d103      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006f80:	4b6a      	ldr	r3, [pc, #424]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006f84:	f000 bfe0 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006f8c:	f000 bfdc 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f90:	4b65      	ldr	r3, [pc, #404]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d118      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f9c:	4b62      	ldr	r3, [pc, #392]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006fa8:	4b5f      	ldr	r3, [pc, #380]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	0e1b      	lsrs	r3, r3, #24
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006fb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	0e1b      	lsrs	r3, r3, #24
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006fca:	f000 bfbd 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006fd2:	f000 bfb9 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006fda:	f000 bfb5 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe4:	d108      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff f9ca 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff4:	f000 bfa8 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ffc:	f000 bfa4 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007004:	1e51      	subs	r1, r2, #1
 8007006:	430b      	orrs	r3, r1
 8007008:	d136      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800700a:	4b47      	ldr	r3, [pc, #284]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800700c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800701c:	f7fe fb44 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 8007020:	6378      	str	r0, [r7, #52]	@ 0x34
 8007022:	f000 bf91 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	2b01      	cmp	r3, #1
 800702a:	d104      	bne.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800702c:	f7fe fa0c 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007030:	6378      	str	r0, [r7, #52]	@ 0x34
 8007032:	f000 bf89 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007036:	4b3c      	ldr	r3, [pc, #240]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007042:	d106      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	2b02      	cmp	r3, #2
 8007048:	d103      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800704a:	4b3a      	ldr	r3, [pc, #232]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	f000 bf7b 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007052:	4b35      	ldr	r3, [pc, #212]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	d107      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2b03      	cmp	r3, #3
 8007064:	d104      	bne.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8007066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
 800706c:	f000 bf6c 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	f000 bf68 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707c:	1e91      	subs	r1, r2, #2
 800707e:	430b      	orrs	r3, r1
 8007080:	d136      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007082:	4b29      	ldr	r3, [pc, #164]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007094:	f7fe faf4 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007098:	6378      	str	r0, [r7, #52]	@ 0x34
 800709a:	f000 bf55 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d104      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070a4:	f7fe f9d0 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80070a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80070aa:	f000 bf4d 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80070ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ba:	d106      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d103      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80070c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c6:	f000 bf3f 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80070ca:	4b17      	ldr	r3, [pc, #92]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d107      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	2b0c      	cmp	r3, #12
 80070dc:	d104      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e4:	f000 bf30 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ec:	f000 bf2c 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80070f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f4:	1f11      	subs	r1, r2, #4
 80070f6:	430b      	orrs	r3, r1
 80070f8:	d13f      	bne.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80070fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80070fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007100:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007104:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800710c:	f7fe fab8 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007110:	6378      	str	r0, [r7, #52]	@ 0x34
 8007112:	f000 bf19 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	2b10      	cmp	r3, #16
 800711a:	d10d      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800711c:	f7fe f994 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007120:	6378      	str	r0, [r7, #52]	@ 0x34
 8007122:	f000 bf11 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007126:	bf00      	nop
 8007128:	46020c00 	.word	0x46020c00
 800712c:	02dc6c00 	.word	0x02dc6c00
 8007130:	0800b080 	.word	0x0800b080
 8007134:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007138:	4ba6      	ldr	r3, [pc, #664]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007144:	d106      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	2b20      	cmp	r3, #32
 800714a:	d103      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800714c:	4ba2      	ldr	r3, [pc, #648]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800714e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007150:	f000 befa 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007154:	4b9f      	ldr	r3, [pc, #636]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b02      	cmp	r3, #2
 8007160:	d107      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b30      	cmp	r3, #48	@ 0x30
 8007166:	d104      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8007168:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800716c:	637b      	str	r3, [r7, #52]	@ 0x34
 800716e:	f000 beeb 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	637b      	str	r3, [r7, #52]	@ 0x34
 8007176:	f000 bee7 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800717a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800717e:	f1a2 0108 	sub.w	r1, r2, #8
 8007182:	430b      	orrs	r3, r1
 8007184:	d136      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007186:	4b93      	ldr	r3, [pc, #588]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800718c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007190:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fe fa72 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800719c:	6378      	str	r0, [r7, #52]	@ 0x34
 800719e:	f000 bed3 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	2b40      	cmp	r3, #64	@ 0x40
 80071a6:	d104      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071a8:	f7fe f94e 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80071ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80071ae:	f000 becb 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80071b2:	4b88      	ldr	r3, [pc, #544]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071be:	d106      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	2b80      	cmp	r3, #128	@ 0x80
 80071c4:	d103      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80071c6:	4b84      	ldr	r3, [pc, #528]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ca:	f000 bebd 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80071ce:	4b81      	ldr	r3, [pc, #516]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80071d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d107      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	2bc0      	cmp	r3, #192	@ 0xc0
 80071e0:	d104      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 80071e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e8:	f000 beae 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f0:	f000 beaa 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	f1a2 0110 	sub.w	r1, r2, #16
 80071fc:	430b      	orrs	r3, r1
 80071fe:	d139      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007200:	4b74      	ldr	r3, [pc, #464]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800720c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fe fa35 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007216:	6378      	str	r0, [r7, #52]	@ 0x34
 8007218:	f000 be96 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007222:	d104      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007224:	f7fe f910 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007228:	6378      	str	r0, [r7, #52]	@ 0x34
 800722a:	f000 be8d 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800722e:	4b69      	ldr	r3, [pc, #420]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723a:	d107      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007242:	d103      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8007244:	4b64      	ldr	r3, [pc, #400]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
 8007248:	f000 be7e 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800724c:	4b61      	ldr	r3, [pc, #388]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800724e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b02      	cmp	r3, #2
 8007258:	d108      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007260:	d104      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
 8007268:	f000 be6e 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	f000 be6a 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007278:	f1a2 0120 	sub.w	r1, r2, #32
 800727c:	430b      	orrs	r3, r1
 800727e:	d158      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007280:	4b54      	ldr	r3, [pc, #336]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007292:	f7fe fa1d 	bl	80056d0 <HAL_RCC_GetPCLK3Freq>
 8007296:	6378      	str	r0, [r7, #52]	@ 0x34
 8007298:	f000 be56 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d104      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072a2:	f7fe f8d1 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80072a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80072a8:	f000 be4e 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80072ac:	4b49      	ldr	r3, [pc, #292]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b8:	d106      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d103      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80072c0:	4b45      	ldr	r3, [pc, #276]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80072c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c4:	f000 be40 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80072c8:	4b42      	ldr	r3, [pc, #264]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d107      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d104      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80072dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e2:	f000 be31 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80072e6:	4b3b      	ldr	r3, [pc, #236]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d11b      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d118      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072f8:	4b36      	ldr	r3, [pc, #216]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007304:	4b33      	ldr	r3, [pc, #204]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	0e1b      	lsrs	r3, r3, #24
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	e006      	b.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8007310:	4b30      	ldr	r3, [pc, #192]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	0e1b      	lsrs	r3, r3, #24
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	4a2f      	ldr	r2, [pc, #188]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007324:	637b      	str	r3, [r7, #52]	@ 0x34
 8007326:	f000 be0f 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	f000 be0b 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007336:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800733a:	430b      	orrs	r3, r1
 800733c:	d172      	bne.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800733e:	4b25      	ldr	r3, [pc, #148]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007344:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007348:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800734a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007350:	d104      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007352:	f7fe f879 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007356:	6378      	str	r0, [r7, #52]	@ 0x34
 8007358:	f000 bdf6 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800735c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007362:	d108      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007364:	f107 0318 	add.w	r3, r7, #24
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff f965 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	637b      	str	r3, [r7, #52]	@ 0x34
 8007372:	f000 bde9 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800737c:	f7fe f966 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8007380:	6378      	str	r0, [r7, #52]	@ 0x34
 8007382:	f000 bde1 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800738c:	d128      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800738e:	4b11      	ldr	r3, [pc, #68]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b20      	cmp	r3, #32
 8007398:	d118      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800739a:	4b0e      	ldr	r3, [pc, #56]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80073a6:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	0e1b      	lsrs	r3, r3, #24
 80073ac:	f003 030f 	and.w	r3, r3, #15
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80073b2:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80073b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073b8:	041b      	lsls	r3, r3, #16
 80073ba:	0e1b      	lsrs	r3, r3, #24
 80073bc:	f003 030f 	and.w	r3, r3, #15
 80073c0:	4a06      	ldr	r2, [pc, #24]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80073c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c8:	f000 bdbe 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d0:	f000 bdba 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80073d4:	46020c00 	.word	0x46020c00
 80073d8:	00f42400 	.word	0x00f42400
 80073dc:	0800b080 	.word	0x0800b080
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80073e0:	4baf      	ldr	r3, [pc, #700]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ec:	d107      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073f4:	d103      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80073f6:	4bab      	ldr	r3, [pc, #684]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fa:	f000 bda5 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80073fe:	4ba8      	ldr	r3, [pc, #672]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800740a:	d107      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007412:	d103      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8007414:	4ba3      	ldr	r3, [pc, #652]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
 8007418:	f000 bd96 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007420:	f000 bd92 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007428:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800742c:	430b      	orrs	r3, r1
 800742e:	d158      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007430:	4b9b      	ldr	r3, [pc, #620]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007432:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	2b04      	cmp	r3, #4
 8007440:	d84b      	bhi.n	80074da <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007442:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	08007481 	.word	0x08007481
 800744c:	0800745d 	.word	0x0800745d
 8007450:	0800746f 	.word	0x0800746f
 8007454:	0800748b 	.word	0x0800748b
 8007458:	08007495 	.word	0x08007495
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800745c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe ff8f 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800746a:	f000 bd6d 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fa3a 	bl	80068ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800747c:	f000 bd64 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007480:	f7fe f8e4 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8007484:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007486:	f000 bd5f 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800748a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007490:	f000 bd5a 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007494:	4b82      	ldr	r3, [pc, #520]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b20      	cmp	r3, #32
 800749e:	d118      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074a0:	4b7f      	ldr	r3, [pc, #508]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80074ac:	4b7c      	ldr	r3, [pc, #496]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	0e1b      	lsrs	r3, r3, #24
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	e006      	b.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80074b8:	4b79      	ldr	r3, [pc, #484]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	0e1b      	lsrs	r3, r3, #24
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	4a78      	ldr	r2, [pc, #480]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80074c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074cc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074ce:	f000 bd3b 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074d6:	f000 bd37 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074de:	f000 bd33 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80074e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80074ea:	430b      	orrs	r3, r1
 80074ec:	d167      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80074ee:	4b6c      	ldr	r3, [pc, #432]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007500:	d036      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007508:	d855      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007510:	d029      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007518:	d84d      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007520:	d013      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007528:	d845      	bhi.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	2b00      	cmp	r3, #0
 800752e:	d015      	beq.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007536:	d13e      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800753c:	4618      	mov	r0, r3
 800753e:	f7fe ff21 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007546:	f000 bcff 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff f9cc 	bl	80068ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007558:	f000 bcf6 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800755c:	f7fe f876 	bl	800564c <HAL_RCC_GetHCLKFreq>
 8007560:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007562:	f000 bcf1 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007566:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800756c:	f000 bcec 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007570:	4b4b      	ldr	r3, [pc, #300]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b20      	cmp	r3, #32
 800757a:	d118      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800757c:	4b48      	ldr	r3, [pc, #288]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8007588:	4b45      	ldr	r3, [pc, #276]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	0e1b      	lsrs	r3, r3, #24
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	e006      	b.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007594:	4b42      	ldr	r3, [pc, #264]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	0e1b      	lsrs	r3, r3, #24
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	4a41      	ldr	r2, [pc, #260]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80075a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075aa:	f000 bccd 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075b2:	f000 bcc9 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ba:	f000 bcc5 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80075be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80075c6:	430b      	orrs	r3, r1
 80075c8:	d14c      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80075ca:	4b35      	ldr	r3, [pc, #212]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80075cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075d4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d104      	bne.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075dc:	f7fe f850 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80075e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80075e2:	f000 bcb1 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80075e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ec:	d104      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075ee:	f7fd ff2b 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80075f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80075f4:	f000 bca8 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80075f8:	4b29      	ldr	r3, [pc, #164]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007604:	d107      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800760c:	d103      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800760e:	4b25      	ldr	r3, [pc, #148]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007610:	637b      	str	r3, [r7, #52]	@ 0x34
 8007612:	f000 bc99 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007616:	4b22      	ldr	r3, [pc, #136]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b20      	cmp	r3, #32
 8007620:	d11c      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007628:	d118      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800762a:	4b1d      	ldr	r3, [pc, #116]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d005      	beq.n	8007642 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007636:	4b1a      	ldr	r3, [pc, #104]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	0e1b      	lsrs	r3, r3, #24
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	e006      	b.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8007642:	4b17      	ldr	r3, [pc, #92]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007648:	041b      	lsls	r3, r3, #16
 800764a:	0e1b      	lsrs	r3, r3, #24
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	4a15      	ldr	r2, [pc, #84]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007656:	637b      	str	r3, [r7, #52]	@ 0x34
 8007658:	f000 bc76 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007660:	f000 bc72 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007668:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800766c:	430b      	orrs	r3, r1
 800766e:	d153      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007670:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007676:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800767a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800767c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007682:	f7fd fffd 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007686:	6378      	str	r0, [r7, #52]	@ 0x34
 8007688:	f000 bc5e 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007692:	d10b      	bne.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007694:	f7fd fed8 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007698:	6378      	str	r0, [r7, #52]	@ 0x34
 800769a:	f000 bc55 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800769e:	bf00      	nop
 80076a0:	46020c00 	.word	0x46020c00
 80076a4:	00f42400 	.word	0x00f42400
 80076a8:	0800b080 	.word	0x0800b080
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80076ac:	4ba1      	ldr	r3, [pc, #644]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b8:	d107      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c0:	d103      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80076c2:	4b9d      	ldr	r3, [pc, #628]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c6:	f000 bc3f 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80076ca:	4b9a      	ldr	r3, [pc, #616]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d11c      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076dc:	d118      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076de:	4b95      	ldr	r3, [pc, #596]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80076ea:	4b92      	ldr	r3, [pc, #584]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	0e1b      	lsrs	r3, r3, #24
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	e006      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80076f6:	4b8f      	ldr	r3, [pc, #572]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80076f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076fc:	041b      	lsls	r3, r3, #16
 80076fe:	0e1b      	lsrs	r3, r3, #24
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	4a8d      	ldr	r2, [pc, #564]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770a:	637b      	str	r3, [r7, #52]	@ 0x34
 800770c:	f000 bc1c 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	637b      	str	r3, [r7, #52]	@ 0x34
 8007714:	f000 bc18 	b.w	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007720:	430b      	orrs	r3, r1
 8007722:	d151      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007724:	4b83      	ldr	r3, [pc, #524]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800772a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	2bc0      	cmp	r3, #192	@ 0xc0
 8007734:	d024      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8007736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007738:	2bc0      	cmp	r3, #192	@ 0xc0
 800773a:	d842      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800773c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773e:	2b80      	cmp	r3, #128	@ 0x80
 8007740:	d00d      	beq.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b80      	cmp	r3, #128	@ 0x80
 8007746:	d83c      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	2b40      	cmp	r3, #64	@ 0x40
 8007752:	d011      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007754:	e035      	b.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007756:	f7fd ffbb 	bl	80056d0 <HAL_RCC_GetPCLK3Freq>
 800775a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800775c:	e3f4      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800775e:	4b75      	ldr	r3, [pc, #468]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007766:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800776a:	d102      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800776c:	4b72      	ldr	r3, [pc, #456]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007770:	e3ea      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007776:	e3e7      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007778:	f7fd fe66 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 800777c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800777e:	e3e3      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007780:	4b6c      	ldr	r3, [pc, #432]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b20      	cmp	r3, #32
 800778a:	d117      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800778c:	4b69      	ldr	r3, [pc, #420]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8007798:	4b66      	ldr	r3, [pc, #408]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	0e1b      	lsrs	r3, r3, #24
 800779e:	f003 030f 	and.w	r3, r3, #15
 80077a2:	e006      	b.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80077a4:	4b63      	ldr	r3, [pc, #396]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80077a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	4a62      	ldr	r2, [pc, #392]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80077b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077ba:	e3c5      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c0:	e3c2      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c6:	e3bf      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80077c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077cc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80077d0:	430b      	orrs	r3, r1
 80077d2:	d147      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80077d4:	4b57      	ldr	r3, [pc, #348]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80077d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80077de:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077e6:	f7fd ff4b 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80077ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80077ec:	e3ac      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077f4:	d103      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077f6:	f7fd fe27 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80077fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80077fc:	e3a4      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80077fe:	4b4d      	ldr	r3, [pc, #308]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780a:	d106      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007812:	d102      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8007814:	4b48      	ldr	r3, [pc, #288]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
 8007818:	e396      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800781a:	4b46      	ldr	r3, [pc, #280]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b20      	cmp	r3, #32
 8007824:	d11b      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800782c:	d117      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800782e:	4b41      	ldr	r3, [pc, #260]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800783a:	4b3e      	ldr	r3, [pc, #248]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	0e1b      	lsrs	r3, r3, #24
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	e006      	b.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8007846:	4b3b      	ldr	r3, [pc, #236]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	0e1b      	lsrs	r3, r3, #24
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	4a39      	ldr	r2, [pc, #228]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800785a:	637b      	str	r3, [r7, #52]	@ 0x34
 800785c:	e374      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
 8007862:	e371      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007868:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800786c:	430b      	orrs	r3, r1
 800786e:	d16a      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007870:	4b30      	ldr	r3, [pc, #192]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800787a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	2b00      	cmp	r3, #0
 8007880:	d120      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007882:	4b2c      	ldr	r3, [pc, #176]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b20      	cmp	r3, #32
 800788c:	d117      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800788e:	4b29      	ldr	r3, [pc, #164]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800789a:	4b26      	ldr	r3, [pc, #152]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	0e1b      	lsrs	r3, r3, #24
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	e006      	b.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80078a6:	4b23      	ldr	r3, [pc, #140]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80078a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	0e1b      	lsrs	r3, r3, #24
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	4a21      	ldr	r2, [pc, #132]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80078b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80078bc:	e344      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c2:	e341      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80078c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80078c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d2:	d112      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078da:	d10e      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078dc:	4b15      	ldr	r3, [pc, #84]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80078de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ea:	d102      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80078ec:	23fa      	movs	r3, #250	@ 0xfa
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078f0:	e32a      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80078f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078f8:	e326      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80078fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007906:	d106      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800790e:	d102      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007910:	4b09      	ldr	r3, [pc, #36]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007912:	637b      	str	r3, [r7, #52]	@ 0x34
 8007914:	e318      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007916:	4b07      	ldr	r3, [pc, #28]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b02      	cmp	r3, #2
 8007922:	d10d      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800792a:	d109      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800792c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
 8007932:	e309      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007934:	46020c00 	.word	0x46020c00
 8007938:	00f42400 	.word	0x00f42400
 800793c:	0800b080 	.word	0x0800b080
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	637b      	str	r3, [r7, #52]	@ 0x34
 8007944:	e300      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800794e:	430b      	orrs	r3, r1
 8007950:	d164      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007952:	4ba2      	ldr	r3, [pc, #648]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007958:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800795c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d120      	bne.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007964:	4b9d      	ldr	r3, [pc, #628]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b20      	cmp	r3, #32
 800796e:	d117      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007970:	4b9a      	ldr	r3, [pc, #616]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800797c:	4b97      	ldr	r3, [pc, #604]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	0e1b      	lsrs	r3, r3, #24
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	e006      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8007988:	4b94      	ldr	r3, [pc, #592]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800798a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800798e:	041b      	lsls	r3, r3, #16
 8007990:	0e1b      	lsrs	r3, r3, #24
 8007992:	f003 030f 	and.w	r3, r3, #15
 8007996:	4a92      	ldr	r2, [pc, #584]	@ (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
 800799e:	e2d3      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a4:	e2d0      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80079a6:	4b8d      	ldr	r3, [pc, #564]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079b4:	d112      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079bc:	d10e      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079be:	4b87      	ldr	r3, [pc, #540]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079cc:	d102      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80079ce:	23fa      	movs	r3, #250	@ 0xfa
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079d2:	e2b9      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80079d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079da:	e2b5      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80079dc:	4b7f      	ldr	r3, [pc, #508]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e8:	d106      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079f0:	d102      	bne.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80079f2:	4b7c      	ldr	r3, [pc, #496]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	e2a7      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80079f8:	4b78      	ldr	r3, [pc, #480]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80079fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d107      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a0c:	d103      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a14:	e298      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a1a:	e295      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a20:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007a24:	430b      	orrs	r3, r1
 8007a26:	d147      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007a28:	4b6c      	ldr	r3, [pc, #432]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a2e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007a32:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a3a:	f7fd fe21 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007a3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a40:	e282      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007a42:	4b66      	ldr	r3, [pc, #408]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a50:	d112      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a58:	d10e      	bne.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a5a:	4b60      	ldr	r3, [pc, #384]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a68:	d102      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8007a6a:	23fa      	movs	r3, #250	@ 0xfa
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a6e:	e26b      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007a70:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007a76:	e267      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007a78:	4b58      	ldr	r3, [pc, #352]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a84:	d106      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007a8c:	d102      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8007a8e:	4b55      	ldr	r3, [pc, #340]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a92:	e259      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007a94:	4b51      	ldr	r3, [pc, #324]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d107      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007aa8:	d103      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8007aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab0:	e24a      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab6:	e247      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007abc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	d12d      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007ac4:	4b45      	ldr	r3, [pc, #276]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007aca:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007ace:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007ad0:	4b42      	ldr	r3, [pc, #264]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007adc:	d105      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d102      	bne.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae8:	e22e      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007af0:	d107      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fc44 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b00:	e222      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b08:	d107      	bne.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fd92 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b18:	e216      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1e:	e213      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007b20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b24:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	d15d      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b32:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007b36:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b3e:	d028      	beq.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b46:	d845      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b4e:	d013      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b56:	d83d      	bhi.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b64:	d004      	beq.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8007b66:	e035      	b.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007b68:	f7fd fd9e 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 8007b6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b6e:	e1eb      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b70:	f7fd fc6a 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007b74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b76:	e1e7      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b78:	4b18      	ldr	r3, [pc, #96]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b84:	d102      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007b86:	4b17      	ldr	r3, [pc, #92]	@ (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007b88:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b8a:	e1dd      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b90:	e1da      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b92:	4b12      	ldr	r3, [pc, #72]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d117      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8007baa:	4b0c      	ldr	r3, [pc, #48]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	0e1b      	lsrs	r3, r3, #24
 8007bb0:	f003 030f 	and.w	r3, r3, #15
 8007bb4:	e006      	b.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007bb6:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bbc:	041b      	lsls	r3, r3, #16
 8007bbe:	0e1b      	lsrs	r3, r3, #24
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	4a06      	ldr	r2, [pc, #24]	@ (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bcc:	e1bc      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bd2:	e1b9      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bd8:	e1b6      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007bda:	bf00      	nop
 8007bdc:	46020c00 	.word	0x46020c00
 8007be0:	0800b080 	.word	0x0800b080
 8007be4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bec:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	d156      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007bf4:	4ba5      	ldr	r3, [pc, #660]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c06:	d028      	beq.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c0e:	d845      	bhi.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c16:	d013      	beq.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c1e:	d83d      	bhi.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c2c:	d004      	beq.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007c2e:	e035      	b.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007c30:	f7fd fd26 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8007c34:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c36:	e187      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007c38:	f7fd fc06 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007c3c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007c3e:	e183      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c40:	4b92      	ldr	r3, [pc, #584]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007c4e:	4b90      	ldr	r3, [pc, #576]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c52:	e179      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c58:	e176      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007c5a:	4b8c      	ldr	r3, [pc, #560]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d117      	bne.n	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c66:	4b89      	ldr	r3, [pc, #548]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007c72:	4b86      	ldr	r3, [pc, #536]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	0e1b      	lsrs	r3, r3, #24
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	e006      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007c7e:	4b83      	ldr	r3, [pc, #524]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	0e1b      	lsrs	r3, r3, #24
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	4a81      	ldr	r2, [pc, #516]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c94:	e158      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c9a:	e155      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ca0:	e152      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007caa:	430b      	orrs	r3, r1
 8007cac:	d177      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007cae:	4b77      	ldr	r3, [pc, #476]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cb4:	f003 0318 	and.w	r3, r3, #24
 8007cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	2b18      	cmp	r3, #24
 8007cbe:	d86b      	bhi.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007d2d 	.word	0x08007d2d
 8007ccc:	08007d99 	.word	0x08007d99
 8007cd0:	08007d99 	.word	0x08007d99
 8007cd4:	08007d99 	.word	0x08007d99
 8007cd8:	08007d99 	.word	0x08007d99
 8007cdc:	08007d99 	.word	0x08007d99
 8007ce0:	08007d99 	.word	0x08007d99
 8007ce4:	08007d99 	.word	0x08007d99
 8007ce8:	08007d35 	.word	0x08007d35
 8007cec:	08007d99 	.word	0x08007d99
 8007cf0:	08007d99 	.word	0x08007d99
 8007cf4:	08007d99 	.word	0x08007d99
 8007cf8:	08007d99 	.word	0x08007d99
 8007cfc:	08007d99 	.word	0x08007d99
 8007d00:	08007d99 	.word	0x08007d99
 8007d04:	08007d99 	.word	0x08007d99
 8007d08:	08007d3d 	.word	0x08007d3d
 8007d0c:	08007d99 	.word	0x08007d99
 8007d10:	08007d99 	.word	0x08007d99
 8007d14:	08007d99 	.word	0x08007d99
 8007d18:	08007d99 	.word	0x08007d99
 8007d1c:	08007d99 	.word	0x08007d99
 8007d20:	08007d99 	.word	0x08007d99
 8007d24:	08007d99 	.word	0x08007d99
 8007d28:	08007d57 	.word	0x08007d57
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007d2c:	f7fd fcd0 	bl	80056d0 <HAL_RCC_GetPCLK3Freq>
 8007d30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d32:	e109      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007d34:	f7fd fb88 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007d38:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007d3a:	e105      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d3c:	4b53      	ldr	r3, [pc, #332]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d48:	d102      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007d4a:	4b51      	ldr	r3, [pc, #324]	@ (8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d4e:	e0fb      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d54:	e0f8      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007d56:	4b4d      	ldr	r3, [pc, #308]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d117      	bne.n	8007d92 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d62:	4b4a      	ldr	r3, [pc, #296]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007d6e:	4b47      	ldr	r3, [pc, #284]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	0e1b      	lsrs	r3, r3, #24
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	e006      	b.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007d7a:	4b44      	ldr	r3, [pc, #272]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d80:	041b      	lsls	r3, r3, #16
 8007d82:	0e1b      	lsrs	r3, r3, #24
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	4a42      	ldr	r2, [pc, #264]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007d90:	e0da      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d96:	e0d7      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d9c:	e0d4      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007da6:	430b      	orrs	r3, r1
 8007da8:	d155      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007daa:	4b38      	ldr	r3, [pc, #224]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007dac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007db0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007db4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dbc:	d013      	beq.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dc4:	d844      	bhi.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dcc:	d013      	beq.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dd4:	d83c      	bhi.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d014      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007de2:	d014      	beq.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007de4:	e034      	b.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de6:	f107 0318 	add.w	r3, r7, #24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fc24 	bl	8006638 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007df4:	e0a8      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fac2 	bl	8006384 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e04:	e0a0      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007e06:	f7fd fb1f 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8007e0a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007e0c:	e09c      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d117      	bne.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007e26:	4b19      	ldr	r3, [pc, #100]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	0e1b      	lsrs	r3, r3, #24
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	e006      	b.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007e32:	4b16      	ldr	r3, [pc, #88]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e38:	041b      	lsls	r3, r3, #16
 8007e3a:	0e1b      	lsrs	r3, r3, #24
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	4a14      	ldr	r2, [pc, #80]	@ (8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e48:	e07e      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e4e:	e07b      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e54:	e078      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e5a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	d138      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007e62:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007e6e:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d10d      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e88:	e05e      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007e8a:	bf00      	nop
 8007e8c:	46020c00 	.word	0x46020c00
 8007e90:	00f42400 	.word	0x00f42400
 8007e94:	0800b080 	.word	0x0800b080
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007e98:	4b2e      	ldr	r3, [pc, #184]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ea6:	d112      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eae:	d10e      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007eb0:	4b28      	ldr	r3, [pc, #160]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ebe:	d102      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007ec0:	23fa      	movs	r3, #250	@ 0xfa
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ec4:	e040      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007ec6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ecc:	e03c      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed2:	e039      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007edc:	430b      	orrs	r3, r1
 8007ede:	d131      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007ee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ee6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007eea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007eec:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ef8:	d105      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007f00:	4b15      	ldr	r3, [pc, #84]	@ (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f04:	e020      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007f06:	4b13      	ldr	r3, [pc, #76]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f12:	d106      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1a:	d102      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f20:	e012      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007f22:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f2e:	d106      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f36:	d102      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007f38:	4b09      	ldr	r3, [pc, #36]	@ (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3c:	e004      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f42:	e001      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3738      	adds	r7, #56	@ 0x38
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	46020c00 	.word	0x46020c00
 8007f58:	02dc6c00 	.word	0x02dc6c00
 8007f5c:	016e3600 	.word	0x016e3600
 8007f60:	00f42400 	.word	0x00f42400

08007f64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007f6c:	4b47      	ldr	r3, [pc, #284]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a46      	ldr	r2, [pc, #280]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f78:	f7f9 fe08 	bl	8001b8c <HAL_GetTick>
 8007f7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f7e:	e008      	b.n	8007f92 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f80:	f7f9 fe04 	bl	8001b8c <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e077      	b.n	8008082 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f92:	4b3e      	ldr	r3, [pc, #248]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f0      	bne.n	8007f80 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007f9e:	4b3b      	ldr	r3, [pc, #236]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6811      	ldr	r1, [r2, #0]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6852      	ldr	r2, [r2, #4]
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	0212      	lsls	r2, r2, #8
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	4934      	ldr	r1, [pc, #208]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007fbe:	4b33      	ldr	r3, [pc, #204]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fc2:	4b33      	ldr	r3, [pc, #204]	@ (8008090 <RCCEx_PLL2_Config+0x12c>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6892      	ldr	r2, [r2, #8]
 8007fca:	3a01      	subs	r2, #1
 8007fcc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	68d2      	ldr	r2, [r2, #12]
 8007fd4:	3a01      	subs	r2, #1
 8007fd6:	0252      	lsls	r2, r2, #9
 8007fd8:	b292      	uxth	r2, r2
 8007fda:	4311      	orrs	r1, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6912      	ldr	r2, [r2, #16]
 8007fe0:	3a01      	subs	r2, #1
 8007fe2:	0412      	lsls	r2, r2, #16
 8007fe4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007fe8:	4311      	orrs	r1, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6952      	ldr	r2, [r2, #20]
 8007fee:	3a01      	subs	r2, #1
 8007ff0:	0612      	lsls	r2, r2, #24
 8007ff2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	4924      	ldr	r1, [pc, #144]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007ffe:	4b23      	ldr	r3, [pc, #140]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	f023 020c 	bic.w	r2, r3, #12
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	4920      	ldr	r1, [pc, #128]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 800800c:	4313      	orrs	r3, r2
 800800e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008010:	4b1e      	ldr	r3, [pc, #120]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	491c      	ldr	r1, [pc, #112]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 800801a:	4313      	orrs	r3, r2
 800801c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800801e:	4b1b      	ldr	r3, [pc, #108]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	4a1a      	ldr	r2, [pc, #104]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008024:	f023 0310 	bic.w	r3, r3, #16
 8008028:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800802a:	4b18      	ldr	r3, [pc, #96]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 800802c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800802e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008032:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	69d2      	ldr	r2, [r2, #28]
 800803a:	00d2      	lsls	r2, r2, #3
 800803c:	4913      	ldr	r1, [pc, #76]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 800803e:	4313      	orrs	r3, r2
 8008040:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008042:	4b12      	ldr	r3, [pc, #72]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008046:	4a11      	ldr	r2, [pc, #68]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008048:	f043 0310 	orr.w	r3, r3, #16
 800804c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800804e:	4b0f      	ldr	r3, [pc, #60]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a0e      	ldr	r2, [pc, #56]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008054:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008058:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800805a:	f7f9 fd97 	bl	8001b8c <HAL_GetTick>
 800805e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008060:	e008      	b.n	8008074 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008062:	f7f9 fd93 	bl	8001b8c <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e006      	b.n	8008082 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <RCCEx_PLL2_Config+0x128>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0f0      	beq.n	8008062 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008080:	2300      	movs	r3, #0

}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	46020c00 	.word	0x46020c00
 8008090:	80800000 	.word	0x80800000

08008094 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800809c:	4b47      	ldr	r3, [pc, #284]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a46      	ldr	r2, [pc, #280]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 80080a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080a8:	f7f9 fd70 	bl	8001b8c <HAL_GetTick>
 80080ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080ae:	e008      	b.n	80080c2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080b0:	f7f9 fd6c 	bl	8001b8c <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e077      	b.n	80081b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080c2:	4b3e      	ldr	r3, [pc, #248]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f0      	bne.n	80080b0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80080ce:	4b3b      	ldr	r3, [pc, #236]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6811      	ldr	r1, [r2, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6852      	ldr	r2, [r2, #4]
 80080e2:	3a01      	subs	r2, #1
 80080e4:	0212      	lsls	r2, r2, #8
 80080e6:	430a      	orrs	r2, r1
 80080e8:	4934      	ldr	r1, [pc, #208]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	630b      	str	r3, [r1, #48]	@ 0x30
 80080ee:	4b33      	ldr	r3, [pc, #204]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 80080f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080f2:	4b33      	ldr	r3, [pc, #204]	@ (80081c0 <RCCEx_PLL3_Config+0x12c>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	6892      	ldr	r2, [r2, #8]
 80080fa:	3a01      	subs	r2, #1
 80080fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68d2      	ldr	r2, [r2, #12]
 8008104:	3a01      	subs	r2, #1
 8008106:	0252      	lsls	r2, r2, #9
 8008108:	b292      	uxth	r2, r2
 800810a:	4311      	orrs	r1, r2
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6912      	ldr	r2, [r2, #16]
 8008110:	3a01      	subs	r2, #1
 8008112:	0412      	lsls	r2, r2, #16
 8008114:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008118:	4311      	orrs	r1, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	6952      	ldr	r2, [r2, #20]
 800811e:	3a01      	subs	r2, #1
 8008120:	0612      	lsls	r2, r2, #24
 8008122:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008126:	430a      	orrs	r2, r1
 8008128:	4924      	ldr	r1, [pc, #144]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 800812a:	4313      	orrs	r3, r2
 800812c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800812e:	4b23      	ldr	r3, [pc, #140]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008132:	f023 020c 	bic.w	r2, r3, #12
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	4920      	ldr	r1, [pc, #128]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 800813c:	4313      	orrs	r3, r2
 800813e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008140:	4b1e      	ldr	r3, [pc, #120]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	491c      	ldr	r1, [pc, #112]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 800814a:	4313      	orrs	r3, r2
 800814c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800814e:	4b1b      	ldr	r3, [pc, #108]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	4a1a      	ldr	r2, [pc, #104]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008154:	f023 0310 	bic.w	r3, r3, #16
 8008158:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800815a:	4b18      	ldr	r3, [pc, #96]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 800815c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800815e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008162:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	69d2      	ldr	r2, [r2, #28]
 800816a:	00d2      	lsls	r2, r2, #3
 800816c:	4913      	ldr	r1, [pc, #76]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 800816e:	4313      	orrs	r3, r2
 8008170:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008176:	4a11      	ldr	r2, [pc, #68]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008178:	f043 0310 	orr.w	r3, r3, #16
 800817c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800817e:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a0e      	ldr	r2, [pc, #56]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 8008184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008188:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800818a:	f7f9 fcff 	bl	8001b8c <HAL_GetTick>
 800818e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008190:	e008      	b.n	80081a4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008192:	f7f9 fcfb 	bl	8001b8c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e006      	b.n	80081b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <RCCEx_PLL3_Config+0x128>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	46020c00 	.word	0x46020c00
 80081c0:	80800000 	.word	0x80800000

080081c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d078      	beq.n	80082c8 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7f8 fe7c 	bl	8000ee8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80081f8:	4b36      	ldr	r3, [pc, #216]	@ (80082d4 <HAL_RTC_Init+0x110>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b10      	cmp	r3, #16
 8008202:	d058      	beq.n	80082b6 <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 8008204:	4b33      	ldr	r3, [pc, #204]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800820c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008210:	d053      	beq.n	80082ba <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008212:	4b30      	ldr	r3, [pc, #192]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008214:	22ca      	movs	r2, #202	@ 0xca
 8008216:	625a      	str	r2, [r3, #36]	@ 0x24
 8008218:	4b2e      	ldr	r3, [pc, #184]	@ (80082d4 <HAL_RTC_Init+0x110>)
 800821a:	2253      	movs	r2, #83	@ 0x53
 800821c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9ae 	bl	8008580 <RTC_EnterInitMode>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d13f      	bne.n	80082ae <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800822e:	4b29      	ldr	r3, [pc, #164]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	4a28      	ldr	r2, [pc, #160]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008234:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8008238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800823c:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800823e:	4b25      	ldr	r3, [pc, #148]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6859      	ldr	r1, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	4319      	orrs	r1, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	430b      	orrs	r3, r1
 8008252:	4920      	ldr	r1, [pc, #128]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008254:	4313      	orrs	r3, r2
 8008256:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	491c      	ldr	r1, [pc, #112]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008264:	4313      	orrs	r3, r2
 8008266:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008268:	4b1a      	ldr	r3, [pc, #104]	@ (80082d4 <HAL_RTC_Init+0x110>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008278:	430b      	orrs	r3, r1
 800827a:	4916      	ldr	r1, [pc, #88]	@ (80082d4 <HAL_RTC_Init+0x110>)
 800827c:	4313      	orrs	r3, r2
 800827e:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f9b9 	bl	80085f8 <RTC_ExitInitMode>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10e      	bne.n	80082ae <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 8008290:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <HAL_RTC_Init+0x110>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a19      	ldr	r1, [r3, #32]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	4319      	orrs	r1, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	430b      	orrs	r3, r1
 80082a8:	490a      	ldr	r1, [pc, #40]	@ (80082d4 <HAL_RTC_Init+0x110>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ae:	4b09      	ldr	r3, [pc, #36]	@ (80082d4 <HAL_RTC_Init+0x110>)
 80082b0:	22ff      	movs	r2, #255	@ 0xff
 80082b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80082b4:	e001      	b.n	80082ba <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	46007800 	.word	0x46007800

080082d8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80082d8:	b590      	push	{r4, r7, lr}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_RTC_SetTime+0x1a>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e088      	b.n	8008404 <HAL_RTC_SetTime+0x12c>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008302:	4b42      	ldr	r3, [pc, #264]	@ (800840c <HAL_RTC_SetTime+0x134>)
 8008304:	22ca      	movs	r2, #202	@ 0xca
 8008306:	625a      	str	r2, [r3, #36]	@ 0x24
 8008308:	4b40      	ldr	r3, [pc, #256]	@ (800840c <HAL_RTC_SetTime+0x134>)
 800830a:	2253      	movs	r2, #83	@ 0x53
 800830c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f936 	bl	8008580 <RTC_EnterInitMode>
 8008314:	4603      	mov	r3, r0
 8008316:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008318:	7cfb      	ldrb	r3, [r7, #19]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d163      	bne.n	80083e6 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800831e:	4b3b      	ldr	r3, [pc, #236]	@ (800840c <HAL_RTC_SetTime+0x134>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800832a:	d057      	beq.n	80083dc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d125      	bne.n	800837e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008332:	4b36      	ldr	r3, [pc, #216]	@ (800840c <HAL_RTC_SetTime+0x134>)
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2200      	movs	r2, #0
 8008342:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f993 	bl	8008674 <RTC_ByteToBcd2>
 800834e:	4603      	mov	r3, r0
 8008350:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f98c 	bl	8008674 <RTC_ByteToBcd2>
 800835c:	4603      	mov	r3, r0
 800835e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008360:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	789b      	ldrb	r3, [r3, #2]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f984 	bl	8008674 <RTC_ByteToBcd2>
 800836c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800836e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	78db      	ldrb	r3, [r3, #3]
 8008376:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008378:	4313      	orrs	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e017      	b.n	80083ae <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800837e:	4b23      	ldr	r3, [pc, #140]	@ (800840c <HAL_RTC_SetTime+0x134>)
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800839c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083a2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	78db      	ldrb	r3, [r3, #3]
 80083a8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083aa:	4313      	orrs	r3, r2
 80083ac:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80083ae:	4a17      	ldr	r2, [pc, #92]	@ (800840c <HAL_RTC_SetTime+0x134>)
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80083b6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80083ba:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80083bc:	4b13      	ldr	r3, [pc, #76]	@ (800840c <HAL_RTC_SetTime+0x134>)
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	4a12      	ldr	r2, [pc, #72]	@ (800840c <HAL_RTC_SetTime+0x134>)
 80083c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083c6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80083c8:	4b10      	ldr	r3, [pc, #64]	@ (800840c <HAL_RTC_SetTime+0x134>)
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	68d9      	ldr	r1, [r3, #12]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	430b      	orrs	r3, r1
 80083d6:	490d      	ldr	r1, [pc, #52]	@ (800840c <HAL_RTC_SetTime+0x134>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f90b 	bl	80085f8 <RTC_ExitInitMode>
 80083e2:	4603      	mov	r3, r0
 80083e4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <HAL_RTC_SetTime+0x134>)
 80083e8:	22ff      	movs	r2, #255	@ 0xff
 80083ea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80083ec:	7cfb      	ldrb	r3, [r7, #19]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8008402:	7cfb      	ldrb	r3, [r7, #19]
}
 8008404:	4618      	mov	r0, r3
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	bd90      	pop	{r4, r7, pc}
 800840c:	46007800 	.word	0x46007800

08008410 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_RTC_SetDate+0x1a>
 8008426:	2302      	movs	r3, #2
 8008428:	e071      	b.n	800850e <HAL_RTC_SetDate+0xfe>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10e      	bne.n	800845e <HAL_RTC_SetDate+0x4e>
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	f023 0310 	bic.w	r3, r3, #16
 8008454:	b2db      	uxtb	r3, r3
 8008456:	330a      	adds	r3, #10
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11c      	bne.n	800849e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	78db      	ldrb	r3, [r3, #3]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f903 	bl	8008674 <RTC_ByteToBcd2>
 800846e:	4603      	mov	r3, r0
 8008470:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f8fc 	bl	8008674 <RTC_ByteToBcd2>
 800847c:	4603      	mov	r3, r0
 800847e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008480:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	789b      	ldrb	r3, [r3, #2]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f8f4 	bl	8008674 <RTC_ByteToBcd2>
 800848c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800848e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	e00e      	b.n	80084bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	78db      	ldrb	r3, [r3, #3]
 80084a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	785b      	ldrb	r3, [r3, #1]
 80084a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80084b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084bc:	4b16      	ldr	r3, [pc, #88]	@ (8008518 <HAL_RTC_SetDate+0x108>)
 80084be:	22ca      	movs	r2, #202	@ 0xca
 80084c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80084c2:	4b15      	ldr	r3, [pc, #84]	@ (8008518 <HAL_RTC_SetDate+0x108>)
 80084c4:	2253      	movs	r2, #83	@ 0x53
 80084c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f859 	bl	8008580 <RTC_EnterInitMode>
 80084ce:	4603      	mov	r3, r0
 80084d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80084d2:	7cfb      	ldrb	r3, [r7, #19]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10b      	bne.n	80084f0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80084d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008518 <HAL_RTC_SetDate+0x108>)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80084e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80084e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f886 	bl	80085f8 <RTC_ExitInitMode>
 80084ec:	4603      	mov	r3, r0
 80084ee:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084f0:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <HAL_RTC_SetDate+0x108>)
 80084f2:	22ff      	movs	r2, #255	@ 0xff
 80084f4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80084f6:	7cfb      	ldrb	r3, [r7, #19]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800850c:	7cfb      	ldrb	r3, [r7, #19]
}
 800850e:	4618      	mov	r0, r3
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}
 8008516:	bf00      	nop
 8008518:	46007800 	.word	0x46007800

0800851c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008524:	4b15      	ldr	r3, [pc, #84]	@ (800857c <HAL_RTC_WaitForSynchro+0x60>)
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	4a14      	ldr	r2, [pc, #80]	@ (800857c <HAL_RTC_WaitForSynchro+0x60>)
 800852a:	f023 0320 	bic.w	r3, r3, #32
 800852e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008530:	f7f9 fb2c 	bl	8001b8c <HAL_GetTick>
 8008534:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008536:	e013      	b.n	8008560 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008538:	f7f9 fb28 	bl	8001b8c <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008546:	d90b      	bls.n	8008560 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008548:	4b0c      	ldr	r3, [pc, #48]	@ (800857c <HAL_RTC_WaitForSynchro+0x60>)
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2203      	movs	r2, #3
 8008558:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	e008      	b.n	8008572 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <HAL_RTC_WaitForSynchro+0x60>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0e5      	beq.n	8008538 <HAL_RTC_WaitForSynchro+0x1c>
 800856c:	e000      	b.n	8008570 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800856e:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	46007800 	.word	0x46007800

08008580 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800858c:	4b19      	ldr	r3, [pc, #100]	@ (80085f4 <RTC_EnterInitMode+0x74>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d128      	bne.n	80085ea <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008598:	4b16      	ldr	r3, [pc, #88]	@ (80085f4 <RTC_EnterInitMode+0x74>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	4a15      	ldr	r2, [pc, #84]	@ (80085f4 <RTC_EnterInitMode+0x74>)
 800859e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80085a4:	f7f9 faf2 	bl	8001b8c <HAL_GetTick>
 80085a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80085aa:	e013      	b.n	80085d4 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80085ac:	f7f9 faee 	bl	8001b8c <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085ba:	d90b      	bls.n	80085d4 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80085bc:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <RTC_EnterInitMode+0x74>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10f      	bne.n	80085e8 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2203      	movs	r2, #3
 80085d0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80085d4:	4b07      	ldr	r3, [pc, #28]	@ (80085f4 <RTC_EnterInitMode+0x74>)
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <RTC_EnterInitMode+0x6a>
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d1e2      	bne.n	80085ac <RTC_EnterInitMode+0x2c>
 80085e6:	e000      	b.n	80085ea <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80085e8:	bf00      	nop
        }
      }
    }
  }

  return status;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	46007800 	.word	0x46007800

080085f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008604:	4b1a      	ldr	r3, [pc, #104]	@ (8008670 <RTC_ExitInitMode+0x78>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	4a19      	ldr	r2, [pc, #100]	@ (8008670 <RTC_ExitInitMode+0x78>)
 800860a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800860e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008610:	4b17      	ldr	r3, [pc, #92]	@ (8008670 <RTC_ExitInitMode+0x78>)
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10c      	bne.n	8008636 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff ff7d 	bl	800851c <HAL_RTC_WaitForSynchro>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01e      	beq.n	8008666 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2203      	movs	r2, #3
 800862c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	73fb      	strb	r3, [r7, #15]
 8008634:	e017      	b.n	8008666 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008636:	4b0e      	ldr	r3, [pc, #56]	@ (8008670 <RTC_ExitInitMode+0x78>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	4a0d      	ldr	r2, [pc, #52]	@ (8008670 <RTC_ExitInitMode+0x78>)
 800863c:	f023 0320 	bic.w	r3, r3, #32
 8008640:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff ff6a 	bl	800851c <HAL_RTC_WaitForSynchro>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800865a:	4b05      	ldr	r3, [pc, #20]	@ (8008670 <RTC_ExitInitMode+0x78>)
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	4a04      	ldr	r2, [pc, #16]	@ (8008670 <RTC_ExitInitMode+0x78>)
 8008660:	f043 0320 	orr.w	r3, r3, #32
 8008664:	6193      	str	r3, [r2, #24]
  }
  return status;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	46007800 	.word	0x46007800

08008674 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008686:	e005      	b.n	8008694 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800868e:	7afb      	ldrb	r3, [r7, #11]
 8008690:	3b0a      	subs	r3, #10
 8008692:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	2b09      	cmp	r3, #9
 8008698:	d8f6      	bhi.n	8008688 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	b2db      	uxtb	r3, r3
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	b2db      	uxtb	r3, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4910      	ldr	r1, [pc, #64]	@ (8008708 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	490c      	ldr	r1, [pc, #48]	@ (800870c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80086e0:	4b0a      	ldr	r3, [pc, #40]	@ (800870c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6919      	ldr	r1, [r3, #16]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	041b      	lsls	r3, r3, #16
 80086f2:	430b      	orrs	r3, r1
 80086f4:	4905      	ldr	r1, [pc, #20]	@ (800870c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	46007800 	.word	0x46007800
 800870c:	46007c00 	.word	0x46007c00

08008710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e049      	b.n	80087b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f7f8 fc22 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f000 fa7c 	bl	8008c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d001      	beq.n	80087d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e072      	b.n	80088be <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f042 0201 	orr.w	r2, r2, #1
 80087ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a35      	ldr	r2, [pc, #212]	@ (80088cc <HAL_TIM_Base_Start_IT+0x10c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d040      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a34      	ldr	r2, [pc, #208]	@ (80088d0 <HAL_TIM_Base_Start_IT+0x110>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d03b      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800880c:	d036      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008816:	d031      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a2d      	ldr	r2, [pc, #180]	@ (80088d4 <HAL_TIM_Base_Start_IT+0x114>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d02c      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2c      	ldr	r2, [pc, #176]	@ (80088d8 <HAL_TIM_Base_Start_IT+0x118>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d027      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a2a      	ldr	r2, [pc, #168]	@ (80088dc <HAL_TIM_Base_Start_IT+0x11c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a29      	ldr	r2, [pc, #164]	@ (80088e0 <HAL_TIM_Base_Start_IT+0x120>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d01d      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a27      	ldr	r2, [pc, #156]	@ (80088e4 <HAL_TIM_Base_Start_IT+0x124>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a26      	ldr	r2, [pc, #152]	@ (80088e8 <HAL_TIM_Base_Start_IT+0x128>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a24      	ldr	r2, [pc, #144]	@ (80088ec <HAL_TIM_Base_Start_IT+0x12c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a23      	ldr	r2, [pc, #140]	@ (80088f0 <HAL_TIM_Base_Start_IT+0x130>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a21      	ldr	r2, [pc, #132]	@ (80088f4 <HAL_TIM_Base_Start_IT+0x134>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_TIM_Base_Start_IT+0xbc>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a20      	ldr	r2, [pc, #128]	@ (80088f8 <HAL_TIM_Base_Start_IT+0x138>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d115      	bne.n	80088a8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689a      	ldr	r2, [r3, #8]
 8008882:	4b1e      	ldr	r3, [pc, #120]	@ (80088fc <HAL_TIM_Base_Start_IT+0x13c>)
 8008884:	4013      	ands	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d015      	beq.n	80088ba <HAL_TIM_Base_Start_IT+0xfa>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008894:	d011      	beq.n	80088ba <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0201 	orr.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a6:	e008      	b.n	80088ba <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0201 	orr.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e000      	b.n	80088bc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	40012c00 	.word	0x40012c00
 80088d0:	50012c00 	.word	0x50012c00
 80088d4:	40000400 	.word	0x40000400
 80088d8:	50000400 	.word	0x50000400
 80088dc:	40000800 	.word	0x40000800
 80088e0:	50000800 	.word	0x50000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	50000c00 	.word	0x50000c00
 80088ec:	40013400 	.word	0x40013400
 80088f0:	50013400 	.word	0x50013400
 80088f4:	40014000 	.word	0x40014000
 80088f8:	50014000 	.word	0x50014000
 80088fc:	00010007 	.word	0x00010007

08008900 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68da      	ldr	r2, [r3, #12]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0201 	bic.w	r2, r2, #1
 8008916:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008922:	4013      	ands	r3, r2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10f      	bne.n	8008948 <HAL_TIM_Base_Stop_IT+0x48>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6a1a      	ldr	r2, [r3, #32]
 800892e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <HAL_TIM_Base_Stop_IT+0x48>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 0201 	bic.w	r2, r2, #1
 8008946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d020      	beq.n	80089c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01b      	beq.n	80089c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f06f 0202 	mvn.w	r2, #2
 8008992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f931 	bl	8008c10 <HAL_TIM_IC_CaptureCallback>
 80089ae:	e005      	b.n	80089bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f923 	bl	8008bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f934 	bl	8008c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d020      	beq.n	8008a0e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01b      	beq.n	8008a0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f06f 0204 	mvn.w	r2, #4
 80089de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f90b 	bl	8008c10 <HAL_TIM_IC_CaptureCallback>
 80089fa:	e005      	b.n	8008a08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f8fd 	bl	8008bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f90e 	bl	8008c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d020      	beq.n	8008a5a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01b      	beq.n	8008a5a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f06f 0208 	mvn.w	r2, #8
 8008a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2204      	movs	r2, #4
 8008a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f8e5 	bl	8008c10 <HAL_TIM_IC_CaptureCallback>
 8008a46:	e005      	b.n	8008a54 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f8d7 	bl	8008bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f8e8 	bl	8008c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d020      	beq.n	8008aa6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01b      	beq.n	8008aa6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f06f 0210 	mvn.w	r2, #16
 8008a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f8bf 	bl	8008c10 <HAL_TIM_IC_CaptureCallback>
 8008a92:	e005      	b.n	8008aa0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f8b1 	bl	8008bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f8c2 	bl	8008c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00c      	beq.n	8008aca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f06f 0201 	mvn.w	r2, #1
 8008ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7f8 f919 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00c      	beq.n	8008af8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d007      	beq.n	8008af8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f9b4 	bl	8008e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00c      	beq.n	8008b1c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d007      	beq.n	8008b1c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f9ac 	bl	8008e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f87c 	bl	8008c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d007      	beq.n	8008b64 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0220 	mvn.w	r2, #32
 8008b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f974 	bl	8008e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f980 	bl	8008e88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00c      	beq.n	8008bac <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d007      	beq.n	8008bac <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f978 	bl	8008e9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00c      	beq.n	8008bd0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f970 	bl	8008eb0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00c      	beq.n	8008bf4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f968 	bl	8008ec4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8008e0c <TIM_Base_SetConfig+0x1c0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d02b      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a6a      	ldr	r2, [pc, #424]	@ (8008e10 <TIM_Base_SetConfig+0x1c4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d027      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c72:	d023      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c7a:	d01f      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a65      	ldr	r2, [pc, #404]	@ (8008e14 <TIM_Base_SetConfig+0x1c8>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01b      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a64      	ldr	r2, [pc, #400]	@ (8008e18 <TIM_Base_SetConfig+0x1cc>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d017      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a63      	ldr	r2, [pc, #396]	@ (8008e1c <TIM_Base_SetConfig+0x1d0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d013      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a62      	ldr	r2, [pc, #392]	@ (8008e20 <TIM_Base_SetConfig+0x1d4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00f      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a61      	ldr	r2, [pc, #388]	@ (8008e24 <TIM_Base_SetConfig+0x1d8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00b      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a60      	ldr	r2, [pc, #384]	@ (8008e28 <TIM_Base_SetConfig+0x1dc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a5f      	ldr	r2, [pc, #380]	@ (8008e2c <TIM_Base_SetConfig+0x1e0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_Base_SetConfig+0x70>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8008e30 <TIM_Base_SetConfig+0x1e4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d108      	bne.n	8008cce <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a4e      	ldr	r2, [pc, #312]	@ (8008e0c <TIM_Base_SetConfig+0x1c0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d043      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a4d      	ldr	r2, [pc, #308]	@ (8008e10 <TIM_Base_SetConfig+0x1c4>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d03f      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce4:	d03b      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cec:	d037      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a48      	ldr	r2, [pc, #288]	@ (8008e14 <TIM_Base_SetConfig+0x1c8>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d033      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a47      	ldr	r2, [pc, #284]	@ (8008e18 <TIM_Base_SetConfig+0x1cc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d02f      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a46      	ldr	r2, [pc, #280]	@ (8008e1c <TIM_Base_SetConfig+0x1d0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d02b      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a45      	ldr	r2, [pc, #276]	@ (8008e20 <TIM_Base_SetConfig+0x1d4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d027      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a44      	ldr	r2, [pc, #272]	@ (8008e24 <TIM_Base_SetConfig+0x1d8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d023      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a43      	ldr	r2, [pc, #268]	@ (8008e28 <TIM_Base_SetConfig+0x1dc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d01f      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a42      	ldr	r2, [pc, #264]	@ (8008e2c <TIM_Base_SetConfig+0x1e0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d01b      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a41      	ldr	r2, [pc, #260]	@ (8008e30 <TIM_Base_SetConfig+0x1e4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d017      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a40      	ldr	r2, [pc, #256]	@ (8008e34 <TIM_Base_SetConfig+0x1e8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a3f      	ldr	r2, [pc, #252]	@ (8008e38 <TIM_Base_SetConfig+0x1ec>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00f      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a3e      	ldr	r2, [pc, #248]	@ (8008e3c <TIM_Base_SetConfig+0x1f0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00b      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a3d      	ldr	r2, [pc, #244]	@ (8008e40 <TIM_Base_SetConfig+0x1f4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d007      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a3c      	ldr	r2, [pc, #240]	@ (8008e44 <TIM_Base_SetConfig+0x1f8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d003      	beq.n	8008d5e <TIM_Base_SetConfig+0x112>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a3b      	ldr	r2, [pc, #236]	@ (8008e48 <TIM_Base_SetConfig+0x1fc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d108      	bne.n	8008d70 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a1e      	ldr	r2, [pc, #120]	@ (8008e0c <TIM_Base_SetConfig+0x1c0>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d023      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a1d      	ldr	r2, [pc, #116]	@ (8008e10 <TIM_Base_SetConfig+0x1c4>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d01f      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a22      	ldr	r2, [pc, #136]	@ (8008e2c <TIM_Base_SetConfig+0x1e0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d01b      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a21      	ldr	r2, [pc, #132]	@ (8008e30 <TIM_Base_SetConfig+0x1e4>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d017      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a20      	ldr	r2, [pc, #128]	@ (8008e34 <TIM_Base_SetConfig+0x1e8>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d013      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1f      	ldr	r2, [pc, #124]	@ (8008e38 <TIM_Base_SetConfig+0x1ec>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00f      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1e      	ldr	r2, [pc, #120]	@ (8008e3c <TIM_Base_SetConfig+0x1f0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d00b      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e40 <TIM_Base_SetConfig+0x1f4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d007      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e44 <TIM_Base_SetConfig+0x1f8>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d003      	beq.n	8008dde <TIM_Base_SetConfig+0x192>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <TIM_Base_SetConfig+0x1fc>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d103      	bne.n	8008de6 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	691a      	ldr	r2, [r3, #16]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f043 0204 	orr.w	r2, r3, #4
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	601a      	str	r2, [r3, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	50012c00 	.word	0x50012c00
 8008e14:	40000400 	.word	0x40000400
 8008e18:	50000400 	.word	0x50000400
 8008e1c:	40000800 	.word	0x40000800
 8008e20:	50000800 	.word	0x50000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	50000c00 	.word	0x50000c00
 8008e2c:	40013400 	.word	0x40013400
 8008e30:	50013400 	.word	0x50013400
 8008e34:	40014000 	.word	0x40014000
 8008e38:	50014000 	.word	0x50014000
 8008e3c:	40014400 	.word	0x40014400
 8008e40:	50014400 	.word	0x50014400
 8008e44:	40014800 	.word	0x40014800
 8008e48:	50014800 	.word	0x50014800

08008e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e7c:	bf00      	nop
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e042      	b.n	8008f70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d106      	bne.n	8008f02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7f8 f867 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2224      	movs	r2, #36	@ 0x24
 8008f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0201 	bic.w	r2, r2, #1
 8008f18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fd5e 	bl	80099e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fbb9 	bl	80096a0 <UART_SetConfig>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d101      	bne.n	8008f38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e01b      	b.n	8008f70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0201 	orr.w	r2, r2, #1
 8008f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fddd 	bl	8009b28 <UART_CheckIdleState>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	@ 0x28
 8008f7c:	af02      	add	r7, sp, #8
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	f040 808b 	bne.w	80090aa <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_UART_Transmit+0x28>
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e083      	b.n	80090ac <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fae:	2b80      	cmp	r3, #128	@ 0x80
 8008fb0:	d107      	bne.n	8008fc2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fc0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2221      	movs	r2, #33	@ 0x21
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fd2:	f7f8 fddb 	bl	8001b8c <HAL_GetTick>
 8008fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	88fa      	ldrh	r2, [r7, #6]
 8008fdc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	88fa      	ldrh	r2, [r7, #6]
 8008fe4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff0:	d108      	bne.n	8009004 <HAL_UART_Transmit+0x8c>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d104      	bne.n	8009004 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	e003      	b.n	800900c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800900c:	e030      	b.n	8009070 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2200      	movs	r2, #0
 8009016:	2180      	movs	r1, #128	@ 0x80
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fe2f 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d005      	beq.n	8009030 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e03d      	b.n	80090ac <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009044:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	3302      	adds	r3, #2
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	e007      	b.n	800905e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	3301      	adds	r3, #1
 800905c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009064:	b29b      	uxth	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	b29a      	uxth	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009076:	b29b      	uxth	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1c8      	bne.n	800900e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2200      	movs	r2, #0
 8009084:	2140      	movs	r1, #64	@ 0x40
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fdf8 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d005      	beq.n	800909e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e006      	b.n	80090ac <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	e000      	b.n	80090ac <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80090aa:	2302      	movs	r3, #2
  }
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3720      	adds	r7, #32
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b0ae      	sub	sp, #184	@ 0xb8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80090e2:	4013      	ands	r3, r2
 80090e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80090e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d11b      	bne.n	8009128 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d015      	beq.n	8009128 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800910c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d009      	beq.n	8009128 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8297 	beq.w	800964c <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
      }
      return;
 8009126:	e291      	b.n	800964c <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80fd 	beq.w	800932c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009132:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009136:	4b7a      	ldr	r3, [pc, #488]	@ (8009320 <HAL_UART_IRQHandler+0x26c>)
 8009138:	4013      	ands	r3, r2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800913e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009142:	4b78      	ldr	r3, [pc, #480]	@ (8009324 <HAL_UART_IRQHandler+0x270>)
 8009144:	4013      	ands	r3, r2
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 80f0 	beq.w	800932c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800914c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d011      	beq.n	800917c <HAL_UART_IRQHandler+0xc8>
 8009158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800915c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2201      	movs	r2, #1
 800916a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009172:	f043 0201 	orr.w	r2, r3, #1
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800917c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d011      	beq.n	80091ac <HAL_UART_IRQHandler+0xf8>
 8009188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2202      	movs	r2, #2
 800919a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a2:	f043 0204 	orr.w	r2, r3, #4
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d011      	beq.n	80091dc <HAL_UART_IRQHandler+0x128>
 80091b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2204      	movs	r2, #4
 80091ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d2:	f043 0202 	orr.w	r2, r3, #2
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80091dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d017      	beq.n	8009218 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d105      	bne.n	8009200 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80091f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091f8:	4b49      	ldr	r3, [pc, #292]	@ (8009320 <HAL_UART_IRQHandler+0x26c>)
 80091fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2208      	movs	r2, #8
 8009206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920e:	f043 0208 	orr.w	r2, r3, #8
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009218:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800921c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009220:	2b00      	cmp	r3, #0
 8009222:	d012      	beq.n	800924a <HAL_UART_IRQHandler+0x196>
 8009224:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009228:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00c      	beq.n	800924a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009240:	f043 0220 	orr.w	r2, r3, #32
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 81fd 	beq.w	8009650 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800925a:	f003 0320 	and.w	r3, r3, #32
 800925e:	2b00      	cmp	r3, #0
 8009260:	d013      	beq.n	800928a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009262:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009266:	f003 0320 	and.w	r3, r3, #32
 800926a:	2b00      	cmp	r3, #0
 800926c:	d105      	bne.n	800927a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800926e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800929e:	2b40      	cmp	r3, #64	@ 0x40
 80092a0:	d005      	beq.n	80092ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d02e      	beq.n	800930c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fe74 	bl	8009f9c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092be:	2b40      	cmp	r3, #64	@ 0x40
 80092c0:	d120      	bne.n	8009304 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d017      	beq.n	80092fc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092d2:	4a15      	ldr	r2, [pc, #84]	@ (8009328 <HAL_UART_IRQHandler+0x274>)
 80092d4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f8 fe95 	bl	800200c <HAL_DMA_Abort_IT>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d019      	beq.n	800931c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80092f6:	4610      	mov	r0, r2
 80092f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092fa:	e00f      	b.n	800931c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f9c5 	bl	800968c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009302:	e00b      	b.n	800931c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9c1 	bl	800968c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800930a:	e007      	b.n	800931c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9bd 	bl	800968c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800931a:	e199      	b.n	8009650 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800931c:	bf00      	nop
    return;
 800931e:	e197      	b.n	8009650 <HAL_UART_IRQHandler+0x59c>
 8009320:	10000001 	.word	0x10000001
 8009324:	04000120 	.word	0x04000120
 8009328:	0800a069 	.word	0x0800a069

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009330:	2b01      	cmp	r3, #1
 8009332:	f040 8142 	bne.w	80095ba <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800933a:	f003 0310 	and.w	r3, r3, #16
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 813b 	beq.w	80095ba <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8134 	beq.w	80095ba <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2210      	movs	r2, #16
 8009358:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b40      	cmp	r3, #64	@ 0x40
 8009366:	f040 80aa 	bne.w	80094be <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009374:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8009378:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 8084 	beq.w	800948a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009388:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800938c:	429a      	cmp	r2, r3
 800938e:	d27c      	bcs.n	800948a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009396:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a2:	2b81      	cmp	r3, #129	@ 0x81
 80093a4:	d060      	beq.n	8009468 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80093d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80093da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e2      	bne.n	80093a6 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3308      	adds	r3, #8
 80093e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80093ea:	e853 3f00 	ldrex	r3, [r3]
 80093ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009404:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009406:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800940a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e3      	bne.n	80093e0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800942e:	e853 3f00 	ldrex	r3, [r3]
 8009432:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009436:	f023 0310 	bic.w	r3, r3, #16
 800943a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009448:	65bb      	str	r3, [r7, #88]	@ 0x58
 800944a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800944e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e4      	bne.n	8009426 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009462:	4618      	mov	r0, r3
 8009464:	f7f8 fd56 	bl	8001f14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800947a:	b29b      	uxth	r3, r3
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	b29b      	uxth	r3, r3
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f7f8 f976 	bl	8001774 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009488:	e0e4      	b.n	8009654 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009490:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8009494:	429a      	cmp	r2, r3
 8009496:	f040 80dd 	bne.w	8009654 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a2:	2b81      	cmp	r3, #129	@ 0x81
 80094a4:	f040 80d6 	bne.w	8009654 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7f8 f95c 	bl	8001774 <HAL_UARTEx_RxEventCallback>
      return;
 80094bc:	e0ca      	b.n	8009654 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 80bc 	beq.w	8009658 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 80094e0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 80b7 	beq.w	8009658 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800950c:	647b      	str	r3, [r7, #68]	@ 0x44
 800950e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800951a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e4      	bne.n	80094ea <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3308      	adds	r3, #8
 8009526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	623b      	str	r3, [r7, #32]
   return(result);
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009536:	f023 0301 	bic.w	r3, r3, #1
 800953a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3308      	adds	r3, #8
 8009544:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009548:	633a      	str	r2, [r7, #48]	@ 0x30
 800954a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800954e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e1      	bne.n	8009520 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	60fb      	str	r3, [r7, #12]
   return(result);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f023 0310 	bic.w	r3, r3, #16
 8009584:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009592:	61fb      	str	r3, [r7, #28]
 8009594:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009596:	69b9      	ldr	r1, [r7, #24]
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	e841 2300 	strex	r3, r2, [r1]
 800959e:	617b      	str	r3, [r7, #20]
   return(result);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e4      	bne.n	8009570 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2202      	movs	r2, #2
 80095aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095ac:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f8 f8de 	bl	8001774 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095b8:	e04e      	b.n	8009658 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d014      	beq.n	80095f0 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80095ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d105      	bne.n	80095de <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d008      	beq.n	80095f0 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d03a      	beq.n	800965c <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	4798      	blx	r3
    }
    return;
 80095ee:	e035      	b.n	800965c <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <HAL_UART_IRQHandler+0x55c>
 80095fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fd3f 	bl	800a08c <UART_EndTransmit_IT>
    return;
 800960e:	e026      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009610:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009614:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d009      	beq.n	8009630 <HAL_UART_IRQHandler+0x57c>
 800961c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009620:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 fa9d 	bl	800ab68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800962e:	e016      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d010      	beq.n	800965e <HAL_UART_IRQHandler+0x5aa>
 800963c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009640:	2b00      	cmp	r3, #0
 8009642:	da0c      	bge.n	800965e <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f001 fa85 	bl	800ab54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800964a:	e008      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
      return;
 800964c:	bf00      	nop
 800964e:	e006      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
    return;
 8009650:	bf00      	nop
 8009652:	e004      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
      return;
 8009654:	bf00      	nop
 8009656:	e002      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
      return;
 8009658:	bf00      	nop
 800965a:	e000      	b.n	800965e <HAL_UART_IRQHandler+0x5aa>
    return;
 800965c:	bf00      	nop
  }
}
 800965e:	37b8      	adds	r7, #184	@ 0xb8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096a4:	b094      	sub	sp, #80	@ 0x50
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80096b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b7e      	ldr	r3, [pc, #504]	@ (80098b0 <UART_SetConfig+0x210>)
 80096b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	431a      	orrs	r2, r3
 80096c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	431a      	orrs	r2, r3
 80096c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4977      	ldr	r1, [pc, #476]	@ (80098b4 <UART_SetConfig+0x214>)
 80096d8:	4019      	ands	r1, r3
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096e0:	430b      	orrs	r3, r1
 80096e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80096ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f0:	68d9      	ldr	r1, [r3, #12]
 80096f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	ea40 0301 	orr.w	r3, r0, r1
 80096fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	4b6a      	ldr	r3, [pc, #424]	@ (80098b0 <UART_SetConfig+0x210>)
 8009708:	429a      	cmp	r2, r3
 800970a:	d009      	beq.n	8009720 <UART_SetConfig+0x80>
 800970c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	4b69      	ldr	r3, [pc, #420]	@ (80098b8 <UART_SetConfig+0x218>)
 8009712:	429a      	cmp	r2, r3
 8009714:	d004      	beq.n	8009720 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009718:	6a1a      	ldr	r2, [r3, #32]
 800971a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800971c:	4313      	orrs	r3, r2
 800971e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800972a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800972e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009734:	430b      	orrs	r3, r1
 8009736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973e:	f023 000f 	bic.w	r0, r3, #15
 8009742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009744:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	ea40 0301 	orr.w	r3, r0, r1
 800974e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b59      	ldr	r3, [pc, #356]	@ (80098bc <UART_SetConfig+0x21c>)
 8009756:	429a      	cmp	r2, r3
 8009758:	d102      	bne.n	8009760 <UART_SetConfig+0xc0>
 800975a:	2301      	movs	r3, #1
 800975c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800975e:	e029      	b.n	80097b4 <UART_SetConfig+0x114>
 8009760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	4b56      	ldr	r3, [pc, #344]	@ (80098c0 <UART_SetConfig+0x220>)
 8009766:	429a      	cmp	r2, r3
 8009768:	d102      	bne.n	8009770 <UART_SetConfig+0xd0>
 800976a:	2302      	movs	r3, #2
 800976c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800976e:	e021      	b.n	80097b4 <UART_SetConfig+0x114>
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4b53      	ldr	r3, [pc, #332]	@ (80098c4 <UART_SetConfig+0x224>)
 8009776:	429a      	cmp	r2, r3
 8009778:	d102      	bne.n	8009780 <UART_SetConfig+0xe0>
 800977a:	2304      	movs	r3, #4
 800977c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800977e:	e019      	b.n	80097b4 <UART_SetConfig+0x114>
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	4b50      	ldr	r3, [pc, #320]	@ (80098c8 <UART_SetConfig+0x228>)
 8009786:	429a      	cmp	r2, r3
 8009788:	d102      	bne.n	8009790 <UART_SetConfig+0xf0>
 800978a:	2308      	movs	r3, #8
 800978c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800978e:	e011      	b.n	80097b4 <UART_SetConfig+0x114>
 8009790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	4b4d      	ldr	r3, [pc, #308]	@ (80098cc <UART_SetConfig+0x22c>)
 8009796:	429a      	cmp	r2, r3
 8009798:	d102      	bne.n	80097a0 <UART_SetConfig+0x100>
 800979a:	2310      	movs	r3, #16
 800979c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800979e:	e009      	b.n	80097b4 <UART_SetConfig+0x114>
 80097a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	4b42      	ldr	r3, [pc, #264]	@ (80098b0 <UART_SetConfig+0x210>)
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d102      	bne.n	80097b0 <UART_SetConfig+0x110>
 80097aa:	2320      	movs	r3, #32
 80097ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ae:	e001      	b.n	80097b4 <UART_SetConfig+0x114>
 80097b0:	2300      	movs	r3, #0
 80097b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4b3d      	ldr	r3, [pc, #244]	@ (80098b0 <UART_SetConfig+0x210>)
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d005      	beq.n	80097ca <UART_SetConfig+0x12a>
 80097be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b3d      	ldr	r3, [pc, #244]	@ (80098b8 <UART_SetConfig+0x218>)
 80097c4:	429a      	cmp	r2, r3
 80097c6:	f040 8085 	bne.w	80098d4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80097ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097cc:	2200      	movs	r2, #0
 80097ce:	623b      	str	r3, [r7, #32]
 80097d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80097d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80097d6:	f7fd f9e3 	bl	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 80097da:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80097dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80e8 	beq.w	80099b4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e8:	4a39      	ldr	r2, [pc, #228]	@ (80098d0 <UART_SetConfig+0x230>)
 80097ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ee:	461a      	mov	r2, r3
 80097f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	4413      	add	r3, r2
 8009802:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009804:	429a      	cmp	r2, r3
 8009806:	d305      	bcc.n	8009814 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800980e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009810:	429a      	cmp	r2, r3
 8009812:	d903      	bls.n	800981c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800981a:	e048      	b.n	80098ae <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800981c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800981e:	2200      	movs	r2, #0
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	61fa      	str	r2, [r7, #28]
 8009824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009828:	4a29      	ldr	r2, [pc, #164]	@ (80098d0 <UART_SetConfig+0x230>)
 800982a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800982e:	b29b      	uxth	r3, r3
 8009830:	2200      	movs	r2, #0
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	617a      	str	r2, [r7, #20]
 8009836:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800983a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800983e:	f7f6 fd1b 	bl	8000278 <__aeabi_uldivmod>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4610      	mov	r0, r2
 8009848:	4619      	mov	r1, r3
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	020b      	lsls	r3, r1, #8
 8009854:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009858:	0202      	lsls	r2, r0, #8
 800985a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985c:	6849      	ldr	r1, [r1, #4]
 800985e:	0849      	lsrs	r1, r1, #1
 8009860:	2000      	movs	r0, #0
 8009862:	460c      	mov	r4, r1
 8009864:	4605      	mov	r5, r0
 8009866:	eb12 0804 	adds.w	r8, r2, r4
 800986a:	eb43 0905 	adc.w	r9, r3, r5
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	60bb      	str	r3, [r7, #8]
 8009876:	60fa      	str	r2, [r7, #12]
 8009878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800987c:	4640      	mov	r0, r8
 800987e:	4649      	mov	r1, r9
 8009880:	f7f6 fcfa 	bl	8000278 <__aeabi_uldivmod>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4613      	mov	r3, r2
 800988a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800988c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800988e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009892:	d308      	bcc.n	80098a6 <UART_SetConfig+0x206>
 8009894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800989a:	d204      	bcs.n	80098a6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800989c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098a2:	60da      	str	r2, [r3, #12]
 80098a4:	e003      	b.n	80098ae <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80098ac:	e082      	b.n	80099b4 <UART_SetConfig+0x314>
 80098ae:	e081      	b.n	80099b4 <UART_SetConfig+0x314>
 80098b0:	46002400 	.word	0x46002400
 80098b4:	cfff69f3 	.word	0xcfff69f3
 80098b8:	56002400 	.word	0x56002400
 80098bc:	40013800 	.word	0x40013800
 80098c0:	40004400 	.word	0x40004400
 80098c4:	40004800 	.word	0x40004800
 80098c8:	40004c00 	.word	0x40004c00
 80098cc:	40005000 	.word	0x40005000
 80098d0:	0800b140 	.word	0x0800b140
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098dc:	d13c      	bne.n	8009958 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80098de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e0:	2200      	movs	r2, #0
 80098e2:	603b      	str	r3, [r7, #0]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098ea:	f7fd f959 	bl	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 80098ee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d05e      	beq.n	80099b4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fa:	4a39      	ldr	r2, [pc, #228]	@ (80099e0 <UART_SetConfig+0x340>)
 80098fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009900:	461a      	mov	r2, r3
 8009902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009904:	fbb3 f3f2 	udiv	r3, r3, r2
 8009908:	005a      	lsls	r2, r3, #1
 800990a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	441a      	add	r2, r3
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	fbb2 f3f3 	udiv	r3, r2, r3
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800991c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800991e:	2b0f      	cmp	r3, #15
 8009920:	d916      	bls.n	8009950 <UART_SetConfig+0x2b0>
 8009922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009928:	d212      	bcs.n	8009950 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800992a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992c:	b29b      	uxth	r3, r3
 800992e:	f023 030f 	bic.w	r3, r3, #15
 8009932:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	b29b      	uxth	r3, r3
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	b29a      	uxth	r2, r3
 8009940:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009942:	4313      	orrs	r3, r2
 8009944:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800994c:	60da      	str	r2, [r3, #12]
 800994e:	e031      	b.n	80099b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009956:	e02d      	b.n	80099b4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800995a:	2200      	movs	r2, #0
 800995c:	469a      	mov	sl, r3
 800995e:	4693      	mov	fp, r2
 8009960:	4650      	mov	r0, sl
 8009962:	4659      	mov	r1, fp
 8009964:	f7fd f91c 	bl	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009968:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800996a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d021      	beq.n	80099b4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009974:	4a1a      	ldr	r2, [pc, #104]	@ (80099e0 <UART_SetConfig+0x340>)
 8009976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800997a:	461a      	mov	r2, r3
 800997c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800997e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	441a      	add	r2, r3
 800998a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009992:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009996:	2b0f      	cmp	r3, #15
 8009998:	d909      	bls.n	80099ae <UART_SetConfig+0x30e>
 800999a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800999c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099a0:	d205      	bcs.n	80099ae <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	60da      	str	r2, [r3, #12]
 80099ac:	e002      	b.n	80099b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	2201      	movs	r2, #1
 80099c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c6:	2200      	movs	r2, #0
 80099c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	2200      	movs	r2, #0
 80099ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3750      	adds	r7, #80	@ 0x50
 80099d8:	46bd      	mov	sp, r7
 80099da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099de:	bf00      	nop
 80099e0:	0800b140 	.word	0x0800b140

080099e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00a      	beq.n	8009a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a78:	f003 0310 	and.w	r3, r3, #16
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9a:	f003 0320 	and.w	r3, r3, #32
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d01a      	beq.n	8009afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ae2:	d10a      	bne.n	8009afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	430a      	orrs	r2, r1
 8009b1a:	605a      	str	r2, [r3, #4]
  }
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b098      	sub	sp, #96	@ 0x60
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b38:	f7f8 f828 	bl	8001b8c <HAL_GetTick>
 8009b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d12f      	bne.n	8009bac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b54:	2200      	movs	r2, #0
 8009b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f88e 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d022      	beq.n	8009bac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e6      	bne.n	8009b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e063      	b.n	8009c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d149      	bne.n	8009c4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f857 	bl	8009c7c <UART_WaitOnFlagUntilTimeout>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d03c      	beq.n	8009c4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	623b      	str	r3, [r7, #32]
   return(result);
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e6      	bne.n	8009bd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3308      	adds	r3, #8
 8009c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	e853 3f00 	ldrex	r3, [r3]
 8009c14:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f023 0301 	bic.w	r3, r3, #1
 8009c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3308      	adds	r3, #8
 8009c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c26:	61fa      	str	r2, [r7, #28]
 8009c28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	69b9      	ldr	r1, [r7, #24]
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	e841 2300 	strex	r3, r2, [r1]
 8009c32:	617b      	str	r3, [r7, #20]
   return(result);
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1e5      	bne.n	8009c06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e012      	b.n	8009c74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2220      	movs	r2, #32
 8009c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3758      	adds	r7, #88	@ 0x58
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c8c:	e04f      	b.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c94:	d04b      	beq.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c96:	f7f7 ff79 	bl	8001b8c <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d302      	bcc.n	8009cac <UART_WaitOnFlagUntilTimeout+0x30>
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e04e      	b.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d037      	beq.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b80      	cmp	r3, #128	@ 0x80
 8009cc2:	d034      	beq.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2b40      	cmp	r3, #64	@ 0x40
 8009cc8:	d031      	beq.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f003 0308 	and.w	r3, r3, #8
 8009cd4:	2b08      	cmp	r3, #8
 8009cd6:	d110      	bne.n	8009cfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2208      	movs	r2, #8
 8009cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f95b 	bl	8009f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2208      	movs	r2, #8
 8009cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e029      	b.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d08:	d111      	bne.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f941 	bl	8009f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e00f      	b.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	69da      	ldr	r2, [r3, #28]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4013      	ands	r3, r2
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d0a0      	beq.n	8009c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b0a3      	sub	sp, #140	@ 0x8c
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	4613      	mov	r3, r2
 8009d64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	88fa      	ldrh	r2, [r7, #6]
 8009d70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	88fa      	ldrh	r2, [r7, #6]
 8009d78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d8a:	d10e      	bne.n	8009daa <UART_Start_Receive_IT+0x52>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <UART_Start_Receive_IT+0x48>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009d9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009d9e:	e02d      	b.n	8009dfc <UART_Start_Receive_IT+0xa4>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	22ff      	movs	r2, #255	@ 0xff
 8009da4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009da8:	e028      	b.n	8009dfc <UART_Start_Receive_IT+0xa4>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10d      	bne.n	8009dce <UART_Start_Receive_IT+0x76>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d104      	bne.n	8009dc4 <UART_Start_Receive_IT+0x6c>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	22ff      	movs	r2, #255	@ 0xff
 8009dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009dc2:	e01b      	b.n	8009dfc <UART_Start_Receive_IT+0xa4>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	227f      	movs	r2, #127	@ 0x7f
 8009dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009dcc:	e016      	b.n	8009dfc <UART_Start_Receive_IT+0xa4>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dd6:	d10d      	bne.n	8009df4 <UART_Start_Receive_IT+0x9c>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <UART_Start_Receive_IT+0x92>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	227f      	movs	r2, #127	@ 0x7f
 8009de4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009de8:	e008      	b.n	8009dfc <UART_Start_Receive_IT+0xa4>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	223f      	movs	r2, #63	@ 0x3f
 8009dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009df2:	e003      	b.n	8009dfc <UART_Start_Receive_IT+0xa4>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2222      	movs	r2, #34	@ 0x22
 8009e08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	3308      	adds	r3, #8
 8009e12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e16:	e853 3f00 	ldrex	r3, [r3]
 8009e1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e1e:	f043 0301 	orr.w	r3, r3, #1
 8009e22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e30:	673a      	str	r2, [r7, #112]	@ 0x70
 8009e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009e36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009e38:	e841 2300 	strex	r3, r2, [r1]
 8009e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009e3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e3      	bne.n	8009e0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e4c:	d14f      	bne.n	8009eee <UART_Start_Receive_IT+0x196>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d349      	bcc.n	8009eee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e62:	d107      	bne.n	8009e74 <UART_Start_Receive_IT+0x11c>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4a47      	ldr	r2, [pc, #284]	@ (8009f8c <UART_Start_Receive_IT+0x234>)
 8009e70:	675a      	str	r2, [r3, #116]	@ 0x74
 8009e72:	e002      	b.n	8009e7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	4a46      	ldr	r2, [pc, #280]	@ (8009f90 <UART_Start_Receive_IT+0x238>)
 8009e78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d01a      	beq.n	8009eb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e8a:	e853 3f00 	ldrex	r3, [r3]
 8009e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ea6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009eaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009eac:	e841 2300 	strex	r3, r2, [r1]
 8009eb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d1e4      	bne.n	8009e82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec2:	e853 3f00 	ldrex	r3, [r3]
 8009ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3308      	adds	r3, #8
 8009ed6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009ed8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009eda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009edc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ee0:	e841 2300 	strex	r3, r2, [r1]
 8009ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1e5      	bne.n	8009eb8 <UART_Start_Receive_IT+0x160>
 8009eec:	e046      	b.n	8009f7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ef6:	d107      	bne.n	8009f08 <UART_Start_Receive_IT+0x1b0>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4a24      	ldr	r2, [pc, #144]	@ (8009f94 <UART_Start_Receive_IT+0x23c>)
 8009f04:	675a      	str	r2, [r3, #116]	@ 0x74
 8009f06:	e002      	b.n	8009f0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a23      	ldr	r2, [pc, #140]	@ (8009f98 <UART_Start_Receive_IT+0x240>)
 8009f0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d019      	beq.n	8009f4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1e:	e853 3f00 	ldrex	r3, [r3]
 8009f22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009f2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	461a      	mov	r2, r3
 8009f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f3c:	e841 2300 	strex	r3, r2, [r1]
 8009f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1e6      	bne.n	8009f16 <UART_Start_Receive_IT+0x1be>
 8009f48:	e018      	b.n	8009f7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	e853 3f00 	ldrex	r3, [r3]
 8009f56:	613b      	str	r3, [r7, #16]
   return(result);
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f043 0320 	orr.w	r3, r3, #32
 8009f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f68:	623b      	str	r3, [r7, #32]
 8009f6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6c:	69f9      	ldr	r1, [r7, #28]
 8009f6e:	6a3a      	ldr	r2, [r7, #32]
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e6      	bne.n	8009f4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	378c      	adds	r7, #140	@ 0x8c
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	0800a7dd 	.word	0x0800a7dd
 8009f90:	0800a46d 	.word	0x0800a46d
 8009f94:	0800a2a9 	.word	0x0800a2a9
 8009f98:	0800a0e5 	.word	0x0800a0e5

08009f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b095      	sub	sp, #84	@ 0x54
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009fc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e6      	bne.n	8009fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3308      	adds	r3, #8
 8009fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	e853 3f00 	ldrex	r3, [r3]
 8009fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fec:	f023 0301 	bic.w	r3, r3, #1
 8009ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a000:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e3      	bne.n	8009fd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a012:	2b01      	cmp	r3, #1
 800a014:	d118      	bne.n	800a048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	60bb      	str	r3, [r7, #8]
   return(result);
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f023 0310 	bic.w	r3, r3, #16
 800a02a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	461a      	mov	r2, r3
 800a032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a034:	61bb      	str	r3, [r7, #24]
 800a036:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6979      	ldr	r1, [r7, #20]
 800a03a:	69ba      	ldr	r2, [r7, #24]
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	613b      	str	r3, [r7, #16]
   return(result);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e6      	bne.n	800a016 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a05c:	bf00      	nop
 800a05e:	3754      	adds	r7, #84	@ 0x54
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7ff fb04 	bl	800968c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	e853 3f00 	ldrex	r3, [r3]
 800a0a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0a8:	61fb      	str	r3, [r7, #28]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	61bb      	str	r3, [r7, #24]
 800a0b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b6:	6979      	ldr	r1, [r7, #20]
 800a0b8:	69ba      	ldr	r2, [r7, #24]
 800a0ba:	e841 2300 	strex	r3, r2, [r1]
 800a0be:	613b      	str	r3, [r7, #16]
   return(result);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e6      	bne.n	800a094 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff fac5 	bl	8009664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0da:	bf00      	nop
 800a0dc:	3720      	adds	r7, #32
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b09c      	sub	sp, #112	@ 0x70
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a0f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0fc:	2b22      	cmp	r3, #34	@ 0x22
 800a0fe:	f040 80c3 	bne.w	800a288 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a108:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a10c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a110:	b2d9      	uxtb	r1, r3
 800a112:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a116:	b2da      	uxtb	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a11c:	400a      	ands	r2, r1
 800a11e:	b2d2      	uxtb	r2, r2
 800a120:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a132:	b29b      	uxth	r3, r3
 800a134:	3b01      	subs	r3, #1
 800a136:	b29a      	uxth	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 80a6 	bne.w	800a298 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a15a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a15c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a160:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a16a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a16c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a170:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e6      	bne.n	800a14c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a190:	f023 0301 	bic.w	r3, r3, #1
 800a194:	667b      	str	r3, [r7, #100]	@ 0x64
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a19e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a1a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2220      	movs	r2, #32
 800a1b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a35      	ldr	r2, [pc, #212]	@ (800a2a0 <UART_RxISR_8BIT+0x1bc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d024      	beq.n	800a21a <UART_RxISR_8BIT+0x136>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a33      	ldr	r2, [pc, #204]	@ (800a2a4 <UART_RxISR_8BIT+0x1c0>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d01f      	beq.n	800a21a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d018      	beq.n	800a21a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a1fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a206:	633b      	str	r3, [r7, #48]	@ 0x30
 800a208:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a20c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e6      	bne.n	800a1e8 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d12e      	bne.n	800a280 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	60fb      	str	r3, [r7, #12]
   return(result);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a246:	61fb      	str	r3, [r7, #28]
 800a248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	69b9      	ldr	r1, [r7, #24]
 800a24c:	69fa      	ldr	r2, [r7, #28]
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	617b      	str	r3, [r7, #20]
   return(result);
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b10      	cmp	r3, #16
 800a266:	d103      	bne.n	800a270 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2210      	movs	r2, #16
 800a26e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7f7 fa7b 	bl	8001774 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a27e:	e00b      	b.n	800a298 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff f9f9 	bl	8009678 <HAL_UART_RxCpltCallback>
}
 800a286:	e007      	b.n	800a298 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	699a      	ldr	r2, [r3, #24]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0208 	orr.w	r2, r2, #8
 800a296:	619a      	str	r2, [r3, #24]
}
 800a298:	bf00      	nop
 800a29a:	3770      	adds	r7, #112	@ 0x70
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	46002400 	.word	0x46002400
 800a2a4:	56002400 	.word	0x56002400

0800a2a8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b09c      	sub	sp, #112	@ 0x70
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a2b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2c0:	2b22      	cmp	r3, #34	@ 0x22
 800a2c2:	f040 80c3 	bne.w	800a44c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a2da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a2de:	4013      	ands	r3, r2
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ea:	1c9a      	adds	r2, r3, #2
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a308:	b29b      	uxth	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f040 80a6 	bne.w	800a45c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a324:	667b      	str	r3, [r7, #100]	@ 0x64
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a32e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a330:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a334:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e6      	bne.n	800a310 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	3308      	adds	r3, #8
 800a348:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34c:	e853 3f00 	ldrex	r3, [r3]
 800a350:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	f023 0301 	bic.w	r3, r3, #1
 800a358:	663b      	str	r3, [r7, #96]	@ 0x60
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3308      	adds	r3, #8
 800a360:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a362:	643a      	str	r2, [r7, #64]	@ 0x40
 800a364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a368:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a36a:	e841 2300 	strex	r3, r2, [r1]
 800a36e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1e5      	bne.n	800a342 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2220      	movs	r2, #32
 800a37a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a35      	ldr	r2, [pc, #212]	@ (800a464 <UART_RxISR_16BIT+0x1bc>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d024      	beq.n	800a3de <UART_RxISR_16BIT+0x136>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a33      	ldr	r2, [pc, #204]	@ (800a468 <UART_RxISR_16BIT+0x1c0>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d01f      	beq.n	800a3de <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d018      	beq.n	800a3de <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a3c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e6      	bne.n	800a3ac <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d12e      	bne.n	800a444 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f023 0310 	bic.w	r3, r3, #16
 800a400:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40e:	6979      	ldr	r1, [r7, #20]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	e841 2300 	strex	r3, r2, [r1]
 800a416:	613b      	str	r3, [r7, #16]
   return(result);
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e6      	bne.n	800a3ec <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	f003 0310 	and.w	r3, r3, #16
 800a428:	2b10      	cmp	r3, #16
 800a42a:	d103      	bne.n	800a434 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2210      	movs	r2, #16
 800a432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7f7 f999 	bl	8001774 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a442:	e00b      	b.n	800a45c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff f917 	bl	8009678 <HAL_UART_RxCpltCallback>
}
 800a44a:	e007      	b.n	800a45c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	699a      	ldr	r2, [r3, #24]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f042 0208 	orr.w	r2, r2, #8
 800a45a:	619a      	str	r2, [r3, #24]
}
 800a45c:	bf00      	nop
 800a45e:	3770      	adds	r7, #112	@ 0x70
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	46002400 	.word	0x46002400
 800a468:	56002400 	.word	0x56002400

0800a46c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b0ac      	sub	sp, #176	@ 0xb0
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a47a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	689b      	ldr	r3, [r3, #8]
 800a498:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4a2:	2b22      	cmp	r3, #34	@ 0x22
 800a4a4:	f040 8188 	bne.w	800a7b8 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a4ae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4b2:	e12b      	b.n	800a70c <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a4c2:	b2d9      	uxtb	r1, r3
 800a4c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ce:	400a      	ands	r2, r1
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a4fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b00      	cmp	r3, #0
 800a504:	d053      	beq.n	800a5ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d011      	beq.n	800a536 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2201      	movs	r2, #1
 800a524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52c:	f043 0201 	orr.w	r2, r3, #1
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d011      	beq.n	800a566 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a546:	f003 0301 	and.w	r3, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00b      	beq.n	800a566 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2202      	movs	r2, #2
 800a554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a55c:	f043 0204 	orr.w	r2, r3, #4
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d011      	beq.n	800a596 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00b      	beq.n	800a596 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2204      	movs	r2, #4
 800a584:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a58c:	f043 0202 	orr.w	r2, r3, #2
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d006      	beq.n	800a5ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff f873 	bl	800968c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f040 80a8 	bne.w	800a70c <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5c4:	e853 3f00 	ldrex	r3, [r3]
 800a5c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a5ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5e0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a5e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a5ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e4      	bne.n	800a5bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a608:	f023 0301 	bic.w	r3, r3, #1
 800a60c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3308      	adds	r3, #8
 800a616:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a61a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a61c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a620:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a628:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e1      	bne.n	800a5f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a62      	ldr	r2, [pc, #392]	@ (800a7d0 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d026      	beq.n	800a69a <UART_RxISR_8BIT_FIFOEN+0x22e>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a60      	ldr	r2, [pc, #384]	@ (800a7d4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d021      	beq.n	800a69a <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01a      	beq.n	800a69a <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a66c:	e853 3f00 	ldrex	r3, [r3]
 800a670:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a674:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a678:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a686:	657b      	str	r3, [r7, #84]	@ 0x54
 800a688:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a68c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e4      	bne.n	800a664 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d130      	bne.n	800a704 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	f023 0310 	bic.w	r3, r3, #16
 800a6bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e4      	bne.n	800a6a8 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	f003 0310 	and.w	r3, r3, #16
 800a6e8:	2b10      	cmp	r3, #16
 800a6ea:	d103      	bne.n	800a6f4 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2210      	movs	r2, #16
 800a6f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7f7 f839 	bl	8001774 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a702:	e00e      	b.n	800a722 <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7fe ffb7 	bl	8009678 <HAL_UART_RxCpltCallback>
        break;
 800a70a:	e00a      	b.n	800a722 <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a70c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a710:	2b00      	cmp	r3, #0
 800a712:	d006      	beq.n	800a722 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800a714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f aec9 	bne.w	800a4b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a728:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a72c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a730:	2b00      	cmp	r3, #0
 800a732:	d049      	beq.n	800a7c8 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a73a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a73e:	429a      	cmp	r2, r3
 800a740:	d242      	bcs.n	800a7c8 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3308      	adds	r3, #8
 800a748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	61fb      	str	r3, [r7, #28]
   return(result);
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e3      	bne.n	800a742 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a16      	ldr	r2, [pc, #88]	@ (800a7d8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800a77e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f043 0320 	orr.w	r3, r3, #32
 800a794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a7a2:	61bb      	str	r3, [r7, #24]
 800a7a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a6:	6979      	ldr	r1, [r7, #20]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e4      	bne.n	800a780 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a7b6:	e007      	b.n	800a7c8 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699a      	ldr	r2, [r3, #24]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0208 	orr.w	r2, r2, #8
 800a7c6:	619a      	str	r2, [r3, #24]
}
 800a7c8:	bf00      	nop
 800a7ca:	37b0      	adds	r7, #176	@ 0xb0
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	46002400 	.word	0x46002400
 800a7d4:	56002400 	.word	0x56002400
 800a7d8:	0800a0e5 	.word	0x0800a0e5

0800a7dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b0ae      	sub	sp, #184	@ 0xb8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a7ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a812:	2b22      	cmp	r3, #34	@ 0x22
 800a814:	f040 818c 	bne.w	800ab30 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a81e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a822:	e12f      	b.n	800aa84 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a836:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a83a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a83e:	4013      	ands	r3, r2
 800a840:	b29a      	uxth	r2, r3
 800a842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a846:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a84c:	1c9a      	adds	r2, r3, #2
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a858:	b29b      	uxth	r3, r3
 800a85a:	3b01      	subs	r3, #1
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a86e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b00      	cmp	r3, #0
 800a878:	d053      	beq.n	800a922 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a87a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d011      	beq.n	800a8aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800a886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00b      	beq.n	800a8aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2201      	movs	r2, #1
 800a898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a0:	f043 0201 	orr.w	r2, r3, #1
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8ae:	f003 0302 	and.w	r3, r3, #2
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d011      	beq.n	800a8da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a8b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d0:	f043 0204 	orr.w	r2, r3, #4
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8de:	f003 0304 	and.w	r3, r3, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d011      	beq.n	800a90a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a8e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00b      	beq.n	800a90a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2204      	movs	r2, #4
 800a8f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a900:	f043 0202 	orr.w	r2, r3, #2
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7fe feb9 	bl	800968c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a928:	b29b      	uxth	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f040 80aa 	bne.w	800aa84 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a93e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	461a      	mov	r2, r3
 800a94e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a952:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a956:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a95a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e2      	bne.n	800a930 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3308      	adds	r3, #8
 800a970:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a974:	e853 3f00 	ldrex	r3, [r3]
 800a978:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a97a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a97c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a980:	f023 0301 	bic.w	r3, r3, #1
 800a984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a992:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a994:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a998:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a9a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e1      	bne.n	800a96a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a62      	ldr	r2, [pc, #392]	@ (800ab48 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d026      	beq.n	800aa12 <UART_RxISR_16BIT_FIFOEN+0x236>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a60      	ldr	r2, [pc, #384]	@ (800ab4c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d021      	beq.n	800aa12 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d01a      	beq.n	800aa12 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e4:	e853 3f00 	ldrex	r3, [r3]
 800a9e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a9ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a9f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a9fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa06:	e841 2300 	strex	r3, r2, [r1]
 800aa0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1e4      	bne.n	800a9dc <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d130      	bne.n	800aa7c <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa30:	f023 0310 	bic.w	r3, r3, #16
 800aa34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa42:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e4      	bne.n	800aa20 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b10      	cmp	r3, #16
 800aa62:	d103      	bne.n	800aa6c <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2210      	movs	r2, #16
 800aa6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7f6 fe7d 	bl	8001774 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800aa7a:	e00e      	b.n	800aa9a <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fe fdfb 	bl	8009678 <HAL_UART_RxCpltCallback>
        break;
 800aa82:	e00a      	b.n	800aa9a <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d006      	beq.n	800aa9a <UART_RxISR_16BIT_FIFOEN+0x2be>
 800aa8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800aa90:	f003 0320 	and.w	r3, r3, #32
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f47f aec5 	bne.w	800a824 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aaa0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aaa4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d049      	beq.n	800ab40 <UART_RxISR_16BIT_FIFOEN+0x364>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aab2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d242      	bcs.n	800ab40 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3308      	adds	r3, #8
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	623b      	str	r3, [r7, #32]
   return(result);
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3308      	adds	r3, #8
 800aada:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800aade:	633a      	str	r2, [r7, #48]	@ 0x30
 800aae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aae6:	e841 2300 	strex	r3, r2, [r1]
 800aaea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aaec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1e3      	bne.n	800aaba <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a16      	ldr	r2, [pc, #88]	@ (800ab50 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800aaf6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f043 0320 	orr.w	r3, r3, #32
 800ab0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ab1a:	61fb      	str	r3, [r7, #28]
 800ab1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1e:	69b9      	ldr	r1, [r7, #24]
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	617b      	str	r3, [r7, #20]
   return(result);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e4      	bne.n	800aaf8 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab2e:	e007      	b.n	800ab40 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0208 	orr.w	r2, r2, #8
 800ab3e:	619a      	str	r2, [r3, #24]
}
 800ab40:	bf00      	nop
 800ab42:	37b8      	adds	r7, #184	@ 0xb8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	46002400 	.word	0x46002400
 800ab4c:	56002400 	.word	0x56002400
 800ab50:	0800a2a9 	.word	0x0800a2a9

0800ab54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d101      	bne.n	800ab92 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e027      	b.n	800abe2 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2224      	movs	r2, #36	@ 0x24
 800ab9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f022 0201 	bic.w	r2, r2, #1
 800abb8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800abc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b084      	sub	sp, #16
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d101      	bne.n	800ac06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac02:	2302      	movs	r3, #2
 800ac04:	e02d      	b.n	800ac62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2224      	movs	r2, #36	@ 0x24
 800ac12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f022 0201 	bic.w	r2, r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f8ae 	bl	800ada4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2220      	movs	r2, #32
 800ac54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d101      	bne.n	800ac82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac7e:	2302      	movs	r3, #2
 800ac80:	e02d      	b.n	800acde <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2224      	movs	r2, #36	@ 0x24
 800ac8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 0201 	bic.w	r2, r2, #1
 800aca8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f870 	bl	800ada4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2220      	movs	r2, #32
 800acd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b08c      	sub	sp, #48	@ 0x30
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	4613      	mov	r3, r2
 800acf2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d14a      	bne.n	800ad9a <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800ad0a:	88fb      	ldrh	r3, [r7, #6]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e043      	b.n	800ad9c <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad1e:	2b40      	cmp	r3, #64	@ 0x40
 800ad20:	d107      	bne.n	800ad32 <HAL_UARTEx_ReceiveToIdle_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689a      	ldr	r2, [r3, #8]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad30:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2201      	movs	r2, #1
 800ad36:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	461a      	mov	r2, r3
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff f807 	bl	8009d58 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d11d      	bne.n	800ad8e <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2210      	movs	r2, #16
 800ad58:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	617b      	str	r3, [r7, #20]
   return(result);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	f043 0310 	orr.w	r3, r3, #16
 800ad6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad7a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6a39      	ldr	r1, [r7, #32]
 800ad7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <HAL_UARTEx_ReceiveToIdle_IT+0x74>
 800ad8c:	e002      	b.n	800ad94 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800ad94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad98:	e000      	b.n	800ad9c <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800ad9a:	2302      	movs	r3, #2
  }
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3730      	adds	r7, #48	@ 0x30
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d108      	bne.n	800adc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adc4:	e031      	b.n	800ae2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adc6:	2308      	movs	r3, #8
 800adc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adca:	2308      	movs	r3, #8
 800adcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	0e5b      	lsrs	r3, r3, #25
 800add6:	b2db      	uxtb	r3, r3
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	0f5b      	lsrs	r3, r3, #29
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adee:	7bbb      	ldrb	r3, [r7, #14]
 800adf0:	7b3a      	ldrb	r2, [r7, #12]
 800adf2:	4911      	ldr	r1, [pc, #68]	@ (800ae38 <UARTEx_SetNbDataToProcess+0x94>)
 800adf4:	5c8a      	ldrb	r2, [r1, r2]
 800adf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adfa:	7b3a      	ldrb	r2, [r7, #12]
 800adfc:	490f      	ldr	r1, [pc, #60]	@ (800ae3c <UARTEx_SetNbDataToProcess+0x98>)
 800adfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae00:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae0c:	7bfb      	ldrb	r3, [r7, #15]
 800ae0e:	7b7a      	ldrb	r2, [r7, #13]
 800ae10:	4909      	ldr	r1, [pc, #36]	@ (800ae38 <UARTEx_SetNbDataToProcess+0x94>)
 800ae12:	5c8a      	ldrb	r2, [r1, r2]
 800ae14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae18:	7b7a      	ldrb	r2, [r7, #13]
 800ae1a:	4908      	ldr	r1, [pc, #32]	@ (800ae3c <UARTEx_SetNbDataToProcess+0x98>)
 800ae1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae2a:	bf00      	nop
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	0800b158 	.word	0x0800b158
 800ae3c:	0800b160 	.word	0x0800b160

0800ae40 <malloc>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	@ (800ae4c <malloc+0xc>)
 800ae42:	4601      	mov	r1, r0
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f000 b825 	b.w	800ae94 <_malloc_r>
 800ae4a:	bf00      	nop
 800ae4c:	2000000c 	.word	0x2000000c

0800ae50 <sbrk_aligned>:
 800ae50:	b570      	push	{r4, r5, r6, lr}
 800ae52:	4e0f      	ldr	r6, [pc, #60]	@ (800ae90 <sbrk_aligned+0x40>)
 800ae54:	460c      	mov	r4, r1
 800ae56:	4605      	mov	r5, r0
 800ae58:	6831      	ldr	r1, [r6, #0]
 800ae5a:	b911      	cbnz	r1, 800ae62 <sbrk_aligned+0x12>
 800ae5c:	f000 f8ae 	bl	800afbc <_sbrk_r>
 800ae60:	6030      	str	r0, [r6, #0]
 800ae62:	4621      	mov	r1, r4
 800ae64:	4628      	mov	r0, r5
 800ae66:	f000 f8a9 	bl	800afbc <_sbrk_r>
 800ae6a:	1c43      	adds	r3, r0, #1
 800ae6c:	d103      	bne.n	800ae76 <sbrk_aligned+0x26>
 800ae6e:	f04f 34ff 	mov.w	r4, #4294967295
 800ae72:	4620      	mov	r0, r4
 800ae74:	bd70      	pop	{r4, r5, r6, pc}
 800ae76:	1cc4      	adds	r4, r0, #3
 800ae78:	f024 0403 	bic.w	r4, r4, #3
 800ae7c:	42a0      	cmp	r0, r4
 800ae7e:	d0f8      	beq.n	800ae72 <sbrk_aligned+0x22>
 800ae80:	1a21      	subs	r1, r4, r0
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f89a 	bl	800afbc <_sbrk_r>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d1f2      	bne.n	800ae72 <sbrk_aligned+0x22>
 800ae8c:	e7ef      	b.n	800ae6e <sbrk_aligned+0x1e>
 800ae8e:	bf00      	nop
 800ae90:	200002b8 	.word	0x200002b8

0800ae94 <_malloc_r>:
 800ae94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae98:	1ccd      	adds	r5, r1, #3
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	f025 0503 	bic.w	r5, r5, #3
 800aea0:	3508      	adds	r5, #8
 800aea2:	2d0c      	cmp	r5, #12
 800aea4:	bf38      	it	cc
 800aea6:	250c      	movcc	r5, #12
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	db01      	blt.n	800aeb0 <_malloc_r+0x1c>
 800aeac:	42a9      	cmp	r1, r5
 800aeae:	d904      	bls.n	800aeba <_malloc_r+0x26>
 800aeb0:	230c      	movs	r3, #12
 800aeb2:	6033      	str	r3, [r6, #0]
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af90 <_malloc_r+0xfc>
 800aebe:	f000 f869 	bl	800af94 <__malloc_lock>
 800aec2:	f8d8 3000 	ldr.w	r3, [r8]
 800aec6:	461c      	mov	r4, r3
 800aec8:	bb44      	cbnz	r4, 800af1c <_malloc_r+0x88>
 800aeca:	4629      	mov	r1, r5
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff ffbf 	bl	800ae50 <sbrk_aligned>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	4604      	mov	r4, r0
 800aed6:	d158      	bne.n	800af8a <_malloc_r+0xf6>
 800aed8:	f8d8 4000 	ldr.w	r4, [r8]
 800aedc:	4627      	mov	r7, r4
 800aede:	2f00      	cmp	r7, #0
 800aee0:	d143      	bne.n	800af6a <_malloc_r+0xd6>
 800aee2:	2c00      	cmp	r4, #0
 800aee4:	d04b      	beq.n	800af7e <_malloc_r+0xea>
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	4639      	mov	r1, r7
 800aeea:	4630      	mov	r0, r6
 800aeec:	eb04 0903 	add.w	r9, r4, r3
 800aef0:	f000 f864 	bl	800afbc <_sbrk_r>
 800aef4:	4581      	cmp	r9, r0
 800aef6:	d142      	bne.n	800af7e <_malloc_r+0xea>
 800aef8:	6821      	ldr	r1, [r4, #0]
 800aefa:	4630      	mov	r0, r6
 800aefc:	1a6d      	subs	r5, r5, r1
 800aefe:	4629      	mov	r1, r5
 800af00:	f7ff ffa6 	bl	800ae50 <sbrk_aligned>
 800af04:	3001      	adds	r0, #1
 800af06:	d03a      	beq.n	800af7e <_malloc_r+0xea>
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	442b      	add	r3, r5
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	f8d8 3000 	ldr.w	r3, [r8]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	bb62      	cbnz	r2, 800af70 <_malloc_r+0xdc>
 800af16:	f8c8 7000 	str.w	r7, [r8]
 800af1a:	e00f      	b.n	800af3c <_malloc_r+0xa8>
 800af1c:	6822      	ldr	r2, [r4, #0]
 800af1e:	1b52      	subs	r2, r2, r5
 800af20:	d420      	bmi.n	800af64 <_malloc_r+0xd0>
 800af22:	2a0b      	cmp	r2, #11
 800af24:	d917      	bls.n	800af56 <_malloc_r+0xc2>
 800af26:	1961      	adds	r1, r4, r5
 800af28:	42a3      	cmp	r3, r4
 800af2a:	6025      	str	r5, [r4, #0]
 800af2c:	bf18      	it	ne
 800af2e:	6059      	strne	r1, [r3, #4]
 800af30:	6863      	ldr	r3, [r4, #4]
 800af32:	bf08      	it	eq
 800af34:	f8c8 1000 	streq.w	r1, [r8]
 800af38:	5162      	str	r2, [r4, r5]
 800af3a:	604b      	str	r3, [r1, #4]
 800af3c:	4630      	mov	r0, r6
 800af3e:	f000 f82f 	bl	800afa0 <__malloc_unlock>
 800af42:	f104 000b 	add.w	r0, r4, #11
 800af46:	1d23      	adds	r3, r4, #4
 800af48:	f020 0007 	bic.w	r0, r0, #7
 800af4c:	1ac2      	subs	r2, r0, r3
 800af4e:	bf1c      	itt	ne
 800af50:	1a1b      	subne	r3, r3, r0
 800af52:	50a3      	strne	r3, [r4, r2]
 800af54:	e7af      	b.n	800aeb6 <_malloc_r+0x22>
 800af56:	6862      	ldr	r2, [r4, #4]
 800af58:	42a3      	cmp	r3, r4
 800af5a:	bf0c      	ite	eq
 800af5c:	f8c8 2000 	streq.w	r2, [r8]
 800af60:	605a      	strne	r2, [r3, #4]
 800af62:	e7eb      	b.n	800af3c <_malloc_r+0xa8>
 800af64:	4623      	mov	r3, r4
 800af66:	6864      	ldr	r4, [r4, #4]
 800af68:	e7ae      	b.n	800aec8 <_malloc_r+0x34>
 800af6a:	463c      	mov	r4, r7
 800af6c:	687f      	ldr	r7, [r7, #4]
 800af6e:	e7b6      	b.n	800aede <_malloc_r+0x4a>
 800af70:	461a      	mov	r2, r3
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	42a3      	cmp	r3, r4
 800af76:	d1fb      	bne.n	800af70 <_malloc_r+0xdc>
 800af78:	2300      	movs	r3, #0
 800af7a:	6053      	str	r3, [r2, #4]
 800af7c:	e7de      	b.n	800af3c <_malloc_r+0xa8>
 800af7e:	230c      	movs	r3, #12
 800af80:	4630      	mov	r0, r6
 800af82:	6033      	str	r3, [r6, #0]
 800af84:	f000 f80c 	bl	800afa0 <__malloc_unlock>
 800af88:	e794      	b.n	800aeb4 <_malloc_r+0x20>
 800af8a:	6005      	str	r5, [r0, #0]
 800af8c:	e7d6      	b.n	800af3c <_malloc_r+0xa8>
 800af8e:	bf00      	nop
 800af90:	200002bc 	.word	0x200002bc

0800af94 <__malloc_lock>:
 800af94:	4801      	ldr	r0, [pc, #4]	@ (800af9c <__malloc_lock+0x8>)
 800af96:	f000 b84b 	b.w	800b030 <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	200003fc 	.word	0x200003fc

0800afa0 <__malloc_unlock>:
 800afa0:	4801      	ldr	r0, [pc, #4]	@ (800afa8 <__malloc_unlock+0x8>)
 800afa2:	f000 b846 	b.w	800b032 <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	200003fc 	.word	0x200003fc

0800afac <memset>:
 800afac:	4402      	add	r2, r0
 800afae:	4603      	mov	r3, r0
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d100      	bne.n	800afb6 <memset+0xa>
 800afb4:	4770      	bx	lr
 800afb6:	f803 1b01 	strb.w	r1, [r3], #1
 800afba:	e7f9      	b.n	800afb0 <memset+0x4>

0800afbc <_sbrk_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	2300      	movs	r3, #0
 800afc0:	4d05      	ldr	r5, [pc, #20]	@ (800afd8 <_sbrk_r+0x1c>)
 800afc2:	4604      	mov	r4, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	f7f6 f8ca 	bl	8001160 <_sbrk>
 800afcc:	1c43      	adds	r3, r0, #1
 800afce:	d102      	bne.n	800afd6 <_sbrk_r+0x1a>
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	b103      	cbz	r3, 800afd6 <_sbrk_r+0x1a>
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	bd38      	pop	{r3, r4, r5, pc}
 800afd8:	200003f8 	.word	0x200003f8

0800afdc <__errno>:
 800afdc:	4b01      	ldr	r3, [pc, #4]	@ (800afe4 <__errno+0x8>)
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	2000000c 	.word	0x2000000c

0800afe8 <__libc_init_array>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	4d0d      	ldr	r5, [pc, #52]	@ (800b020 <__libc_init_array+0x38>)
 800afec:	2600      	movs	r6, #0
 800afee:	4c0d      	ldr	r4, [pc, #52]	@ (800b024 <__libc_init_array+0x3c>)
 800aff0:	1b64      	subs	r4, r4, r5
 800aff2:	10a4      	asrs	r4, r4, #2
 800aff4:	42a6      	cmp	r6, r4
 800aff6:	d109      	bne.n	800b00c <__libc_init_array+0x24>
 800aff8:	4d0b      	ldr	r5, [pc, #44]	@ (800b028 <__libc_init_array+0x40>)
 800affa:	2600      	movs	r6, #0
 800affc:	4c0b      	ldr	r4, [pc, #44]	@ (800b02c <__libc_init_array+0x44>)
 800affe:	f000 f827 	bl	800b050 <_init>
 800b002:	1b64      	subs	r4, r4, r5
 800b004:	10a4      	asrs	r4, r4, #2
 800b006:	42a6      	cmp	r6, r4
 800b008:	d105      	bne.n	800b016 <__libc_init_array+0x2e>
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b010:	3601      	adds	r6, #1
 800b012:	4798      	blx	r3
 800b014:	e7ee      	b.n	800aff4 <__libc_init_array+0xc>
 800b016:	f855 3b04 	ldr.w	r3, [r5], #4
 800b01a:	3601      	adds	r6, #1
 800b01c:	4798      	blx	r3
 800b01e:	e7f2      	b.n	800b006 <__libc_init_array+0x1e>
 800b020:	0800b170 	.word	0x0800b170
 800b024:	0800b170 	.word	0x0800b170
 800b028:	0800b170 	.word	0x0800b170
 800b02c:	0800b174 	.word	0x0800b174

0800b030 <__retarget_lock_acquire_recursive>:
 800b030:	4770      	bx	lr

0800b032 <__retarget_lock_release_recursive>:
 800b032:	4770      	bx	lr

0800b034 <memcpy>:
 800b034:	440a      	add	r2, r1
 800b036:	1e43      	subs	r3, r0, #1
 800b038:	4291      	cmp	r1, r2
 800b03a:	d100      	bne.n	800b03e <memcpy+0xa>
 800b03c:	4770      	bx	lr
 800b03e:	b510      	push	{r4, lr}
 800b040:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b044:	4291      	cmp	r1, r2
 800b046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b04a:	d1f9      	bne.n	800b040 <memcpy+0xc>
 800b04c:	bd10      	pop	{r4, pc}
	...

0800b050 <_init>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr

0800b05c <_fini>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	bf00      	nop
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr
