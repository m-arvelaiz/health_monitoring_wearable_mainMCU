
health_monitoring_wearable_mainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc4c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800ce84  0800ce84  0000de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cf88  0800cf88  0000df88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cf90  0800cf90  0000df90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cf94  0800cf94  0000df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800cf98  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d1  2000005c  0800cff4  0000e05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  2000042d  0800cff4  0000e42d  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002440c  00000000  00000000  0000e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044ff  00000000  00000000  0003249e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e10  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001779  00000000  00000000  000387b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003781d  00000000  00000000  00039f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000268ba  00000000  00000000  00071746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159b89  00000000  00000000  00098000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1b89  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008584  00000000  00000000  001f1bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001fa150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800ce6c 	.word	0x0800ce6c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800ce6c 	.word	0x0800ce6c

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	@ 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b9b0 	b.w	8000e2c <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000aea:	4688      	mov	r8, r1
 8000aec:	4604      	mov	r4, r0
 8000aee:	468e      	mov	lr, r1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d14a      	bne.n	8000b8a <__udivmoddi4+0xa6>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d95f      	bls.n	8000bba <__udivmoddi4+0xd6>
 8000afa:	fab2 f682 	clz	r6, r2
 8000afe:	b14e      	cbz	r6, 8000b14 <__udivmoddi4+0x30>
 8000b00:	f1c6 0320 	rsb	r3, r6, #32
 8000b04:	fa01 fe06 	lsl.w	lr, r1, r6
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	ea43 0e0e 	orr.w	lr, r3, lr
 8000b14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b18:	fa1f fc87 	uxth.w	ip, r7
 8000b1c:	0c23      	lsrs	r3, r4, #16
 8000b1e:	fbbe f1f8 	udiv	r1, lr, r8
 8000b22:	fb08 ee11 	mls	lr, r8, r1, lr
 8000b26:	fb01 f20c 	mul.w	r2, r1, ip
 8000b2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x5e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x5c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 8154 	bhi.w	8000de8 <__udivmoddi4+0x304>
 8000b40:	4601      	mov	r1, r0
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	b2a2      	uxth	r2, r4
 8000b46:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4a:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000b56:	4594      	cmp	ip, r2
 8000b58:	d90b      	bls.n	8000b72 <__udivmoddi4+0x8e>
 8000b5a:	18ba      	adds	r2, r7, r2
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	bf2c      	ite	cs
 8000b62:	2401      	movcs	r4, #1
 8000b64:	2400      	movcc	r4, #0
 8000b66:	4594      	cmp	ip, r2
 8000b68:	d902      	bls.n	8000b70 <__udivmoddi4+0x8c>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	f000 813f 	beq.w	8000dee <__udivmoddi4+0x30a>
 8000b70:	4618      	mov	r0, r3
 8000b72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b76:	eba2 020c 	sub.w	r2, r2, ip
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	b11d      	cbz	r5, 8000b86 <__udivmoddi4+0xa2>
 8000b7e:	40f2      	lsrs	r2, r6
 8000b80:	2300      	movs	r3, #0
 8000b82:	e9c5 2300 	strd	r2, r3, [r5]
 8000b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d905      	bls.n	8000b9a <__udivmoddi4+0xb6>
 8000b8e:	b10d      	cbz	r5, 8000b94 <__udivmoddi4+0xb0>
 8000b90:	e9c5 0100 	strd	r0, r1, [r5]
 8000b94:	2100      	movs	r1, #0
 8000b96:	4608      	mov	r0, r1
 8000b98:	e7f5      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000b9a:	fab3 f183 	clz	r1, r3
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d14e      	bne.n	8000c40 <__udivmoddi4+0x15c>
 8000ba2:	4543      	cmp	r3, r8
 8000ba4:	f0c0 8112 	bcc.w	8000dcc <__udivmoddi4+0x2e8>
 8000ba8:	4282      	cmp	r2, r0
 8000baa:	f240 810f 	bls.w	8000dcc <__udivmoddi4+0x2e8>
 8000bae:	4608      	mov	r0, r1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e8      	beq.n	8000b86 <__udivmoddi4+0xa2>
 8000bb4:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb8:	e7e5      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f000 80ac 	beq.w	8000d18 <__udivmoddi4+0x234>
 8000bc0:	fab2 f682 	clz	r6, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	f040 80bb 	bne.w	8000d40 <__udivmoddi4+0x25c>
 8000bca:	1a8b      	subs	r3, r1, r2
 8000bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000bd0:	b2bc      	uxth	r4, r7
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	0c02      	lsrs	r2, r0, #16
 8000bd6:	b280      	uxth	r0, r0
 8000bd8:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000be4:	fb04 f20c 	mul.w	r2, r4, ip
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d90e      	bls.n	8000c0a <__udivmoddi4+0x126>
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bf2:	bf2c      	ite	cs
 8000bf4:	f04f 0901 	movcs.w	r9, #1
 8000bf8:	f04f 0900 	movcc.w	r9, #0
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d903      	bls.n	8000c08 <__udivmoddi4+0x124>
 8000c00:	f1b9 0f00 	cmp.w	r9, #0
 8000c04:	f000 80ec 	beq.w	8000de0 <__udivmoddi4+0x2fc>
 8000c08:	46c4      	mov	ip, r8
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c10:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c14:	fb04 f408 	mul.w	r4, r4, r8
 8000c18:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000c1c:	4294      	cmp	r4, r2
 8000c1e:	d90b      	bls.n	8000c38 <__udivmoddi4+0x154>
 8000c20:	18ba      	adds	r2, r7, r2
 8000c22:	f108 33ff 	add.w	r3, r8, #4294967295
 8000c26:	bf2c      	ite	cs
 8000c28:	2001      	movcs	r0, #1
 8000c2a:	2000      	movcc	r0, #0
 8000c2c:	4294      	cmp	r4, r2
 8000c2e:	d902      	bls.n	8000c36 <__udivmoddi4+0x152>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	f000 80d1 	beq.w	8000dd8 <__udivmoddi4+0x2f4>
 8000c36:	4698      	mov	r8, r3
 8000c38:	1b12      	subs	r2, r2, r4
 8000c3a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000c3e:	e79d      	b.n	8000b7c <__udivmoddi4+0x98>
 8000c40:	f1c1 0620 	rsb	r6, r1, #32
 8000c44:	408b      	lsls	r3, r1
 8000c46:	fa08 f401 	lsl.w	r4, r8, r1
 8000c4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000c4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c52:	fa28 f806 	lsr.w	r8, r8, r6
 8000c56:	408a      	lsls	r2, r1
 8000c58:	431f      	orrs	r7, r3
 8000c5a:	fa20 f306 	lsr.w	r3, r0, r6
 8000c5e:	0c38      	lsrs	r0, r7, #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fa1f fc87 	uxth.w	ip, r7
 8000c66:	0c1c      	lsrs	r4, r3, #16
 8000c68:	fbb8 fef0 	udiv	lr, r8, r0
 8000c6c:	fb00 881e 	mls	r8, r0, lr, r8
 8000c70:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000c74:	fb0e f80c 	mul.w	r8, lr, ip
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d90e      	bls.n	8000c9a <__udivmoddi4+0x1b6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	bf2c      	ite	cs
 8000c84:	f04f 0b01 	movcs.w	fp, #1
 8000c88:	f04f 0b00 	movcc.w	fp, #0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d903      	bls.n	8000c98 <__udivmoddi4+0x1b4>
 8000c90:	f1bb 0f00 	cmp.w	fp, #0
 8000c94:	f000 80b8 	beq.w	8000e08 <__udivmoddi4+0x324>
 8000c98:	46d6      	mov	lr, sl
 8000c9a:	eba4 0408 	sub.w	r4, r4, r8
 8000c9e:	fa1f f883 	uxth.w	r8, r3
 8000ca2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ca6:	fb00 4413 	mls	r4, r0, r3, r4
 8000caa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cae:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	d90e      	bls.n	8000cd4 <__udivmoddi4+0x1f0>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cbc:	bf2c      	ite	cs
 8000cbe:	f04f 0801 	movcs.w	r8, #1
 8000cc2:	f04f 0800 	movcc.w	r8, #0
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d903      	bls.n	8000cd2 <__udivmoddi4+0x1ee>
 8000cca:	f1b8 0f00 	cmp.w	r8, #0
 8000cce:	f000 809f 	beq.w	8000e10 <__udivmoddi4+0x32c>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd8:	eba4 040c 	sub.w	r4, r4, ip
 8000cdc:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ce0:	4564      	cmp	r4, ip
 8000ce2:	4673      	mov	r3, lr
 8000ce4:	46e0      	mov	r8, ip
 8000ce6:	d302      	bcc.n	8000cee <__udivmoddi4+0x20a>
 8000ce8:	d107      	bne.n	8000cfa <__udivmoddi4+0x216>
 8000cea:	45f1      	cmp	r9, lr
 8000cec:	d205      	bcs.n	8000cfa <__udivmoddi4+0x216>
 8000cee:	ebbe 0302 	subs.w	r3, lr, r2
 8000cf2:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cf6:	3801      	subs	r0, #1
 8000cf8:	46e0      	mov	r8, ip
 8000cfa:	b15d      	cbz	r5, 8000d14 <__udivmoddi4+0x230>
 8000cfc:	ebb9 0203 	subs.w	r2, r9, r3
 8000d00:	eb64 0408 	sbc.w	r4, r4, r8
 8000d04:	fa04 f606 	lsl.w	r6, r4, r6
 8000d08:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	e9c5 6400 	strd	r6, r4, [r5]
 8000d14:	2100      	movs	r1, #0
 8000d16:	e736      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000d18:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	4614      	mov	r4, r2
 8000d20:	b280      	uxth	r0, r0
 8000d22:	4696      	mov	lr, r2
 8000d24:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000d28:	2620      	movs	r6, #32
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000d30:	4610      	mov	r0, r2
 8000d32:	fbb1 f1f2 	udiv	r1, r1, r2
 8000d36:	eba3 0308 	sub.w	r3, r3, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e74b      	b.n	8000bd8 <__udivmoddi4+0xf4>
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	f1c6 0320 	rsb	r3, r6, #32
 8000d46:	fa01 f206 	lsl.w	r2, r1, r6
 8000d4a:	fa21 f803 	lsr.w	r8, r1, r3
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	fa20 f303 	lsr.w	r3, r0, r3
 8000d56:	b2bc      	uxth	r4, r7
 8000d58:	40b0      	lsls	r0, r6
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	0c02      	lsrs	r2, r0, #16
 8000d5e:	0c19      	lsrs	r1, r3, #16
 8000d60:	b280      	uxth	r0, r0
 8000d62:	fbb8 f9fe 	udiv	r9, r8, lr
 8000d66:	fb0e 8819 	mls	r8, lr, r9, r8
 8000d6a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	4588      	cmp	r8, r1
 8000d74:	d951      	bls.n	8000e1a <__udivmoddi4+0x336>
 8000d76:	1879      	adds	r1, r7, r1
 8000d78:	f109 3cff 	add.w	ip, r9, #4294967295
 8000d7c:	bf2c      	ite	cs
 8000d7e:	f04f 0a01 	movcs.w	sl, #1
 8000d82:	f04f 0a00 	movcc.w	sl, #0
 8000d86:	4588      	cmp	r8, r1
 8000d88:	d902      	bls.n	8000d90 <__udivmoddi4+0x2ac>
 8000d8a:	f1ba 0f00 	cmp.w	sl, #0
 8000d8e:	d031      	beq.n	8000df4 <__udivmoddi4+0x310>
 8000d90:	eba1 0108 	sub.w	r1, r1, r8
 8000d94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d98:	fb09 f804 	mul.w	r8, r9, r4
 8000d9c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	4543      	cmp	r3, r8
 8000da8:	d235      	bcs.n	8000e16 <__udivmoddi4+0x332>
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	f109 31ff 	add.w	r1, r9, #4294967295
 8000db0:	bf2c      	ite	cs
 8000db2:	f04f 0a01 	movcs.w	sl, #1
 8000db6:	f04f 0a00 	movcc.w	sl, #0
 8000dba:	4543      	cmp	r3, r8
 8000dbc:	d2bb      	bcs.n	8000d36 <__udivmoddi4+0x252>
 8000dbe:	f1ba 0f00 	cmp.w	sl, #0
 8000dc2:	d1b8      	bne.n	8000d36 <__udivmoddi4+0x252>
 8000dc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000dc8:	443b      	add	r3, r7
 8000dca:	e7b4      	b.n	8000d36 <__udivmoddi4+0x252>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb68 0203 	sbc.w	r2, r8, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4696      	mov	lr, r2
 8000dd6:	e6eb      	b.n	8000bb0 <__udivmoddi4+0xcc>
 8000dd8:	443a      	add	r2, r7
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	e72b      	b.n	8000c38 <__udivmoddi4+0x154>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	e710      	b.n	8000c0a <__udivmoddi4+0x126>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443b      	add	r3, r7
 8000dec:	e6a9      	b.n	8000b42 <__udivmoddi4+0x5e>
 8000dee:	443a      	add	r2, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	e6be      	b.n	8000b72 <__udivmoddi4+0x8e>
 8000df4:	eba7 0808 	sub.w	r8, r7, r8
 8000df8:	f1a9 0c02 	sub.w	ip, r9, #2
 8000dfc:	4441      	add	r1, r8
 8000dfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e02:	fb09 f804 	mul.w	r8, r9, r4
 8000e06:	e7c9      	b.n	8000d9c <__udivmoddi4+0x2b8>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	e744      	b.n	8000c9a <__udivmoddi4+0x1b6>
 8000e10:	3b02      	subs	r3, #2
 8000e12:	443c      	add	r4, r7
 8000e14:	e75e      	b.n	8000cd4 <__udivmoddi4+0x1f0>
 8000e16:	4649      	mov	r1, r9
 8000e18:	e78d      	b.n	8000d36 <__udivmoddi4+0x252>
 8000e1a:	eba1 0108 	sub.w	r1, r1, r8
 8000e1e:	46cc      	mov	ip, r9
 8000e20:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e24:	fb09 f804 	mul.w	r8, r9, r4
 8000e28:	e7b8      	b.n	8000d9c <__udivmoddi4+0x2b8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <data_handler_dispatcher>:
void data_handler_notify_stop_stream(void) {
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_STOP_STREAM, data_handler->payload, 1, 0);
}

void data_handler_dispatcher(UART_CommandPacket_t* cmd) {
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
    data_handler->data_cmd = (Data_CmdID_t)cmd->cmd_type;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	7852      	ldrb	r2, [r2, #1]
 8000e40:	701a      	strb	r2, [r3, #0]
    memcpy(data_handler->payload, cmd->payload, 5);
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6858      	ldr	r0, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	2205      	movs	r2, #5
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f00b fffe 	bl	800ce50 <memcpy>
    data_handler->lenght=cmd->payload_len;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	7892      	ldrb	r2, [r2, #2]
 8000e5c:	731a      	strb	r2, [r3, #12]

    //TODO: filter if the message is to configure something or to request a cmd

    sensor_interface_handle_cmd(data_handler->data_cmd, data_handler->payload, data_handler->lenght, data_handler->payload_out, &(data_handler->lenght_out));
 8000e5e:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	7818      	ldrb	r0, [r3, #0]
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6859      	ldr	r1, [r3, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	7b1a      	ldrb	r2, [r3, #12]
 8000e70:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689c      	ldr	r4, [r3, #8]
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	330d      	adds	r3, #13
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	4623      	mov	r3, r4
 8000e80:	f001 fb00 	bl	8002484 <sensor_interface_handle_cmd>
    UART_Handler_t* uart = uart_handler_get();
 8000e84:	f001 ff0e 	bl	8002ca4 <uart_handler_get>
 8000e88:	60f8      	str	r0, [r7, #12]
    uart->send_response(data_handler->data_cmd, data_handler->payload_out, data_handler->lenght_out );
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e90:	6812      	ldr	r2, [r2, #0]
 8000e92:	7810      	ldrb	r0, [r2, #0]
 8000e94:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6891      	ldr	r1, [r2, #8]
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <data_handler_dispatcher+0x7c>)
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	7b52      	ldrb	r2, [r2, #13]
 8000ea0:	4798      	blx	r3
//            break;
//        default:
//            // Unknown command handling
//            break;
//    }
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000078 	.word	0x20000078

08000eb0 <data_handler_Init>:
//static void data_handler_req_stop_stream(void) {
//	//TODO:sensor_stream_stop();
//    data_handler_notify_stop_stream();
//}

void data_handler_Init(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 8000eb4:	2010      	movs	r0, #16
 8000eb6:	f00b fed1 	bl	800cc5c <malloc>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <data_handler_Init+0x48>)
 8000ec0:	601a      	str	r2, [r3, #0]
    data_handler->payload = data_handler_buffer;
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <data_handler_Init+0x48>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <data_handler_Init+0x4c>)
 8000ec8:	605a      	str	r2, [r3, #4]
    data_handler->payload_out = data_handler_buffer_out;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <data_handler_Init+0x48>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <data_handler_Init+0x50>)
 8000ed0:	609a      	str	r2, [r3, #8]
    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <data_handler_Init+0x48>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	220a      	movs	r2, #10
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00b ff73 	bl	800cdc8 <memset>
    memset(data_handler->payload_out, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8000ee2:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <data_handler_Init+0x48>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	220a      	movs	r2, #10
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00b ff6b 	bl	800cdc8 <memset>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	2000007c 	.word	0x2000007c
 8000f00:	20000088 	.word	0x20000088

08000f04 <HAL_I2C_MasterTxCpltCallback>:
// Basic operations
bool i2c_handler_write_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len);
bool i2c_handler_read_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len, uint8_t len_expected);

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	if(i2c_handler->hi2c==hi2c){
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d11f      	bne.n	8000f58 <HAL_I2C_MasterTxCpltCallback+0x54>
		if(i2c_handler->operation_type==I2C_OP_TYPE_WRITE_REG){
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	785b      	ldrb	r3, [r3, #1]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d104      	bne.n	8000f2c <HAL_I2C_MasterTxCpltCallback+0x28>
			i2c_handler->state= I2C_STATE_IDLE;
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			}
		}


	}
}
 8000f2a:	e015      	b.n	8000f58 <HAL_I2C_MasterTxCpltCallback+0x54>
			i2c_handler->state= I2C_STATE_BUSY;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			if (HAL_I2C_Master_Receive_IT(i2c_handler->hi2c, i2c_handler->last_address << 1,
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6858      	ldr	r0, [r3, #4]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	7a1b      	ldrb	r3, [r3, #8]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	b299      	uxth	r1, r3
						i2c_handler->Response_buffer, i2c_handler->response_buffer_lenght) != HAL_OK) {
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			if (HAL_I2C_Master_Receive_IT(i2c_handler->hi2c, i2c_handler->last_address << 1,
 8000f54:	f002 fefe 	bl	8003d54 <HAL_I2C_Master_Receive_IT>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000094 	.word	0x20000094

08000f64 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
 {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	if (i2c_handler->hi2c == hi2c) {
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d103      	bne.n	8000fa8 <HAL_I2C_MasterRxCpltCallback+0x1c>
		i2c_handler->state= I2C_STATE_MSG_WAITING_FOR_PROCESSING;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	701a      	strb	r2, [r3, #0]
	}
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000094 	.word	0x20000094

08000fb8 <i2c_handler_write_reg>:


bool i2c_handler_write_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	i2c_handler->last_address = device_addr;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <i2c_handler_write_reg+0x74>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	721a      	strb	r2, [r3, #8]

	if (!i2c_handler || !i2c_handler->hi2c)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	@ (800102c <i2c_handler_write_reg+0x74>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <i2c_handler_write_reg+0x2a>
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <i2c_handler_write_reg+0x74>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <i2c_handler_write_reg+0x2e>
		return false;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e01d      	b.n	8001022 <i2c_handler_write_reg+0x6a>

	i2c_handler->state = I2C_STATE_BUSY;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <i2c_handler_write_reg+0x74>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
	i2c_handler->operation_type = I2C_OP_TYPE_WRITE_REG;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <i2c_handler_write_reg+0x74>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	705a      	strb	r2, [r3, #1]

    if (HAL_I2C_Master_Transmit_IT(i2c_handler->hi2c, device_addr << 1, buffer, len) != HAL_OK) {
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <i2c_handler_write_reg+0x74>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6858      	ldr	r0, [r3, #4]
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b299      	uxth	r1, r3
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	b29b      	uxth	r3, r3
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	f002 fe1f 	bl	8003c4c <HAL_I2C_Master_Transmit_IT>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <i2c_handler_write_reg+0x60>
        return false;
 8001014:	2300      	movs	r3, #0
 8001016:	e004      	b.n	8001022 <i2c_handler_write_reg+0x6a>
//	if (HAL_I2C_Master_Transmit(i2c_handler->hi2c, device_addr << 1, buffer,
//			len, I2C_DELAY) != HAL_OK) {
//		return false;
//	}

	i2c_handler->state = I2C_STATE_IDLE;
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <i2c_handler_write_reg+0x74>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	return true;
 8001020:	2301      	movs	r3, #1
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000094 	.word	0x20000094

08001030 <i2c_handler_read_reg>:

bool i2c_handler_read_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len, uint8_t len_expected) {
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af04      	add	r7, sp, #16
 8001036:	6039      	str	r1, [r7, #0]
 8001038:	4611      	mov	r1, r2
 800103a:	461a      	mov	r2, r3
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	460b      	mov	r3, r1
 8001042:	71bb      	strb	r3, [r7, #6]
 8001044:	4613      	mov	r3, r2
 8001046:	717b      	strb	r3, [r7, #5]

	i2c_handler->last_address = device_addr;
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	721a      	strb	r2, [r3, #8]
	i2c_handler->response_buffer_lenght=len_expected;
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	797a      	ldrb	r2, [r7, #5]
 8001056:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	if (!i2c_handler || !i2c_handler->hi2c ){
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <i2c_handler_read_reg+0x3c>
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <i2c_handler_read_reg+0x40>
		return false;
 800106c:	2300      	movs	r3, #0
 800106e:	e029      	b.n	80010c4 <i2c_handler_read_reg+0x94>
	}
	i2c_handler->state= I2C_STATE_BUSY;
 8001070:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
	i2c_handler->operation_type= I2C_OP_TYPE_READ_REG;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2202      	movs	r2, #2
 800107e:	705a      	strb	r2, [r3, #1]
//			i2c_handler->Response_buffer, len_expected, I2C_DELAY) != HAL_OK) {
//		return false;
//	}


	if (HAL_I2C_Mem_Read(i2c_handler->hi2c,
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6858      	ldr	r0, [r3, #4]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	b29b      	uxth	r3, r3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	b299      	uxth	r1, r3
		                     device_addr << 1,
		                     *buffer,
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	781b      	ldrb	r3, [r3, #0]
	if (HAL_I2C_Mem_Read(i2c_handler->hi2c,
 8001092:	461d      	mov	r5, r3
		                     I2C_MEMADD_SIZE_8BIT,
		                     i2c_handler->Response_buffer,
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	332a      	adds	r3, #42	@ 0x2a
	if (HAL_I2C_Mem_Read(i2c_handler->hi2c,
 800109a:	797a      	ldrb	r2, [r7, #5]
 800109c:	b292      	uxth	r2, r2
 800109e:	f44f 74fa 	mov.w	r4, #500	@ 0x1f4
 80010a2:	9402      	str	r4, [sp, #8]
 80010a4:	9201      	str	r2, [sp, #4]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	462a      	mov	r2, r5
 80010ac:	f002 fed6 	bl	8003e5c <HAL_I2C_Mem_Read>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <i2c_handler_read_reg+0x8a>
		                     len_expected,
		                     I2C_DELAY) != HAL_OK) {
			return false;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e004      	b.n	80010c4 <i2c_handler_read_reg+0x94>
		}
	i2c_handler->state= I2C_STATE_IDLE;
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <i2c_handler_read_reg+0x9c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]


	return true;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000094 	.word	0x20000094

080010d0 <i2c_handler_init>:


void i2c_handler_init(I2C_HandleTypeDef* hi2c) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    if (i2c_handler == NULL) {
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <i2c_handler_init+0x70>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d106      	bne.n	80010ee <i2c_handler_init+0x1e>
        i2c_handler = (I2C_Handler_t*) malloc(sizeof(I2C_Handler_t));
 80010e0:	2054      	movs	r0, #84	@ 0x54
 80010e2:	f00b fdbb 	bl	800cc5c <malloc>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <i2c_handler_init+0x70>)
 80010ec:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->hi2c = hi2c;
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <i2c_handler_init+0x70>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]
    i2c_handler->state= I2C_STATE_IDLE;
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <i2c_handler_init+0x70>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
    i2c_handler->operation_type=I2C_OP_TYPE_NONE;
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <i2c_handler_init+0x70>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	705a      	strb	r2, [r3, #1]
    memset(i2c_handler->Write_buffer, 0, I2C_MAX_BUFFER_SIZE);
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <i2c_handler_init+0x70>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3309      	adds	r3, #9
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00b fe59 	bl	800cdc8 <memset>
    memset(i2c_handler->Response_buffer, 0, I2C_MAX_BUFFER_SIZE);
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <i2c_handler_init+0x70>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	332a      	adds	r3, #42	@ 0x2a
 800111c:	2220      	movs	r2, #32
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f00b fe51 	bl	800cdc8 <memset>
    i2c_handler->read_reg=i2c_handler_read_reg;
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <i2c_handler_init+0x70>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a06      	ldr	r2, [pc, #24]	@ (8001144 <i2c_handler_init+0x74>)
 800112c:	651a      	str	r2, [r3, #80]	@ 0x50
    i2c_handler->write_reg=i2c_handler_write_reg;
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <i2c_handler_init+0x70>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <i2c_handler_init+0x78>)
 8001134:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000094 	.word	0x20000094
 8001144:	08001031 	.word	0x08001031
 8001148:	08000fb9 	.word	0x08000fb9

0800114c <i2c_handler_get>:

I2C_Handler_t* i2c_handler_get(void) {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
    return i2c_handler;
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <i2c_handler_get+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000094 	.word	0x20000094

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f001 fdd2 	bl	8002d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f822 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f9ca 	bl	8001508 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001174:	f000 f87e 	bl	8001274 <MX_I2C2_Init>
  MX_RTC_Init();
 8001178:	f000 f8d0 	bl	800131c <MX_RTC_Init>
  MX_TIM16_Init();
 800117c:	f000 f950 	bl	8001420 <MX_TIM16_Init>
  MX_UART4_Init();
 8001180:	f000 f976 	bl	8001470 <MX_UART4_Init>
  MX_ICACHE_Init();
 8001184:	f000 f8b6 	bl	80012f4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  uart_handler_Init(&huart4);
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <main+0x44>)
 800118a:	f001 fd3f 	bl	8002c0c <uart_handler_Init>
  data_handler_Init();
 800118e:	f7ff fe8f 	bl	8000eb0 <data_handler_Init>
  i2c_handler_init(&hi2c2);
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <main+0x48>)
 8001194:	f7ff ff9c 	bl	80010d0 <i2c_handler_init>
  sensor_interface_init();
 8001198:	f001 f932 	bl	8002400 <sensor_interface_init>

  HAL_TIM_Base_Start_IT(&htim16);
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <main+0x4c>)
 800119e:	f009 fa1d 	bl	800a5dc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011a2:	bf00      	nop
 80011a4:	e7fd      	b.n	80011a2 <main+0x3e>
 80011a6:	bf00      	nop
 80011a8:	20000168 	.word	0x20000168
 80011ac:	20000098 	.word	0x20000098
 80011b0:	2000011c 	.word	0x2000011c

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09e      	sub	sp, #120	@ 0x78
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	2260      	movs	r2, #96	@ 0x60
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00b fe00 	bl	800cdc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]
 80011d6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80011dc:	f004 fee8 	bl	8005fb0 <HAL_PWREx_ControlVoltageScaling>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011e6:	f000 f9e1 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80011ea:	230a      	movs	r3, #10
 80011ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f4:	2310      	movs	r3, #16
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120e:	2301      	movs	r3, #1
 8001210:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001212:	2308      	movs	r3, #8
 8001214:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001222:	230c      	movs	r3, #12
 8001224:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4618      	mov	r0, r3
 8001230:	f004 ff4a 	bl	80060c8 <HAL_RCC_OscConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800123a:	f000 f9b7 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123e:	231f      	movs	r3, #31
 8001240:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001242:	2303      	movs	r3, #3
 8001244:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2103      	movs	r1, #3
 800125a:	4618      	mov	r0, r3
 800125c:	f005 fe10 	bl	8006e80 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001266:	f000 f9a1 	bl	80015ac <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3778      	adds	r7, #120	@ 0x78
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_I2C2_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ec <MX_I2C2_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_I2C2_Init+0x74>)
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <MX_I2C2_Init+0x7c>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_I2C2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_I2C2_Init+0x74>)
 800128c:	2201      	movs	r2, #1
 800128e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_I2C2_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_I2C2_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_I2C2_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_I2C2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_I2C2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <MX_I2C2_Init+0x74>)
 80012b0:	f002 fa46 	bl	8003740 <HAL_I2C_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012ba:	f000 f977 	bl	80015ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012be:	2100      	movs	r1, #0
 80012c0:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <MX_I2C2_Init+0x74>)
 80012c2:	f004 fdad 	bl	8005e20 <HAL_I2CEx_ConfigAnalogFilter>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f000 f96e 	bl	80015ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_I2C2_Init+0x74>)
 80012d4:	f004 fdef 	bl	8005eb6 <HAL_I2CEx_ConfigDigitalFilter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 f965 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000098 	.word	0x20000098
 80012ec:	40005800 	.word	0x40005800
 80012f0:	20a0c4df 	.word	0x20a0c4df

080012f4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012f8:	2000      	movs	r0, #0
 80012fa:	f004 fe29 	bl	8005f50 <HAL_ICACHE_ConfigAssociativityMode>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001304:	f000 f952 	bl	80015ac <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001308:	f004 fe42 	bl	8005f90 <HAL_ICACHE_Enable>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001312:	f000 f94b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800134a:	4b33      	ldr	r3, [pc, #204]	@ (8001418 <MX_RTC_Init+0xfc>)
 800134c:	4a33      	ldr	r2, [pc, #204]	@ (800141c <MX_RTC_Init+0x100>)
 800134e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001350:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001356:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001358:	227f      	movs	r2, #127	@ 0x7f
 800135a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <MX_RTC_Init+0xfc>)
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001368:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <MX_RTC_Init+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001374:	4b28      	ldr	r3, [pc, #160]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001376:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800137a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800137c:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <MX_RTC_Init+0xfc>)
 800137e:	2200      	movs	r2, #0
 8001380:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001388:	4823      	ldr	r0, [pc, #140]	@ (8001418 <MX_RTC_Init+0xfc>)
 800138a:	f008 fe29 	bl	8009fe0 <HAL_RTC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001394:	f000 f90a 	bl	80015ac <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	481a      	ldr	r0, [pc, #104]	@ (8001418 <MX_RTC_Init+0xfc>)
 80013b0:	f009 f88e 	bl	800a4d0 <HAL_RTCEx_PrivilegeModeSet>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013ba:	f000 f8f7 	bl	80015ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013be:	2300      	movs	r3, #0
 80013c0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	2201      	movs	r2, #1
 80013d8:	4619      	mov	r1, r3
 80013da:	480f      	ldr	r0, [pc, #60]	@ (8001418 <MX_RTC_Init+0xfc>)
 80013dc:	f008 fe8a 	bl	800a0f4 <HAL_RTC_SetTime>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80013e6:	f000 f8e1 	bl	80015ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013ea:	2301      	movs	r3, #1
 80013ec:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80013ee:	2301      	movs	r3, #1
 80013f0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2201      	movs	r2, #1
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_RTC_Init+0xfc>)
 8001402:	f008 ff13 	bl	800a22c <HAL_RTC_SetDate>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800140c:	f000 f8ce 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	@ 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200000ec 	.word	0x200000ec
 800141c:	46007800 	.word	0x46007800

08001420 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <MX_TIM16_Init+0x48>)
 8001426:	4a11      	ldr	r2, [pc, #68]	@ (800146c <MX_TIM16_Init+0x4c>)
 8001428:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12800 - 1;
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_TIM16_Init+0x48>)
 800142c:	f243 12ff 	movw	r2, #12799	@ 0x31ff
 8001430:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <MX_TIM16_Init+0x48>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <MX_TIM16_Init+0x48>)
 800143a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800143e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_TIM16_Init+0x48>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001446:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <MX_TIM16_Init+0x48>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_TIM16_Init+0x48>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_TIM16_Init+0x48>)
 8001454:	f009 f86a 	bl	800a52c <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800145e:	f000 f8a5 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2000011c 	.word	0x2000011c
 800146c:	40014400 	.word	0x40014400

08001470 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <MX_UART4_Init+0x90>)
 8001476:	4a23      	ldr	r2, [pc, #140]	@ (8001504 <MX_UART4_Init+0x94>)
 8001478:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_UART4_Init+0x90>)
 800147c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001480:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_UART4_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_UART4_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_UART4_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_UART4_Init+0x90>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_UART4_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_UART4_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_UART4_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_UART4_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_UART4_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014b8:	4811      	ldr	r0, [pc, #68]	@ (8001500 <MX_UART4_Init+0x90>)
 80014ba:	f009 fc1b 	bl	800acf4 <HAL_UART_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80014c4:	f000 f872 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c8:	2100      	movs	r1, #0
 80014ca:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_UART4_Init+0x90>)
 80014cc:	f00b fa9d 	bl	800ca0a <HAL_UARTEx_SetTxFifoThreshold>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014d6:	f000 f869 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014da:	2100      	movs	r1, #0
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <MX_UART4_Init+0x90>)
 80014de:	f00b fad2 	bl	800ca86 <HAL_UARTEx_SetRxFifoThreshold>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014e8:	f000 f860 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_UART4_Init+0x90>)
 80014ee:	f00b fa53 	bl	800c998 <HAL_UARTEx_DisableFifoMode>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f000 f858 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000168 	.word	0x20000168
 8001504:	40004c00 	.word	0x40004c00

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <MX_GPIO_Init+0x6c>)
 8001510:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001514:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <MX_GPIO_Init+0x6c>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_GPIO_Init+0x6c>)
 8001520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_GPIO_Init+0x6c>)
 800152e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001532:	4a10      	ldr	r2, [pc, #64]	@ (8001574 <MX_GPIO_Init+0x6c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800153c:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <MX_GPIO_Init+0x6c>)
 800153e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_GPIO_Init+0x6c>)
 800154c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001550:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <MX_GPIO_Init+0x6c>)
 8001552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001556:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_GPIO_Init+0x6c>)
 800155c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	46020c00 	.word	0x46020c00

08001578 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM16)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d107      	bne.n	800159a <HAL_TIM_PeriodElapsedCallback+0x22>
    {
    	HAL_TIM_Base_Stop_IT(&htim16);
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800158c:	f009 f8c6 	bl	800a71c <HAL_TIM_Base_Stop_IT>
        // Your code here: runs every 5 seconds
    	sensor_interface_schedule_readings();
 8001590:	f000 ff46 	bl	8002420 <sensor_interface_schedule_readings>
        //TODO: trigger meassurements
    	HAL_TIM_Base_Start_IT(&htim16);
 8001594:	4804      	ldr	r0, [pc, #16]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001596:	f009 f821 	bl	800a5dc <HAL_TIM_Base_Start_IT>
    }

}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40014400 	.word	0x40014400
 80015a8:	2000011c 	.word	0x2000011c

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <ppg_custom_read_command>:
static bool ppg_trigger_measurement();
static bool ppg_trigger_data_collection();



bool ppg_custom_read_command(uint8_t device_addr, uint8_t cmd, uint8_t* out, uint8_t len) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	603a      	str	r2, [r7, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	460b      	mov	r3, r1
 80015c8:	71bb      	strb	r3, [r7, #6]
 80015ca:	4613      	mov	r3, r2
 80015cc:	717b      	strb	r3, [r7, #5]
	I2C_Handler_t* i2c_handler = i2c_handler_get();
 80015ce:	f7ff fdbd 	bl	800114c <i2c_handler_get>
 80015d2:	60f8      	str	r0, [r7, #12]
	// 1) send the “get HR/SpO2” command
    if (HAL_I2C_Master_Transmit(i2c_handler->hi2c, device_addr << 1, &cmd, 1, I2C_DELAY) != HAL_OK) {
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6858      	ldr	r0, [r3, #4]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	b299      	uxth	r1, r3
 80015e0:	1dba      	adds	r2, r7, #6
 80015e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2301      	movs	r3, #1
 80015ea:	f002 f945 	bl	8003878 <HAL_I2C_Master_Transmit>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <ppg_custom_read_command+0x40>
        return false;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e013      	b.n	8001620 <ppg_custom_read_command+0x68>
    }
    // 2) then read back len bytes
    if (HAL_I2C_Master_Receive(i2c_handler->hi2c, device_addr << 1, out, len, I2C_DELAY) != HAL_OK) {
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6858      	ldr	r0, [r3, #4]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b299      	uxth	r1, r3
 8001604:	797b      	ldrb	r3, [r7, #5]
 8001606:	b29b      	uxth	r3, r3
 8001608:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	f002 fa26 	bl	8003a60 <HAL_I2C_Master_Receive>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <ppg_custom_read_command+0x66>
        return false;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <ppg_custom_read_command+0x68>
    }
    return true;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <ppg_sensor_init>:


void ppg_sensor_init(uint8_t address) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
    ppg_sensor = (PPG_Sensor_t*) malloc(sizeof(PPG_Sensor_t));
 8001632:	20c4      	movs	r0, #196	@ 0xc4
 8001634:	f00b fb12 	bl	800cc5c <malloc>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <ppg_sensor_init+0xc8>)
 800163e:	601a      	str	r2, [r3, #0]
    memset(ppg_sensor, 0, sizeof(PPG_Sensor_t));
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <ppg_sensor_init+0xc8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	22c4      	movs	r2, #196	@ 0xc4
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f00b fbbd 	bl	800cdc8 <memset>
    memset(ppg_data_ptr_buffer, 0, sizeof(ppg_data_ptr_buffer));
 800164e:	2228      	movs	r2, #40	@ 0x28
 8001650:	2100      	movs	r1, #0
 8001652:	4828      	ldr	r0, [pc, #160]	@ (80016f4 <ppg_sensor_init+0xcc>)
 8001654:	f00b fbb8 	bl	800cdc8 <memset>

    ppg_sensor->i2c_address = address;
 8001658:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <ppg_sensor_init+0xc8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	79fa      	ldrb	r2, [r7, #7]
 800165e:	701a      	strb	r2, [r3, #0]
    ppg_sensor->format_uart_response = ppg_format_uart_response;
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <ppg_sensor_init+0xc8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a24      	ldr	r2, [pc, #144]	@ (80016f8 <ppg_sensor_init+0xd0>)
 8001666:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    ppg_sensor->get_last_data = ppg_get_last_data;
 800166a:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <ppg_sensor_init+0xc8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a23      	ldr	r2, [pc, #140]	@ (80016fc <ppg_sensor_init+0xd4>)
 8001670:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    ppg_sensor->get_last_n_data = ppg_get_last_n_data;
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <ppg_sensor_init+0xc8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <ppg_sensor_init+0xd8>)
 800167a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    ppg_sensor->get_last_n_data_serial_format = ppg_get_last_n_serial_format;
 800167e:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <ppg_sensor_init+0xc8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a20      	ldr	r2, [pc, #128]	@ (8001704 <ppg_sensor_init+0xdc>)
 8001684:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    ppg_sensor->decode_i2c_response = ppg_decode_i2c_response;
 8001688:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <ppg_sensor_init+0xc8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <ppg_sensor_init+0xe0>)
 800168e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    ppg_sensor->trigger_data_collection = ppg_trigger_data_collection;
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <ppg_sensor_init+0xc8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <ppg_sensor_init+0xe4>)
 8001698:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    ppg_sensor->trigger_measurement = ppg_trigger_measurement;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <ppg_sensor_init+0xc8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001710 <ppg_sensor_init+0xe8>)
 80016a2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    // - WHO_AM_I equivalent if applicable

    // Example (placeholder):
    // uint8_t init_cmd[2] = { SENSOR_REG_MODE_CONFIG, 0x03 };
    // i2c_handler_write_reg(address, init_cmd, 2);
    I2C_Handler_t* i2c = i2c_handler_get();
 80016a6:	f7ff fd51 	bl	800114c <i2c_handler_get>
 80016aa:	60f8      	str	r0, [r7, #12]
    uint8_t ctrl1[3] = { PPG_SENSOR_SEN0344_START_STOP, 0x00,0x01 };
 80016ac:	4a19      	ldr	r2, [pc, #100]	@ (8001714 <ppg_sensor_init+0xec>)
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	4611      	mov	r1, r2
 80016b6:	8019      	strh	r1, [r3, #0]
 80016b8:	3302      	adds	r3, #2
 80016ba:	0c12      	lsrs	r2, r2, #16
 80016bc:	701a      	strb	r2, [r3, #0]
//	if (!i2c->write_reg(ppg_sensor->i2c_address, ctrl1, 3)) {
//		return;
//	}

    if (HAL_I2C_Master_Transmit(i2c->hi2c, address << 1, ctrl1, 3, I2C_DELAY) != HAL_OK) {
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6858      	ldr	r0, [r3, #4]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b299      	uxth	r1, r3
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2303      	movs	r3, #3
 80016d6:	f002 f8cf 	bl	8003878 <HAL_I2C_Master_Transmit>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <ppg_sensor_init+0xc0>
            return false;
        }
    HAL_Delay(5);
 80016e0:	2005      	movs	r0, #5
 80016e2:	f001 fbdb 	bl	8002e9c <HAL_Delay>
 80016e6:	e000      	b.n	80016ea <ppg_sensor_init+0xc2>
            return false;
 80016e8:	bf00      	nop
}
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200001fc 	.word	0x200001fc
 80016f4:	20000200 	.word	0x20000200
 80016f8:	08001731 	.word	0x08001731
 80016fc:	080017ed 	.word	0x080017ed
 8001700:	08001831 	.word	0x08001831
 8001704:	080018c9 	.word	0x080018c9
 8001708:	08001bb5 	.word	0x08001bb5
 800170c:	08001b61 	.word	0x08001b61
 8001710:	08001b51 	.word	0x08001b51
 8001714:	0800ce84 	.word	0x0800ce84

08001718 <ppg_sensor_get>:
        free(ppg_sensor);
        ppg_sensor = NULL;
    }
}

PPG_Sensor_t* ppg_sensor_get(void) {
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    return ppg_sensor;
 800171c:	4b03      	ldr	r3, [pc, #12]	@ (800172c <ppg_sensor_get+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200001fc 	.word	0x200001fc

08001730 <ppg_format_uart_response>:



// === Local Functions ===

static void ppg_format_uart_response(uint8_t* payload_out) {
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    PPG_Data_t* last = &ppg_sensor->history[
 8001738:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <ppg_format_uart_response+0xb4>)
 800173a:	6818      	ldr	r0, [r3, #0]
        (ppg_sensor->head_index - 1 + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE];
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <ppg_format_uart_response+0xb4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001744:	f103 0109 	add.w	r1, r3, #9
 8001748:	4b27      	ldr	r3, [pc, #156]	@ (80017e8 <ppg_format_uart_response+0xb8>)
 800174a:	fb83 2301 	smull	r2, r3, r3, r1
 800174e:	109a      	asrs	r2, r3, #2
 8001750:	17cb      	asrs	r3, r1, #31
 8001752:	1ad2      	subs	r2, r2, r3
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	1aca      	subs	r2, r1, r3
    PPG_Data_t* last = &ppg_sensor->history[
 800175e:	0113      	lsls	r3, r2, #4
 8001760:	4403      	add	r3, r0
 8001762:	3304      	adds	r3, #4
 8001764:	60fb      	str	r3, [r7, #12]


	payload_out[0] = (last->hr >> 8) & 0xFF;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
	payload_out[1] = (last->hr >> 0) & 0xFF;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3301      	adds	r3, #1
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
	payload_out[2] = (last->spo2 >> 8) & 0xFF;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3302      	adds	r3, #2
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
	payload_out[3] = (last->spo2 >> 0) & 0xFF;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3303      	adds	r3, #3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	7912      	ldrb	r2, [r2, #4]
 800178e:	701a      	strb	r2, [r3, #0]
	payload_out[4] = 0x00;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3304      	adds	r3, #4
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
	payload_out[5] = 0x00;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3305      	adds	r3, #5
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
	payload_out[6] = (last->timestamp >> 24) & 0xFF;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0e1a      	lsrs	r2, r3, #24
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3306      	adds	r3, #6
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
	payload_out[7] = (last->timestamp >> 16) & 0xFF;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0c1a      	lsrs	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3307      	adds	r3, #7
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]
    payload_out[8] = (last->timestamp >> 8)  & 0xFF;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0a1a      	lsrs	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3308      	adds	r3, #8
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]
    payload_out[9] = (last->timestamp >> 0)  & 0xFF;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3309      	adds	r3, #9
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	200001fc 	.word	0x200001fc
 80017e8:	66666667 	.word	0x66666667

080017ec <ppg_get_last_data>:

static PPG_Data_t* ppg_get_last_data() {
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
    return &ppg_sensor->history[
 80017f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <ppg_get_last_data+0x3c>)
 80017f2:	6818      	ldr	r0, [r3, #0]
        (ppg_sensor->head_index - 1 + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE];
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <ppg_get_last_data+0x3c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80017fc:	f103 0109 	add.w	r1, r3, #9
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <ppg_get_last_data+0x40>)
 8001802:	fb83 2301 	smull	r2, r3, r3, r1
 8001806:	109a      	asrs	r2, r3, #2
 8001808:	17cb      	asrs	r3, r1, #31
 800180a:	1ad2      	subs	r2, r2, r3
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	1aca      	subs	r2, r1, r3
    return &ppg_sensor->history[
 8001816:	0113      	lsls	r3, r2, #4
 8001818:	4403      	add	r3, r0
 800181a:	3304      	adds	r3, #4
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200001fc 	.word	0x200001fc
 800182c:	66666667 	.word	0x66666667

08001830 <ppg_get_last_n_data>:

static PPG_Data_t** ppg_get_last_n_data(uint8_t n) {
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    if (!ppg_sensor || n == 0 || n > ppg_sensor->count) return NULL;
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <ppg_get_last_n_data+0x8c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <ppg_get_last_n_data+0x26>
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <ppg_get_last_n_data+0x26>
 8001848:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <ppg_get_last_n_data+0x8c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001850:	79fa      	ldrb	r2, [r7, #7]
 8001852:	429a      	cmp	r2, r3
 8001854:	d901      	bls.n	800185a <ppg_get_last_n_data+0x2a>
 8001856:	2300      	movs	r3, #0
 8001858:	e029      	b.n	80018ae <ppg_get_last_n_data+0x7e>

    for (uint8_t i = 0; i < n; ++i) {
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e021      	b.n	80018a4 <ppg_get_last_n_data+0x74>
        int index = (ppg_sensor->head_index - 1 - i + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE;
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <ppg_get_last_n_data+0x8c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f103 020a 	add.w	r2, r3, #10
 8001872:	4b13      	ldr	r3, [pc, #76]	@ (80018c0 <ppg_get_last_n_data+0x90>)
 8001874:	fb83 1302 	smull	r1, r3, r3, r2
 8001878:	1099      	asrs	r1, r3, #2
 800187a:	17d3      	asrs	r3, r2, #31
 800187c:	1ac9      	subs	r1, r1, r3
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	60bb      	str	r3, [r7, #8]
        ppg_data_ptr_buffer[i] = &ppg_sensor->history[index];
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <ppg_get_last_n_data+0x8c>)
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	440a      	add	r2, r1
 8001896:	3204      	adds	r2, #4
 8001898:	490a      	ldr	r1, [pc, #40]	@ (80018c4 <ppg_get_last_n_data+0x94>)
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < n; ++i) {
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	3301      	adds	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3d9      	bcc.n	8001860 <ppg_get_last_n_data+0x30>
    }
    return ppg_data_ptr_buffer;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <ppg_get_last_n_data+0x94>)
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200001fc 	.word	0x200001fc
 80018c0:	66666667 	.word	0x66666667
 80018c4:	20000200 	.word	0x20000200

080018c8 <ppg_get_last_n_serial_format>:

static uint8_t ppg_get_last_n_serial_format(uint8_t n, uint8_t* out) {
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
    if (!ppg_sensor || !out || n == 0 || n > ppg_sensor->count) return 0;
 80018d4:	4b51      	ldr	r3, [pc, #324]	@ (8001a1c <ppg_get_last_n_serial_format+0x154>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <ppg_get_last_n_serial_format+0x2e>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <ppg_get_last_n_serial_format+0x2e>
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <ppg_get_last_n_serial_format+0x2e>
 80018e8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <ppg_get_last_n_serial_format+0x154>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d901      	bls.n	80018fa <ppg_get_last_n_serial_format+0x32>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e08a      	b.n	8001a10 <ppg_get_last_n_serial_format+0x148>

    for (uint8_t i = 0; i < n; ++i) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
 80018fe:	e07f      	b.n	8001a00 <ppg_get_last_n_serial_format+0x138>
        int index = (ppg_sensor->head_index - 1 - i + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE;
 8001900:	4b46      	ldr	r3, [pc, #280]	@ (8001a1c <ppg_get_last_n_serial_format+0x154>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001908:	1e5a      	subs	r2, r3, #1
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f103 020a 	add.w	r2, r3, #10
 8001912:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <ppg_get_last_n_serial_format+0x158>)
 8001914:	fb83 1302 	smull	r1, r3, r3, r2
 8001918:	1099      	asrs	r1, r3, #2
 800191a:	17d3      	asrs	r3, r2, #31
 800191c:	1ac9      	subs	r1, r1, r3
 800191e:	460b      	mov	r3, r1
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	613b      	str	r3, [r7, #16]
        PPG_Data_t* data = &ppg_sensor->history[index];
 800192a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a1c <ppg_get_last_n_serial_format+0x154>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	60fb      	str	r3, [r7, #12]

        out[i * 10 + 0] = (data->hr >> 8) & 0xFF;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	0a19      	lsrs	r1, r3, #8
 800193e:	7dfa      	ldrb	r2, [r7, #23]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	461a      	mov	r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	4413      	add	r3, r2
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
        out[i * 10 + 1] = (data->hr >> 0)  & 0xFF;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6899      	ldr	r1, [r3, #8]
 8001956:	7dfa      	ldrb	r2, [r7, #23]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	3301      	adds	r3, #1
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
        out[i * 10 + 4] = (data->spo2 >> 8)  & 0xFF;
 800196a:	7dfa      	ldrb	r2, [r7, #23]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	3304      	adds	r3, #4
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
        out[i * 10 + 5] = (data->spo2 >> 0)  & 0xFF;
 800197e:	7dfa      	ldrb	r2, [r7, #23]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	3305      	adds	r3, #5
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	7912      	ldrb	r2, [r2, #4]
 8001992:	701a      	strb	r2, [r3, #0]

        out[i * 10 + 6] = (data->timestamp >> 24) & 0xFF;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0e19      	lsrs	r1, r3, #24
 800199a:	7dfa      	ldrb	r2, [r7, #23]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	3306      	adds	r3, #6
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	4413      	add	r3, r2
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
        out[i * 10 + 7] = (data->timestamp >> 16) & 0xFF;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0c19      	lsrs	r1, r3, #16
 80019b4:	7dfa      	ldrb	r2, [r7, #23]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	3307      	adds	r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
        out[i * 10 + 8] = (data->timestamp >> 8)  & 0xFF;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0a19      	lsrs	r1, r3, #8
 80019ce:	7dfa      	ldrb	r2, [r7, #23]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	3308      	adds	r3, #8
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	b2ca      	uxtb	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
        out[i * 10 + 9] = (data->timestamp >> 0)  & 0xFF;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	7dfa      	ldrb	r2, [r7, #23]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	3309      	adds	r3, #9
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; ++i) {
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	3301      	adds	r3, #1
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	7dfa      	ldrb	r2, [r7, #23]
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f4ff af7b 	bcc.w	8001900 <ppg_get_last_n_serial_format+0x38>
    }

    return (n * 8);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	b2db      	uxtb	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	200001fc 	.word	0x200001fc
 8001a20:	66666667 	.word	0x66666667

08001a24 <ppg_get_last_n_bodytemp_serial_format>:

uint8_t ppg_get_last_n_bodytemp_serial_format(uint8_t n, uint8_t* out) {
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
    if (!ppg_sensor || !out || n == 0 || n > ppg_sensor->count) return 0;
 8001a30:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00c      	beq.n	8001a52 <ppg_get_last_n_bodytemp_serial_format+0x2e>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <ppg_get_last_n_bodytemp_serial_format+0x2e>
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <ppg_get_last_n_bodytemp_serial_format+0x2e>
 8001a44:	4b40      	ldr	r3, [pc, #256]	@ (8001b48 <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001a4c:	79fa      	ldrb	r2, [r7, #7]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d901      	bls.n	8001a56 <ppg_get_last_n_bodytemp_serial_format+0x32>
 8001a52:	2300      	movs	r3, #0
 8001a54:	e071      	b.n	8001b3a <ppg_get_last_n_bodytemp_serial_format+0x116>

	uint8_t i;
	for (i = 0; i <= n; ++i) {
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]
 8001a5a:	e067      	b.n	8001b2c <ppg_get_last_n_bodytemp_serial_format+0x108>
		int index = (ppg_sensor->head_index - 1 - i
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b48 <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	7dfb      	ldrb	r3, [r7, #23]
 8001a68:	1ad3      	subs	r3, r2, r3
				+ PPG_SENSOR_HISTORY_SIZE)
 8001a6a:	f103 020a 	add.w	r2, r3, #10
		int index = (ppg_sensor->head_index - 1 - i
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <ppg_get_last_n_bodytemp_serial_format+0x128>)
 8001a70:	fb83 1302 	smull	r1, r3, r3, r2
 8001a74:	1099      	asrs	r1, r3, #2
 8001a76:	17d3      	asrs	r3, r2, #31
 8001a78:	1ac9      	subs	r1, r1, r3
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	613b      	str	r3, [r7, #16]
				% PPG_SENSOR_HISTORY_SIZE;
		PPG_Data_t *data = &ppg_sensor->history[index];
 8001a86:	4b30      	ldr	r3, [pc, #192]	@ (8001b48 <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]


		// Pack: [TEMP x100 MSB, LSB], [TIMESTAMP MSB to LSB]
		out[i * 8 + 0] = ((data->temp) >> 8) & 0xFF;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	440b      	add	r3, r1
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 1] = ((data->temp) >> 0) & 0xFF;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8999      	ldrh	r1, [r3, #12]
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2ca      	uxtb	r2, r1
 8001aba:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 2] = 0x00;
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 3] = 0x00;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	3303      	adds	r3, #3
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0e19      	lsrs	r1, r3, #24
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0c19      	lsrs	r1, r3, #16
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	3305      	adds	r3, #5
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 6] = (data->timestamp >> 8) & 0xFF;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0a19      	lsrs	r1, r3, #8
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	3306      	adds	r3, #6
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 7] = (data->timestamp >> 0) & 0xFF;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	3307      	adds	r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
	for (i = 0; i <= n; ++i) {
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
 8001b2c:	7dfa      	ldrb	r2, [r7, #23]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d993      	bls.n	8001a5c <ppg_get_last_n_bodytemp_serial_format+0x38>
	}

	return (i * 8);
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	b2db      	uxtb	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	200001fc 	.word	0x200001fc
 8001b4c:	66666667 	.word	0x66666667

08001b50 <ppg_trigger_measurement>:

static bool ppg_trigger_measurement() {
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
    // NOT needed here
    return true;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <ppg_trigger_data_collection>:

static bool ppg_trigger_data_collection() {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	I2C_Handler_t *i2c = i2c_handler_get();
 8001b66:	f7ff faf1 	bl	800114c <i2c_handler_get>
 8001b6a:	6078      	str	r0, [r7, #4]

	uint8_t reg = PPG_SENSOR_SEN0344_HR_SPO2;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	70fb      	strb	r3, [r7, #3]
//	if (!i2c->read_reg(ppg_sensor->i2c_address, &reg, 1, 8)) {
//		i2c->state=I2C_STATE_IDLE;
//		return false;
//	}
	if (!ppg_custom_read_command(ppg_sensor->i2c_address, reg, i2c->Response_buffer, 10))
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <ppg_trigger_data_collection+0x50>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	7818      	ldrb	r0, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8001b7c:	78f9      	ldrb	r1, [r7, #3]
 8001b7e:	230a      	movs	r3, #10
 8001b80:	f7ff fd1a 	bl	80015b8 <ppg_custom_read_command>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f083 0301 	eor.w	r3, r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <ppg_trigger_data_collection+0x34>
	        return false;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e009      	b.n	8001ba8 <ppg_trigger_data_collection+0x48>
    // i2c->read_reg(ppg_sensor->i2c_address, &reg, 1, 6);  // 3 bytes red + 3 bytes IR




    ppg_sensor->decode_i2c_response(i2c->Response_buffer, 10);
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <ppg_trigger_data_collection+0x50>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	322a      	adds	r2, #42	@ 0x2a
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3

    return true;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200001fc 	.word	0x200001fc

08001bb4 <ppg_decode_i2c_response>:

static void ppg_decode_i2c_response(uint8_t* data, uint8_t len) {
 8001bb4:	b5b0      	push	{r4, r5, r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
    // TODO: Parse raw bytes into red/IR values if using direct reads from FIFO
	// sample.red = ((data[0] << 16) | (data[1] << 8) | data[2]);
	// sample.ir  = ((data[3] << 16) | (data[4] << 8) | data[5]);

	PPG_Data_t sample;
	sample.spo2 = ((uint8_t)data[0]);;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	743b      	strb	r3, [r7, #16]
	sample.hr = ((uint32_t)data[2] << 24) | ((uint32_t)data[3] << 16) |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	061a      	lsls	r2, r3, #24
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
		       ((uint32_t)data[4] << 8) | ((uint32_t)data[5]);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	021b      	lsls	r3, r3, #8
	sample.hr = ((uint32_t)data[2] << 24) | ((uint32_t)data[3] << 16) |
 8001be0:	4313      	orrs	r3, r2
		       ((uint32_t)data[4] << 8) | ((uint32_t)data[5]);
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	3205      	adds	r2, #5
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	4313      	orrs	r3, r2
	sample.hr = ((uint32_t)data[2] << 24) | ((uint32_t)data[3] << 16) |
 8001bea:	617b      	str	r3, [r7, #20]

	float Temperature = data[8] * 1.0 + data[9] / 100.0;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc92 	bl	800051c <__aeabi_i2d>
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3309      	adds	r3, #9
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc8a 	bl	800051c <__aeabi_i2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <ppg_decode_i2c_response+0x100>)
 8001c0e:	f7fe fe19 	bl	8000844 <__aeabi_ddiv>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4620      	mov	r0, r4
 8001c18:	4629      	mov	r1, r5
 8001c1a:	f7fe fb33 	bl	8000284 <__adddf3>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe fef5 	bl	8000a14 <__aeabi_d2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	61fb      	str	r3, [r7, #28]
	sample.temp=(uint16_t)(Temperature*100);
 8001c2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c32:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001cb8 <ppg_decode_i2c_response+0x104>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	833b      	strh	r3, [r7, #24]

	sample.timestamp = 0x60D4A000; // Replace with RTC time
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <ppg_decode_i2c_response+0x108>)
 8001c48:	60fb      	str	r3, [r7, #12]

	ppg_sensor->history[ppg_sensor->head_index] = sample;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <ppg_decode_i2c_response+0x10c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc0 <ppg_decode_i2c_response+0x10c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	1d1c      	adds	r4, r3, #4
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ppg_sensor->head_index = (ppg_sensor->head_index + 1)
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <ppg_decode_i2c_response+0x10c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001c6e:	1c5a      	adds	r2, r3, #1
			% PPG_SENSOR_HISTORY_SIZE;
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <ppg_decode_i2c_response+0x110>)
 8001c72:	fb83 1302 	smull	r1, r3, r3, r2
 8001c76:	1099      	asrs	r1, r3, #2
 8001c78:	17d3      	asrs	r3, r2, #31
 8001c7a:	1ac9      	subs	r1, r1, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	1ad1      	subs	r1, r2, r3
	ppg_sensor->head_index = (ppg_sensor->head_index + 1)
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <ppg_decode_i2c_response+0x10c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	if (ppg_sensor->count < PPG_SENSOR_HISTORY_SIZE)
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <ppg_decode_i2c_response+0x10c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001c98:	2b09      	cmp	r3, #9
 8001c9a:	d807      	bhi.n	8001cac <ppg_decode_i2c_response+0xf8>
		ppg_sensor->count++;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <ppg_decode_i2c_response+0x10c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
}
 8001cac:	bf00      	nop
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb4:	40590000 	.word	0x40590000
 8001cb8:	42c80000 	.word	0x42c80000
 8001cbc:	60d4a000 	.word	0x60d4a000
 8001cc0:	200001fc 	.word	0x200001fc
 8001cc4:	66666667 	.word	0x66666667

08001cc8 <pressure_sensor_init>:





void pressure_sensor_init(uint8_t address) {
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
    pressure_sensor = (Pressure_Sensor_t*) malloc(sizeof(Pressure_Sensor_t));
 8001cd2:	209c      	movs	r0, #156	@ 0x9c
 8001cd4:	f00a ffc2 	bl	800cc5c <malloc>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b42      	ldr	r3, [pc, #264]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001cde:	601a      	str	r2, [r3, #0]
    memset(pressure_sensor, 0, sizeof(Pressure_Sensor_t));
 8001ce0:	4b41      	ldr	r3, [pc, #260]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	229c      	movs	r2, #156	@ 0x9c
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00b f86d 	bl	800cdc8 <memset>
    memset(pressure_data_ptr_buffer, 0, sizeof(pressure_data_ptr_buffer));
 8001cee:	2228      	movs	r2, #40	@ 0x28
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	483e      	ldr	r0, [pc, #248]	@ (8001dec <pressure_sensor_init+0x124>)
 8001cf4:	f00b f868 	bl	800cdc8 <memset>

    pressure_sensor->i2c_address = address;
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	701a      	strb	r2, [r3, #0]
    pressure_sensor->format_uart_response = pressure_format_uart_response;
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a3a      	ldr	r2, [pc, #232]	@ (8001df0 <pressure_sensor_init+0x128>)
 8001d06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    pressure_sensor->get_last_data = pressure_get_last_data;
 8001d0a:	4b37      	ldr	r3, [pc, #220]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a39      	ldr	r2, [pc, #228]	@ (8001df4 <pressure_sensor_init+0x12c>)
 8001d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    pressure_sensor->get_last_n_data = pressure_get_last_n_data;
 8001d14:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a37      	ldr	r2, [pc, #220]	@ (8001df8 <pressure_sensor_init+0x130>)
 8001d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    pressure_sensor->get_last_n_data_serial_format = pressure_get_last_n_serial_format;
 8001d1e:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a36      	ldr	r2, [pc, #216]	@ (8001dfc <pressure_sensor_init+0x134>)
 8001d24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    pressure_sensor->decode_i2c_response = pressure_decode_i2c_response;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a34      	ldr	r2, [pc, #208]	@ (8001e00 <pressure_sensor_init+0x138>)
 8001d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    pressure_sensor->trigger_data_collection = pressure_trigger_data_collection;
 8001d32:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a33      	ldr	r2, [pc, #204]	@ (8001e04 <pressure_sensor_init+0x13c>)
 8001d38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pressure_sensor->trigger_measurement = pressure_trigger_measurement;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <pressure_sensor_init+0x120>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a31      	ldr	r2, [pc, #196]	@ (8001e08 <pressure_sensor_init+0x140>)
 8001d42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    I2C_Handler_t* i2c = i2c_handler_get();
 8001d46:	f7ff fa01 	bl	800114c <i2c_handler_get>
 8001d4a:	60f8      	str	r0, [r7, #12]
    uint8_t reg = PRESSURE_SENSOR_LPS22HH_WHO_AM_I_REG;
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	72fb      	strb	r3, [r7, #11]

    if (!i2c->read_reg(address, &reg, 1, 1)) return;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001d54:	f107 010b 	add.w	r1, r7, #11
 8001d58:	79f8      	ldrb	r0, [r7, #7]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	47a0      	blx	r4
 8001d60:	4603      	mov	r3, r0
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d136      	bne.n	8001dda <pressure_sensor_init+0x112>
    HAL_Delay(5);
 8001d6c:	2005      	movs	r0, #5
 8001d6e:	f001 f895 	bl	8002e9c <HAL_Delay>
    if (i2c->state == I2C_STATE_MSG_WAITING_FOR_PROCESSING && i2c->Response_buffer[0] == PRESSURE_SENSOR_LPS22HH_WHO_AM_I_VAL) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <pressure_sensor_init+0xc2>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001d80:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d82:	d102      	bne.n	8001d8a <pressure_sensor_init+0xc2>
        // WHO_AM_I OK
    	i2c->state=I2C_STATE_IDLE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
    }


    // Enable Continuous Mode: ODR=10Hz (0b010), BDU=0, LPFP=0
    // CTRL_REG1 = 0b01000000 = 0x40
    uint8_t ctrl1[2] = { PRESSURE_SENSOR_LPS22HH_CTRL_REG1, 0x40 };
 8001d8a:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001d8e:	813b      	strh	r3, [r7, #8]

//    // Power on: CTRL_REG1 = BDU=1, ODR=0 → 0x02
//    uint8_t ctrl1[2] = { PRESSURE_SENSOR_LPS22HH_CTRL_REG1, 0x02 };
    i2c->write_reg(address, ctrl1, 2);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	f107 0108 	add.w	r1, r7, #8
 8001d98:	79f8      	ldrb	r0, [r7, #7]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4798      	blx	r3
	HAL_Delay(5);
 8001d9e:	2005      	movs	r0, #5
 8001da0:	f001 f87c 	bl	8002e9c <HAL_Delay>

	reg = PRESSURE_SENSOR_LPS22HH_CTRL_REG1;
 8001da4:	2310      	movs	r3, #16
 8001da6:	72fb      	strb	r3, [r7, #11]
	if (!i2c->read_reg(address, &reg, 1, 1))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001dac:	f107 010b 	add.w	r1, r7, #11
 8001db0:	79f8      	ldrb	r0, [r7, #7]
 8001db2:	2301      	movs	r3, #1
 8001db4:	2201      	movs	r2, #1
 8001db6:	47a0      	blx	r4
 8001db8:	4603      	mov	r3, r0
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10c      	bne.n	8001dde <pressure_sensor_init+0x116>
		return;
	HAL_Delay(5);
 8001dc4:	2005      	movs	r0, #5
 8001dc6:	f001 f869 	bl	8002e9c <HAL_Delay>
	if (i2c->state == I2C_STATE_MSG_WAITING_FOR_PROCESSING) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d106      	bne.n	8001de0 <pressure_sensor_init+0x118>
		// WHO_AM_I OK
		i2c->state = I2C_STATE_IDLE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e002      	b.n	8001de0 <pressure_sensor_init+0x118>
    if (!i2c->read_reg(address, &reg, 1, 1)) return;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <pressure_sensor_init+0x118>
		return;
 8001dde:	bf00      	nop
	}



}
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000228 	.word	0x20000228
 8001dec:	2000022c 	.word	0x2000022c
 8001df0:	08001e25 	.word	0x08001e25
 8001df4:	08001ed9 	.word	0x08001ed9
 8001df8:	08001f21 	.word	0x08001f21
 8001dfc:	08001fbd 	.word	0x08001fbd
 8001e00:	080022d9 	.word	0x080022d9
 8001e04:	08002251 	.word	0x08002251
 8001e08:	08002221 	.word	0x08002221

08001e0c <pressure_sensor_get>:
        free(pressure_sensor);
        pressure_sensor = NULL;
    }
}

Pressure_Sensor_t* pressure_sensor_get(void) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
    return pressure_sensor;
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <pressure_sensor_get+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000228 	.word	0x20000228

08001e24 <pressure_format_uart_response>:

// === Local Functions ===

static void pressure_format_uart_response(uint8_t* payload_out) {
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    Pressure_Data_t* last = &pressure_sensor->history[
 8001e2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <pressure_format_uart_response+0xac>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
        (pressure_sensor->head_index - 1 + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE];
 8001e30:	4b27      	ldr	r3, [pc, #156]	@ (8001ed0 <pressure_format_uart_response+0xac>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001e38:	f103 0109 	add.w	r1, r3, #9
 8001e3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <pressure_format_uart_response+0xb0>)
 8001e3e:	fb83 2301 	smull	r2, r3, r3, r1
 8001e42:	109a      	asrs	r2, r3, #2
 8001e44:	17cb      	asrs	r3, r1, #31
 8001e46:	1ad2      	subs	r2, r2, r3
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	1aca      	subs	r2, r1, r3
    Pressure_Data_t* last = &pressure_sensor->history[
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4403      	add	r3, r0
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]

    payload_out[0] = (last->pressure >> 16) & 0xFF;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	701a      	strb	r2, [r3, #0]
    payload_out[1] = (last->pressure >> 8) & 0xFF;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0a1a      	lsrs	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3301      	adds	r3, #1
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
    payload_out[2] = (last->pressure >> 0) & 0xFF;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3302      	adds	r3, #2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
    payload_out[3] = 0x00;  // padding
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3303      	adds	r3, #3
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]

    payload_out[4] = (last->timestamp >> 24) & 0xFF;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e1a      	lsrs	r2, r3, #24
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
    payload_out[5] = (last->timestamp >> 16) & 0xFF;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	0c1a      	lsrs	r2, r3, #16
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3305      	adds	r3, #5
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    payload_out[6] = (last->timestamp >> 8) & 0xFF;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0a1a      	lsrs	r2, r3, #8
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3306      	adds	r3, #6
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
    payload_out[7] = (last->timestamp >> 0) & 0xFF;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000228 	.word	0x20000228
 8001ed4:	66666667 	.word	0x66666667

08001ed8 <pressure_get_last_data>:

static Pressure_Data_t* pressure_get_last_data() {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
    return &pressure_sensor->history[
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <pressure_get_last_data+0x40>)
 8001ede:	6818      	ldr	r0, [r3, #0]
        (pressure_sensor->head_index - 1 + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE];
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <pressure_get_last_data+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001ee8:	f103 0109 	add.w	r1, r3, #9
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <pressure_get_last_data+0x44>)
 8001eee:	fb83 2301 	smull	r2, r3, r3, r1
 8001ef2:	109a      	asrs	r2, r3, #2
 8001ef4:	17cb      	asrs	r3, r1, #31
 8001ef6:	1ad2      	subs	r2, r2, r3
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	1aca      	subs	r2, r1, r3
    return &pressure_sensor->history[
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4403      	add	r3, r0
 8001f0c:	3304      	adds	r3, #4
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20000228 	.word	0x20000228
 8001f1c:	66666667 	.word	0x66666667

08001f20 <pressure_get_last_n_data>:



static Pressure_Data_t** pressure_get_last_n_data(uint8_t n) {
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
    if (!pressure_sensor || n == 0 || n > pressure_sensor->count) return NULL;
 8001f2a:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <pressure_get_last_n_data+0x90>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <pressure_get_last_n_data+0x26>
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <pressure_get_last_n_data+0x26>
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <pressure_get_last_n_data+0x90>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8001f40:	79fa      	ldrb	r2, [r7, #7]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d901      	bls.n	8001f4a <pressure_get_last_n_data+0x2a>
 8001f46:	2300      	movs	r3, #0
 8001f48:	e02c      	b.n	8001fa4 <pressure_get_last_n_data+0x84>

    for (uint8_t i = 0; i < n; ++i) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e024      	b.n	8001f9a <pressure_get_last_n_data+0x7a>
        int index = (pressure_sensor->head_index - 1 - i + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE;
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <pressure_get_last_n_data+0x90>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f103 020a 	add.w	r2, r3, #10
 8001f62:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <pressure_get_last_n_data+0x94>)
 8001f64:	fb83 1302 	smull	r1, r3, r3, r2
 8001f68:	1099      	asrs	r1, r3, #2
 8001f6a:	17d3      	asrs	r3, r2, #31
 8001f6c:	1ac9      	subs	r1, r1, r3
 8001f6e:	460b      	mov	r3, r1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	60bb      	str	r3, [r7, #8]
        pressure_data_ptr_buffer[i] = &pressure_sensor->history[index];
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <pressure_get_last_n_data+0x90>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	7bf9      	ldrb	r1, [r7, #15]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4403      	add	r3, r0
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <pressure_get_last_n_data+0x98>)
 8001f90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (uint8_t i = 0; i < n; ++i) {
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	3301      	adds	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d3d6      	bcc.n	8001f50 <pressure_get_last_n_data+0x30>
    }
    return pressure_data_ptr_buffer;
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <pressure_get_last_n_data+0x98>)
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	20000228 	.word	0x20000228
 8001fb4:	66666667 	.word	0x66666667
 8001fb8:	2000022c 	.word	0x2000022c

08001fbc <pressure_get_last_n_serial_format>:


static uint8_t pressure_get_last_n_serial_format(uint8_t n, uint8_t* out) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
    if (!pressure_sensor || !out || n == 0 || n > pressure_sensor->count) return 0;
 8001fc8:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <pressure_get_last_n_serial_format+0x12c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00c      	beq.n	8001fea <pressure_get_last_n_serial_format+0x2e>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <pressure_get_last_n_serial_format+0x2e>
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <pressure_get_last_n_serial_format+0x2e>
 8001fdc:	4b42      	ldr	r3, [pc, #264]	@ (80020e8 <pressure_get_last_n_serial_format+0x12c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8001fe4:	79fa      	ldrb	r2, [r7, #7]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <pressure_get_last_n_serial_format+0x32>
 8001fea:	2300      	movs	r3, #0
 8001fec:	e076      	b.n	80020dc <pressure_get_last_n_serial_format+0x120>

    for (uint8_t i = 0; i < n; ++i) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
 8001ff2:	e06c      	b.n	80020ce <pressure_get_last_n_serial_format+0x112>
        int index = (pressure_sensor->head_index - 1 - i + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE;
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80020e8 <pressure_get_last_n_serial_format+0x12c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f103 020a 	add.w	r2, r3, #10
 8002006:	4b39      	ldr	r3, [pc, #228]	@ (80020ec <pressure_get_last_n_serial_format+0x130>)
 8002008:	fb83 1302 	smull	r1, r3, r3, r2
 800200c:	1099      	asrs	r1, r3, #2
 800200e:	17d3      	asrs	r3, r2, #31
 8002010:	1ac9      	subs	r1, r1, r3
 8002012:	460b      	mov	r3, r1
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	613b      	str	r3, [r7, #16]
        Pressure_Data_t* data = &pressure_sensor->history[index];
 800201e:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <pressure_get_last_n_serial_format+0x12c>)
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3304      	adds	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]

        out[i * 8 + 0] = (data->pressure >> 16) & 0xFF;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0c1a      	lsrs	r2, r3, #16
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4619      	mov	r1, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	440b      	add	r3, r1
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 1] = (data->pressure >> 8) & 0xFF;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	0a19      	lsrs	r1, r3, #8
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	3301      	adds	r3, #1
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 2] = (data->pressure >> 0) & 0xFF;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	3302      	adds	r3, #2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b2ca      	uxtb	r2, r1
 800206a:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 3] = 0x00;
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	3303      	adds	r3, #3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0e19      	lsrs	r1, r3, #24
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	3304      	adds	r3, #4
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	b2ca      	uxtb	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0c19      	lsrs	r1, r3, #16
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	3305      	adds	r3, #5
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	b2ca      	uxtb	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 6] = (data->timestamp >> 8) & 0xFF;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0a19      	lsrs	r1, r3, #8
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	3306      	adds	r3, #6
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 7] = (data->timestamp >> 0) & 0xFF;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	3307      	adds	r3, #7
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; ++i) {
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	3301      	adds	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
 80020ce:	7dfa      	ldrb	r2, [r7, #23]
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d38e      	bcc.n	8001ff4 <pressure_get_last_n_serial_format+0x38>
    }

    return (n * 8);
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	b2db      	uxtb	r3, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20000228 	.word	0x20000228
 80020ec:	66666667 	.word	0x66666667

080020f0 <pressure_get_temp_last_n_serial_format>:


uint8_t pressure_get_temp_last_n_serial_format(uint8_t n, uint8_t* out) {
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
    if (!pressure_sensor || !out || n == 0 || n > pressure_sensor->count) return 0;
 80020fc:	4b46      	ldr	r3, [pc, #280]	@ (8002218 <pressure_get_temp_last_n_serial_format+0x128>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <pressure_get_temp_last_n_serial_format+0x2e>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <pressure_get_temp_last_n_serial_format+0x2e>
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <pressure_get_temp_last_n_serial_format+0x2e>
 8002110:	4b41      	ldr	r3, [pc, #260]	@ (8002218 <pressure_get_temp_last_n_serial_format+0x128>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d901      	bls.n	8002122 <pressure_get_temp_last_n_serial_format+0x32>
 800211e:	2300      	movs	r3, #0
 8002120:	e074      	b.n	800220c <pressure_get_temp_last_n_serial_format+0x11c>

    for (uint8_t i = 0; i < n; ++i) {
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
 8002126:	e06a      	b.n	80021fe <pressure_get_temp_last_n_serial_format+0x10e>
        int index = (pressure_sensor->head_index - 1 - i + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE;
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <pressure_get_temp_last_n_serial_format+0x128>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f103 020a 	add.w	r2, r3, #10
 800213a:	4b38      	ldr	r3, [pc, #224]	@ (800221c <pressure_get_temp_last_n_serial_format+0x12c>)
 800213c:	fb83 1302 	smull	r1, r3, r3, r2
 8002140:	1099      	asrs	r1, r3, #2
 8002142:	17d3      	asrs	r3, r2, #31
 8002144:	1ac9      	subs	r1, r1, r3
 8002146:	460b      	mov	r3, r1
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	613b      	str	r3, [r7, #16]
        Pressure_Data_t* data = &pressure_sensor->history[index];
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <pressure_get_temp_last_n_serial_format+0x128>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	60fb      	str	r3, [r7, #12]

        out[i * 8 + 0] = (data->temperature >> 8) & 0xFF;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	891b      	ldrh	r3, [r3, #8]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b29a      	uxth	r2, r3
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4619      	mov	r1, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	440b      	add	r3, r1
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 1] = (data->temperature >> 0) & 0xFF;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8919      	ldrh	r1, [r3, #8]
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	3301      	adds	r3, #1
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 2] = 0x00;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	3302      	adds	r3, #2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	4413      	add	r3, r2
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 3] = 0x00;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	3303      	adds	r3, #3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0e19      	lsrs	r1, r3, #24
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	3304      	adds	r3, #4
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0c19      	lsrs	r1, r3, #16
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	3305      	adds	r3, #5
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	b2ca      	uxtb	r2, r1
 80021d0:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 6] = (data->timestamp >> 8) & 0xFF;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0a19      	lsrs	r1, r3, #8
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	3306      	adds	r3, #6
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	b2ca      	uxtb	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 7] = (data->timestamp >> 0) & 0xFF;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	3307      	adds	r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; ++i) {
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	3301      	adds	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
 80021fe:	7dfa      	ldrb	r2, [r7, #23]
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	429a      	cmp	r2, r3
 8002204:	d390      	bcc.n	8002128 <pressure_get_temp_last_n_serial_format+0x38>
    }

    return (n * 8);
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	b2db      	uxtb	r3, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20000228 	.word	0x20000228
 800221c:	66666667 	.word	0x66666667

08002220 <pressure_trigger_measurement>:



static bool pressure_trigger_measurement() {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0

	//USED if one shot mode
    I2C_Handler_t* i2c = i2c_handler_get();
 8002226:	f7fe ff91 	bl	800114c <i2c_handler_get>
 800222a:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = { PRESSURE_SENSOR_LPS22HH_CTRL_REG2, 0x01 };  // ONE_SHOT
 800222c:	f240 1311 	movw	r3, #273	@ 0x111
 8002230:	803b      	strh	r3, [r7, #0]
    return i2c->write_reg(pressure_sensor->i2c_address, cmd, 2);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <pressure_trigger_measurement+0x2c>)
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	7810      	ldrb	r0, [r2, #0]
 800223c:	4639      	mov	r1, r7
 800223e:	2202      	movs	r2, #2
 8002240:	4798      	blx	r3
 8002242:	4603      	mov	r3, r0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000228 	.word	0x20000228

08002250 <pressure_trigger_data_collection>:



static bool pressure_trigger_data_collection() {
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
    I2C_Handler_t* i2c = i2c_handler_get();
 8002256:	f7fe ff79 	bl	800114c <i2c_handler_get>
 800225a:	6078      	str	r0, [r7, #4]

    // Step 1: Check data ready
    uint8_t reg = PRESSURE_SENSOR_LPS22HH_STATUS_REG;
 800225c:	2327      	movs	r3, #39	@ 0x27
 800225e:	70fb      	strb	r3, [r7, #3]
    if (!i2c->read_reg(pressure_sensor->i2c_address, &reg, 1, 1)){
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <pressure_trigger_data_collection+0x84>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	7818      	ldrb	r0, [r3, #0]
 800226a:	1cf9      	adds	r1, r7, #3
 800226c:	2301      	movs	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	47a0      	blx	r4
 8002272:	4603      	mov	r3, r0
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <pressure_trigger_data_collection+0x32>
    	return false;
 800227e:	2300      	movs	r3, #0
 8002280:	e023      	b.n	80022ca <pressure_trigger_data_collection+0x7a>
    }
//    HAL_Delay(5);

    if (!(i2c->Response_buffer[0] == 0x33)) {
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002288:	2b33      	cmp	r3, #51	@ 0x33
 800228a:	d001      	beq.n	8002290 <pressure_trigger_data_collection+0x40>
        return false;  // Pressure data not ready
 800228c:	2300      	movs	r3, #0
 800228e:	e01c      	b.n	80022ca <pressure_trigger_data_collection+0x7a>
    }

    // Step 2: Read 3-byte pressure (0x28–0x2A), auto-increment bit
    reg = PRESSURE_SENSOR_LPS22HH_PRESS_OUT_XL;// auto-increment
 8002290:	2328      	movs	r3, #40	@ 0x28
 8002292:	70fb      	strb	r3, [r7, #3]
    if (!i2c->read_reg(pressure_sensor->i2c_address, &reg, 1, 5)) return false;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8002298:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <pressure_trigger_data_collection+0x84>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	7818      	ldrb	r0, [r3, #0]
 800229e:	1cf9      	adds	r1, r7, #3
 80022a0:	2305      	movs	r3, #5
 80022a2:	2201      	movs	r2, #1
 80022a4:	47a0      	blx	r4
 80022a6:	4603      	mov	r3, r0
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <pressure_trigger_data_collection+0x66>
 80022b2:	2300      	movs	r3, #0
 80022b4:	e009      	b.n	80022ca <pressure_trigger_data_collection+0x7a>

    pressure_sensor->decode_i2c_response(i2c->Response_buffer, 5);
 80022b6:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <pressure_trigger_data_collection+0x84>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	322a      	adds	r2, #42	@ 0x2a
 80022c2:	2105      	movs	r1, #5
 80022c4:	4610      	mov	r0, r2
 80022c6:	4798      	blx	r3


    return true;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000228 	.word	0x20000228

080022d8 <pressure_decode_i2c_response>:

static void pressure_decode_i2c_response(uint8_t* data, uint8_t len) {
 80022d8:	b480      	push	{r7}
 80022da:	b08b      	sub	sp, #44	@ 0x2c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
    if (len < 5){

	}
	uint32_t raw_pressure = ((uint32_t) data[2] << 16) | ((uint32_t) data[1] << 8)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3302      	adds	r3, #2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	041a      	lsls	r2, r3, #16
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4313      	orrs	r3, r2
			| (uint32_t) data[0];
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	7812      	ldrb	r2, [r2, #0]
	uint32_t raw_pressure = ((uint32_t) data[2] << 16) | ((uint32_t) data[1] << 8)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
	float pressure = raw_pressure / 4096.0f; //hpA
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002308:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023ec <pressure_decode_i2c_response+0x114>
 800230c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002310:	edc7 7a08 	vstr	s15, [r7, #32]

	uint16_t raw_temp = (int16_t)((data[4] << 8) | data[3]);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b21b      	sxth	r3, r3
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3303      	adds	r3, #3
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b21b      	sxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b21b      	sxth	r3, r3
 800232c:	83fb      	strh	r3, [r7, #30]
	float temperature = raw_temp / 100.0f;
 800232e:	8bfb      	ldrh	r3, [r7, #30]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002338:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80023f0 <pressure_decode_i2c_response+0x118>
 800233c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002340:	edc7 7a06 	vstr	s15, [r7, #24]

	Pressure_Data_t reading;
	reading.pressure = pressure*10;
 8002344:	edd7 7a08 	vldr	s15, [r7, #32]
 8002348:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800234c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	613b      	str	r3, [r7, #16]
	reading.temperature=temperature*100;
 800235a:	edd7 7a06 	vldr	s15, [r7, #24]
 800235e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80023f0 <pressure_decode_i2c_response+0x118>
 8002362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800236a:	ee17 3a90 	vmov	r3, s15
 800236e:	b29b      	uxth	r3, r3
 8002370:	82bb      	strh	r3, [r7, #20]
    reading.timestamp = 0x60D4A000;  // Dummy timestamp; replace with RTC if available
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <pressure_decode_i2c_response+0x11c>)
 8002374:	60fb      	str	r3, [r7, #12]

    pressure_sensor->history[pressure_sensor->head_index] = reading;
 8002376:	4b20      	ldr	r3, [pc, #128]	@ (80023f8 <pressure_decode_i2c_response+0x120>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <pressure_decode_i2c_response+0x120>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8002382:	4619      	mov	r1, r3
 8002384:	460b      	mov	r3, r1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	440b      	add	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3304      	adds	r3, #4
 8002390:	f107 020c 	add.w	r2, r7, #12
 8002394:	ca07      	ldmia	r2, {r0, r1, r2}
 8002396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pressure_sensor->head_index = (pressure_sensor->head_index + 1) % PRESSURE_SENSOR_HISTORY_SIZE;
 800239a:	4b17      	ldr	r3, [pc, #92]	@ (80023f8 <pressure_decode_i2c_response+0x120>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <pressure_decode_i2c_response+0x124>)
 80023a6:	fb83 1302 	smull	r1, r3, r3, r2
 80023aa:	1099      	asrs	r1, r3, #2
 80023ac:	17d3      	asrs	r3, r2, #31
 80023ae:	1ac9      	subs	r1, r1, r3
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	1ad1      	subs	r1, r2, r3
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <pressure_decode_i2c_response+0x120>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b2ca      	uxtb	r2, r1
 80023c0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (pressure_sensor->count < PRESSURE_SENSOR_HISTORY_SIZE)
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <pressure_decode_i2c_response+0x120>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d807      	bhi.n	80023e0 <pressure_decode_i2c_response+0x108>
        pressure_sensor->count++;
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <pressure_decode_i2c_response+0x120>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80023d8:	3201      	adds	r2, #1
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
}
 80023e0:	bf00      	nop
 80023e2:	372c      	adds	r7, #44	@ 0x2c
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	45800000 	.word	0x45800000
 80023f0:	42c80000 	.word	0x42c80000
 80023f4:	60d4a000 	.word	0x60d4a000
 80023f8:	20000228 	.word	0x20000228
 80023fc:	66666667 	.word	0x66666667

08002400 <sensor_interface_init>:
//sensor_interface_trigger_schedule_t sensor_interface_trigger_schedule_state;
sensor_interface_trigger_schedule_t sensor_interface_schedule;

// Internal buffer for I2C tx/rx

void sensor_interface_init(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	sensor_interface_schedule=TRIGGER_ENV_TEMP;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <sensor_interface_init+0x1c>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
//    temp_sensor_init(SENSOR_ADDRESS_TEMP_HUM_HTS221);
    pressure_sensor_init(SENSOR_ADDRESS_PRESSURE_LPS22HH);
 800240a:	205d      	movs	r0, #93	@ 0x5d
 800240c:	f7ff fc5c 	bl	8001cc8 <pressure_sensor_init>
    ppg_sensor_init(SENSOR_ADDRESS_PPG_SEN0344);
 8002410:	2057      	movs	r0, #87	@ 0x57
 8002412:	f7ff f909 	bl	8001628 <ppg_sensor_init>

}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000254 	.word	0x20000254

08002420 <sensor_interface_schedule_readings>:
void sensor_interface_deinit(void) {
//    temp_sensor_deinit();
    // TODO: Add other sensor deinit
}

void sensor_interface_schedule_readings(void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0

	//STEP1:
	//Check if a data processing is queue
	I2C_Handler_t* i2c_handle=i2c_handler_get();
 8002426:	f7fe fe91 	bl	800114c <i2c_handler_get>
 800242a:	60f8      	str	r0, [r7, #12]
	Temp_Sensor_t* temp = temp_sensor_get();
 800242c:	f000 faf2 	bl	8002a14 <temp_sensor_get>
 8002430:	60b8      	str	r0, [r7, #8]
	Pressure_Sensor_t* pres=pressure_sensor_get();
 8002432:	f7ff fceb 	bl	8001e0c <pressure_sensor_get>
 8002436:	6078      	str	r0, [r7, #4]
	PPG_Sensor_t* ppg=ppg_sensor_get();
 8002438:	f7ff f96e 	bl	8001718 <ppg_sensor_get>
 800243c:	6038      	str	r0, [r7, #0]
//	}


	//STEP2:
	//Schedule new reading
    if(i2c_handle->state==I2C_STATE_IDLE){
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <sensor_interface_schedule_readings+0x54>

    	sensor_interface_schedule=(sensor_interface_schedule+1)%TRIGGER_COUNT;// schedule next reading
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <sensor_interface_schedule_readings+0x5c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <sensor_interface_schedule_readings+0x60>)
 800244e:	fb83 3102 	smull	r3, r1, r3, r2
 8002452:	17d3      	asrs	r3, r2, #31
 8002454:	1ac9      	subs	r1, r1, r3
 8002456:	460b      	mov	r3, r1
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	440b      	add	r3, r1
 800245c:	1ad1      	subs	r1, r2, r3
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <sensor_interface_schedule_readings+0x5c>)
 8002462:	701a      	strb	r2, [r3, #0]

//    	temp->trigger_data_collection();
    	pres->trigger_data_collection();
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800246a:	4798      	blx	r3
    	ppg->trigger_data_collection();
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002472:	4798      	blx	r3

    }



}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000254 	.word	0x20000254
 8002480:	55555556 	.word	0x55555556

08002484 <sensor_interface_handle_cmd>:

void sensor_interface_handle_cmd(uint8_t cmd_id, uint8_t* payload, uint8_t len, uint8_t* payload_out, uint8_t* len_out) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4603      	mov	r3, r0
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	4613      	mov	r3, r2
 8002494:	73bb      	strb	r3, [r7, #14]
	PPG_Sensor_t* ppg=ppg_sensor_get();
 8002496:	f7ff f93f 	bl	8001718 <ppg_sensor_get>
 800249a:	6178      	str	r0, [r7, #20]
	switch (cmd_id) {
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3b01      	subs	r3, #1
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d872      	bhi.n	800258a <sensor_interface_handle_cmd+0x106>
 80024a4:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <sensor_interface_handle_cmd+0x28>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	0800255f 	.word	0x0800255f
 80024b0:	080024bd 	.word	0x080024bd
 80024b4:	0800251d 	.word	0x0800251d
 80024b8:	0800258b 	.word	0x0800258b
	case CMD_REQ_TEMP_DATA:
		if (payload[0] == 0x02) {
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d113      	bne.n	80024ec <sensor_interface_handle_cmd+0x68>
//			if (env_temp && env_temp->get_last_n_data_serial_format) {
//				payload_out[0]=0x02;
//				(*len_out)=env_temp->get_last_n_data_serial_format(1,payload_out+1);
//				(*len_out)= (*len_out)+1;
//			}
			payload_out[0] = 0x02;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]

			(*len_out) = pressure_get_temp_last_n_serial_format(1,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4619      	mov	r1, r3
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff fe0d 	bl	80020f0 <pressure_get_temp_last_n_serial_format>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	701a      	strb	r2, [r3, #0]
					payload_out + 1);
			(*len_out) = (*len_out) + 1;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	701a      	strb	r2, [r3, #0]
					payload_out + 1);
			(*len_out) = (*len_out) + 1;

		}

		break;
 80024ea:	e050      	b.n	800258e <sensor_interface_handle_cmd+0x10a>
		} else if (payload[0] == 0x01) {
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d14c      	bne.n	800258e <sensor_interface_handle_cmd+0x10a>
			payload_out[0] = 0x01;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
			(*len_out) = ppg_get_last_n_bodytemp_serial_format(1,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4619      	mov	r1, r3
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fa8f 	bl	8001a24 <ppg_get_last_n_bodytemp_serial_format>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	701a      	strb	r2, [r3, #0]
			(*len_out) = (*len_out) + 1;
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	701a      	strb	r2, [r3, #0]
		break;
 800251a:	e038      	b.n	800258e <sensor_interface_handle_cmd+0x10a>

	case CMD_REQ_PRESSURE_DATA:
		Pressure_Sensor_t *press = pressure_sensor_get();
 800251c:	f7ff fc76 	bl	8001e0c <pressure_sensor_get>
 8002520:	6138      	str	r0, [r7, #16]
		if (press && press->get_last_n_data_serial_format) {
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d034      	beq.n	8002592 <sensor_interface_handle_cmd+0x10e>
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02f      	beq.n	8002592 <sensor_interface_handle_cmd+0x10e>
			payload_out[0] = 0x00; //Reserved bit in this case not used
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
			(*len_out) = press->get_last_n_data_serial_format(1, payload_out + 1);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	3201      	adds	r2, #1
 8002542:	4611      	mov	r1, r2
 8002544:	2001      	movs	r0, #1
 8002546:	4798      	blx	r3
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	701a      	strb	r2, [r3, #0]
			(*len_out) = (*len_out) + 1;
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800255c:	e019      	b.n	8002592 <sensor_interface_handle_cmd+0x10e>

	case CMD_REQ_HR_SPO2_DATA:


		payload_out[0] = 0x00; //Reserved bit in this case not used
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
		(*len_out) = ppg->get_last_n_data_serial_format(1, payload_out + 1);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	3201      	adds	r2, #1
 800256e:	4611      	mov	r1, r2
 8002570:	2001      	movs	r0, #1
 8002572:	4798      	blx	r3
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	701a      	strb	r2, [r3, #0]
		(*len_out) = (*len_out) + 1;
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	701a      	strb	r2, [r3, #0]

		//TODO: After finishig sensor declaration
		break;
 8002588:	e004      	b.n	8002594 <sensor_interface_handle_cmd+0x110>
		// TODO: Add support for composing full sensor packet with all sensor readings
		break;

        default:
            // Unknown command
            break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <sensor_interface_handle_cmd+0x110>
		break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <sensor_interface_handle_cmd+0x110>
		break;
 8002592:	bf00      	nop
    }
}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_MspInit+0x30>)
 80025a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a8:	4a08      	ldr	r2, [pc, #32]	@ (80025cc <HAL_MspInit+0x30>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_MspInit+0x30>)
 80025b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	46020c00 	.word	0x46020c00

080025d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0bc      	sub	sp, #240	@ 0xf0
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	22c8      	movs	r2, #200	@ 0xc8
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f00a fbe9 	bl	800cdc8 <memset>
  if(hi2c->Instance==I2C2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2e      	ldr	r2, [pc, #184]	@ (80026b4 <HAL_I2C_MspInit+0xe4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d154      	bne.n	80026aa <HAL_I2C_MspInit+0xda>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002600:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800260c:	2300      	movs	r3, #0
 800260e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4618      	mov	r0, r3
 8002616:	f005 f803 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8002620:	f7fe ffc4 	bl	80015ac <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002624:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_I2C_MspInit+0xe8>)
 8002626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800262a:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <HAL_I2C_MspInit+0xe8>)
 800262c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002630:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002634:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <HAL_I2C_MspInit+0xe8>)
 8002636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002642:	2330      	movs	r3, #48	@ 0x30
 8002644:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002648:	2312      	movs	r3, #18
 800264a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800265a:	2304      	movs	r3, #4
 800265c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002660:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002664:	4619      	mov	r1, r3
 8002666:	4815      	ldr	r0, [pc, #84]	@ (80026bc <HAL_I2C_MspInit+0xec>)
 8002668:	f000 fe92 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_I2C_MspInit+0xe8>)
 800266e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002672:	4a11      	ldr	r2, [pc, #68]	@ (80026b8 <HAL_I2C_MspInit+0xe8>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002678:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800267c:	4b0e      	ldr	r3, [pc, #56]	@ (80026b8 <HAL_I2C_MspInit+0xe8>)
 800267e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2039      	movs	r0, #57	@ 0x39
 8002690:	f000 fce0 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002694:	2039      	movs	r0, #57	@ 0x39
 8002696:	f000 fcf7 	bl	8003088 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	203a      	movs	r0, #58	@ 0x3a
 80026a0:	f000 fcd8 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80026a4:	203a      	movs	r0, #58	@ 0x3a
 80026a6:	f000 fcef 	bl	8003088 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80026aa:	bf00      	nop
 80026ac:	37f0      	adds	r7, #240	@ 0xf0
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40005800 	.word	0x40005800
 80026b8:	46020c00 	.word	0x46020c00
 80026bc:	42021c00 	.word	0x42021c00

080026c0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0b6      	sub	sp, #216	@ 0xd8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c8:	f107 0310 	add.w	r3, r7, #16
 80026cc:	22c8      	movs	r2, #200	@ 0xc8
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f00a fb79 	bl	800cdc8 <memset>
  if(hrtc->Instance==RTC)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_RTC_MspInit+0x90>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d132      	bne.n	8002746 <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 ff91 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002704:	f7fe ff52 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 800270a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800270e:	4a11      	ldr	r2, [pc, #68]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 8002710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002714:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 800271a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800271e:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 8002720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002724:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002728:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 800272a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800272e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002736:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 8002738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800273c:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <HAL_RTC_MspInit+0x94>)
 800273e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002742:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002746:	bf00      	nop
 8002748:	37d8      	adds	r7, #216	@ 0xd8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	46007800 	.word	0x46007800
 8002754:	46020c00 	.word	0x46020c00

08002758 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <HAL_TIM_Base_MspInit+0x48>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d116      	bne.n	8002798 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800276a:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <HAL_TIM_Base_MspInit+0x4c>)
 800276c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002770:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002776:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_TIM_Base_MspInit+0x4c>)
 800277c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2046      	movs	r0, #70	@ 0x46
 800278e:	f000 fc61 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002792:	2046      	movs	r0, #70	@ 0x46
 8002794:	f000 fc78 	bl	8003088 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40014400 	.word	0x40014400
 80027a4:	46020c00 	.word	0x46020c00

080027a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0bc      	sub	sp, #240	@ 0xf0
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	22c8      	movs	r2, #200	@ 0xc8
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f00a fafd 	bl	800cdc8 <memset>
  if(huart->Instance==UART4)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2a      	ldr	r2, [pc, #168]	@ (800287c <HAL_UART_MspInit+0xd4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d14d      	bne.n	8002874 <HAL_UART_MspInit+0xcc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027d8:	f04f 0208 	mov.w	r2, #8
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 ff17 	bl	8007620 <HAL_RCCEx_PeriphCLKConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80027f8:	f7fe fed8 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027fc:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <HAL_UART_MspInit+0xd8>)
 80027fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002802:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <HAL_UART_MspInit+0xd8>)
 8002804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002808:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800280c:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_UART_MspInit+0xd8>)
 800280e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <HAL_UART_MspInit+0xd8>)
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002820:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <HAL_UART_MspInit+0xd8>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_UART_MspInit+0xd8>)
 800282c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002838:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800283c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002852:	2308      	movs	r3, #8
 8002854:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002858:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800285c:	4619      	mov	r1, r3
 800285e:	4809      	ldr	r0, [pc, #36]	@ (8002884 <HAL_UART_MspInit+0xdc>)
 8002860:	f000 fd96 	bl	8003390 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	2040      	movs	r0, #64	@ 0x40
 800286a:	f000 fbf3 	bl	8003054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800286e:	2040      	movs	r0, #64	@ 0x40
 8002870:	f000 fc0a 	bl	8003088 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8002874:	bf00      	nop
 8002876:	37f0      	adds	r7, #240	@ 0xf0
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40004c00 	.word	0x40004c00
 8002880:	46020c00 	.word	0x46020c00
 8002884:	42020800 	.word	0x42020800

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <NMI_Handler+0x4>

08002890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <MemManage_Handler+0x4>

080028a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <BusFault_Handler+0x4>

080028a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <UsageFault_Handler+0x4>

080028b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028de:	f000 fabd 	bl	8002e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <I2C2_EV_IRQHandler+0x10>)
 80028ee:	f001 fbcf 	bl	8004090 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000098 	.word	0x20000098

080028fc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <I2C2_ER_IRQHandler+0x10>)
 8002902:	f001 fbdf 	bl	80040c4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000098 	.word	0x20000098

08002910 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <UART4_IRQHandler+0x10>)
 8002916:	f008 fadb 	bl	800aed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000168 	.word	0x20000168

08002924 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <TIM16_IRQHandler+0x10>)
 800292a:	f007 ff26 	bl	800a77a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000011c 	.word	0x2000011c

08002938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002940:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <_sbrk+0x5c>)
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <_sbrk+0x60>)
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <_sbrk+0x64>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <_sbrk+0x68>)
 8002958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <_sbrk+0x64>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d207      	bcs.n	8002978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002968:	f00a fa46 	bl	800cdf8 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	220c      	movs	r2, #12
 8002970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
 8002976:	e009      	b.n	800298c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	4a05      	ldr	r2, [pc, #20]	@ (800299c <_sbrk+0x64>)
 8002988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298a:	68fb      	ldr	r3, [r7, #12]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200c0000 	.word	0x200c0000
 8002998:	00000400 	.word	0x00000400
 800299c:	20000258 	.word	0x20000258
 80029a0:	20000430 	.word	0x20000430

080029a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029a8:	4b18      	ldr	r3, [pc, #96]	@ (8002a0c <SystemInit+0x68>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	4a17      	ldr	r2, [pc, #92]	@ (8002a0c <SystemInit+0x68>)
 80029b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <SystemInit+0x6c>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80029be:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <SystemInit+0x6c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80029c4:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <SystemInit+0x6c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80029ca:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <SystemInit+0x6c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80029d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <SystemInit+0x6c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002a10 <SystemInit+0x6c>)
 80029d6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80029da:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80029de:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <SystemInit+0x6c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <SystemInit+0x6c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <SystemInit+0x6c>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80029f2:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <SystemInit+0x6c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <SystemInit+0x68>)
 80029fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029fe:	609a      	str	r2, [r3, #8]
  #endif
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00
 8002a10:	46020c00 	.word	0x46020c00

08002a14 <temp_sensor_get>:
		temp_sensor = NULL;
	}
}


Temp_Sensor_t* temp_sensor_get(void) {
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
    return temp_sensor;
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <temp_sensor_get+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2000025c 	.word	0x2000025c

08002a2c <Calculate_CRC>:

// Forward declarations
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len);

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73bb      	strb	r3, [r7, #14]
 8002a40:	e009      	b.n	8002a56 <Calculate_CRC+0x2a>
        crc ^= data[i];
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	4053      	eors	r3, r2
 8002a4e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8002a50:	7bbb      	ldrb	r3, [r7, #14]
 8002a52:	3301      	adds	r3, #1
 8002a54:	73bb      	strb	r3, [r7, #14]
 8002a56:	7bba      	ldrb	r2, [r7, #14]
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3f1      	bcc.n	8002a42 <Calculate_CRC+0x16>
    }
    return crc;
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
    if (Size >= 7 && rx_buffer[0] == 0xAA) {
 8002a78:	887b      	ldrh	r3, [r7, #2]
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d90a      	bls.n	8002a94 <HAL_UARTEx_RxEventCallback+0x28>
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_UARTEx_RxEventCallback+0x40>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2baa      	cmp	r3, #170	@ 0xaa
 8002a84:	d106      	bne.n	8002a94 <HAL_UARTEx_RxEventCallback+0x28>
        uart_handler->process_recived_pck(rx_buffer, Size);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_UARTEx_RxEventCallback+0x44>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	887a      	ldrh	r2, [r7, #2]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4806      	ldr	r0, [pc, #24]	@ (8002aac <HAL_UARTEx_RxEventCallback+0x40>)
 8002a92:	4798      	blx	r3
    }
    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_UARTEx_RxEventCallback+0x44>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2240      	movs	r2, #64	@ 0x40
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <HAL_UARTEx_RxEventCallback+0x40>)
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f00a f82f 	bl	800cb02 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200002a4 	.word	0x200002a4
 8002ab0:	20000260 	.word	0x20000260

08002ab4 <uart_handler_Process_Received_pck>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
    if (size < 7) return;
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d945      	bls.n	8002b52 <uart_handler_Process_Received_pck+0x9e>

    uint8_t received_crc = pck[size - 1];
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	73fb      	strb	r3, [r7, #15]
    uint8_t calculated_crc = Calculate_CRC(&pck[0], size - 1); // exclude start byte and CRC
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ffa5 	bl	8002a2c <Calculate_CRC>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73bb      	strb	r3, [r7, #14]
    if (received_crc != calculated_crc) {
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d004      	beq.n	8002af8 <uart_handler_Process_Received_pck+0x44>
        uart_handler->state = UART_STATE_ERROR;
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2203      	movs	r2, #3
 8002af4:	701a      	strb	r2, [r3, #0]
        return;
 8002af6:	e02d      	b.n	8002b54 <uart_handler_Process_Received_pck+0xa0>
    }

    uart_handler->cmd_packet->header = pck[0];
 8002af8:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
    uart_handler->cmd_packet->cmd_type = pck[1];
 8002b04:	4b15      	ldr	r3, [pc, #84]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	7852      	ldrb	r2, [r2, #1]
 8002b0e:	705a      	strb	r2, [r3, #1]
    uart_handler->cmd_packet->payload_len = pck[2];
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	7892      	ldrb	r2, [r2, #2]
 8002b1a:	709a      	strb	r2, [r3, #2]
    memcpy(uart_handler->cmd_packet->payload, &pck[3], 5);
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	1cd8      	adds	r0, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3303      	adds	r3, #3
 8002b28:	2205      	movs	r2, #5
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f00a f990 	bl	800ce50 <memcpy>
    uart_handler->cmd_packet->crc = received_crc;
 8002b30:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    uart_handler->state = UART_STATE_PROCESSING;
 8002b3c:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]

    // Here you should now call your command dispatcher logic:
    data_handler_dispatcher(uart_handler->cmd_packet);
 8002b44:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <uart_handler_Process_Received_pck+0xa8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f970 	bl	8000e30 <data_handler_dispatcher>
 8002b50:	e000      	b.n	8002b54 <uart_handler_Process_Received_pck+0xa0>
    if (size < 7) return;
 8002b52:	bf00      	nop
}
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000260 	.word	0x20000260

08002b60 <uart_handler_Send_Response>:

static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len) {
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = tx_buffer;
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <uart_handler_Send_Response+0xa4>)
 8002b72:	60fb      	str	r3, [r7, #12]
    uint8_t idx = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	72fb      	strb	r3, [r7, #11]

    buf[idx++] = 0xAA;                     // Start byte
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	72fa      	strb	r2, [r7, #11]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	22aa      	movs	r2, #170	@ 0xaa
 8002b86:	701a      	strb	r2, [r3, #0]
    buf[idx++] = cmd;                  // Response CMD/status
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	72fa      	strb	r2, [r7, #11]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	701a      	strb	r2, [r3, #0]
    buf[idx++] = payload_len;             // Payload length
 8002b98:	7afb      	ldrb	r3, [r7, #11]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	72fa      	strb	r2, [r7, #11]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	79ba      	ldrb	r2, [r7, #6]
 8002ba6:	701a      	strb	r2, [r3, #0]

    memcpy(&buf[idx], payload, payload_len);
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	79ba      	ldrb	r2, [r7, #6]
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f00a f94c 	bl	800ce50 <memcpy>
    idx += payload_len;
 8002bb8:	7afa      	ldrb	r2, [r7, #11]
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	72fb      	strb	r3, [r7, #11]


    buf[idx] = Calculate_CRC(&buf[1], idx - 1); // CRC over CMD + LEN + payload + timestamp
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1c58      	adds	r0, r3, #1
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b2d9      	uxtb	r1, r3
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	18d4      	adds	r4, r2, r3
 8002bd0:	f7ff ff2c 	bl	8002a2c <Calculate_CRC>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	7023      	strb	r3, [r4, #0]
    idx++;
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	72fb      	strb	r3, [r7, #11]

    HAL_UART_Transmit(uart_handler->huart, buf, idx, HAL_MAX_DELAY);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <uart_handler_Send_Response+0xa8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d8      	ldr	r0, [r3, #12]
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	f008 f8d1 	bl	800ad94 <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 8002bf2:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <uart_handler_Send_Response+0xa8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000264 	.word	0x20000264
 8002c08:	20000260 	.word	0x20000260

08002c0c <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 8002c14:	2020      	movs	r0, #32
 8002c16:	f00a f821 	bl	800cc5c <malloc>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c20:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c24:	681c      	ldr	r4, [r3, #0]
 8002c26:	203e      	movs	r0, #62	@ 0x3e
 8002c28:	f00a f818 	bl	800cc5c <malloc>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8002c30:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c32:	681c      	ldr	r4, [r3, #0]
 8002c34:	203e      	movs	r0, #62	@ 0x3e
 8002c36:	f00a f811 	bl	800cc5c <malloc>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	60a3      	str	r3, [r4, #8]

    uart_handler->huart = huart;
 8002c3e:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
    uart_handler->state = UART_STATE_IDLE;
 8002c46:	4b12      	ldr	r3, [pc, #72]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	223a      	movs	r2, #58	@ 0x3a
 8002c54:	705a      	strb	r2, [r3, #1]
    uart_handler->rx_buffer = rx_buffer;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <uart_handler_Init+0x88>)
 8002c5c:	61da      	str	r2, [r3, #28]
    uart_handler->tx_buffer = tx_buffer;
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <uart_handler_Init+0x8c>)
 8002c64:	619a      	str	r2, [r3, #24]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c9c <uart_handler_Init+0x90>)
 8002c6c:	611a      	str	r2, [r3, #16]
    uart_handler->send_response = uart_handler_Send_Response;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <uart_handler_Init+0x94>)
 8002c74:	615a      	str	r2, [r3, #20]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <uart_handler_Init+0x84>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2240      	movs	r2, #64	@ 0x40
 8002c7e:	4905      	ldr	r1, [pc, #20]	@ (8002c94 <uart_handler_Init+0x88>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f009 ff3e 	bl	800cb02 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000260 	.word	0x20000260
 8002c94:	200002a4 	.word	0x200002a4
 8002c98:	20000264 	.word	0x20000264
 8002c9c:	08002ab5 	.word	0x08002ab5
 8002ca0:	08002b61 	.word	0x08002b61

08002ca4 <uart_handler_get>:
        memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
        memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
    }
}

UART_Handler_t* uart_handler_get(void) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
    return uart_handler;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <uart_handler_get+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000260 	.word	0x20000260

08002cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cf4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cc0:	f7ff fe70 	bl	80029a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002cc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002cc6:	e003      	b.n	8002cd0 <LoopCopyDataInit>

08002cc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002cca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ccc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002cce:	3104      	adds	r1, #4

08002cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002cd0:	480a      	ldr	r0, [pc, #40]	@ (8002cfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002cd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002cd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002cd8:	d3f6      	bcc.n	8002cc8 <CopyDataInit>
	ldr	r2, =_sbss
 8002cda:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002cdc:	e002      	b.n	8002ce4 <LoopFillZerobss>

08002cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002cde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ce0:	f842 3b04 	str.w	r3, [r2], #4

08002ce4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ce4:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <LoopForever+0x16>)
	cmp	r2, r3
 8002ce6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ce8:	d3f9      	bcc.n	8002cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cea:	f00a f88b 	bl	800ce04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cee:	f7fe fa39 	bl	8001164 <main>

08002cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cf2:	e7fe      	b.n	8002cf2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002cf4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002cf8:	0800cf98 	.word	0x0800cf98
	ldr	r0, =_sdata
 8002cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d00:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8002d04:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8002d08:	2000042d 	.word	0x2000042d

08002d0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC1_IRQHandler>
	...

08002d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_Init+0x50>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <HAL_Init+0x50>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f000 f98c 	bl	800303e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d26:	f004 fa9d 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <HAL_Init+0x54>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	490c      	ldr	r1, [pc, #48]	@ (8002d68 <HAL_Init+0x58>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <HAL_Init+0x5c>)
 8002d3e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d40:	2004      	movs	r0, #4
 8002d42:	f000 f9d1 	bl	80030e8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d46:	200f      	movs	r0, #15
 8002d48:	f000 f812 	bl	8002d70 <HAL_InitTick>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e002      	b.n	8002d5c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d56:	f7ff fc21 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40022000 	.word	0x40022000
 8002d64:	46020c00 	.word	0x46020c00
 8002d68:	0800ce88 	.word	0x0800ce88
 8002d6c:	20000000 	.word	0x20000000

08002d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002d7c:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_InitTick+0xdc>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e05c      	b.n	8002e42 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002d88:	4b31      	ldr	r3, [pc, #196]	@ (8002e50 <HAL_InitTick+0xe0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d10c      	bne.n	8002dae <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002d94:	4b2f      	ldr	r3, [pc, #188]	@ (8002e54 <HAL_InitTick+0xe4>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b2c      	ldr	r3, [pc, #176]	@ (8002e4c <HAL_InitTick+0xdc>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e037      	b.n	8002e1e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002dae:	f000 f9f3 	bl	8003198 <HAL_SYSTICK_GetCLKSourceConfig>
 8002db2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d023      	beq.n	8002e02 <HAL_InitTick+0x92>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d82d      	bhi.n	8002e1c <HAL_InitTick+0xac>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_InitTick+0x5e>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d00d      	beq.n	8002de8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002dcc:	e026      	b.n	8002e1c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002dce:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_InitTick+0xe4>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_InitTick+0xdc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ddc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	60fb      	str	r3, [r7, #12]
        break;
 8002de6:	e01a      	b.n	8002e1e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <HAL_InitTick+0xdc>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	60fb      	str	r3, [r7, #12]
        break;
 8002e00:	e00d      	b.n	8002e1e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0xdc>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	60fb      	str	r3, [r7, #12]
        break;
 8002e1a:	e000      	b.n	8002e1e <HAL_InitTick+0xae>
        break;
 8002e1c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f940 	bl	80030a4 <HAL_SYSTICK_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e009      	b.n	8002e42 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	f04f 30ff 	mov.w	r0, #4294967295
 8002e36:	f000 f90d 	bl	8003054 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002e3a:	4a07      	ldr	r2, [pc, #28]	@ (8002e58 <HAL_InitTick+0xe8>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	e000e010 	.word	0xe000e010
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <HAL_IncTick+0x20>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_IncTick+0x24>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <HAL_IncTick+0x24>)
 8002e6e:	6013      	str	r3, [r2, #0]
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	200002e4 	.word	0x200002e4

08002e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return uwTick;
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <HAL_GetTick+0x14>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	200002e4 	.word	0x200002e4

08002e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea4:	f7ff ffee 	bl	8002e84 <HAL_GetTick>
 8002ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d005      	beq.n	8002ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <HAL_Delay+0x44>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ec2:	bf00      	nop
 8002ec4:	f7ff ffde 	bl	8002e84 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f7      	bhi.n	8002ec4 <HAL_Delay+0x28>
  {
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000008 	.word	0x20000008

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	@ (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	@ (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	@ (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	@ (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	@ 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff4c 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003062:	f7ff ff63 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 8003066:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f7ff ffb3 	bl	8002fd8 <NVIC_EncodePriority>
 8003072:	4602      	mov	r2, r0
 8003074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff82 	bl	8002f84 <__NVIC_SetPriority>
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff56 	bl	8002f48 <__NVIC_EnableIRQ>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b4:	d301      	bcc.n	80030ba <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00d      	b.n	80030d6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030ba:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_SYSTICK_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_SYSTICK_Config+0x40>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80030c8:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_SYSTICK_Config+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <HAL_SYSTICK_Config+0x40>)
 80030ce:	f043 0303 	orr.w	r3, r3, #3
 80030d2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d844      	bhi.n	8003180 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	0800311f 	.word	0x0800311f
 8003100:	0800313d 	.word	0x0800313d
 8003104:	0800315f 	.word	0x0800315f
 8003108:	08003181 	.word	0x08003181
 800310c:	08003111 	.word	0x08003111
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003110:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1e      	ldr	r2, [pc, #120]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003116:	f043 0304 	orr.w	r3, r3, #4
 800311a:	6013      	str	r3, [r2, #0]
      break;
 800311c:	e031      	b.n	8003182 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800311e:	4b1c      	ldr	r3, [pc, #112]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1b      	ldr	r2, [pc, #108]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800312a:	4b1a      	ldr	r3, [pc, #104]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800312c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003132:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800313a:	e022      	b.n	8003182 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800313c:	4b14      	ldr	r3, [pc, #80]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a13      	ldr	r2, [pc, #76]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800314a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800314e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003152:	4a10      	ldr	r2, [pc, #64]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003154:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800315c:	e011      	b.n	8003182 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800315e:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a0b      	ldr	r2, [pc, #44]	@ (8003190 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003164:	f023 0304 	bic.w	r3, r3, #4
 8003168:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800316a:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003170:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003174:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003176:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800317a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800317e:	e000      	b.n	8003182 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003180:	bf00      	nop
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010
 8003194:	46020c00 	.word	0x46020c00

08003198 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800319e:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031aa:	2304      	movs	r3, #4
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	e021      	b.n	80031f4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80031b0:	4b15      	ldr	r3, [pc, #84]	@ (8003208 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80031b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031b6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80031ba:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031c2:	d011      	beq.n	80031e8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031ca:	d810      	bhi.n	80031ee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031d8:	d003      	beq.n	80031e2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80031da:	e008      	b.n	80031ee <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031dc:	2300      	movs	r3, #0
 80031de:	607b      	str	r3, [r7, #4]
        break;
 80031e0:	e008      	b.n	80031f4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80031e2:	2301      	movs	r3, #1
 80031e4:	607b      	str	r3, [r7, #4]
        break;
 80031e6:	e005      	b.n	80031f4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80031e8:	2302      	movs	r3, #2
 80031ea:	607b      	str	r3, [r7, #4]
        break;
 80031ec:	e002      	b.n	80031f4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
        break;
 80031f2:	bf00      	nop
    }
  }
  return systick_source;
 80031f4:	687b      	ldr	r3, [r7, #4]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e010 	.word	0xe000e010
 8003208:	46020c00 	.word	0x46020c00

0800320c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003214:	f7ff fe36 	bl	8002e84 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e06b      	b.n	80032fc <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e05c      	b.n	80032fc <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0204 	orr.w	r2, r2, #4
 8003250:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2205      	movs	r2, #5
 8003256:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800325a:	e020      	b.n	800329e <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800325c:	f7ff fe12 	bl	8002e84 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b05      	cmp	r3, #5
 8003268:	d919      	bls.n	800329e <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f043 0210 	orr.w	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2203      	movs	r2, #3
 800327a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328e:	2201      	movs	r2, #1
 8003290:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e02e      	b.n	80032fc <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0d7      	beq.n	800325c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0202 	orr.w	r2, r2, #2
 80032ba:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2204      	movs	r2, #4
 80032c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80032cc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e6:	2201      	movs	r2, #1
 80032e8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e019      	b.n	800334a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d004      	beq.n	800332c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e00e      	b.n	800334a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2204      	movs	r2, #4
 8003330:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003364:	b2db      	uxtb	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	b2db      	uxtb	r3, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	@ 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033a2:	e1ba      	b.n	800371a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 81aa 	beq.w	8003714 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a55      	ldr	r2, [pc, #340]	@ (8003518 <HAL_GPIO_Init+0x188>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d15d      	bne.n	8003484 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80033ce:	2201      	movs	r2, #1
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	4013      	ands	r3, r2
 80033dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0201 	and.w	r2, r3, #1
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80033f8:	4a48      	ldr	r2, [pc, #288]	@ (800351c <HAL_GPIO_Init+0x18c>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003400:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003402:	4a46      	ldr	r2, [pc, #280]	@ (800351c <HAL_GPIO_Init+0x18c>)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	3208      	adds	r2, #8
 8003416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	4013      	ands	r3, r2
 8003430:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	220b      	movs	r2, #11
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	4313      	orrs	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	3208      	adds	r2, #8
 800344e:	69f9      	ldr	r1, [r7, #28]
 8003450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	4013      	ands	r3, r2
 800346a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2202      	movs	r2, #2
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e067      	b.n	8003554 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x104>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d145      	bne.n	8003520 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	2203      	movs	r2, #3
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	4313      	orrs	r3, r2
 800350c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e01e      	b.n	8003554 <HAL_GPIO_Init+0x1c4>
 8003516:	bf00      	nop
 8003518:	46020000 	.word	0x46020000
 800351c:	0800cee0 	.word	0x0800cee0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	4013      	ands	r3, r2
 8003536:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	4313      	orrs	r3, r2
 800354c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d00b      	beq.n	8003574 <HAL_GPIO_Init+0x1e4>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d007      	beq.n	8003574 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003568:	2b11      	cmp	r3, #17
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b12      	cmp	r3, #18
 8003572:	d130      	bne.n	80035d6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	4013      	ands	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	4313      	orrs	r3, r2
 800359c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80035aa:	2201      	movs	r2, #1
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 0201 	and.w	r2, r3, #1
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d017      	beq.n	800360e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	4313      	orrs	r3, r2
 8003606:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d07c      	beq.n	8003714 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800361a:	4a47      	ldr	r2, [pc, #284]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3318      	adds	r3, #24
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	220f      	movs	r2, #15
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	4013      	ands	r3, r2
 800363c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0a9a      	lsrs	r2, r3, #10
 8003642:	4b3e      	ldr	r3, [pc, #248]	@ (800373c <HAL_GPIO_Init+0x3ac>)
 8003644:	4013      	ands	r3, r2
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	f002 0203 	and.w	r2, r2, #3
 800364c:	00d2      	lsls	r2, r2, #3
 800364e:	4093      	lsls	r3, r2
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	4313      	orrs	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003656:	4938      	ldr	r1, [pc, #224]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3318      	adds	r3, #24
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003664:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	4013      	ands	r3, r2
 8003672:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003688:	4a2b      	ldr	r2, [pc, #172]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800368e:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43db      	mvns	r3, r3
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	4013      	ands	r3, r2
 800369c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80036b2:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80036de:	4a16      	ldr	r2, [pc, #88]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80036e6:	4b14      	ldr	r3, [pc, #80]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 80036e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800370c:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <HAL_GPIO_Init+0x3a8>)
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3301      	adds	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	f47f ae3d 	bne.w	80033a4 <HAL_GPIO_Init+0x14>
  }
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	3724      	adds	r7, #36	@ 0x24
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	46022000 	.word	0x46022000
 800373c:	002f7f7f 	.word	0x002f7f7f

08003740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e08d      	b.n	800386e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe ff32 	bl	80025d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	@ 0x24
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	e006      	b.n	80037c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d108      	bne.n	80037e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	e007      	b.n	80037f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69d9      	ldr	r1, [r3, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	461a      	mov	r2, r3
 8003884:	460b      	mov	r3, r1
 8003886:	817b      	strh	r3, [r7, #10]
 8003888:	4613      	mov	r3, r2
 800388a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b20      	cmp	r3, #32
 8003896:	f040 80da 	bne.w	8003a4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2C_Master_Transmit+0x30>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0d3      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1d8>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038b0:	f7ff fae8 	bl	8002e84 <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	2319      	movs	r3, #25
 80038bc:	2201      	movs	r2, #1
 80038be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 ff49 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0be      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2221      	movs	r2, #33	@ 0x21
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2210      	movs	r2, #16
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	893a      	ldrh	r2, [r7, #8]
 80038f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2bff      	cmp	r3, #255	@ 0xff
 8003902:	d90e      	bls.n	8003922 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	22ff      	movs	r2, #255	@ 0xff
 8003908:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390e:	b2da      	uxtb	r2, r3
 8003910:	8979      	ldrh	r1, [r7, #10]
 8003912:	4b51      	ldr	r3, [pc, #324]	@ (8003a58 <HAL_I2C_Master_Transmit+0x1e0>)
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f002 f96c 	bl	8005bf8 <I2C_TransferConfig>
 8003920:	e06c      	b.n	80039fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	8979      	ldrh	r1, [r7, #10]
 8003934:	4b48      	ldr	r3, [pc, #288]	@ (8003a58 <HAL_I2C_Master_Transmit+0x1e0>)
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f002 f95b 	bl	8005bf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003942:	e05b      	b.n	80039fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	6a39      	ldr	r1, [r7, #32]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f001 ff5f 	bl	800580c <I2C_WaitOnTXISFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e07b      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	781a      	ldrb	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d034      	beq.n	80039fc <HAL_I2C_Master_Transmit+0x184>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d130      	bne.n	80039fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	@ 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f001 fed8 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04d      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2bff      	cmp	r3, #255	@ 0xff
 80039bc:	d90e      	bls.n	80039dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	22ff      	movs	r2, #255	@ 0xff
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	8979      	ldrh	r1, [r7, #10]
 80039cc:	2300      	movs	r3, #0
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f002 f90f 	bl	8005bf8 <I2C_TransferConfig>
 80039da:	e00f      	b.n	80039fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	2300      	movs	r3, #0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f002 f8fe 	bl	8005bf8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d19e      	bne.n	8003944 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	6a39      	ldr	r1, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f001 ff45 	bl	800589a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e01a      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_I2C_Master_Transmit+0x1e4>)
 8003a2e:	400b      	ands	r3, r1
 8003a30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	80002000 	.word	0x80002000
 8003a5c:	fe00e800 	.word	0xfe00e800

08003a60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	817b      	strh	r3, [r7, #10]
 8003a70:	4613      	mov	r3, r2
 8003a72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	f040 80db 	bne.w	8003c38 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2C_Master_Receive+0x30>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0d4      	b.n	8003c3a <HAL_I2C_Master_Receive+0x1da>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a98:	f7ff f9f4 	bl	8002e84 <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2319      	movs	r3, #25
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f001 fe55 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0bf      	b.n	8003c3a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2222      	movs	r2, #34	@ 0x22
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	893a      	ldrh	r2, [r7, #8]
 8003ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2bff      	cmp	r3, #255	@ 0xff
 8003aea:	d90e      	bls.n	8003b0a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	22ff      	movs	r2, #255	@ 0xff
 8003af0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	8979      	ldrh	r1, [r7, #10]
 8003afa:	4b52      	ldr	r3, [pc, #328]	@ (8003c44 <HAL_I2C_Master_Receive+0x1e4>)
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f002 f878 	bl	8005bf8 <I2C_TransferConfig>
 8003b08:	e06d      	b.n	8003be6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	4b49      	ldr	r3, [pc, #292]	@ (8003c44 <HAL_I2C_Master_Receive+0x1e4>)
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f002 f867 	bl	8005bf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b2a:	e05c      	b.n	8003be6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	6a39      	ldr	r1, [r7, #32]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f001 fef5 	bl	8005920 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e07c      	b.n	8003c3a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d034      	beq.n	8003be6 <HAL_I2C_Master_Receive+0x186>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d130      	bne.n	8003be6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	@ 0x80
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f001 fde3 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e04d      	b.n	8003c3a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2bff      	cmp	r3, #255	@ 0xff
 8003ba6:	d90e      	bls.n	8003bc6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	22ff      	movs	r2, #255	@ 0xff
 8003bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	8979      	ldrh	r1, [r7, #10]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f002 f81a 	bl	8005bf8 <I2C_TransferConfig>
 8003bc4:	e00f      	b.n	8003be6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	8979      	ldrh	r1, [r7, #10]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f002 f809 	bl	8005bf8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d19d      	bne.n	8003b2c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	6a39      	ldr	r1, [r7, #32]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f001 fe50 	bl	800589a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e01a      	b.n	8003c3a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4b0c      	ldr	r3, [pc, #48]	@ (8003c48 <HAL_I2C_Master_Receive+0x1e8>)
 8003c18:	400b      	ands	r3, r1
 8003c1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	80002400 	.word	0x80002400
 8003c48:	fe00e800 	.word	0xfe00e800

08003c4c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	461a      	mov	r2, r3
 8003c58:	460b      	mov	r3, r1
 8003c5a:	817b      	strh	r3, [r7, #10]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d167      	bne.n	8003d3c <HAL_I2C_Master_Transmit_IT+0xf0>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7a:	d101      	bne.n	8003c80 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e05e      	b.n	8003d3e <HAL_I2C_Master_Transmit_IT+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Master_Transmit_IT+0x42>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e057      	b.n	8003d3e <HAL_I2C_Master_Transmit_IT+0xf2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2221      	movs	r2, #33	@ 0x21
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	893a      	ldrh	r2, [r7, #8]
 8003cb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a23      	ldr	r2, [pc, #140]	@ (8003d48 <HAL_I2C_Master_Transmit_IT+0xfc>)
 8003cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	@ (8003d4c <HAL_I2C_Master_Transmit_IT+0x100>)
 8003cc2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2bff      	cmp	r3, #255	@ 0xff
 8003ccc:	d906      	bls.n	8003cdc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	22ff      	movs	r2, #255	@ 0xff
 8003cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e007      	b.n	8003cec <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cea:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    /* Check if the Autonomous mode is enabled */
    if ((hi2c->Instance->AUTOCR & I2C_AUTOCR_TRIGEN) == I2C_AUTOCR_TRIGEN)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cfa:	d10b      	bne.n	8003d14 <HAL_I2C_Master_Transmit_IT+0xc8>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_NO_START_WRITE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	8979      	ldrh	r1, [r7, #10]
 8003d04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f001 ff73 	bl	8005bf8 <I2C_TransferConfig>
 8003d12:	e009      	b.n	8003d28 <HAL_I2C_Master_Transmit_IT+0xdc>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	8979      	ldrh	r1, [r7, #10]
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <HAL_I2C_Master_Transmit_IT+0x104>)
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f001 ff68 	bl	8005bf8 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d30:	2101      	movs	r1, #1
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f001 ff92 	bl	8005c5c <I2C_Enable_IRQ>

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Master_Transmit_IT+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	ffff0000 	.word	0xffff0000
 8003d4c:	08004207 	.word	0x08004207
 8003d50:	80002000 	.word	0x80002000

08003d54 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	460b      	mov	r3, r1
 8003d62:	817b      	strh	r3, [r7, #10]
 8003d64:	4613      	mov	r3, r2
 8003d66:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d166      	bne.n	8003e42 <HAL_I2C_Master_Receive_IT+0xee>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d82:	d101      	bne.n	8003d88 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
 8003d86:	e05d      	b.n	8003e44 <HAL_I2C_Master_Receive_IT+0xf0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Master_Receive_IT+0x42>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e056      	b.n	8003e44 <HAL_I2C_Master_Receive_IT+0xf0>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2222      	movs	r2, #34	@ 0x22
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2210      	movs	r2, #16
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	893a      	ldrh	r2, [r7, #8]
 8003dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <HAL_I2C_Master_Receive_IT+0xf8>)
 8003dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HAL_I2C_Master_Receive_IT+0xfc>)
 8003dca:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2bff      	cmp	r3, #255	@ 0xff
 8003dd4:	d906      	bls.n	8003de4 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	22ff      	movs	r2, #255	@ 0xff
 8003dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e007      	b.n	8003df4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003dee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003df2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    /* Check if the Autonomous mode is enabled */
    if ((hi2c->Instance->AUTOCR & I2C_AUTOCR_TRIGEN) == I2C_AUTOCR_TRIGEN)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e02:	d10a      	bne.n	8003e1a <HAL_I2C_Master_Receive_IT+0xc6>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_NO_START_READ);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	8979      	ldrh	r1, [r7, #10]
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <HAL_I2C_Master_Receive_IT+0x100>)
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f001 fef0 	bl	8005bf8 <I2C_TransferConfig>
 8003e18:	e009      	b.n	8003e2e <HAL_I2C_Master_Receive_IT+0xda>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	8979      	ldrh	r1, [r7, #10]
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <HAL_I2C_Master_Receive_IT+0x104>)
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f001 fee5 	bl	8005bf8 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e36:	2102      	movs	r1, #2
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f001 ff0f 	bl	8005c5c <I2C_Enable_IRQ>

    return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e000      	b.n	8003e44 <HAL_I2C_Master_Receive_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003e42:	2302      	movs	r3, #2
  }
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	ffff0000 	.word	0xffff0000
 8003e50:	08004207 	.word	0x08004207
 8003e54:	80000400 	.word	0x80000400
 8003e58:	80002400 	.word	0x80002400

08003e5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	4608      	mov	r0, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	817b      	strh	r3, [r7, #10]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	813b      	strh	r3, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	f040 80fd 	bne.w	800407e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_I2C_Mem_Read+0x34>
 8003e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0f1      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_Mem_Read+0x4e>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0ea      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eb2:	f7fe ffe7 	bl	8002e84 <HAL_GetTick>
 8003eb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f001 fc48 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0d5      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2222      	movs	r2, #34	@ 0x22
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003efc:	88f8      	ldrh	r0, [r7, #6]
 8003efe:	893a      	ldrh	r2, [r7, #8]
 8003f00:	8979      	ldrh	r1, [r7, #10]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 febb 	bl	8004c88 <I2C_RequestMemoryRead>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0ad      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2bff      	cmp	r3, #255	@ 0xff
 8003f2c:	d90e      	bls.n	8003f4c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	22ff      	movs	r2, #255	@ 0xff
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	8979      	ldrh	r1, [r7, #10]
 8003f3c:	4b52      	ldr	r3, [pc, #328]	@ (8004088 <HAL_I2C_Mem_Read+0x22c>)
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f001 fe57 	bl	8005bf8 <I2C_TransferConfig>
 8003f4a:	e00f      	b.n	8003f6c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_I2C_Mem_Read+0x22c>)
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f001 fe46 	bl	8005bf8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	2200      	movs	r2, #0
 8003f74:	2104      	movs	r1, #4
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f001 fbef 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e07c      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d034      	beq.n	800402c <HAL_I2C_Mem_Read+0x1d0>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d130      	bne.n	800402c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2180      	movs	r1, #128	@ 0x80
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f001 fbc0 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e04d      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2bff      	cmp	r3, #255	@ 0xff
 8003fec:	d90e      	bls.n	800400c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	22ff      	movs	r2, #255	@ 0xff
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	8979      	ldrh	r1, [r7, #10]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f001 fdf7 	bl	8005bf8 <I2C_TransferConfig>
 800400a:	e00f      	b.n	800402c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	b2da      	uxtb	r2, r3
 800401c:	8979      	ldrh	r1, [r7, #10]
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f001 fde6 	bl	8005bf8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d19a      	bne.n	8003f6c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f001 fc2d 	bl	800589a <I2C_WaitOnSTOPFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e01a      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2220      	movs	r2, #32
 8004050:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <HAL_I2C_Mem_Read+0x230>)
 800405e:	400b      	ands	r3, r1
 8004060:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e000      	b.n	8004080 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800407e:	2302      	movs	r3, #2
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	80002400 	.word	0x80002400
 800408c:	fe00e800 	.word	0xfe00e800

08004090 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
  }
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	09db      	lsrs	r3, r3, #7
 80040ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004108:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	0a9b      	lsrs	r3, r3, #10
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	09db      	lsrs	r3, r3, #7
 800411a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f043 0208 	orr.w	r2, r3, #8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004136:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	0a5b      	lsrs	r3, r3, #9
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	09db      	lsrs	r3, r3, #7
 8004148:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	f043 0202 	orr.w	r2, r3, #2
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004164:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 030b 	and.w	r3, r3, #11
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f001 f995 	bl	80054a8 <I2C_ITError>
  }
}
 800417e:	bf00      	nop
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
 80041ba:	4613      	mov	r3, r2
 80041bc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <I2C_Master_ISR_IT+0x1e>
 8004220:	2302      	movs	r3, #2
 8004222:	e114      	b.n	800444e <I2C_Master_ISR_IT+0x248>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2210      	movs	r2, #16
 800424a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	f043 0204 	orr.w	r2, r3, #4
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f001 fa3c 	bl	80056d6 <I2C_Flush_TXDR>
 800425e:	e0e1      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d023      	beq.n	80042b4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01d      	beq.n	80042b4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0304 	bic.w	r3, r3, #4
 800427e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042b2:	e0b7      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01e      	beq.n	80042fe <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042fc:	e092      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	09db      	lsrs	r3, r3, #7
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d05d      	beq.n	80043c6 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	099b      	lsrs	r3, r3, #6
 800430e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004312:	2b00      	cmp	r3, #0
 8004314:	d057      	beq.n	80043c6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d040      	beq.n	80043a2 <I2C_Master_ISR_IT+0x19c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d13c      	bne.n	80043a2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004334:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2bff      	cmp	r3, #255	@ 0xff
 800433e:	d90e      	bls.n	800435e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	22ff      	movs	r2, #255	@ 0xff
 8004344:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	b2da      	uxtb	r2, r3
 800434c:	8a79      	ldrh	r1, [r7, #18]
 800434e:	2300      	movs	r3, #0
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f001 fc4e 	bl	8005bf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	e032      	b.n	80043c4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004370:	d00b      	beq.n	800438a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800437c:	8a79      	ldrh	r1, [r7, #18]
 800437e:	2000      	movs	r0, #0
 8004380:	9000      	str	r0, [sp, #0]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f001 fc38 	bl	8005bf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004388:	e01c      	b.n	80043c4 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	b2da      	uxtb	r2, r3
 8004390:	8a79      	ldrh	r1, [r7, #18]
 8004392:	2300      	movs	r3, #0
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f001 fc2c 	bl	8005bf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a0:	e010      	b.n	80043c4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043b0:	d003      	beq.n	80043ba <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fd40 	bl	8004e38 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043b8:	e034      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043ba:	2140      	movs	r1, #64	@ 0x40
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f001 f873 	bl	80054a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c2:	e02f      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
 80043c4:	e02e      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	099b      	lsrs	r3, r3, #6
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d028      	beq.n	8004424 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	099b      	lsrs	r3, r3, #6
 80043d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d022      	beq.n	8004424 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d119      	bne.n	800441c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043f6:	d015      	beq.n	8004424 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004400:	d108      	bne.n	8004414 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e007      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fd0f 	bl	8004e38 <I2C_ITMasterSeqCplt>
 800441a:	e003      	b.n	8004424 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800441c:	2140      	movs	r1, #64	@ 0x40
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f001 f842 	bl	80054a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fd96 	bl	8004f70 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <I2C_Slave_ISR_IT+0x24>
 8004476:	2302      	movs	r3, #2
 8004478:	e0ed      	b.n	8004656 <I2C_Slave_ISR_IT+0x200>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800449a:	6939      	ldr	r1, [r7, #16]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fe31 	bl	8005104 <I2C_ITSlaveCplt>
 80044a2:	e0d3      	b.n	800464c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d04d      	beq.n	800454c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d047      	beq.n	800454c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d128      	bne.n	8004518 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b28      	cmp	r3, #40	@ 0x28
 80044d0:	d108      	bne.n	80044e4 <I2C_Slave_ISR_IT+0x8e>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044d8:	d104      	bne.n	80044e4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80044da:	6939      	ldr	r1, [r7, #16]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 ff8d 	bl	80053fc <I2C_ITListenCplt>
 80044e2:	e032      	b.n	800454a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b29      	cmp	r3, #41	@ 0x29
 80044ee:	d10e      	bne.n	800450e <I2C_Slave_ISR_IT+0xb8>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044f6:	d00a      	beq.n	800450e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2210      	movs	r2, #16
 80044fe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f001 f8e8 	bl	80056d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fcd3 	bl	8004eb2 <I2C_ITSlaveSeqCplt>
 800450c:	e01d      	b.n	800454a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2210      	movs	r2, #16
 8004514:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004516:	e096      	b.n	8004646 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2210      	movs	r2, #16
 800451e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <I2C_Slave_ISR_IT+0xe6>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004538:	f040 8085 	bne.w	8004646 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 ffb0 	bl	80054a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004548:	e07d      	b.n	8004646 <I2C_Slave_ISR_IT+0x1f0>
 800454a:	e07c      	b.n	8004646 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d030      	beq.n	80045ba <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	089b      	lsrs	r3, r3, #2
 800455c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02a      	beq.n	80045ba <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d14f      	bne.n	800464a <I2C_Slave_ISR_IT+0x1f4>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045b0:	d04b      	beq.n	800464a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fc7d 	bl	8004eb2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045b8:	e047      	b.n	800464a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	08db      	lsrs	r3, r3, #3
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d004      	beq.n	80045dc <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80045d2:	6939      	ldr	r1, [r7, #16]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fbab 	bl	8004d30 <I2C_ITAddrCplt>
 80045da:	e037      	b.n	800464c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d031      	beq.n	800464c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02b      	beq.n	800464c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800462e:	e00d      	b.n	800464c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004636:	d002      	beq.n	800463e <I2C_Slave_ISR_IT+0x1e8>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fc37 	bl	8004eb2 <I2C_ITSlaveSeqCplt>
 8004644:	e002      	b.n	800464c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800464a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b088      	sub	sp, #32
 8004662:	af02      	add	r7, sp, #8
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <I2C_Master_ISR_DMA+0x1a>
 8004674:	2302      	movs	r3, #2
 8004676:	e0e1      	b.n	800483c <I2C_Master_ISR_DMA+0x1de>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d017      	beq.n	80046bc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004694:	2b00      	cmp	r3, #0
 8004696:	d011      	beq.n	80046bc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2210      	movs	r2, #16
 800469e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a4:	f043 0204 	orr.w	r2, r3, #4
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80046ac:	2120      	movs	r1, #32
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f001 fad4 	bl	8005c5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f001 f80e 	bl	80056d6 <I2C_Flush_TXDR>
 80046ba:	e0ba      	b.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	09db      	lsrs	r3, r3, #7
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d072      	beq.n	80047ae <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	099b      	lsrs	r3, r3, #6
 80046cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d06c      	beq.n	80047ae <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d04e      	beq.n	800478c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046fa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2bff      	cmp	r3, #255	@ 0xff
 8004704:	d906      	bls.n	8004714 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	22ff      	movs	r2, #255	@ 0xff
 800470a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800470c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e010      	b.n	8004736 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004726:	d003      	beq.n	8004730 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	e002      	b.n	8004736 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004730:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004734:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	b2da      	uxtb	r2, r3
 800473c:	8a79      	ldrh	r1, [r7, #18]
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f001 fa57 	bl	8005bf8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b22      	cmp	r3, #34	@ 0x22
 8004766:	d108      	bne.n	800477a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004776:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004778:	e05b      	b.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004788:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800478a:	e052      	b.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800479a:	d003      	beq.n	80047a4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fb4b 	bl	8004e38 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047a2:	e046      	b.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047a4:	2140      	movs	r1, #64	@ 0x40
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fe7e 	bl	80054a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80047ac:	e041      	b.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	099b      	lsrs	r3, r3, #6
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d029      	beq.n	800480e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d023      	beq.n	800480e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d119      	bne.n	8004804 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047de:	d027      	beq.n	8004830 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047e8:	d108      	bne.n	80047fc <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047f8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80047fa:	e019      	b.n	8004830 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fb1b 	bl	8004e38 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004802:	e015      	b.n	8004830 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004804:	2140      	movs	r1, #64	@ 0x40
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fe4e 	bl	80054a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800480c:	e010      	b.n	8004830 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fba1 	bl	8004f70 <I2C_ITMasterCplt>
 800482e:	e000      	b.n	8004832 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004830:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004850:	4b92      	ldr	r3, [pc, #584]	@ (8004a9c <I2C_Mem_ISR_DMA+0x258>)
 8004852:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <I2C_Mem_ISR_DMA+0x1e>
 800485e:	2302      	movs	r3, #2
 8004860:	e118      	b.n	8004a94 <I2C_Mem_ISR_DMA+0x250>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d017      	beq.n	80048a6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2210      	movs	r2, #16
 8004888:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488e:	f043 0204 	orr.w	r2, r3, #4
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004896:	2120      	movs	r1, #32
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f001 f9df 	bl	8005c5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 ff19 	bl	80056d6 <I2C_Flush_TXDR>
 80048a4:	e0f1      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00f      	beq.n	80048d2 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80048d0:	e0db      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	09db      	lsrs	r3, r3, #7
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d060      	beq.n	80049a0 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d05a      	beq.n	80049a0 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048ea:	2101      	movs	r1, #1
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f001 fa39 	bl	8005d64 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80048f2:	2110      	movs	r1, #16
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f001 f9b1 	bl	8005c5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d048      	beq.n	8004996 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2bff      	cmp	r3, #255	@ 0xff
 800490c:	d910      	bls.n	8004930 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	22ff      	movs	r2, #255	@ 0xff
 8004912:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004918:	b299      	uxth	r1, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800491e:	b2da      	uxtb	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f001 f965 	bl	8005bf8 <I2C_TransferConfig>
 800492e:	e011      	b.n	8004954 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493e:	b299      	uxth	r1, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004944:	b2da      	uxtb	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f001 f952 	bl	8005bf8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b22      	cmp	r3, #34	@ 0x22
 8004970:	d108      	bne.n	8004984 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004980:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004982:	e082      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004992:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004994:	e079      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004996:	2140      	movs	r1, #64	@ 0x40
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fd85 	bl	80054a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800499e:	e074      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d05e      	beq.n	8004a6a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d058      	beq.n	8004a6a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049b8:	2101      	movs	r1, #1
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f001 f9d2 	bl	8005d64 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049c0:	2110      	movs	r1, #16
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f001 f94a 	bl	8005c5c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b22      	cmp	r3, #34	@ 0x22
 80049d2:	d101      	bne.n	80049d8 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80049d4:	4b32      	ldr	r3, [pc, #200]	@ (8004aa0 <I2C_Mem_ISR_DMA+0x25c>)
 80049d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2bff      	cmp	r3, #255	@ 0xff
 80049e0:	d910      	bls.n	8004a04 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	22ff      	movs	r2, #255	@ 0xff
 80049e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ec:	b299      	uxth	r1, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f001 f8fb 	bl	8005bf8 <I2C_TransferConfig>
 8004a02:	e011      	b.n	8004a28 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a12:	b299      	uxth	r1, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f001 f8e8 	bl	8005bf8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b22      	cmp	r3, #34	@ 0x22
 8004a44:	d108      	bne.n	8004a58 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a54:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a56:	e018      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a66:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a68:	e00f      	b.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fa73 	bl	8004f70 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	80002000 	.word	0x80002000
 8004aa0:	80002400 	.word	0x80002400

08004aa4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b089      	sub	sp, #36	@ 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <I2C_Slave_ISR_DMA+0x24>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0db      	b.n	8004c80 <I2C_Slave_ISR_DMA+0x1dc>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fb0a 	bl	8005104 <I2C_ITSlaveCplt>
 8004af0:	e0c1      	b.n	8004c76 <I2C_Slave_ISR_DMA+0x1d2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80ab 	beq.w	8004c56 <I2C_Slave_ISR_DMA+0x1b2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a4 	beq.w	8004c56 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0b9b      	lsrs	r3, r3, #14
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0bdb      	lsrs	r3, r3, #15
 8004b1e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8090 	beq.w	8004c48 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	0bdb      	lsrs	r3, r3, #15
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00f      	beq.n	8004b5c <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b44:	b29c      	uxth	r4, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fc11 	bl	8003372 <HAL_DMAEx_GetFifoLevel>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4423      	add	r3, r4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <I2C_Slave_ISR_DMA+0xec>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	0b9b      	lsrs	r3, r3, #14
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00f      	beq.n	8004b90 <I2C_Slave_ISR_DMA+0xec>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b78:	b29c      	uxth	r4, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fbf7 	bl	8003372 <HAL_DMAEx_GetFifoLevel>
 8004b84:	4603      	mov	r3, r0
 8004b86:	4423      	add	r3, r4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <I2C_Slave_ISR_DMA+0xec>
          {
            treatdmanack = 1U;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d128      	bne.n	8004be8 <I2C_Slave_ISR_DMA+0x144>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b28      	cmp	r3, #40	@ 0x28
 8004ba0:	d108      	bne.n	8004bb4 <I2C_Slave_ISR_DMA+0x110>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ba8:	d104      	bne.n	8004bb4 <I2C_Slave_ISR_DMA+0x110>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fc25 	bl	80053fc <I2C_ITListenCplt>
 8004bb2:	e048      	b.n	8004c46 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b29      	cmp	r3, #41	@ 0x29
 8004bbe:	d10e      	bne.n	8004bde <I2C_Slave_ISR_DMA+0x13a>
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bc6:	d00a      	beq.n	8004bde <I2C_Slave_ISR_DMA+0x13a>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fd80 	bl	80056d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f96b 	bl	8004eb2 <I2C_ITSlaveSeqCplt>
 8004bdc:	e033      	b.n	8004c46 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2210      	movs	r2, #16
 8004be4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004be6:	e034      	b.n	8004c52 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2210      	movs	r2, #16
 8004bee:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	f043 0204 	orr.w	r2, r3, #4
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c02:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <I2C_Slave_ISR_DMA+0x16e>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c10:	d11f      	bne.n	8004c52 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	2b21      	cmp	r3, #33	@ 0x21
 8004c16:	d002      	beq.n	8004c1e <I2C_Slave_ISR_DMA+0x17a>
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b29      	cmp	r3, #41	@ 0x29
 8004c1c:	d103      	bne.n	8004c26 <I2C_Slave_ISR_DMA+0x182>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2221      	movs	r2, #33	@ 0x21
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c24:	e008      	b.n	8004c38 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	2b22      	cmp	r3, #34	@ 0x22
 8004c2a:	d002      	beq.n	8004c32 <I2C_Slave_ISR_DMA+0x18e>
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c30:	d102      	bne.n	8004c38 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2222      	movs	r2, #34	@ 0x22
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 fc32 	bl	80054a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004c44:	e005      	b.n	8004c52 <I2C_Slave_ISR_DMA+0x1ae>
 8004c46:	e004      	b.n	8004c52 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c50:	e011      	b.n	8004c76 <I2C_Slave_ISR_DMA+0x1d2>
      if (treatdmanack == 1U)
 8004c52:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c54:	e00f      	b.n	8004c76 <I2C_Slave_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <I2C_Slave_ISR_DMA+0x1d2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	08db      	lsrs	r3, r3, #3
 8004c66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <I2C_Slave_ISR_DMA+0x1d2>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f85d 	bl	8004d30 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3724      	adds	r7, #36	@ 0x24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}

08004c88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	817b      	strh	r3, [r7, #10]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	813b      	strh	r3, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	8979      	ldrh	r1, [r7, #10]
 8004ca8:	4b20      	ldr	r3, [pc, #128]	@ (8004d2c <I2C_RequestMemoryRead+0xa4>)
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	2300      	movs	r3, #0
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 ffa2 	bl	8005bf8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	69b9      	ldr	r1, [r7, #24]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fda7 	bl	800580c <I2C_WaitOnTXISFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e02c      	b.n	8004d22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d105      	bne.n	8004cda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cce:	893b      	ldrh	r3, [r7, #8]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cd8:	e015      	b.n	8004d06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	69b9      	ldr	r1, [r7, #24]
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fd8d 	bl	800580c <I2C_WaitOnTXISFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e012      	b.n	8004d22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfc:	893b      	ldrh	r3, [r7, #8]
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2140      	movs	r1, #64	@ 0x40
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fd22 	bl	800575a <I2C_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	80002000 	.word	0x80002000

08004d30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d46:	2b28      	cmp	r3, #40	@ 0x28
 8004d48:	d16a      	bne.n	8004e20 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004d68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004d84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d138      	bne.n	8004e00 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004d8e:	897b      	ldrh	r3, [r7, #10]
 8004d90:	09db      	lsrs	r3, r3, #7
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	89bb      	ldrh	r3, [r7, #12]
 8004d96:	4053      	eors	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f003 0306 	and.w	r3, r3, #6
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d11c      	bne.n	8004ddc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004da2:	897b      	ldrh	r3, [r7, #10]
 8004da4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d13b      	bne.n	8004e30 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004dce:	89ba      	ldrh	r2, [r7, #12]
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff f9ea 	bl	80041ae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004dda:	e029      	b.n	8004e30 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ddc:	893b      	ldrh	r3, [r7, #8]
 8004dde:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004de0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 ffbd 	bl	8005d64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004df2:	89ba      	ldrh	r2, [r7, #12]
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff f9d8 	bl	80041ae <HAL_I2C_AddrCallback>
}
 8004dfe:	e017      	b.n	8004e30 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 ffad 	bl	8005d64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e12:	89ba      	ldrh	r2, [r7, #12]
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff f9c8 	bl	80041ae <HAL_I2C_AddrCallback>
}
 8004e1e:	e007      	b.n	8004e30 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b21      	cmp	r3, #33	@ 0x21
 8004e52:	d115      	bne.n	8004e80 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2211      	movs	r2, #17
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e68:	2101      	movs	r1, #1
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 ff7a 	bl	8005d64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fc f843 	bl	8000f04 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e7e:	e014      	b.n	8004eaa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2212      	movs	r2, #18
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e94:	2102      	movs	r1, #2
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 ff64 	bl	8005d64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7fc f871 	bl	8000f8c <HAL_I2C_MasterRxCpltCallback>
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	0b9b      	lsrs	r3, r3, #14
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e00d      	b.n	8004f04 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	0bdb      	lsrs	r3, r3, #15
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b29      	cmp	r3, #41	@ 0x29
 8004f0e:	d112      	bne.n	8004f36 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2228      	movs	r2, #40	@ 0x28
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2221      	movs	r2, #33	@ 0x21
 8004f1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f1e:	2101      	movs	r1, #1
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 ff1f 	bl	8005d64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff f929 	bl	8004186 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f34:	e017      	b.n	8004f66 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f40:	d111      	bne.n	8004f66 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2228      	movs	r2, #40	@ 0x28
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2222      	movs	r2, #34	@ 0x22
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f50:	2102      	movs	r1, #2
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 ff06 	bl	8005d64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff f91a 	bl	800419a <HAL_I2C_SlaveRxCpltCallback>
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2220      	movs	r2, #32
 8004f84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b21      	cmp	r3, #33	@ 0x21
 8004f90:	d107      	bne.n	8004fa2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f92:	2101      	movs	r1, #1
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fee5 	bl	8005d64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2211      	movs	r2, #17
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fa0:	e00c      	b.n	8004fbc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b22      	cmp	r3, #34	@ 0x22
 8004fac:	d106      	bne.n	8004fbc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fae:	2102      	movs	r1, #2
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fed7 	bl	8005d64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2212      	movs	r2, #18
 8004fba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80050fc <I2C_ITMasterCplt+0x18c>)
 8004fc8:	400b      	ands	r3, r1
 8004fca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005100 <I2C_ITMasterCplt+0x190>)
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b60      	cmp	r3, #96	@ 0x60
 8005002:	d10b      	bne.n	800501c <I2C_ITMasterCplt+0xac>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	089b      	lsrs	r3, r3, #2
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	b2db      	uxtb	r3, r3
 8005018:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800501a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb5a 	bl	80056d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b60      	cmp	r3, #96	@ 0x60
 8005032:	d002      	beq.n	800503a <I2C_ITMasterCplt+0xca>
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d006      	beq.n	8005048 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa31 	bl	80054a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005046:	e054      	b.n	80050f2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b21      	cmp	r3, #33	@ 0x21
 8005052:	d124      	bne.n	800509e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b40      	cmp	r3, #64	@ 0x40
 800506c:	d10b      	bne.n	8005086 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fb ff7a 	bl	8000f78 <HAL_I2C_MemTxCpltCallback>
}
 8005084:	e035      	b.n	80050f2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fb ff34 	bl	8000f04 <HAL_I2C_MasterTxCpltCallback>
}
 800509c:	e029      	b.n	80050f2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b22      	cmp	r3, #34	@ 0x22
 80050a8:	d123      	bne.n	80050f2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	d10b      	bne.n	80050dc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fb ff45 	bl	8000f64 <HAL_I2C_MemRxCpltCallback>
}
 80050da:	e00a      	b.n	80050f2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7fb ff4d 	bl	8000f8c <HAL_I2C_MasterRxCpltCallback>
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	fe00e800 	.word	0xfe00e800
 8005100:	ffff0000 	.word	0xffff0000

08005104 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005126:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2220      	movs	r2, #32
 800512e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005130:	7afb      	ldrb	r3, [r7, #11]
 8005132:	2b21      	cmp	r3, #33	@ 0x21
 8005134:	d002      	beq.n	800513c <I2C_ITSlaveCplt+0x38>
 8005136:	7afb      	ldrb	r3, [r7, #11]
 8005138:	2b29      	cmp	r3, #41	@ 0x29
 800513a:	d108      	bne.n	800514e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800513c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fe0f 	bl	8005d64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2221      	movs	r2, #33	@ 0x21
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
 800514c:	e019      	b.n	8005182 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800514e:	7afb      	ldrb	r3, [r7, #11]
 8005150:	2b22      	cmp	r3, #34	@ 0x22
 8005152:	d002      	beq.n	800515a <I2C_ITSlaveCplt+0x56>
 8005154:	7afb      	ldrb	r3, [r7, #11]
 8005156:	2b2a      	cmp	r3, #42	@ 0x2a
 8005158:	d108      	bne.n	800516c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800515a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fe00 	bl	8005d64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2222      	movs	r2, #34	@ 0x22
 8005168:	631a      	str	r2, [r3, #48]	@ 0x30
 800516a:	e00a      	b.n	8005182 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	2b28      	cmp	r3, #40	@ 0x28
 8005170:	d107      	bne.n	8005182 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005172:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fdf4 	bl	8005d64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005190:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b95      	ldr	r3, [pc, #596]	@ (80053f4 <I2C_ITSlaveCplt+0x2f0>)
 800519e:	400b      	ands	r3, r1
 80051a0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa97 	bl	80056d6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	0b9b      	lsrs	r3, r3, #14
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01c      	beq.n	80051ee <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d032      	beq.n	8005232 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d4:	b29c      	uxth	r4, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe f8c9 	bl	8003372 <HAL_DMAEx_GetFifoLevel>
 80051e0:	4603      	mov	r3, r0
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4423      	add	r3, r4
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051ec:	e021      	b.n	8005232 <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	0bdb      	lsrs	r3, r3, #15
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01b      	beq.n	8005232 <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005208:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00f      	beq.n	8005232 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800521a:	b29c      	uxth	r4, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe f8a6 	bl	8003372 <HAL_DMAEx_GetFifoLevel>
 8005226:	4603      	mov	r3, r0
 8005228:	b29b      	uxth	r3, r3
 800522a:	4423      	add	r3, r4
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d020      	beq.n	8005280 <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0304 	bic.w	r3, r3, #4
 8005244:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	f043 0204 	orr.w	r2, r3, #4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d04a      	beq.n	8005338 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d044      	beq.n	8005338 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d128      	bne.n	800530a <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b28      	cmp	r3, #40	@ 0x28
 80052c2:	d108      	bne.n	80052d6 <I2C_ITSlaveCplt+0x1d2>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052ca:	d104      	bne.n	80052d6 <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f894 	bl	80053fc <I2C_ITListenCplt>
 80052d4:	e030      	b.n	8005338 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b29      	cmp	r3, #41	@ 0x29
 80052e0:	d10e      	bne.n	8005300 <I2C_ITSlaveCplt+0x1fc>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052e8:	d00a      	beq.n	8005300 <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2210      	movs	r2, #16
 80052f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9ef 	bl	80056d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fdda 	bl	8004eb2 <I2C_ITSlaveSeqCplt>
 80052fe:	e01b      	b.n	8005338 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2210      	movs	r2, #16
 8005306:	61da      	str	r2, [r3, #28]
 8005308:	e016      	b.n	8005338 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2210      	movs	r2, #16
 8005310:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	f043 0204 	orr.w	r2, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <I2C_ITSlaveCplt+0x228>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800532a:	d105      	bne.n	8005338 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8b8 	bl	80054a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	2b00      	cmp	r3, #0
 800534c:	d010      	beq.n	8005370 <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	4619      	mov	r1, r3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f8a7 	bl	80054a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b28      	cmp	r3, #40	@ 0x28
 8005364:	d141      	bne.n	80053ea <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f847 	bl	80053fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800536e:	e03c      	b.n	80053ea <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005378:	d014      	beq.n	80053a4 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fd99 	bl	8004eb2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a1d      	ldr	r2, [pc, #116]	@ (80053f8 <I2C_ITSlaveCplt+0x2f4>)
 8005384:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fe ff14 	bl	80041ca <HAL_I2C_ListenCpltCallback>
}
 80053a2:	e022      	b.n	80053ea <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b22      	cmp	r3, #34	@ 0x22
 80053ae:	d10e      	bne.n	80053ce <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fe fee7 	bl	800419a <HAL_I2C_SlaveRxCpltCallback>
}
 80053cc:	e00d      	b.n	80053ea <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fe fece 	bl	8004186 <HAL_I2C_SlaveTxCpltCallback>
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	bf00      	nop
 80053f4:	fe00e800 	.word	0xfe00e800
 80053f8:	ffff0000 	.word	0xffff0000

080053fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a26      	ldr	r2, [pc, #152]	@ (80054a4 <I2C_ITListenCplt+0xa8>)
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d022      	beq.n	800547a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d012      	beq.n	800547a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800547a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fc70 	bl	8005d64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2210      	movs	r2, #16
 800548a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fe fe98 	bl	80041ca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	ffff0000 	.word	0xffff0000

080054a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a6d      	ldr	r2, [pc, #436]	@ (800567c <I2C_ITError+0x1d4>)
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b28      	cmp	r3, #40	@ 0x28
 80054de:	d005      	beq.n	80054ec <I2C_ITError+0x44>
 80054e0:	7bfb      	ldrb	r3, [r7, #15]
 80054e2:	2b29      	cmp	r3, #41	@ 0x29
 80054e4:	d002      	beq.n	80054ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ea:	d10b      	bne.n	8005504 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80054ec:	2103      	movs	r1, #3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fc38 	bl	8005d64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2228      	movs	r2, #40	@ 0x28
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a60      	ldr	r2, [pc, #384]	@ (8005680 <I2C_ITError+0x1d8>)
 8005500:	635a      	str	r2, [r3, #52]	@ 0x34
 8005502:	e030      	b.n	8005566 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005504:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fc2b 	bl	8005d64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8e1 	bl	80056d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b60      	cmp	r3, #96	@ 0x60
 800551e:	d01f      	beq.n	8005560 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b20      	cmp	r3, #32
 8005534:	d114      	bne.n	8005560 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d109      	bne.n	8005558 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2210      	movs	r2, #16
 800554a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2220      	movs	r2, #32
 800555e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d039      	beq.n	80055e8 <I2C_ITError+0x140>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b11      	cmp	r3, #17
 8005578:	d002      	beq.n	8005580 <I2C_ITError+0xd8>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b21      	cmp	r3, #33	@ 0x21
 800557e:	d133      	bne.n	80055e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800558a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800558e:	d107      	bne.n	80055a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800559e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fd fed6 	bl	8003356 <HAL_DMA_GetState>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d017      	beq.n	80055e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	4a33      	ldr	r2, [pc, #204]	@ (8005684 <I2C_ITError+0x1dc>)
 80055b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fd fe9d 	bl	8003304 <HAL_DMA_Abort_IT>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d04d      	beq.n	800566c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055da:	4610      	mov	r0, r2
 80055dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055de:	e045      	b.n	800566c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f851 	bl	8005688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055e6:	e041      	b.n	800566c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d039      	beq.n	8005664 <I2C_ITError+0x1bc>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b12      	cmp	r3, #18
 80055f4:	d002      	beq.n	80055fc <I2C_ITError+0x154>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b22      	cmp	r3, #34	@ 0x22
 80055fa:	d133      	bne.n	8005664 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800560a:	d107      	bne.n	800561c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800561a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd fe98 	bl	8003356 <HAL_DMA_GetState>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d017      	beq.n	800565c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005630:	4a14      	ldr	r2, [pc, #80]	@ (8005684 <I2C_ITError+0x1dc>)
 8005632:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005640:	4618      	mov	r0, r3
 8005642:	f7fd fe5f 	bl	8003304 <HAL_DMA_Abort_IT>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005656:	4610      	mov	r0, r2
 8005658:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800565a:	e009      	b.n	8005670 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f813 	bl	8005688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005662:	e005      	b.n	8005670 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f80f 	bl	8005688 <I2C_TreatErrorCallback>
  }
}
 800566a:	e002      	b.n	8005672 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005670:	bf00      	nop
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	ffff0000 	.word	0xffff0000
 8005680:	08004457 	.word	0x08004457
 8005684:	0800571f 	.word	0x0800571f

08005688 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b60      	cmp	r3, #96	@ 0x60
 800569a:	d10e      	bne.n	80056ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fe fd9d 	bl	80041f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056b8:	e009      	b.n	80056ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7fe fd88 	bl	80041de <HAL_I2C_ErrorCallback>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d103      	bne.n	80056f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2200      	movs	r2, #0
 80056f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d007      	beq.n	8005712 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	619a      	str	r2, [r3, #24]
  }
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005748:	2200      	movs	r2, #0
 800574a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ff9b 	bl	8005688 <I2C_TreatErrorCallback>
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	4613      	mov	r3, r2
 8005768:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576a:	e03b      	b.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f961 	bl	8005a38 <I2C_IsErrorOccurred>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e041      	b.n	8005804 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d02d      	beq.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fd fb7c 	bl	8002e84 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnFlagUntilTimeout+0x44>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d122      	bne.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4013      	ands	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	bf0c      	ite	eq
 80057ae:	2301      	moveq	r3, #1
 80057b0:	2300      	movne	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d113      	bne.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e00f      	b.n	8005804 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4013      	ands	r3, r2
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d0b4      	beq.n	800576c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005818:	e033      	b.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f90a 	bl	8005a38 <I2C_IsErrorOccurred>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e031      	b.n	8005892 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d025      	beq.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fd fb25 	bl	8002e84 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11a      	bne.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d013      	beq.n	8005882 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e007      	b.n	8005892 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d1c4      	bne.n	800581a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058a6:	e02f      	b.n	8005908 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f8c3 	bl	8005a38 <I2C_IsErrorOccurred>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e02d      	b.n	8005918 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058bc:	f7fd fae2 	bl	8002e84 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11a      	bne.n	8005908 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d013      	beq.n	8005908 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e007      	b.n	8005918 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	d1c8      	bne.n	80058a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005930:	e071      	b.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f87e 	bl	8005a38 <I2C_IsErrorOccurred>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d13b      	bne.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d138      	bne.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b04      	cmp	r3, #4
 8005966:	d105      	bne.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b10      	cmp	r3, #16
 8005980:	d121      	bne.n	80059c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2210      	movs	r2, #16
 8005988:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2204      	movs	r2, #4
 800598e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2220      	movs	r2, #32
 8005996:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6859      	ldr	r1, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b24      	ldr	r3, [pc, #144]	@ (8005a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80059a4:	400b      	ands	r3, r1
 80059a6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	75fb      	strb	r3, [r7, #23]
 80059c4:	e002      	b.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80059cc:	f7fd fa5a 	bl	8002e84 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d302      	bcc.n	80059e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d119      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d116      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d00f      	beq.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d002      	beq.n	8005a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d083      	beq.n	8005932 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	fe00e800 	.word	0xfe00e800

08005a38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b08a      	sub	sp, #40	@ 0x28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a52:	2300      	movs	r3, #0
 8005a54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d068      	beq.n	8005b36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a6c:	e049      	b.n	8005b02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d045      	beq.n	8005b02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a76:	f7fd fa05 	bl	8002e84 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d302      	bcc.n	8005a8c <I2C_IsErrorOccurred+0x54>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d13a      	bne.n	8005b02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aae:	d121      	bne.n	8005af4 <I2C_IsErrorOccurred+0xbc>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ab6:	d01d      	beq.n	8005af4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ab8:	7cfb      	ldrb	r3, [r7, #19]
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d01a      	beq.n	8005af4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005acc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ace:	f7fd f9d9 	bl	8002e84 <HAL_GetTick>
 8005ad2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ad4:	e00e      	b.n	8005af4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ad6:	f7fd f9d5 	bl	8002e84 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b19      	cmp	r3, #25
 8005ae2:	d907      	bls.n	8005af4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f043 0320 	orr.w	r3, r3, #32
 8005aea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005af2:	e006      	b.n	8005b02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d1e9      	bne.n	8005ad6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d003      	beq.n	8005b18 <I2C_IsErrorOccurred+0xe0>
 8005b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0aa      	beq.n	8005a6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d103      	bne.n	8005b28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2220      	movs	r2, #32
 8005b26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f043 0308 	orr.w	r3, r3, #8
 8005b70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01c      	beq.n	8005be6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fd92 	bl	80056d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6859      	ldr	r1, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf4 <I2C_IsErrorOccurred+0x1bc>)
 8005bbe:	400b      	ands	r3, r1
 8005bc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005be6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3728      	adds	r7, #40	@ 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	fe00e800 	.word	0xfe00e800

08005bf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	607b      	str	r3, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	817b      	strh	r3, [r7, #10]
 8005c06:	4613      	mov	r3, r2
 8005c08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c0a:	897b      	ldrh	r3, [r7, #10]
 8005c0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c10:	7a7b      	ldrb	r3, [r7, #9]
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c18:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c26:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	0d5b      	lsrs	r3, r3, #21
 8005c32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c36:	4b08      	ldr	r3, [pc, #32]	@ (8005c58 <I2C_TransferConfig+0x60>)
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	ea02 0103 	and.w	r1, r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	03ff63ff 	.word	0x03ff63ff

08005c5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c70:	4a39      	ldr	r2, [pc, #228]	@ (8005d58 <I2C_Enable_IRQ+0xfc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d032      	beq.n	8005cdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005c7a:	4a38      	ldr	r2, [pc, #224]	@ (8005d5c <I2C_Enable_IRQ+0x100>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02d      	beq.n	8005cdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005c84:	4a36      	ldr	r2, [pc, #216]	@ (8005d60 <I2C_Enable_IRQ+0x104>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d028      	beq.n	8005cdc <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da03      	bge.n	8005c9a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005c98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c9a:	887b      	ldrh	r3, [r7, #2]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005caa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005cac:	887b      	ldrh	r3, [r7, #2]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005cbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005cbe:	887b      	ldrh	r3, [r7, #2]
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d103      	bne.n	8005ccc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005cca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ccc:	887b      	ldrh	r3, [r7, #2]
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d133      	bne.n	8005d3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f043 0320 	orr.w	r3, r3, #32
 8005cd8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005cda:	e02e      	b.n	8005d3a <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005cdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	da03      	bge.n	8005cec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005cea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cec:	887b      	ldrh	r3, [r7, #2]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005cfc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005d0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d10:	887b      	ldrh	r3, [r7, #2]
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d103      	bne.n	8005d1e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d1e:	887b      	ldrh	r3, [r7, #2]
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d103      	bne.n	8005d2c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005d2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d2c:	887b      	ldrh	r3, [r7, #2]
 8005d2e:	2b40      	cmp	r3, #64	@ 0x40
 8005d30:	d103      	bne.n	8005d3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d38:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6819      	ldr	r1, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	bf00      	nop
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	0800465f 	.word	0x0800465f
 8005d5c:	08004aa5 	.word	0x08004aa5
 8005d60:	08004845 	.word	0x08004845

08005d64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00f      	beq.n	8005d9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005d84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d92:	2b28      	cmp	r3, #40	@ 0x28
 8005d94:	d003      	beq.n	8005d9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005d9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d9e:	887b      	ldrh	r3, [r7, #2]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00f      	beq.n	8005dc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005dae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dbc:	2b28      	cmp	r3, #40	@ 0x28
 8005dbe:	d003      	beq.n	8005dc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005dc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005dc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	da03      	bge.n	8005dd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005dd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005dd8:	887b      	ldrh	r3, [r7, #2]
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d103      	bne.n	8005de6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005de6:	887b      	ldrh	r3, [r7, #2]
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d103      	bne.n	8005df4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f043 0320 	orr.w	r3, r3, #32
 8005df2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005df4:	887b      	ldrh	r3, [r7, #2]
 8005df6:	2b40      	cmp	r3, #64	@ 0x40
 8005df8:	d103      	bne.n	8005e02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6819      	ldr	r1, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	400a      	ands	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d138      	bne.n	8005ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e032      	b.n	8005eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2224      	movs	r2, #36	@ 0x24
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6819      	ldr	r1, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e000      	b.n	8005eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d139      	bne.n	8005f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e033      	b.n	8005f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	@ 0x24
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e007      	b.n	8005f7e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005f6e:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f023 0204 	bic.w	r2, r3, #4
 8005f76:	4905      	ldr	r1, [pc, #20]	@ (8005f8c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40030400 	.word	0x40030400

08005f90 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005f94:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <HAL_ICACHE_Enable+0x1c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a04      	ldr	r2, [pc, #16]	@ (8005fac <HAL_ICACHE_Enable+0x1c>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40030400 	.word	0x40030400

08005fb0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005fb8:	4b39      	ldr	r3, [pc, #228]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fc0:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd0:	d905      	bls.n	8005fde <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005fd2:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	4a32      	ldr	r2, [pc, #200]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fdc:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e057      	b.n	8006092 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fe8:	d90a      	bls.n	8006000 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8005fea:	4b2d      	ldr	r3, [pc, #180]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ffc:	60d3      	str	r3, [r2, #12]
 8005ffe:	e007      	b.n	8006010 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006000:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006008:	4925      	ldr	r1, [pc, #148]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4313      	orrs	r3, r2
 800600e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006010:	4b24      	ldr	r3, [pc, #144]	@ (80060a4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a24      	ldr	r2, [pc, #144]	@ (80060a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006016:	fba2 2303 	umull	r2, r3, r2, r3
 800601a:	099b      	lsrs	r3, r3, #6
 800601c:	2232      	movs	r2, #50	@ 0x32
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	4a21      	ldr	r2, [pc, #132]	@ (80060a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006024:	fba2 2303 	umull	r2, r3, r2, r3
 8006028:	099b      	lsrs	r3, r3, #6
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800602e:	e002      	b.n	8006036 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b01      	subs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006036:	4b1a      	ldr	r3, [pc, #104]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <HAL_PWREx_ControlVoltageScaling+0x98>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f3      	bne.n	8006030 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01b      	beq.n	8006086 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800604e:	4b15      	ldr	r3, [pc, #84]	@ (80060a4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a15      	ldr	r2, [pc, #84]	@ (80060a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	099b      	lsrs	r3, r3, #6
 800605a:	2232      	movs	r2, #50	@ 0x32
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	4a11      	ldr	r2, [pc, #68]	@ (80060a8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800606c:	e002      	b.n	8006074 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3b01      	subs	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006074:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f3      	bne.n	800606e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e000      	b.n	8006092 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	46020800 	.word	0x46020800
 80060a4:	20000000 	.word	0x20000000
 80060a8:	10624dd3 	.word	0x10624dd3

080060ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80060b0:	4b04      	ldr	r3, [pc, #16]	@ (80060c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80060b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	46020800 	.word	0x46020800

080060c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	@ 0x38
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d102      	bne.n	80060e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f000 bec8 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060e2:	4b99      	ldr	r3, [pc, #612]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060ec:	4b96      	ldr	r3, [pc, #600]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 816c 	beq.w	80063dc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <HAL_RCC_OscConfig+0x52>
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	2b0c      	cmp	r3, #12
 800610e:	f040 80de 	bne.w	80062ce <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	2b01      	cmp	r3, #1
 8006116:	f040 80da 	bne.w	80062ce <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f000 bea5 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800612c:	4b86      	ldr	r3, [pc, #536]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <HAL_RCC_OscConfig+0x7a>
 8006138:	4b83      	ldr	r3, [pc, #524]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006140:	e005      	b.n	800614e <HAL_RCC_OscConfig+0x86>
 8006142:	4b81      	ldr	r3, [pc, #516]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800614e:	4293      	cmp	r3, r2
 8006150:	d255      	bcs.n	80061fe <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10a      	bne.n	800616e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615c:	4618      	mov	r0, r3
 800615e:	f001 f9d9 	bl	8007514 <RCC_SetFlashLatencyFromMSIRange>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f000 be82 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800616e:	4b76      	ldr	r3, [pc, #472]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4a75      	ldr	r2, [pc, #468]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006174:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006178:	6093      	str	r3, [r2, #8]
 800617a:	4b73      	ldr	r3, [pc, #460]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	4970      	ldr	r1, [pc, #448]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006188:	4313      	orrs	r3, r2
 800618a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006194:	d309      	bcc.n	80061aa <HAL_RCC_OscConfig+0xe2>
 8006196:	4b6c      	ldr	r3, [pc, #432]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f023 021f 	bic.w	r2, r3, #31
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	4969      	ldr	r1, [pc, #420]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60cb      	str	r3, [r1, #12]
 80061a8:	e07e      	b.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da0a      	bge.n	80061c8 <HAL_RCC_OscConfig+0x100>
 80061b2:	4b65      	ldr	r3, [pc, #404]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	015b      	lsls	r3, r3, #5
 80061c0:	4961      	ldr	r1, [pc, #388]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60cb      	str	r3, [r1, #12]
 80061c6:	e06f      	b.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d0:	d30a      	bcc.n	80061e8 <HAL_RCC_OscConfig+0x120>
 80061d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	4959      	ldr	r1, [pc, #356]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60cb      	str	r3, [r1, #12]
 80061e6:	e05f      	b.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
 80061e8:	4b57      	ldr	r3, [pc, #348]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	03db      	lsls	r3, r3, #15
 80061f6:	4954      	ldr	r1, [pc, #336]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60cb      	str	r3, [r1, #12]
 80061fc:	e054      	b.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80061fe:	4b52      	ldr	r3, [pc, #328]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4a51      	ldr	r2, [pc, #324]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006204:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006208:	6093      	str	r3, [r2, #8]
 800620a:	4b4f      	ldr	r3, [pc, #316]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006216:	494c      	ldr	r1, [pc, #304]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006218:	4313      	orrs	r3, r2
 800621a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006224:	d309      	bcc.n	800623a <HAL_RCC_OscConfig+0x172>
 8006226:	4b48      	ldr	r3, [pc, #288]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f023 021f 	bic.w	r2, r3, #31
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	4945      	ldr	r1, [pc, #276]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006234:	4313      	orrs	r3, r2
 8006236:	60cb      	str	r3, [r1, #12]
 8006238:	e028      	b.n	800628c <HAL_RCC_OscConfig+0x1c4>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	da0a      	bge.n	8006258 <HAL_RCC_OscConfig+0x190>
 8006242:	4b41      	ldr	r3, [pc, #260]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	015b      	lsls	r3, r3, #5
 8006250:	493d      	ldr	r1, [pc, #244]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006252:	4313      	orrs	r3, r2
 8006254:	60cb      	str	r3, [r1, #12]
 8006256:	e019      	b.n	800628c <HAL_RCC_OscConfig+0x1c4>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006260:	d30a      	bcc.n	8006278 <HAL_RCC_OscConfig+0x1b0>
 8006262:	4b39      	ldr	r3, [pc, #228]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	4935      	ldr	r1, [pc, #212]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006272:	4313      	orrs	r3, r2
 8006274:	60cb      	str	r3, [r1, #12]
 8006276:	e009      	b.n	800628c <HAL_RCC_OscConfig+0x1c4>
 8006278:	4b33      	ldr	r3, [pc, #204]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	03db      	lsls	r3, r3, #15
 8006286:	4930      	ldr	r1, [pc, #192]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006288:	4313      	orrs	r3, r2
 800628a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f93c 	bl	8007514 <RCC_SetFlashLatencyFromMSIRange>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	f000 bde5 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80062a8:	f001 f8de 	bl	8007468 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062ac:	4b27      	ldr	r3, [pc, #156]	@ (800634c <HAL_RCC_OscConfig+0x284>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fc fd5d 	bl	8002d70 <HAL_InitTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80062bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 808a 	beq.w	80063da <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80062c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ca:	f000 bdd2 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d066      	beq.n	80063a4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80062d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a1b      	ldr	r2, [pc, #108]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80062e2:	f7fc fdcf 	bl	8002e84 <HAL_GetTick>
 80062e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80062e8:	e009      	b.n	80062fe <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062ea:	f7fc fdcb 	bl	8002e84 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d902      	bls.n	80062fe <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	f000 bdba 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80062fe:	4b12      	ldr	r3, [pc, #72]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ef      	beq.n	80062ea <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800630a:	4b0f      	ldr	r3, [pc, #60]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4a0e      	ldr	r2, [pc, #56]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006310:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006314:	6093      	str	r3, [r2, #8]
 8006316:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	4909      	ldr	r1, [pc, #36]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006324:	4313      	orrs	r3, r2
 8006326:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006330:	d30e      	bcc.n	8006350 <HAL_RCC_OscConfig+0x288>
 8006332:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f023 021f 	bic.w	r2, r3, #31
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4902      	ldr	r1, [pc, #8]	@ (8006348 <HAL_RCC_OscConfig+0x280>)
 8006340:	4313      	orrs	r3, r2
 8006342:	60cb      	str	r3, [r1, #12]
 8006344:	e04a      	b.n	80063dc <HAL_RCC_OscConfig+0x314>
 8006346:	bf00      	nop
 8006348:	46020c00 	.word	0x46020c00
 800634c:	20000004 	.word	0x20000004
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	da0a      	bge.n	800636e <HAL_RCC_OscConfig+0x2a6>
 8006358:	4b98      	ldr	r3, [pc, #608]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	015b      	lsls	r3, r3, #5
 8006366:	4995      	ldr	r1, [pc, #596]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006368:	4313      	orrs	r3, r2
 800636a:	60cb      	str	r3, [r1, #12]
 800636c:	e036      	b.n	80063dc <HAL_RCC_OscConfig+0x314>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006376:	d30a      	bcc.n	800638e <HAL_RCC_OscConfig+0x2c6>
 8006378:	4b90      	ldr	r3, [pc, #576]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	029b      	lsls	r3, r3, #10
 8006386:	498d      	ldr	r1, [pc, #564]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006388:	4313      	orrs	r3, r2
 800638a:	60cb      	str	r3, [r1, #12]
 800638c:	e026      	b.n	80063dc <HAL_RCC_OscConfig+0x314>
 800638e:	4b8b      	ldr	r3, [pc, #556]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	03db      	lsls	r3, r3, #15
 800639c:	4987      	ldr	r1, [pc, #540]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	60cb      	str	r3, [r1, #12]
 80063a2:	e01b      	b.n	80063dc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80063a4:	4b85      	ldr	r3, [pc, #532]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a84      	ldr	r2, [pc, #528]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 80063aa:	f023 0301 	bic.w	r3, r3, #1
 80063ae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063b0:	f7fc fd68 	bl	8002e84 <HAL_GetTick>
 80063b4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80063b6:	e009      	b.n	80063cc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063b8:	f7fc fd64 	bl	8002e84 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d902      	bls.n	80063cc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	f000 bd53 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80063cc:	4b7b      	ldr	r3, [pc, #492]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ef      	bne.n	80063b8 <HAL_RCC_OscConfig+0x2f0>
 80063d8:	e000      	b.n	80063dc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80063da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 808b 	beq.w	8006500 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_OscConfig+0x334>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	2b0c      	cmp	r3, #12
 80063f4:	d109      	bne.n	800640a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d106      	bne.n	800640a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d17d      	bne.n	8006500 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	f000 bd34 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006412:	d106      	bne.n	8006422 <HAL_RCC_OscConfig+0x35a>
 8006414:	4b69      	ldr	r3, [pc, #420]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a68      	ldr	r2, [pc, #416]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800641a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e041      	b.n	80064a6 <HAL_RCC_OscConfig+0x3de>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800642a:	d112      	bne.n	8006452 <HAL_RCC_OscConfig+0x38a>
 800642c:	4b63      	ldr	r3, [pc, #396]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a62      	ldr	r2, [pc, #392]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	4b60      	ldr	r3, [pc, #384]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a5f      	ldr	r2, [pc, #380]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800643e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b5d      	ldr	r3, [pc, #372]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a5c      	ldr	r2, [pc, #368]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800644a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e029      	b.n	80064a6 <HAL_RCC_OscConfig+0x3de>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800645a:	d112      	bne.n	8006482 <HAL_RCC_OscConfig+0x3ba>
 800645c:	4b57      	ldr	r3, [pc, #348]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a56      	ldr	r2, [pc, #344]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006462:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	4b54      	ldr	r3, [pc, #336]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a53      	ldr	r2, [pc, #332]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800646e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	4b51      	ldr	r3, [pc, #324]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a50      	ldr	r2, [pc, #320]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800647a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e011      	b.n	80064a6 <HAL_RCC_OscConfig+0x3de>
 8006482:	4b4e      	ldr	r3, [pc, #312]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4d      	ldr	r2, [pc, #308]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	4b4b      	ldr	r3, [pc, #300]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4a      	ldr	r2, [pc, #296]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	4b48      	ldr	r3, [pc, #288]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a47      	ldr	r2, [pc, #284]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 80064a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80064a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d014      	beq.n	80064d8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80064ae:	f7fc fce9 	bl	8002e84 <HAL_GetTick>
 80064b2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064b4:	e009      	b.n	80064ca <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064b6:	f7fc fce5 	bl	8002e84 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b64      	cmp	r3, #100	@ 0x64
 80064c2:	d902      	bls.n	80064ca <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	f000 bcd4 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064ca:	4b3c      	ldr	r3, [pc, #240]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0ef      	beq.n	80064b6 <HAL_RCC_OscConfig+0x3ee>
 80064d6:	e013      	b.n	8006500 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80064d8:	f7fc fcd4 	bl	8002e84 <HAL_GetTick>
 80064dc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064de:	e009      	b.n	80064f4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e0:	f7fc fcd0 	bl	8002e84 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	@ 0x64
 80064ec:	d902      	bls.n	80064f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	f000 bcbf 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064f4:	4b31      	ldr	r3, [pc, #196]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1ef      	bne.n	80064e0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05f      	beq.n	80065cc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800650c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650e:	2b04      	cmp	r3, #4
 8006510:	d005      	beq.n	800651e <HAL_RCC_OscConfig+0x456>
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	2b0c      	cmp	r3, #12
 8006516:	d114      	bne.n	8006542 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	2b02      	cmp	r3, #2
 800651c:	d111      	bne.n	8006542 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f000 bca3 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800652c:	4b23      	ldr	r3, [pc, #140]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	041b      	lsls	r3, r3, #16
 800653a:	4920      	ldr	r1, [pc, #128]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800653c:	4313      	orrs	r3, r2
 800653e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006540:	e044      	b.n	80065cc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d024      	beq.n	8006594 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800654a:	4b1c      	ldr	r3, [pc, #112]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a1b      	ldr	r2, [pc, #108]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006554:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006556:	f7fc fc95 	bl	8002e84 <HAL_GetTick>
 800655a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800655c:	e009      	b.n	8006572 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655e:	f7fc fc91 	bl	8002e84 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d902      	bls.n	8006572 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	f000 bc80 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006572:	4b12      	ldr	r3, [pc, #72]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0ef      	beq.n	800655e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800657e:	4b0f      	ldr	r3, [pc, #60]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	490b      	ldr	r1, [pc, #44]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800658e:	4313      	orrs	r3, r2
 8006590:	610b      	str	r3, [r1, #16]
 8006592:	e01b      	b.n	80065cc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006594:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a08      	ldr	r2, [pc, #32]	@ (80065bc <HAL_RCC_OscConfig+0x4f4>)
 800659a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800659e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065a0:	f7fc fc70 	bl	8002e84 <HAL_GetTick>
 80065a4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065a6:	e00b      	b.n	80065c0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a8:	f7fc fc6c 	bl	8002e84 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d904      	bls.n	80065c0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	f000 bc5b 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
 80065bc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065c0:	4baf      	ldr	r3, [pc, #700]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1ed      	bne.n	80065a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80c8 	beq.w	800676a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e0:	4ba7      	ldr	r3, [pc, #668]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80065e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d111      	bne.n	8006612 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ee:	4ba4      	ldr	r3, [pc, #656]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80065f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065f4:	4aa2      	ldr	r2, [pc, #648]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80065f6:	f043 0304 	orr.w	r3, r3, #4
 80065fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80065fe:	4ba0      	ldr	r3, [pc, #640]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006612:	4b9c      	ldr	r3, [pc, #624]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d119      	bne.n	8006652 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800661e:	4b99      	ldr	r3, [pc, #612]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 8006620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006622:	4a98      	ldr	r2, [pc, #608]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800662a:	f7fc fc2b 	bl	8002e84 <HAL_GetTick>
 800662e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006630:	e009      	b.n	8006646 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006632:	f7fc fc27 	bl	8002e84 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d902      	bls.n	8006646 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	f000 bc16 	b.w	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006646:	4b8f      	ldr	r3, [pc, #572]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0ef      	beq.n	8006632 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d05f      	beq.n	800671a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800665a:	4b89      	ldr	r3, [pc, #548]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800665c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006660:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800666c:	429a      	cmp	r2, r3
 800666e:	d037      	beq.n	80066e0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e3f4      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01b      	beq.n	80066ca <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006692:	4b7b      	ldr	r3, [pc, #492]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006698:	4a79      	ldr	r2, [pc, #484]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800669a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800669e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80066a2:	f7fc fbef 	bl	8002e84 <HAL_GetTick>
 80066a6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066aa:	f7fc fbeb 	bl	8002e84 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e3da      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80066bc:	4b70      	ldr	r3, [pc, #448]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80066be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1ef      	bne.n	80066aa <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80066ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80066cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	4969      	ldr	r1, [pc, #420]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80066e0:	4b67      	ldr	r3, [pc, #412]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80066e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066e6:	4a66      	ldr	r2, [pc, #408]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 80066e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80066f0:	f7fc fbc8 	bl	8002e84 <HAL_GetTick>
 80066f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f8:	f7fc fbc4 	bl	8002e84 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b05      	cmp	r3, #5
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e3b3      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800670a:	4b5d      	ldr	r3, [pc, #372]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800670c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0ef      	beq.n	80066f8 <HAL_RCC_OscConfig+0x630>
 8006718:	e01b      	b.n	8006752 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800671a:	4b59      	ldr	r3, [pc, #356]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800671c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006720:	4a57      	ldr	r2, [pc, #348]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006722:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006726:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800672a:	f7fc fbab 	bl	8002e84 <HAL_GetTick>
 800672e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006732:	f7fc fba7 	bl	8002e84 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b05      	cmp	r3, #5
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e396      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006744:	4b4e      	ldr	r3, [pc, #312]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800674a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ef      	bne.n	8006732 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006752:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006756:	2b01      	cmp	r3, #1
 8006758:	d107      	bne.n	800676a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800675a:	4b49      	ldr	r3, [pc, #292]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800675c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006760:	4a47      	ldr	r2, [pc, #284]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8111 	beq.w	800699a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006778:	2300      	movs	r3, #0
 800677a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800677e:	4b40      	ldr	r3, [pc, #256]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d111      	bne.n	80067b0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800678c:	4b3c      	ldr	r3, [pc, #240]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800678e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006792:	4a3b      	ldr	r2, [pc, #236]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006794:	f043 0304 	orr.w	r3, r3, #4
 8006798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800679c:	4b38      	ldr	r3, [pc, #224]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800679e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80067b0:	4b34      	ldr	r3, [pc, #208]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 80067b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d118      	bne.n	80067ee <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80067bc:	4b31      	ldr	r3, [pc, #196]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	4a30      	ldr	r2, [pc, #192]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c8:	f7fc fb5c 	bl	8002e84 <HAL_GetTick>
 80067cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067d0:	f7fc fb58 	bl	8002e84 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e347      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80067e2:	4b28      	ldr	r3, [pc, #160]	@ (8006884 <HAL_RCC_OscConfig+0x7bc>)
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01f      	beq.n	800683a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d010      	beq.n	8006828 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006806:	4b1e      	ldr	r3, [pc, #120]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680c:	4a1c      	ldr	r2, [pc, #112]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800680e:	f043 0304 	orr.w	r3, r3, #4
 8006812:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006816:	4b1a      	ldr	r3, [pc, #104]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800681c:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006826:	e018      	b.n	800685a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006828:	4b15      	ldr	r3, [pc, #84]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800682a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800682e:	4a14      	ldr	r2, [pc, #80]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006838:	e00f      	b.n	800685a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800683a:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800683c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006840:	4a0f      	ldr	r2, [pc, #60]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 800684c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006850:	4a0b      	ldr	r2, [pc, #44]	@ (8006880 <HAL_RCC_OscConfig+0x7b8>)
 8006852:	f023 0304 	bic.w	r3, r3, #4
 8006856:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d057      	beq.n	8006912 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006862:	f7fc fb0f 	bl	8002e84 <HAL_GetTick>
 8006866:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006868:	e00e      	b.n	8006888 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686a:	f7fc fb0b 	bl	8002e84 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006878:	4293      	cmp	r3, r2
 800687a:	d905      	bls.n	8006888 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e2f8      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
 8006880:	46020c00 	.word	0x46020c00
 8006884:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006888:	4b9c      	ldr	r3, [pc, #624]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 800688a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0e9      	beq.n	800686a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01b      	beq.n	80068da <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80068a2:	4b96      	ldr	r3, [pc, #600]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80068a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068a8:	4a94      	ldr	r2, [pc, #592]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80068aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80068b2:	e00a      	b.n	80068ca <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b4:	f7fc fae6 	bl	8002e84 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e2d3      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80068ca:	4b8c      	ldr	r3, [pc, #560]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80068cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0ed      	beq.n	80068b4 <HAL_RCC_OscConfig+0x7ec>
 80068d8:	e053      	b.n	8006982 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80068da:	4b88      	ldr	r3, [pc, #544]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80068dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e0:	4a86      	ldr	r2, [pc, #536]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80068e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80068ea:	e00a      	b.n	8006902 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ec:	f7fc faca 	bl	8002e84 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e2b7      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006902:	4b7e      	ldr	r3, [pc, #504]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1ed      	bne.n	80068ec <HAL_RCC_OscConfig+0x824>
 8006910:	e037      	b.n	8006982 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006912:	f7fc fab7 	bl	8002e84 <HAL_GetTick>
 8006916:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006918:	e00a      	b.n	8006930 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691a:	f7fc fab3 	bl	8002e84 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e2a0      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006930:	4b72      	ldr	r3, [pc, #456]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1ed      	bne.n	800691a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800693e:	4b6f      	ldr	r3, [pc, #444]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01a      	beq.n	8006982 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800694c:	4b6b      	ldr	r3, [pc, #428]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 800694e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006952:	4a6a      	ldr	r2, [pc, #424]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006958:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800695c:	e00a      	b.n	8006974 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fc fa91 	bl	8002e84 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e27e      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006974:	4b61      	ldr	r3, [pc, #388]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800697a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1ed      	bne.n	800695e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006982:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006986:	2b01      	cmp	r3, #1
 8006988:	d107      	bne.n	800699a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800698a:	4b5c      	ldr	r3, [pc, #368]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 800698c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006990:	4a5a      	ldr	r2, [pc, #360]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006992:	f023 0304 	bic.w	r3, r3, #4
 8006996:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d036      	beq.n	8006a14 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d019      	beq.n	80069e2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80069ae:	4b53      	ldr	r3, [pc, #332]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a52      	ldr	r2, [pc, #328]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80069b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80069b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80069ba:	f7fc fa63 	bl	8002e84 <HAL_GetTick>
 80069be:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069c2:	f7fc fa5f 	bl	8002e84 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e24e      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80069d4:	4b49      	ldr	r3, [pc, #292]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCC_OscConfig+0x8fa>
 80069e0:	e018      	b.n	8006a14 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80069e2:	4b46      	ldr	r3, [pc, #280]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a45      	ldr	r2, [pc, #276]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 80069e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069ec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80069ee:	f7fc fa49 	bl	8002e84 <HAL_GetTick>
 80069f2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80069f4:	e008      	b.n	8006a08 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069f6:	f7fc fa45 	bl	8002e84 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e234      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a08:	4b3c      	ldr	r3, [pc, #240]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1f0      	bne.n	80069f6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d036      	beq.n	8006a8e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d019      	beq.n	8006a5c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006a28:	4b34      	ldr	r3, [pc, #208]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a33      	ldr	r2, [pc, #204]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a34:	f7fc fa26 	bl	8002e84 <HAL_GetTick>
 8006a38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006a3c:	f7fc fa22 	bl	8002e84 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e211      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0f0      	beq.n	8006a3c <HAL_RCC_OscConfig+0x974>
 8006a5a:	e018      	b.n	8006a8e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006a5c:	4b27      	ldr	r3, [pc, #156]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a26      	ldr	r2, [pc, #152]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a68:	f7fc fa0c 	bl	8002e84 <HAL_GetTick>
 8006a6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006a70:	f7fc fa08 	bl	8002e84 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e1f7      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006a82:	4b1e      	ldr	r3, [pc, #120]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1f0      	bne.n	8006a70 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d07f      	beq.n	8006b9a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d062      	beq.n	8006b68 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006aa2:	4b16      	ldr	r3, [pc, #88]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006aa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006aac:	6093      	str	r3, [r2, #8]
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	4910      	ldr	r1, [pc, #64]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006ac8:	d309      	bcc.n	8006ade <HAL_RCC_OscConfig+0xa16>
 8006aca:	4b0c      	ldr	r3, [pc, #48]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f023 021f 	bic.w	r2, r3, #31
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	4909      	ldr	r1, [pc, #36]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60cb      	str	r3, [r1, #12]
 8006adc:	e02a      	b.n	8006b34 <HAL_RCC_OscConfig+0xa6c>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da0c      	bge.n	8006b00 <HAL_RCC_OscConfig+0xa38>
 8006ae6:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	015b      	lsls	r3, r3, #5
 8006af4:	4901      	ldr	r1, [pc, #4]	@ (8006afc <HAL_RCC_OscConfig+0xa34>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60cb      	str	r3, [r1, #12]
 8006afa:	e01b      	b.n	8006b34 <HAL_RCC_OscConfig+0xa6c>
 8006afc:	46020c00 	.word	0x46020c00
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b08:	d30a      	bcc.n	8006b20 <HAL_RCC_OscConfig+0xa58>
 8006b0a:	4ba1      	ldr	r3, [pc, #644]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	029b      	lsls	r3, r3, #10
 8006b18:	499d      	ldr	r1, [pc, #628]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60cb      	str	r3, [r1, #12]
 8006b1e:	e009      	b.n	8006b34 <HAL_RCC_OscConfig+0xa6c>
 8006b20:	4b9b      	ldr	r3, [pc, #620]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	03db      	lsls	r3, r3, #15
 8006b2e:	4998      	ldr	r1, [pc, #608]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006b34:	4b96      	ldr	r3, [pc, #600]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a95      	ldr	r2, [pc, #596]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b3a:	f043 0310 	orr.w	r3, r3, #16
 8006b3e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006b40:	f7fc f9a0 	bl	8002e84 <HAL_GetTick>
 8006b44:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006b48:	f7fc f99c 	bl	8002e84 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e18b      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0xa80>
 8006b66:	e018      	b.n	8006b9a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006b68:	4b89      	ldr	r3, [pc, #548]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a88      	ldr	r2, [pc, #544]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b6e:	f023 0310 	bic.w	r3, r3, #16
 8006b72:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006b74:	f7fc f986 	bl	8002e84 <HAL_GetTick>
 8006b78:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006b7c:	f7fc f982 	bl	8002e84 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e171      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006b8e:	4b80      	ldr	r3, [pc, #512]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0320 	and.w	r3, r3, #32
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 8166 	beq.w	8006e70 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006baa:	4b79      	ldr	r3, [pc, #484]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f003 030c 	and.w	r3, r3, #12
 8006bb2:	2b0c      	cmp	r3, #12
 8006bb4:	f000 80f2 	beq.w	8006d9c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	f040 80c5 	bne.w	8006d4c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006bc2:	4b73      	ldr	r3, [pc, #460]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a72      	ldr	r2, [pc, #456]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006bc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bcc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006bce:	f7fc f959 	bl	8002e84 <HAL_GetTick>
 8006bd2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd6:	f7fc f955 	bl	8002e84 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e144      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006be8:	4b69      	ldr	r3, [pc, #420]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bf4:	4b66      	ldr	r3, [pc, #408]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d111      	bne.n	8006c26 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006c02:	4b63      	ldr	r3, [pc, #396]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c08:	4a61      	ldr	r2, [pc, #388]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006c0a:	f043 0304 	orr.w	r3, r3, #4
 8006c0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c12:	4b5f      	ldr	r3, [pc, #380]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006c26:	4b5b      	ldr	r3, [pc, #364]	@ (8006d94 <HAL_RCC_OscConfig+0xccc>)
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c32:	d102      	bne.n	8006c3a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006c3a:	4b56      	ldr	r3, [pc, #344]	@ (8006d94 <HAL_RCC_OscConfig+0xccc>)
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	4a55      	ldr	r2, [pc, #340]	@ (8006d94 <HAL_RCC_OscConfig+0xccc>)
 8006c40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c44:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006c46:	4b52      	ldr	r3, [pc, #328]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c5a:	3a01      	subs	r2, #1
 8006c5c:	0212      	lsls	r2, r2, #8
 8006c5e:	4311      	orrs	r1, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c64:	430a      	orrs	r2, r1
 8006c66:	494a      	ldr	r1, [pc, #296]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c6c:	4b48      	ldr	r3, [pc, #288]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c70:	4b49      	ldr	r3, [pc, #292]	@ (8006d98 <HAL_RCC_OscConfig+0xcd0>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c78:	3a01      	subs	r2, #1
 8006c7a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c82:	3a01      	subs	r2, #1
 8006c84:	0252      	lsls	r2, r2, #9
 8006c86:	b292      	uxth	r2, r2
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c8e:	3a01      	subs	r2, #1
 8006c90:	0412      	lsls	r2, r2, #16
 8006c92:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006c96:	4311      	orrs	r1, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006c9c:	3a01      	subs	r2, #1
 8006c9e:	0612      	lsls	r2, r2, #24
 8006ca0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	493a      	ldr	r1, [pc, #232]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006cac:	4b38      	ldr	r3, [pc, #224]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	4a37      	ldr	r2, [pc, #220]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cb2:	f023 0310 	bic.w	r3, r3, #16
 8006cb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cbc:	4a34      	ldr	r2, [pc, #208]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006cc2:	4b33      	ldr	r3, [pc, #204]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc6:	4a32      	ldr	r2, [pc, #200]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cc8:	f043 0310 	orr.w	r3, r3, #16
 8006ccc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006cce:	4b30      	ldr	r3, [pc, #192]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd2:	f023 020c 	bic.w	r2, r3, #12
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cda:	492d      	ldr	r1, [pc, #180]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006ce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d105      	bne.n	8006cf4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d94 <HAL_RCC_OscConfig+0xccc>)
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	4a29      	ldr	r2, [pc, #164]	@ (8006d94 <HAL_RCC_OscConfig+0xccc>)
 8006cee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cf2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006cf4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006cfc:	4b24      	ldr	r3, [pc, #144]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d02:	4a23      	ldr	r2, [pc, #140]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d04:	f023 0304 	bic.w	r3, r3, #4
 8006d08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006d0c:	4b20      	ldr	r3, [pc, #128]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1f      	ldr	r2, [pc, #124]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d18:	f7fc f8b4 	bl	8002e84 <HAL_GetTick>
 8006d1c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fc f8b0 	bl	8002e84 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e09f      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d32:	4b17      	ldr	r3, [pc, #92]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f0      	beq.n	8006d20 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d3e:	4b14      	ldr	r3, [pc, #80]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	4a13      	ldr	r2, [pc, #76]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d48:	6293      	str	r3, [r2, #40]	@ 0x28
 8006d4a:	e091      	b.n	8006e70 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006d4c:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a0f      	ldr	r2, [pc, #60]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d58:	f7fc f894 	bl	8002e84 <HAL_GetTick>
 8006d5c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d60:	f7fc f890 	bl	8002e84 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e07f      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006d72:	4b07      	ldr	r3, [pc, #28]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006d7e:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	4a03      	ldr	r2, [pc, #12]	@ (8006d90 <HAL_RCC_OscConfig+0xcc8>)
 8006d84:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006d88:	f023 0303 	bic.w	r3, r3, #3
 8006d8c:	6293      	str	r3, [r2, #40]	@ 0x28
 8006d8e:	e06f      	b.n	8006e70 <HAL_RCC_OscConfig+0xda8>
 8006d90:	46020c00 	.word	0x46020c00
 8006d94:	46020800 	.word	0x46020800
 8006d98:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006d9c:	4b37      	ldr	r3, [pc, #220]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006da2:	4b36      	ldr	r3, [pc, #216]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d039      	beq.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f003 0203 	and.w	r2, r3, #3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d132      	bne.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d129      	bne.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d122      	bne.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d11a      	bne.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	0a5b      	lsrs	r3, r3, #9
 8006df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d111      	bne.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	0c1b      	lsrs	r3, r3, #16
 8006e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d108      	bne.n	8006e24 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	0e1b      	lsrs	r3, r3, #24
 8006e16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d001      	beq.n	8006e28 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e024      	b.n	8006e72 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e28:	4b14      	ldr	r3, [pc, #80]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	08db      	lsrs	r3, r3, #3
 8006e2e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d01a      	beq.n	8006e70 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006e3a:	4b10      	ldr	r3, [pc, #64]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e46:	f7fc f81d 	bl	8002e84 <HAL_GetTick>
 8006e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006e4c:	bf00      	nop
 8006e4e:	f7fc f819 	bl	8002e84 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d0f9      	beq.n	8006e4e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e5e:	4a07      	ldr	r2, [pc, #28]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006e64:	4b05      	ldr	r3, [pc, #20]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	4a04      	ldr	r2, [pc, #16]	@ (8006e7c <HAL_RCC_OscConfig+0xdb4>)
 8006e6a:	f043 0310 	orr.w	r3, r3, #16
 8006e6e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3738      	adds	r7, #56	@ 0x38
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	46020c00 	.word	0x46020c00

08006e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e1d9      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e94:	4b9b      	ldr	r3, [pc, #620]	@ (8007104 <HAL_RCC_ClockConfig+0x284>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d910      	bls.n	8006ec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea2:	4b98      	ldr	r3, [pc, #608]	@ (8007104 <HAL_RCC_ClockConfig+0x284>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f023 020f 	bic.w	r2, r3, #15
 8006eaa:	4996      	ldr	r1, [pc, #600]	@ (8007104 <HAL_RCC_ClockConfig+0x284>)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b94      	ldr	r3, [pc, #592]	@ (8007104 <HAL_RCC_ClockConfig+0x284>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e1c1      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d010      	beq.n	8006ef2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695a      	ldr	r2, [r3, #20]
 8006ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d908      	bls.n	8006ef2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006ee0:	4b89      	ldr	r3, [pc, #548]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	4986      	ldr	r1, [pc, #536]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0308 	and.w	r3, r3, #8
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d012      	beq.n	8006f24 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	4b81      	ldr	r3, [pc, #516]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d909      	bls.n	8006f24 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006f10:	4b7d      	ldr	r3, [pc, #500]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	497a      	ldr	r1, [pc, #488]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d010      	beq.n	8006f52 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	4b74      	ldr	r3, [pc, #464]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d908      	bls.n	8006f52 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006f40:	4b71      	ldr	r3, [pc, #452]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	496e      	ldr	r1, [pc, #440]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d010      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	4b69      	ldr	r3, [pc, #420]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f003 030f 	and.w	r3, r3, #15
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d908      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006f6e:	4b66      	ldr	r3, [pc, #408]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 020f 	bic.w	r2, r3, #15
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	4963      	ldr	r1, [pc, #396]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80d2 	beq.w	8007132 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d143      	bne.n	8007022 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d110      	bne.n	8006fca <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006fa8:	4b57      	ldr	r3, [pc, #348]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fae:	4a56      	ldr	r2, [pc, #344]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006fb0:	f043 0304 	orr.w	r3, r3, #4
 8006fb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006fb8:	4b53      	ldr	r3, [pc, #332]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8006fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006fca:	f7fb ff5b 	bl	8002e84 <HAL_GetTick>
 8006fce:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006fd0:	4b4e      	ldr	r3, [pc, #312]	@ (800710c <HAL_RCC_ClockConfig+0x28c>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00f      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006fde:	f7fb ff51 	bl	8002e84 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e12b      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006ff0:	4b46      	ldr	r3, [pc, #280]	@ (800710c <HAL_RCC_ClockConfig+0x28c>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007002:	4b41      	ldr	r3, [pc, #260]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8007004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007008:	4a3f      	ldr	r2, [pc, #252]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 800700a:	f023 0304 	bic.w	r3, r3, #4
 800700e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007012:	4b3d      	ldr	r3, [pc, #244]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d121      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e112      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d107      	bne.n	800703a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800702a:	4b37      	ldr	r3, [pc, #220]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d115      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e106      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d107      	bne.n	8007052 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e0fa      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007052:	4b2d      	ldr	r3, [pc, #180]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e0f2      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8007062:	4b29      	ldr	r3, [pc, #164]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	4926      	ldr	r1, [pc, #152]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 8007070:	4313      	orrs	r3, r2
 8007072:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8007074:	f7fb ff06 	bl	8002e84 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b03      	cmp	r3, #3
 8007080:	d112      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007082:	e00a      	b.n	800709a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007084:	f7fb fefe 	bl	8002e84 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e0d6      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800709a:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 030c 	and.w	r3, r3, #12
 80070a2:	2b0c      	cmp	r3, #12
 80070a4:	d1ee      	bne.n	8007084 <HAL_RCC_ClockConfig+0x204>
 80070a6:	e044      	b.n	8007132 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d112      	bne.n	80070d6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070b0:	e00a      	b.n	80070c8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b2:	f7fb fee7 	bl	8002e84 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e0bf      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	f003 030c 	and.w	r3, r3, #12
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d1ee      	bne.n	80070b2 <HAL_RCC_ClockConfig+0x232>
 80070d4:	e02d      	b.n	8007132 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d123      	bne.n	8007126 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80070de:	e00a      	b.n	80070f6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070e0:	f7fb fed0 	bl	8002e84 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e0a8      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80070f6:	4b04      	ldr	r3, [pc, #16]	@ (8007108 <HAL_RCC_ClockConfig+0x288>)
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1ee      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x260>
 8007102:	e016      	b.n	8007132 <HAL_RCC_ClockConfig+0x2b2>
 8007104:	40022000 	.word	0x40022000
 8007108:	46020c00 	.word	0x46020c00
 800710c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007110:	f7fb feb8 	bl	8002e84 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e090      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007126:	4b4a      	ldr	r3, [pc, #296]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	f003 030c 	and.w	r3, r3, #12
 800712e:	2b04      	cmp	r3, #4
 8007130:	d1ee      	bne.n	8007110 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d010      	beq.n	8007160 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	4b43      	ldr	r3, [pc, #268]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	429a      	cmp	r2, r3
 800714c:	d208      	bcs.n	8007160 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800714e:	4b40      	ldr	r3, [pc, #256]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f023 020f 	bic.w	r2, r3, #15
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	493d      	ldr	r1, [pc, #244]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 800715c:	4313      	orrs	r3, r2
 800715e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007160:	4b3c      	ldr	r3, [pc, #240]	@ (8007254 <HAL_RCC_ClockConfig+0x3d4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d210      	bcs.n	8007190 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716e:	4b39      	ldr	r3, [pc, #228]	@ (8007254 <HAL_RCC_ClockConfig+0x3d4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f023 020f 	bic.w	r2, r3, #15
 8007176:	4937      	ldr	r1, [pc, #220]	@ (8007254 <HAL_RCC_ClockConfig+0x3d4>)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4313      	orrs	r3, r2
 800717c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b35      	ldr	r3, [pc, #212]	@ (8007254 <HAL_RCC_ClockConfig+0x3d4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e05b      	b.n	8007248 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d010      	beq.n	80071be <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d208      	bcs.n	80071be <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071ac:	4b28      	ldr	r3, [pc, #160]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	4925      	ldr	r1, [pc, #148]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d012      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	4b20      	ldr	r3, [pc, #128]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	091b      	lsrs	r3, r3, #4
 80071d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071d8:	429a      	cmp	r2, r3
 80071da:	d209      	bcs.n	80071f0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80071dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	4919      	ldr	r1, [pc, #100]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d010      	beq.n	800721e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	695a      	ldr	r2, [r3, #20]
 8007200:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007208:	429a      	cmp	r2, r3
 800720a:	d208      	bcs.n	800721e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800720c:	4b10      	ldr	r3, [pc, #64]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	490d      	ldr	r1, [pc, #52]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 800721a:	4313      	orrs	r3, r2
 800721c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800721e:	f000 f821 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8007222:	4602      	mov	r2, r0
 8007224:	4b0a      	ldr	r3, [pc, #40]	@ (8007250 <HAL_RCC_ClockConfig+0x3d0>)
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	490a      	ldr	r1, [pc, #40]	@ (8007258 <HAL_RCC_ClockConfig+0x3d8>)
 800722e:	5ccb      	ldrb	r3, [r1, r3]
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
 8007234:	4a09      	ldr	r2, [pc, #36]	@ (800725c <HAL_RCC_ClockConfig+0x3dc>)
 8007236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007238:	4b09      	ldr	r3, [pc, #36]	@ (8007260 <HAL_RCC_ClockConfig+0x3e0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7fb fd97 	bl	8002d70 <HAL_InitTick>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]

  return status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	46020c00 	.word	0x46020c00
 8007254:	40022000 	.word	0x40022000
 8007258:	0800ce88 	.word	0x0800ce88
 800725c:	20000000 	.word	0x20000000
 8007260:	20000004 	.word	0x20000004

08007264 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007264:	b480      	push	{r7}
 8007266:	b08b      	sub	sp, #44	@ 0x2c
 8007268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007272:	4b78      	ldr	r3, [pc, #480]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 030c 	and.w	r3, r3, #12
 800727a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800727c:	4b75      	ldr	r3, [pc, #468]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800727e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_RCC_GetSysClockFreq+0x34>
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d121      	bne.n	80072d6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d11e      	bne.n	80072d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007298:	4b6e      	ldr	r3, [pc, #440]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d107      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80072a4:	4b6b      	ldr	r3, [pc, #428]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072aa:	0b1b      	lsrs	r3, r3, #12
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b2:	e005      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80072b4:	4b67      	ldr	r3, [pc, #412]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0f1b      	lsrs	r3, r3, #28
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072c0:	4a65      	ldr	r2, [pc, #404]	@ (8007458 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d110      	bne.n	80072f2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80072d4:	e00d      	b.n	80072f2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80072d6:	4b5f      	ldr	r3, [pc, #380]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f003 030c 	and.w	r3, r3, #12
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d102      	bne.n	80072e8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072e2:	4b5e      	ldr	r3, [pc, #376]	@ (800745c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	e004      	b.n	80072f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b08      	cmp	r3, #8
 80072ec:	d101      	bne.n	80072f2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072ee:	4b5b      	ldr	r3, [pc, #364]	@ (800745c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80072f0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	f040 80a5 	bne.w	8007444 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80072fa:	4b56      	ldr	r3, [pc, #344]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007304:	4b53      	ldr	r3, [pc, #332]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	3301      	adds	r3, #1
 8007310:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007312:	4b50      	ldr	r3, [pc, #320]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007316:	091b      	lsrs	r3, r3, #4
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800731e:	4b4d      	ldr	r3, [pc, #308]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	08db      	lsrs	r3, r3, #3
 8007324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	fb02 f303 	mul.w	r3, r2, r3
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d003      	beq.n	8007348 <HAL_RCC_GetSysClockFreq+0xe4>
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b03      	cmp	r3, #3
 8007344:	d022      	beq.n	800738c <HAL_RCC_GetSysClockFreq+0x128>
 8007346:	e043      	b.n	80073d0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007352:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8007460 <HAL_RCC_GetSysClockFreq+0x1fc>
 8007356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735a:	4b3e      	ldr	r3, [pc, #248]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800735c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800736a:	ed97 6a01 	vldr	s12, [r7, #4]
 800736e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8007464 <HAL_RCC_GetSysClockFreq+0x200>
 8007372:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007376:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800737a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800737e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800738a:	e046      	b.n	800741a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8007460 <HAL_RCC_GetSysClockFreq+0x1fc>
 800739a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739e:	4b2d      	ldr	r3, [pc, #180]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80073a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073ae:	ed97 6a01 	vldr	s12, [r7, #4]
 80073b2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8007464 <HAL_RCC_GetSysClockFreq+0x200>
 80073b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ce:	e024      	b.n	800741a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	ee07 3a90 	vmov	s15, r3
 80073e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80073ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073f8:	ed97 6a01 	vldr	s12, [r7, #4]
 80073fc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8007464 <HAL_RCC_GetSysClockFreq+0x200>
 8007400:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007404:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007408:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800740c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007414:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007418:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800741a:	4b0e      	ldr	r3, [pc, #56]	@ (8007454 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800741c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741e:	0e1b      	lsrs	r3, r3, #24
 8007420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007424:	3301      	adds	r3, #1
 8007426:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007432:	edd7 6a07 	vldr	s13, [r7, #28]
 8007436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743e:	ee17 3a90 	vmov	r3, s15
 8007442:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007444:	6a3b      	ldr	r3, [r7, #32]
}
 8007446:	4618      	mov	r0, r3
 8007448:	372c      	adds	r7, #44	@ 0x2c
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	46020c00 	.word	0x46020c00
 8007458:	0800cea0 	.word	0x0800cea0
 800745c:	00f42400 	.word	0x00f42400
 8007460:	4b742400 	.word	0x4b742400
 8007464:	46000000 	.word	0x46000000

08007468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800746c:	f7ff fefa 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8007470:	4602      	mov	r2, r0
 8007472:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <HAL_RCC_GetHCLKFreq+0x28>)
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	4906      	ldr	r1, [pc, #24]	@ (8007494 <HAL_RCC_GetHCLKFreq+0x2c>)
 800747c:	5ccb      	ldrb	r3, [r1, r3]
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	4a05      	ldr	r2, [pc, #20]	@ (8007498 <HAL_RCC_GetHCLKFreq+0x30>)
 8007484:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007486:	4b04      	ldr	r3, [pc, #16]	@ (8007498 <HAL_RCC_GetHCLKFreq+0x30>)
 8007488:	681b      	ldr	r3, [r3, #0]
}
 800748a:	4618      	mov	r0, r3
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	46020c00 	.word	0x46020c00
 8007494:	0800ce88 	.word	0x0800ce88
 8007498:	20000000 	.word	0x20000000

0800749c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80074a0:	f7ff ffe2 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 80074a4:	4602      	mov	r2, r0
 80074a6:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	4903      	ldr	r1, [pc, #12]	@ (80074c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074b2:	5ccb      	ldrb	r3, [r1, r3]
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	46020c00 	.word	0x46020c00
 80074c0:	0800ce98 	.word	0x0800ce98

080074c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80074c8:	f7ff ffce 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 80074cc:	4602      	mov	r2, r0
 80074ce:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	4903      	ldr	r1, [pc, #12]	@ (80074e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074da:	5ccb      	ldrb	r3, [r1, r3]
 80074dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	46020c00 	.word	0x46020c00
 80074e8:	0800ce98 	.word	0x0800ce98

080074ec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80074f0:	f7ff ffba 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b05      	ldr	r3, [pc, #20]	@ (800750c <HAL_RCC_GetPCLK3Freq+0x20>)
 80074f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fa:	091b      	lsrs	r3, r3, #4
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	4903      	ldr	r1, [pc, #12]	@ (8007510 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007502:	5ccb      	ldrb	r3, [r1, r3]
 8007504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	46020c00 	.word	0x46020c00
 8007510:	0800ce98 	.word	0x0800ce98

08007514 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800751c:	4b3e      	ldr	r3, [pc, #248]	@ (8007618 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800751e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800752a:	f7fe fdbf 	bl	80060ac <HAL_PWREx_GetVoltageRange>
 800752e:	6178      	str	r0, [r7, #20]
 8007530:	e019      	b.n	8007566 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007532:	4b39      	ldr	r3, [pc, #228]	@ (8007618 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007534:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007538:	4a37      	ldr	r2, [pc, #220]	@ (8007618 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800753a:	f043 0304 	orr.w	r3, r3, #4
 800753e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007542:	4b35      	ldr	r3, [pc, #212]	@ (8007618 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007550:	f7fe fdac 	bl	80060ac <HAL_PWREx_GetVoltageRange>
 8007554:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007556:	4b30      	ldr	r3, [pc, #192]	@ (8007618 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800755c:	4a2e      	ldr	r2, [pc, #184]	@ (8007618 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800755e:	f023 0304 	bic.w	r3, r3, #4
 8007562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800756c:	d003      	beq.n	8007576 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007574:	d109      	bne.n	800758a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800757c:	d202      	bcs.n	8007584 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800757e:	2301      	movs	r3, #1
 8007580:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007582:	e033      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007588:	e030      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007590:	d208      	bcs.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007598:	d102      	bne.n	80075a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800759a:	2303      	movs	r3, #3
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	e025      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e035      	b.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075aa:	d90f      	bls.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075b8:	d902      	bls.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80075ba:	2300      	movs	r3, #0
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	e015      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80075c0:	2301      	movs	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	e012      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80075c6:	2300      	movs	r3, #0
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	e00f      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075d2:	d109      	bne.n	80075e8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075da:	d102      	bne.n	80075e2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80075dc:	2301      	movs	r3, #1
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	e004      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80075e2:	2302      	movs	r3, #2
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	e001      	b.n	80075ec <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80075e8:	2301      	movs	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80075ec:	4b0b      	ldr	r3, [pc, #44]	@ (800761c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f023 020f 	bic.w	r2, r3, #15
 80075f4:	4909      	ldr	r1, [pc, #36]	@ (800761c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80075fc:	4b07      	ldr	r3, [pc, #28]	@ (800761c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	429a      	cmp	r2, r3
 8007608:	d001      	beq.n	800760e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	46020c00 	.word	0x46020c00
 800761c:	40022000 	.word	0x40022000

08007620 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007624:	b0ba      	sub	sp, #232	@ 0xe8
 8007626:	af00      	add	r7, sp, #0
 8007628:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800762c:	2300      	movs	r3, #0
 800762e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007632:	2300      	movs	r3, #0
 8007634:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f002 0401 	and.w	r4, r2, #1
 8007644:	2500      	movs	r5, #0
 8007646:	ea54 0305 	orrs.w	r3, r4, r5
 800764a:	d00b      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800764c:	4bcb      	ldr	r3, [pc, #812]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800764e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007652:	f023 0103 	bic.w	r1, r3, #3
 8007656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800765a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800765c:	4ac7      	ldr	r2, [pc, #796]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800765e:	430b      	orrs	r3, r1
 8007660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f002 0802 	and.w	r8, r2, #2
 8007670:	f04f 0900 	mov.w	r9, #0
 8007674:	ea58 0309 	orrs.w	r3, r8, r9
 8007678:	d00b      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800767a:	4bc0      	ldr	r3, [pc, #768]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800767c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007680:	f023 010c 	bic.w	r1, r3, #12
 8007684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768a:	4abc      	ldr	r2, [pc, #752]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800768c:	430b      	orrs	r3, r1
 800768e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f002 0a04 	and.w	sl, r2, #4
 800769e:	f04f 0b00 	mov.w	fp, #0
 80076a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80076a6:	d00b      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80076a8:	4bb4      	ldr	r3, [pc, #720]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076ae:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80076b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076b8:	4ab0      	ldr	r2, [pc, #704]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076ba:	430b      	orrs	r3, r1
 80076bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	f002 0308 	and.w	r3, r2, #8
 80076cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076d0:	2300      	movs	r3, #0
 80076d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80076da:	460b      	mov	r3, r1
 80076dc:	4313      	orrs	r3, r2
 80076de:	d00b      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80076e0:	4ba6      	ldr	r3, [pc, #664]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80076ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f0:	4aa2      	ldr	r2, [pc, #648]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076f2:	430b      	orrs	r3, r1
 80076f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f002 0310 	and.w	r3, r2, #16
 8007704:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800770e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007712:	460b      	mov	r3, r1
 8007714:	4313      	orrs	r3, r2
 8007716:	d00b      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007718:	4b98      	ldr	r3, [pc, #608]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800771a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800771e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007728:	4a94      	ldr	r2, [pc, #592]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800772a:	430b      	orrs	r3, r1
 800772c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f002 0320 	and.w	r3, r2, #32
 800773c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007740:	2300      	movs	r3, #0
 8007742:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007746:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d00b      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007750:	4b8a      	ldr	r3, [pc, #552]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007756:	f023 0107 	bic.w	r1, r3, #7
 800775a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800775e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007760:	4a86      	ldr	r2, [pc, #536]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007762:	430b      	orrs	r3, r1
 8007764:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007778:	2300      	movs	r3, #0
 800777a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800777e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007782:	460b      	mov	r3, r1
 8007784:	4313      	orrs	r3, r2
 8007786:	d00b      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007788:	4b7c      	ldr	r3, [pc, #496]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800778a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800778e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007798:	4a78      	ldr	r2, [pc, #480]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800779a:	430b      	orrs	r3, r1
 800779c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80077ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077ba:	460b      	mov	r3, r1
 80077bc:	4313      	orrs	r3, r2
 80077be:	d00b      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80077c0:	4b6e      	ldr	r3, [pc, #440]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d0:	4a6a      	ldr	r2, [pc, #424]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077d2:	430b      	orrs	r3, r1
 80077d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80077e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077ee:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4313      	orrs	r3, r2
 80077f6:	d00b      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80077f8:	4b60      	ldr	r3, [pc, #384]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007808:	4a5c      	ldr	r2, [pc, #368]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800780a:	430b      	orrs	r3, r1
 800780c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800781c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007820:	2300      	movs	r3, #0
 8007822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007826:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800782a:	460b      	mov	r3, r1
 800782c:	4313      	orrs	r3, r2
 800782e:	d00b      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007830:	4b52      	ldr	r3, [pc, #328]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007836:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800783a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800783e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007840:	4a4e      	ldr	r2, [pc, #312]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007842:	430b      	orrs	r3, r1
 8007844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800785e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	d00b      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007868:	4b44      	ldr	r3, [pc, #272]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800786a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800786e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8007872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007878:	4a40      	ldr	r2, [pc, #256]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800787a:	430b      	orrs	r3, r1
 800787c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800788c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007890:	2300      	movs	r3, #0
 8007892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007896:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800789a:	460b      	mov	r3, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	d00b      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80078a0:	4b36      	ldr	r3, [pc, #216]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078a6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80078aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078b0:	4a32      	ldr	r2, [pc, #200]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078b2:	430b      	orrs	r3, r1
 80078b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80078b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80078c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80078d2:	460b      	mov	r3, r1
 80078d4:	4313      	orrs	r3, r2
 80078d6:	d00c      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80078d8:	4b28      	ldr	r3, [pc, #160]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ea:	4a24      	ldr	r2, [pc, #144]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80078fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007900:	2300      	movs	r3, #0
 8007902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007908:	460b      	mov	r3, r1
 800790a:	4313      	orrs	r3, r2
 800790c:	d04f      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800790e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007916:	2b80      	cmp	r3, #128	@ 0x80
 8007918:	d02d      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800791a:	2b80      	cmp	r3, #128	@ 0x80
 800791c:	d827      	bhi.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800791e:	2b60      	cmp	r3, #96	@ 0x60
 8007920:	d02e      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007922:	2b60      	cmp	r3, #96	@ 0x60
 8007924:	d823      	bhi.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d006      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800792a:	2b40      	cmp	r3, #64	@ 0x40
 800792c:	d81f      	bhi.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d011      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007936:	e01a      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007938:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	4a0f      	ldr	r2, [pc, #60]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800793e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007942:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007944:	e01d      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800794a:	3308      	adds	r3, #8
 800794c:	4618      	mov	r0, r3
 800794e:	f002 fa17 	bl	8009d80 <RCCEx_PLL2_Config>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007958:	e013      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800795a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800795e:	332c      	adds	r3, #44	@ 0x2c
 8007960:	4618      	mov	r0, r3
 8007962:	f002 faa5 	bl	8009eb0 <RCCEx_PLL3_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800796c:	e009      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007974:	e005      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007976:	bf00      	nop
 8007978:	e003      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800797a:	bf00      	nop
 800797c:	46020c00 	.word	0x46020c00
        break;
 8007980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007982:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10d      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800798a:	4bb6      	ldr	r3, [pc, #728]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800798c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007990:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800799c:	4ab1      	ldr	r2, [pc, #708]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800799e:	430b      	orrs	r3, r1
 80079a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079a4:	e003      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80079ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80079ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80079bc:	2300      	movs	r3, #0
 80079be:	677b      	str	r3, [r7, #116]	@ 0x74
 80079c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80079c4:	460b      	mov	r3, r1
 80079c6:	4313      	orrs	r3, r2
 80079c8:	d053      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80079ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d6:	d033      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80079d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079dc:	d82c      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80079de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079e2:	d02f      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80079e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079e8:	d826      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80079ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ee:	d008      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80079f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079f4:	d820      	bhi.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079fe:	d011      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007a00:	e01a      	b.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a02:	4b98      	ldr	r3, [pc, #608]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a06:	4a97      	ldr	r2, [pc, #604]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a0c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a0e:	e01a      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a14:	3308      	adds	r3, #8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f002 f9b2 	bl	8009d80 <RCCEx_PLL2_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a22:	e010      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a28:	332c      	adds	r3, #44	@ 0x2c
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f002 fa40 	bl	8009eb0 <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a36:	e006      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a3e:	e002      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007a40:	bf00      	nop
 8007a42:	e000      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007a4e:	4b85      	ldr	r3, [pc, #532]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a54:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007a58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a60:	4a80      	ldr	r2, [pc, #512]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a68:	e003      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a6e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007a7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a80:	2300      	movs	r3, #0
 8007a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a84:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	d046      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007a96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a9a:	d028      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007a9c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007aa0:	d821      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aa6:	d022      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aac:	d81b      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007aae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ab2:	d01c      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ab4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ab8:	d815      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007abe:	d008      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ac4:	d80f      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d011      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ace:	d00e      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ad0:	e009      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f002 f951 	bl	8009d80 <RCCEx_PLL2_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ae4:	e004      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007aec:	e000      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007af0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10d      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007af8:	4b5a      	ldr	r3, [pc, #360]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007afe:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b0a:	4a56      	ldr	r2, [pc, #344]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b12:	e003      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b24:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b2e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b32:	460b      	mov	r3, r1
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d03f      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007b38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d81e      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007b44:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4a:	bf00      	nop
 8007b4c:	08007b8b 	.word	0x08007b8b
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007b6f 	.word	0x08007b6f
 8007b58:	08007b8b 	.word	0x08007b8b
 8007b5c:	08007b8b 	.word	0x08007b8b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b60:	4b40      	ldr	r3, [pc, #256]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b64:	4a3f      	ldr	r2, [pc, #252]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b6a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007b6c:	e00e      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b72:	332c      	adds	r3, #44	@ 0x2c
 8007b74:	4618      	mov	r0, r3
 8007b76:	f002 f99b 	bl	8009eb0 <RCCEx_PLL3_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b80:	e004      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007b8a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007b8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10d      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007b94:	4b33      	ldr	r3, [pc, #204]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b9a:	f023 0107 	bic.w	r1, r3, #7
 8007b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bae:	e003      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bb4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d04d      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007be0:	d028      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007be2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007be6:	d821      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007be8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bec:	d024      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007bee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007bf2:	d81b      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bf8:	d00e      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bfe:	d815      	bhi.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d01b      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c08:	d110      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c0a:	4b16      	ldr	r3, [pc, #88]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c14:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007c16:	e012      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c1c:	332c      	adds	r3, #44	@ 0x2c
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f002 f946 	bl	8009eb0 <RCCEx_PLL3_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c2a:	e008      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c32:	e004      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c34:	bf00      	nop
 8007c36:	e002      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d110      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007c46:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c58:	4a02      	ldr	r2, [pc, #8]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c5a:	430b      	orrs	r3, r1
 8007c5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c60:	e006      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007c62:	bf00      	nop
 8007c64:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c6c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c78:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c7e:	2300      	movs	r3, #0
 8007c80:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c86:	460b      	mov	r3, r1
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f000 80b5 	beq.w	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c94:	4b9d      	ldr	r3, [pc, #628]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d113      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ca2:	4b9a      	ldr	r3, [pc, #616]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ca8:	4a98      	ldr	r2, [pc, #608]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007caa:	f043 0304 	orr.w	r3, r3, #4
 8007cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007cb2:	4b96      	ldr	r3, [pc, #600]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007cca:	4b91      	ldr	r3, [pc, #580]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	4a90      	ldr	r2, [pc, #576]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cd6:	f7fb f8d5 	bl	8002e84 <HAL_GetTick>
 8007cda:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007cde:	e00b      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce0:	f7fb f8d0 	bl	8002e84 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d903      	bls.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007cf6:	e005      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007cf8:	4b85      	ldr	r3, [pc, #532]	@ (8007f10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0ed      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8007d04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d165      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d023      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01b      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d32:	4b76      	ldr	r3, [pc, #472]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d40:	4b72      	ldr	r3, [pc, #456]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d46:	4a71      	ldr	r2, [pc, #452]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d50:	4b6e      	ldr	r3, [pc, #440]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d56:	4a6d      	ldr	r2, [pc, #436]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d60:	4a6a      	ldr	r2, [pc, #424]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d019      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d76:	f7fb f885 	bl	8002e84 <HAL_GetTick>
 8007d7a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d7e:	e00d      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d80:	f7fb f880 	bl	8002e84 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d8a:	1ad2      	subs	r2, r2, r3
 8007d8c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d903      	bls.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007d9a:	e006      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0ea      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007daa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10d      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007db2:	4b56      	ldr	r3, [pc, #344]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007db4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007db8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007dc4:	4a51      	ldr	r2, [pc, #324]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007dcc:	e008      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007dd2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007dd6:	e003      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ddc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007de0:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d107      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007de8:	4b48      	ldr	r3, [pc, #288]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007dee:	4a47      	ldr	r2, [pc, #284]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007df0:	f023 0304 	bic.w	r3, r3, #4
 8007df4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e06:	2300      	movs	r3, #0
 8007e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e0a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4313      	orrs	r3, r2
 8007e12:	d042      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e1c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007e20:	d022      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007e22:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007e26:	d81b      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e2c:	d011      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e32:	d815      	bhi.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d019      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007e38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e3c:	d110      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e42:	3308      	adds	r3, #8
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 ff9b 	bl	8009d80 <RCCEx_PLL2_Config>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e50:	e00d      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e52:	4b2e      	ldr	r3, [pc, #184]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	4a2d      	ldr	r2, [pc, #180]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e5c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007e5e:	e006      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e66:	e002      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007e68:	bf00      	nop
 8007e6a:	e000      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007e6c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007e6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10d      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007e76:	4b25      	ldr	r3, [pc, #148]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e7c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e88:	4a20      	ldr	r2, [pc, #128]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e90:	e003      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e96:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ea6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	d032      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec2:	d00b      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec8:	d804      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed2:	d007      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007ee4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007ee6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d112      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007eee:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ef0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ef4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ef8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f00:	4a02      	ldr	r2, [pc, #8]	@ (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f02:	430b      	orrs	r3, r1
 8007f04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f08:	e008      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007f0a:	bf00      	nop
 8007f0c:	46020c00 	.word	0x46020c00
 8007f10:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f32:	460b      	mov	r3, r1
 8007f34:	4313      	orrs	r3, r2
 8007f36:	d00c      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007f38:	4b98      	ldr	r3, [pc, #608]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f3e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f4a:	4a94      	ldr	r2, [pc, #592]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f60:	2300      	movs	r3, #0
 8007f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	d019      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f7a:	d105      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f7c:	4b87      	ldr	r3, [pc, #540]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	4a86      	ldr	r2, [pc, #536]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f86:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007f88:	4b84      	ldr	r3, [pc, #528]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f8e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f9a:	4a80      	ldr	r2, [pc, #512]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007fbe:	4b77      	ldr	r3, [pc, #476]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fd0:	4972      	ldr	r1, [pc, #456]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007fe4:	623b      	str	r3, [r7, #32]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d00c      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007ff4:	4b69      	ldr	r3, [pc, #420]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ffa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008002:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008006:	4965      	ldr	r1, [pc, #404]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800800e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	2300      	movs	r3, #0
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008024:	460b      	mov	r3, r1
 8008026:	4313      	orrs	r3, r2
 8008028:	d00c      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800802a:	4b5c      	ldr	r3, [pc, #368]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800802c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008030:	f023 0218 	bic.w	r2, r3, #24
 8008034:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008038:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800803c:	4957      	ldr	r1, [pc, #348]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d032      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008060:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008068:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800806c:	d105      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800806e:	4b4b      	ldr	r3, [pc, #300]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	4a4a      	ldr	r2, [pc, #296]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008078:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800807a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800807e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008082:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008086:	d108      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800808c:	3308      	adds	r3, #8
 800808e:	4618      	mov	r0, r3
 8008090:	f001 fe76 	bl	8009d80 <RCCEx_PLL2_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 800809a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10d      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80080a2:	4b3e      	ldr	r3, [pc, #248]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080b4:	4939      	ldr	r1, [pc, #228]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80080bc:	e003      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080c2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80080c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80080d2:	60bb      	str	r3, [r7, #8]
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080dc:	460b      	mov	r3, r1
 80080de:	4313      	orrs	r3, r2
 80080e0:	d03a      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80080e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ee:	d00e      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80080f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f4:	d815      	bhi.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d017      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80080fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080fe:	d110      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008100:	4b26      	ldr	r3, [pc, #152]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008104:	4a25      	ldr	r2, [pc, #148]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800810a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800810c:	e00e      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800810e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008112:	3308      	adds	r3, #8
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fe33 	bl	8009d80 <RCCEx_PLL2_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008120:	e004      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008128:	e000      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800812a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800812c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008134:	4b19      	ldr	r3, [pc, #100]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800813a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800813e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008146:	4915      	ldr	r1, [pc, #84]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008148:	4313      	orrs	r3, r2
 800814a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008154:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008164:	603b      	str	r3, [r7, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800816e:	460b      	mov	r3, r1
 8008170:	4313      	orrs	r3, r2
 8008172:	d00c      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800817a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800817e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008186:	4905      	ldr	r1, [pc, #20]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800818e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8008192:	4618      	mov	r0, r3
 8008194:	37e8      	adds	r7, #232	@ 0xe8
 8008196:	46bd      	mov	sp, r7
 8008198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800819c:	46020c00 	.word	0x46020c00

080081a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b089      	sub	sp, #36	@ 0x24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80081a8:	4ba6      	ldr	r3, [pc, #664]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80081b2:	4ba4      	ldr	r3, [pc, #656]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80081bc:	4ba1      	ldr	r3, [pc, #644]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	0a1b      	lsrs	r3, r3, #8
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	3301      	adds	r3, #1
 80081c8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80081ca:	4b9e      	ldr	r3, [pc, #632]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80081d6:	4b9b      	ldr	r3, [pc, #620]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081da:	08db      	lsrs	r3, r3, #3
 80081dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d062      	beq.n	80082be <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	f200 8081 	bhi.w	8008302 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d024      	beq.n	8008250 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b02      	cmp	r3, #2
 800820a:	d17a      	bne.n	8008302 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008448 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b89      	ldr	r3, [pc, #548]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800822e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008232:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800844c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800823e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800824e:	e08f      	b.n	8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008250:	4b7c      	ldr	r3, [pc, #496]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800825c:	4b79      	ldr	r3, [pc, #484]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	0f1b      	lsrs	r3, r3, #28
 8008262:	f003 030f 	and.w	r3, r3, #15
 8008266:	e006      	b.n	8008276 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8008268:	4b76      	ldr	r3, [pc, #472]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800826a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800826e:	041b      	lsls	r3, r3, #16
 8008270:	0f1b      	lsrs	r3, r3, #28
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	4a76      	ldr	r2, [pc, #472]	@ (8008450 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829c:	ed97 6a02 	vldr	s12, [r7, #8]
 80082a0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800844c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80082b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082bc:	e058      	b.n	8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	ee07 3a90 	vmov	s15, r3
 80082c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008448 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80082cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d0:	4b5c      	ldr	r3, [pc, #368]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d8:	ee07 3a90 	vmov	s15, r3
 80082dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80082e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80082e4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800844c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80082f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008300:	e036      	b.n	8008370 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008302:	4b50      	ldr	r3, [pc, #320]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800830e:	4b4d      	ldr	r3, [pc, #308]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	0f1b      	lsrs	r3, r3, #28
 8008314:	f003 030f 	and.w	r3, r3, #15
 8008318:	e006      	b.n	8008328 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800831a:	4b4a      	ldr	r3, [pc, #296]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800831c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	0f1b      	lsrs	r3, r3, #28
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	4a49      	ldr	r2, [pc, #292]	@ (8008450 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	ee07 3a90 	vmov	s15, r3
 800833c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008352:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800844c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800836e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008370:	4b34      	ldr	r3, [pc, #208]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d017      	beq.n	80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800837c:	4b31      	ldr	r3, [pc, #196]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800837e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008380:	0a5b      	lsrs	r3, r3, #9
 8008382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800838e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008392:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008396:	edd7 6a07 	vldr	s13, [r7, #28]
 800839a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800839e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a2:	ee17 2a90 	vmov	r2, s15
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	e002      	b.n	80083b2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80083b2:	4b24      	ldr	r3, [pc, #144]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d017      	beq.n	80083ee <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083be:	4b21      	ldr	r3, [pc, #132]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c2:	0c1b      	lsrs	r3, r3, #16
 80083c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80083d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e4:	ee17 2a90 	vmov	r2, s15
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	e002      	b.n	80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80083f4:	4b13      	ldr	r3, [pc, #76]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d017      	beq.n	8008430 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008400:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008404:	0e1b      	lsrs	r3, r3, #24
 8008406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008416:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800841a:	edd7 6a07 	vldr	s13, [r7, #28]
 800841e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008426:	ee17 2a90 	vmov	r2, s15
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800842e:	e002      	b.n	8008436 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	609a      	str	r2, [r3, #8]
}
 8008436:	bf00      	nop
 8008438:	3724      	adds	r7, #36	@ 0x24
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	46020c00 	.word	0x46020c00
 8008448:	4b742400 	.word	0x4b742400
 800844c:	46000000 	.word	0x46000000
 8008450:	0800cea0 	.word	0x0800cea0

08008454 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008454:	b480      	push	{r7}
 8008456:	b089      	sub	sp, #36	@ 0x24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800845c:	4ba6      	ldr	r3, [pc, #664]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800845e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008464:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008466:	4ba4      	ldr	r3, [pc, #656]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008470:	4ba1      	ldr	r3, [pc, #644]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	0a1b      	lsrs	r3, r3, #8
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	3301      	adds	r3, #1
 800847c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800847e:	4b9e      	ldr	r3, [pc, #632]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800848a:	4b9b      	ldr	r3, [pc, #620]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800848c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800848e:	08db      	lsrs	r3, r3, #3
 8008490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	fb02 f303 	mul.w	r3, r2, r3
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d062      	beq.n	8008572 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	f200 8081 	bhi.w	80085b6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d024      	beq.n	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d17a      	bne.n	80085b6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80084ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d2:	4b89      	ldr	r3, [pc, #548]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80084e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80084ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80084ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80084f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80084fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008502:	e08f      	b.n	8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008504:	4b7c      	ldr	r3, [pc, #496]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008510:	4b79      	ldr	r3, [pc, #484]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	0f1b      	lsrs	r3, r3, #28
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	e006      	b.n	800852a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800851c:	4b76      	ldr	r3, [pc, #472]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800851e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	0f1b      	lsrs	r3, r3, #28
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	4a76      	ldr	r2, [pc, #472]	@ (8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800852c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	ee07 3a90 	vmov	s15, r3
 800854c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008550:	ed97 6a02 	vldr	s12, [r7, #8]
 8008554:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008560:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008564:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008570:	e058      	b.n	8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	ee07 3a90 	vmov	s15, r3
 8008578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8008580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008584:	4b5c      	ldr	r3, [pc, #368]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8008594:	ed97 6a02 	vldr	s12, [r7, #8]
 8008598:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800859c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085b4:	e036      	b.n	8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80085b6:	4b50      	ldr	r3, [pc, #320]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d005      	beq.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80085c2:	4b4d      	ldr	r3, [pc, #308]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	0f1b      	lsrs	r3, r3, #28
 80085c8:	f003 030f 	and.w	r3, r3, #15
 80085cc:	e006      	b.n	80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80085ce:	4b4a      	ldr	r3, [pc, #296]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	0f1b      	lsrs	r3, r3, #28
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	4a49      	ldr	r2, [pc, #292]	@ (8008704 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80085de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a02 	vldr	s12, [r7, #8]
 8008606:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008622:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008624:	4b34      	ldr	r3, [pc, #208]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d017      	beq.n	8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008630:	4b31      	ldr	r3, [pc, #196]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008634:	0a5b      	lsrs	r3, r3, #9
 8008636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800863a:	ee07 3a90 	vmov	s15, r3
 800863e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008642:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008646:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800864a:	edd7 6a07 	vldr	s13, [r7, #28]
 800864e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008656:	ee17 2a90 	vmov	r2, s15
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	e002      	b.n	8008666 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008666:	4b24      	ldr	r3, [pc, #144]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d017      	beq.n	80086a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008672:	4b21      	ldr	r3, [pc, #132]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008676:	0c1b      	lsrs	r3, r3, #16
 8008678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800867c:	ee07 3a90 	vmov	s15, r3
 8008680:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008684:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008688:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800868c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008698:	ee17 2a90 	vmov	r2, s15
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	605a      	str	r2, [r3, #4]
 80086a0:	e002      	b.n	80086a8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80086a8:	4b13      	ldr	r3, [pc, #76]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d017      	beq.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086b4:	4b10      	ldr	r3, [pc, #64]	@ (80086f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	0e1b      	lsrs	r3, r3, #24
 80086ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80086c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086da:	ee17 2a90 	vmov	r2, s15
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80086e2:	e002      	b.n	80086ea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
}
 80086ea:	bf00      	nop
 80086ec:	3724      	adds	r7, #36	@ 0x24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	46020c00 	.word	0x46020c00
 80086fc:	4b742400 	.word	0x4b742400
 8008700:	46000000 	.word	0x46000000
 8008704:	0800cea0 	.word	0x0800cea0

08008708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008708:	b480      	push	{r7}
 800870a:	b089      	sub	sp, #36	@ 0x24
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008710:	4ba6      	ldr	r3, [pc, #664]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008718:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800871a:	4ba4      	ldr	r3, [pc, #656]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008724:	4ba1      	ldr	r3, [pc, #644]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008728:	0a1b      	lsrs	r3, r3, #8
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	3301      	adds	r3, #1
 8008730:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008732:	4b9e      	ldr	r3, [pc, #632]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008736:	091b      	lsrs	r3, r3, #4
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800873e:	4b9b      	ldr	r3, [pc, #620]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d062      	beq.n	8008826 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b03      	cmp	r3, #3
 8008764:	f200 8081 	bhi.w	800886a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d024      	beq.n	80087b8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d17a      	bne.n	800886a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008786:	4b89      	ldr	r3, [pc, #548]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008796:	ed97 6a02 	vldr	s12, [r7, #8]
 800879a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800879e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80087b6:	e08f      	b.n	80088d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80087b8:	4b7c      	ldr	r3, [pc, #496]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80087c4:	4b79      	ldr	r3, [pc, #484]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	0f1b      	lsrs	r3, r3, #28
 80087ca:	f003 030f 	and.w	r3, r3, #15
 80087ce:	e006      	b.n	80087de <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80087d0:	4b76      	ldr	r3, [pc, #472]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087d6:	041b      	lsls	r3, r3, #16
 80087d8:	0f1b      	lsrs	r3, r3, #28
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	4a76      	ldr	r2, [pc, #472]	@ (80089b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80087e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	ee07 3a90 	vmov	s15, r3
 80087f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008804:	ed97 6a02 	vldr	s12, [r7, #8]
 8008808:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800880c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008814:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008818:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800881c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008820:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008824:	e058      	b.n	80088d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008830:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008838:	4b5c      	ldr	r3, [pc, #368]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800883a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800883c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008840:	ee07 3a90 	vmov	s15, r3
 8008844:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008848:	ed97 6a02 	vldr	s12, [r7, #8]
 800884c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008850:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008854:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800885c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008868:	e036      	b.n	80088d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800886a:	4b50      	ldr	r3, [pc, #320]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8008876:	4b4d      	ldr	r3, [pc, #308]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	0f1b      	lsrs	r3, r3, #28
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	e006      	b.n	8008890 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8008882:	4b4a      	ldr	r3, [pc, #296]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008888:	041b      	lsls	r3, r3, #16
 800888a:	0f1b      	lsrs	r3, r3, #28
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	4a49      	ldr	r2, [pc, #292]	@ (80089b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8008892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	ee07 3a90 	vmov	s15, r3
 80088a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	ee07 3a90 	vmov	s15, r3
 80088b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80088be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80088ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088d6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80088d8:	4b34      	ldr	r3, [pc, #208]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d017      	beq.n	8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088e4:	4b31      	ldr	r3, [pc, #196]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088e8:	0a5b      	lsrs	r3, r3, #9
 80088ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80088f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80088fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800890a:	ee17 2a90 	vmov	r2, s15
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e002      	b.n	800891a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800891a:	4b24      	ldr	r3, [pc, #144]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800891e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d017      	beq.n	8008956 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008926:	4b21      	ldr	r3, [pc, #132]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800893c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008940:	edd7 6a07 	vldr	s13, [r7, #28]
 8008944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894c:	ee17 2a90 	vmov	r2, s15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	605a      	str	r2, [r3, #4]
 8008954:	e002      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800895c:	4b13      	ldr	r3, [pc, #76]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800895e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d017      	beq.n	8008998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008968:	4b10      	ldr	r3, [pc, #64]	@ (80089ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800896a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896c:	0e1b      	lsrs	r3, r3, #24
 800896e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800897a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800897e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008982:	edd7 6a07 	vldr	s13, [r7, #28]
 8008986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800898e:	ee17 2a90 	vmov	r2, s15
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008996:	e002      	b.n	800899e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	609a      	str	r2, [r3, #8]
}
 800899e:	bf00      	nop
 80089a0:	3724      	adds	r7, #36	@ 0x24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	46020c00 	.word	0x46020c00
 80089b0:	4b742400 	.word	0x4b742400
 80089b4:	46000000 	.word	0x46000000
 80089b8:	0800cea0 	.word	0x0800cea0

080089bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08e      	sub	sp, #56	@ 0x38
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80089c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ca:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80089ce:	430b      	orrs	r3, r1
 80089d0:	d145      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80089d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80089d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089dc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80089de:	4ba4      	ldr	r3, [pc, #656]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80089e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089e4:	f003 0302 	and.w	r3, r3, #2
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d108      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f2:	d104      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80089f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fa:	f001 b9b3 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80089fe:	4b9c      	ldr	r3, [pc, #624]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a0c:	d114      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a14:	d110      	bne.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a16:	4b96      	ldr	r3, [pc, #600]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a24:	d103      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008a26:	23fa      	movs	r3, #250	@ 0xfa
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a2a:	f001 b99b 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a2e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a34:	f001 b996 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008a38:	4b8d      	ldr	r3, [pc, #564]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a44:	d107      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a4c:	d103      	bne.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008a4e:	4b89      	ldr	r3, [pc, #548]	@ (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a52:	f001 b987 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a5a:	f001 b983 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a62:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008a66:	430b      	orrs	r3, r1
 8008a68:	d151      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008a6a:	4b81      	ldr	r3, [pc, #516]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a70:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008a74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	2b80      	cmp	r3, #128	@ 0x80
 8008a7a:	d035      	beq.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	2b80      	cmp	r3, #128	@ 0x80
 8008a80:	d841      	bhi.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	2b60      	cmp	r3, #96	@ 0x60
 8008a86:	d02a      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	2b60      	cmp	r3, #96	@ 0x60
 8008a8c:	d83b      	bhi.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	2b40      	cmp	r3, #64	@ 0x40
 8008a92:	d009      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	2b40      	cmp	r3, #64	@ 0x40
 8008a98:	d835      	bhi.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	d012      	beq.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008aa6:	e02e      	b.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fb77 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ab6:	f001 b955 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fcc8 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ac8:	f001 b94c 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fe19 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ada:	f001 b943 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008ade:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ae4:	f001 b93e 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ae8:	4b61      	ldr	r3, [pc, #388]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008af4:	d103      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008af6:	4b60      	ldr	r3, [pc, #384]	@ (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008afa:	f001 b933 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b02:	f001 b92f 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b0a:	f001 b92b 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b12:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b16:	430b      	orrs	r3, r1
 8008b18:	d158      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008b1a:	4b55      	ldr	r3, [pc, #340]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b2c:	d03b      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b34:	d846      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3c:	d02e      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b44:	d83e      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b4c:	d00b      	beq.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b54:	d836      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00d      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b62:	d012      	beq.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008b64:	e02e      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7ff fb18 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b74:	f001 b8f6 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b78:	f107 0318 	add.w	r3, r7, #24
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fc69 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b86:	f001 b8ed 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b8a:	f107 030c 	add.w	r3, r7, #12
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fdba 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b98:	f001 b8e4 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008b9c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008ba0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ba2:	f001 b8df 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008ba6:	4b32      	ldr	r3, [pc, #200]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb2:	d103      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008bb4:	4b30      	ldr	r3, [pc, #192]	@ (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bb8:	f001 b8d4 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bc0:	f001 b8d0 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bc8:	f001 b8cc 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bd0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	d126      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008bd8:	4b25      	ldr	r3, [pc, #148]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008bda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008be2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008be4:	4b22      	ldr	r3, [pc, #136]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf0:	d106      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d103      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfc:	f001 b8b2 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008c00:	4b1b      	ldr	r3, [pc, #108]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c0c:	d107      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c14:	d103      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008c16:	4b19      	ldr	r3, [pc, #100]	@ (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c1a:	f001 b8a3 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c22:	f001 b89f 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c2a:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	d16e      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008c32:	4b0f      	ldr	r3, [pc, #60]	@ (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c38:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008c3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c44:	d03d      	beq.n	8008cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c4c:	d85c      	bhi.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c54:	d014      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c5c:	d854      	bhi.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01f      	beq.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c6a:	d012      	beq.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008c6c:	e04c      	b.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c6e:	bf00      	nop
 8008c70:	46020c00 	.word	0x46020c00
 8008c74:	0007a120 	.word	0x0007a120
 8008c78:	00f42400 	.word	0x00f42400
 8008c7c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7ff fa8b 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c8e:	f001 b869 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c92:	f107 0318 	add.w	r3, r7, #24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7ff fbdc 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ca0:	f001 b860 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008ca4:	4ba7      	ldr	r3, [pc, #668]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb0:	d103      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008cb2:	4ba5      	ldr	r3, [pc, #660]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008cb6:	f001 b855 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cbe:	f001 b851 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b20      	cmp	r3, #32
 8008ccc:	d118      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cce:	4b9d      	ldr	r3, [pc, #628]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d005      	beq.n	8008ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008cda:	4b9a      	ldr	r3, [pc, #616]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	0e1b      	lsrs	r3, r3, #24
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	e006      	b.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008ce6:	4b97      	ldr	r3, [pc, #604]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	0e1b      	lsrs	r3, r3, #24
 8008cf0:	f003 030f 	and.w	r3, r3, #15
 8008cf4:	4a95      	ldr	r2, [pc, #596]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008cfc:	f001 b832 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d04:	f001 b82e 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d0c:	f001 b82a 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d14:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	d17f      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d1c:	4b89      	ldr	r3, [pc, #548]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d26:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d165      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008d2e:	4b85      	ldr	r3, [pc, #532]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d34:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008d38:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d40:	d034      	beq.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d48:	d853      	bhi.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d50:	d00b      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d58:	d84b      	bhi.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d016      	beq.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d66:	d009      	beq.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008d68:	e043      	b.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff fa16 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d76:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d78:	f000 bff4 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d7c:	f107 0318 	add.w	r3, r7, #24
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fb67 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008d8a:	f000 bfeb 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008d8e:	4b6d      	ldr	r3, [pc, #436]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d9a:	d103      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008da0:	f000 bfe0 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008da8:	f000 bfdc 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008dac:	4b65      	ldr	r3, [pc, #404]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	d118      	bne.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008db8:	4b62      	ldr	r3, [pc, #392]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d005      	beq.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	0e1b      	lsrs	r3, r3, #24
 8008dca:	f003 030f 	and.w	r3, r3, #15
 8008dce:	e006      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008dd6:	041b      	lsls	r3, r3, #16
 8008dd8:	0e1b      	lsrs	r3, r3, #24
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	4a5b      	ldr	r2, [pc, #364]	@ (8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008de6:	f000 bfbd 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008dee:	f000 bfb9 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008df6:	f000 bfb5 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e00:	d108      	bne.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff f9ca 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e10:	f000 bfa8 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e18:	f000 bfa4 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e20:	1e51      	subs	r1, r2, #1
 8008e22:	430b      	orrs	r3, r1
 8008e24:	d136      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008e26:	4b47      	ldr	r3, [pc, #284]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008e38:	f7fe fb44 	bl	80074c4 <HAL_RCC_GetPCLK2Freq>
 8008e3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e3e:	f000 bf91 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d104      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e48:	f7fe fa0c 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8008e4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e4e:	f000 bf89 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008e52:	4b3c      	ldr	r3, [pc, #240]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e5e:	d106      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d103      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008e66:	4b3a      	ldr	r3, [pc, #232]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6a:	f000 bf7b 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008e6e:	4b35      	ldr	r3, [pc, #212]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d104      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e88:	f000 bf6c 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e90:	f000 bf68 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e98:	1e91      	subs	r1, r2, #2
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	d136      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008e9e:	4b29      	ldr	r3, [pc, #164]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ea4:	f003 030c 	and.w	r3, r3, #12
 8008ea8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008eb0:	f7fe faf4 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 8008eb4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008eb6:	f000 bf55 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d104      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ec0:	f7fe f9d0 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8008ec4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ec6:	f000 bf4d 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008eca:	4b1e      	ldr	r3, [pc, #120]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d103      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008ede:	4b1c      	ldr	r3, [pc, #112]	@ (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee2:	f000 bf3f 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008ee6:	4b17      	ldr	r3, [pc, #92]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d107      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2b0c      	cmp	r3, #12
 8008ef8:	d104      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f00:	f000 bf30 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f08:	f000 bf2c 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f10:	1f11      	subs	r1, r2, #4
 8008f12:	430b      	orrs	r3, r1
 8008f14:	d13f      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008f16:	4b0b      	ldr	r3, [pc, #44]	@ (8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f20:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d104      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f28:	f7fe fab8 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 8008f2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f2e:	f000 bf19 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	2b10      	cmp	r3, #16
 8008f36:	d10d      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f38:	f7fe f994 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8008f3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f3e:	f000 bf11 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008f42:	bf00      	nop
 8008f44:	46020c00 	.word	0x46020c00
 8008f48:	02dc6c00 	.word	0x02dc6c00
 8008f4c:	0800cea0 	.word	0x0800cea0
 8008f50:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008f54:	4ba6      	ldr	r3, [pc, #664]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f60:	d106      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	d103      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008f68:	4ba2      	ldr	r3, [pc, #648]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6c:	f000 befa 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008f70:	4b9f      	ldr	r3, [pc, #636]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d107      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f80:	2b30      	cmp	r3, #48	@ 0x30
 8008f82:	d104      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008f84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8a:	f000 beeb 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f92:	f000 bee7 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f9a:	f1a2 0108 	sub.w	r1, r2, #8
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	d136      	bne.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008fa2:	4b93      	ldr	r3, [pc, #588]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fa8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d104      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008fb4:	f7fe fa72 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 8008fb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fba:	f000 bed3 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	2b40      	cmp	r3, #64	@ 0x40
 8008fc2:	d104      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008fc4:	f7fe f94e 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8008fc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8008fca:	f000 becb 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008fce:	4b88      	ldr	r3, [pc, #544]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fda:	d106      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	2b80      	cmp	r3, #128	@ 0x80
 8008fe0:	d103      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8008fe2:	4b84      	ldr	r3, [pc, #528]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe6:	f000 bebd 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008fea:	4b81      	ldr	r3, [pc, #516]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ff0:	f003 0302 	and.w	r3, r3, #2
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d107      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ffc:	d104      	bne.n	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009002:	637b      	str	r3, [r7, #52]	@ 0x34
 8009004:	f000 beae 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	637b      	str	r3, [r7, #52]	@ 0x34
 800900c:	f000 beaa 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009014:	f1a2 0110 	sub.w	r1, r2, #16
 8009018:	430b      	orrs	r3, r1
 800901a:	d139      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800901c:	4b74      	ldr	r3, [pc, #464]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800901e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009026:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902a:	2b00      	cmp	r3, #0
 800902c:	d104      	bne.n	8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800902e:	f7fe fa35 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 8009032:	6378      	str	r0, [r7, #52]	@ 0x34
 8009034:	f000 be96 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800903e:	d104      	bne.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009040:	f7fe f910 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009044:	6378      	str	r0, [r7, #52]	@ 0x34
 8009046:	f000 be8d 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800904a:	4b69      	ldr	r3, [pc, #420]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009056:	d107      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8009058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800905e:	d103      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8009060:	4b64      	ldr	r3, [pc, #400]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009062:	637b      	str	r3, [r7, #52]	@ 0x34
 8009064:	f000 be7e 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009068:	4b61      	ldr	r3, [pc, #388]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800906a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b02      	cmp	r3, #2
 8009074:	d108      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800907c:	d104      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800907e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009082:	637b      	str	r3, [r7, #52]	@ 0x34
 8009084:	f000 be6e 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
 800908c:	f000 be6a 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8009090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009094:	f1a2 0120 	sub.w	r1, r2, #32
 8009098:	430b      	orrs	r3, r1
 800909a:	d158      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800909c:	4b54      	ldr	r3, [pc, #336]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800909e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090a2:	f003 0307 	and.w	r3, r3, #7
 80090a6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80090a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80090ae:	f7fe fa1d 	bl	80074ec <HAL_RCC_GetPCLK3Freq>
 80090b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80090b4:	f000 be56 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d104      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090be:	f7fe f8d1 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 80090c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80090c4:	f000 be4e 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80090c8:	4b49      	ldr	r3, [pc, #292]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090d4:	d106      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d103      	bne.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80090dc:	4b45      	ldr	r3, [pc, #276]	@ (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e0:	f000 be40 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80090e4:	4b42      	ldr	r3, [pc, #264]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80090e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ea:	f003 0302 	and.w	r3, r3, #2
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d107      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d104      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 80090f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fe:	f000 be31 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8009102:	4b3b      	ldr	r3, [pc, #236]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b20      	cmp	r3, #32
 800910c:	d11b      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800910e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009110:	2b04      	cmp	r3, #4
 8009112:	d118      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009114:	4b36      	ldr	r3, [pc, #216]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009120:	4b33      	ldr	r3, [pc, #204]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	0e1b      	lsrs	r3, r3, #24
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	e006      	b.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800912c:	4b30      	ldr	r3, [pc, #192]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800912e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	0e1b      	lsrs	r3, r3, #24
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	4a2f      	ldr	r2, [pc, #188]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800913c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009140:	637b      	str	r3, [r7, #52]	@ 0x34
 8009142:	f000 be0f 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	637b      	str	r3, [r7, #52]	@ 0x34
 800914a:	f000 be0b 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800914e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009152:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009156:	430b      	orrs	r3, r1
 8009158:	d172      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800915a:	4b25      	ldr	r3, [pc, #148]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800915c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009160:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009164:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800916c:	d104      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800916e:	f7fe f879 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009172:	6378      	str	r0, [r7, #52]	@ 0x34
 8009174:	f000 bdf6 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800917e:	d108      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009180:	f107 0318 	add.w	r3, r7, #24
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff f965 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	637b      	str	r3, [r7, #52]	@ 0x34
 800918e:	f000 bde9 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8009198:	f7fe f966 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 800919c:	6378      	str	r0, [r7, #52]	@ 0x34
 800919e:	f000 bde1 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80091a8:	d128      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80091aa:	4b11      	ldr	r3, [pc, #68]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d118      	bne.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091b6:	4b0e      	ldr	r3, [pc, #56]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d005      	beq.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80091c2:	4b0b      	ldr	r3, [pc, #44]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	0e1b      	lsrs	r3, r3, #24
 80091c8:	f003 030f 	and.w	r3, r3, #15
 80091cc:	e006      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80091ce:	4b08      	ldr	r3, [pc, #32]	@ (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091d4:	041b      	lsls	r3, r3, #16
 80091d6:	0e1b      	lsrs	r3, r3, #24
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	4a06      	ldr	r2, [pc, #24]	@ (80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80091de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e4:	f000 bdbe 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ec:	f000 bdba 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80091f0:	46020c00 	.word	0x46020c00
 80091f4:	00f42400 	.word	0x00f42400
 80091f8:	0800cea0 	.word	0x0800cea0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80091fc:	4baf      	ldr	r3, [pc, #700]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009208:	d107      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800920a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009210:	d103      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8009212:	4bab      	ldr	r3, [pc, #684]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009214:	637b      	str	r3, [r7, #52]	@ 0x34
 8009216:	f000 bda5 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800921a:	4ba8      	ldr	r3, [pc, #672]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009226:	d107      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800922e:	d103      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8009230:	4ba3      	ldr	r3, [pc, #652]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009232:	637b      	str	r3, [r7, #52]	@ 0x34
 8009234:	f000 bd96 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	637b      	str	r3, [r7, #52]	@ 0x34
 800923c:	f000 bd92 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009244:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009248:	430b      	orrs	r3, r1
 800924a:	d158      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800924c:	4b9b      	ldr	r3, [pc, #620]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800924e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925a:	2b04      	cmp	r3, #4
 800925c:	d84b      	bhi.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800925e:	a201      	add	r2, pc, #4	@ (adr r2, 8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	0800929d 	.word	0x0800929d
 8009268:	08009279 	.word	0x08009279
 800926c:	0800928b 	.word	0x0800928b
 8009270:	080092a7 	.word	0x080092a7
 8009274:	080092b1 	.word	0x080092b1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe ff8f 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009286:	f000 bd6d 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928a:	f107 030c 	add.w	r3, r7, #12
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff fa3a 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009298:	f000 bd64 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800929c:	f7fe f8e4 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 80092a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092a2:	f000 bd5f 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80092a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092ac:	f000 bd5a 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80092b0:	4b82      	ldr	r3, [pc, #520]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d118      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092bc:	4b7f      	ldr	r3, [pc, #508]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80092c8:	4b7c      	ldr	r3, [pc, #496]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	0e1b      	lsrs	r3, r3, #24
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	e006      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80092d4:	4b79      	ldr	r3, [pc, #484]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80092da:	041b      	lsls	r3, r3, #16
 80092dc:	0e1b      	lsrs	r3, r3, #24
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	4a78      	ldr	r2, [pc, #480]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80092e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092ea:	f000 bd3b 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092f2:	f000 bd37 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092fa:	f000 bd33 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80092fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009302:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009306:	430b      	orrs	r3, r1
 8009308:	d167      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800930a:	4b6c      	ldr	r3, [pc, #432]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800930c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009310:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009314:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009318:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800931c:	d036      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800931e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009324:	d855      	bhi.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800932c:	d029      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009334:	d84d      	bhi.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800933c:	d013      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009344:	d845      	bhi.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009348:	2b00      	cmp	r3, #0
 800934a:	d015      	beq.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009352:	d13e      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe ff21 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800935e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009362:	f000 bcff 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009366:	f107 030c 	add.w	r3, r7, #12
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f9cc 	bl	8008708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009374:	f000 bcf6 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8009378:	f7fe f876 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 800937c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800937e:	f000 bcf1 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009382:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009388:	f000 bcec 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800938c:	4b4b      	ldr	r3, [pc, #300]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0320 	and.w	r3, r3, #32
 8009394:	2b20      	cmp	r3, #32
 8009396:	d118      	bne.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009398:	4b48      	ldr	r3, [pc, #288]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80093a4:	4b45      	ldr	r3, [pc, #276]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	0e1b      	lsrs	r3, r3, #24
 80093aa:	f003 030f 	and.w	r3, r3, #15
 80093ae:	e006      	b.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80093b0:	4b42      	ldr	r3, [pc, #264]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	0e1b      	lsrs	r3, r3, #24
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	4a41      	ldr	r2, [pc, #260]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80093c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80093c6:	f000 bccd 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ce:	f000 bcc9 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093d6:	f000 bcc5 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80093da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093de:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80093e2:	430b      	orrs	r3, r1
 80093e4:	d14c      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80093e6:	4b35      	ldr	r3, [pc, #212]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80093f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80093f8:	f7fe f850 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 80093fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80093fe:	f000 bcb1 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009408:	d104      	bne.n	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800940a:	f7fd ff2b 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 800940e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009410:	f000 bca8 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009414:	4b29      	ldr	r3, [pc, #164]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800941c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009420:	d107      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009428:	d103      	bne.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800942a:	4b25      	ldr	r3, [pc, #148]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800942c:	637b      	str	r3, [r7, #52]	@ 0x34
 800942e:	f000 bc99 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009432:	4b22      	ldr	r3, [pc, #136]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b20      	cmp	r3, #32
 800943c:	d11c      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009444:	d118      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009446:	4b1d      	ldr	r3, [pc, #116]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8009452:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	0e1b      	lsrs	r3, r3, #24
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	e006      	b.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800945e:	4b17      	ldr	r3, [pc, #92]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009464:	041b      	lsls	r3, r3, #16
 8009466:	0e1b      	lsrs	r3, r3, #24
 8009468:	f003 030f 	and.w	r3, r3, #15
 800946c:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800946e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009472:	637b      	str	r3, [r7, #52]	@ 0x34
 8009474:	f000 bc76 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009478:	2300      	movs	r3, #0
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
 800947c:	f000 bc72 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009484:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8009488:	430b      	orrs	r3, r1
 800948a:	d153      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800948c:	4b0b      	ldr	r3, [pc, #44]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800948e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009492:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009496:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	2b00      	cmp	r3, #0
 800949c:	d104      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800949e:	f7fd fffd 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 80094a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80094a4:	f000 bc5e 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ae:	d10b      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094b0:	f7fd fed8 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 80094b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80094b6:	f000 bc55 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80094ba:	bf00      	nop
 80094bc:	46020c00 	.word	0x46020c00
 80094c0:	00f42400 	.word	0x00f42400
 80094c4:	0800cea0 	.word	0x0800cea0
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80094c8:	4ba1      	ldr	r3, [pc, #644]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d4:	d107      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094dc:	d103      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80094de:	4b9d      	ldr	r3, [pc, #628]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80094e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e2:	f000 bc3f 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80094e6:	4b9a      	ldr	r3, [pc, #616]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	2b20      	cmp	r3, #32
 80094f0:	d11c      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094f8:	d118      	bne.n	800952c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80094fa:	4b95      	ldr	r3, [pc, #596]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8009506:	4b92      	ldr	r3, [pc, #584]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	0e1b      	lsrs	r3, r3, #24
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	e006      	b.n	8009520 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009512:	4b8f      	ldr	r3, [pc, #572]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	0e1b      	lsrs	r3, r3, #24
 800951c:	f003 030f 	and.w	r3, r3, #15
 8009520:	4a8d      	ldr	r2, [pc, #564]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34
 8009528:	f000 bc1c 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009530:	f000 bc18 	b.w	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009538:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800953c:	430b      	orrs	r3, r1
 800953e:	d151      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009540:	4b83      	ldr	r3, [pc, #524]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009546:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800954a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800954c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009550:	d024      	beq.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	2bc0      	cmp	r3, #192	@ 0xc0
 8009556:	d842      	bhi.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	2b80      	cmp	r3, #128	@ 0x80
 800955c:	d00d      	beq.n	800957a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	2b80      	cmp	r3, #128	@ 0x80
 8009562:	d83c      	bhi.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	2b40      	cmp	r3, #64	@ 0x40
 800956e:	d011      	beq.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8009570:	e035      	b.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009572:	f7fd ffbb 	bl	80074ec <HAL_RCC_GetPCLK3Freq>
 8009576:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009578:	e3f4      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800957a:	4b75      	ldr	r3, [pc, #468]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009586:	d102      	bne.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8009588:	4b72      	ldr	r3, [pc, #456]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800958a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800958c:	e3ea      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009592:	e3e7      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009594:	f7fd fe66 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009598:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800959a:	e3e3      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800959c:	4b6c      	ldr	r3, [pc, #432]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d117      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095a8:	4b69      	ldr	r3, [pc, #420]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d005      	beq.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80095b4:	4b66      	ldr	r3, [pc, #408]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	0e1b      	lsrs	r3, r3, #24
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	e006      	b.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80095c0:	4b63      	ldr	r3, [pc, #396]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095c6:	041b      	lsls	r3, r3, #16
 80095c8:	0e1b      	lsrs	r3, r3, #24
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	4a62      	ldr	r2, [pc, #392]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80095d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095d6:	e3c5      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095dc:	e3c2      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80095de:	2300      	movs	r3, #0
 80095e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095e2:	e3bf      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80095e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80095ec:	430b      	orrs	r3, r1
 80095ee:	d147      	bne.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80095f0:	4b57      	ldr	r3, [pc, #348]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80095fa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80095fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009602:	f7fd ff4b 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 8009606:	6378      	str	r0, [r7, #52]	@ 0x34
 8009608:	e3ac      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009610:	d103      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009612:	f7fd fe27 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009616:	6378      	str	r0, [r7, #52]	@ 0x34
 8009618:	e3a4      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800961a:	4b4d      	ldr	r3, [pc, #308]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009626:	d106      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800962e:	d102      	bne.n	8009636 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009630:	4b48      	ldr	r3, [pc, #288]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009632:	637b      	str	r3, [r7, #52]	@ 0x34
 8009634:	e396      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009636:	4b46      	ldr	r3, [pc, #280]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b20      	cmp	r3, #32
 8009640:	d11b      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8009642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009644:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009648:	d117      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800964a:	4b41      	ldr	r3, [pc, #260]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8009656:	4b3e      	ldr	r3, [pc, #248]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	0e1b      	lsrs	r3, r3, #24
 800965c:	f003 030f 	and.w	r3, r3, #15
 8009660:	e006      	b.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8009662:	4b3b      	ldr	r3, [pc, #236]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009668:	041b      	lsls	r3, r3, #16
 800966a:	0e1b      	lsrs	r3, r3, #24
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	4a39      	ldr	r2, [pc, #228]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
 8009678:	e374      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800967a:	2300      	movs	r3, #0
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
 800967e:	e371      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009684:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009688:	430b      	orrs	r3, r1
 800968a:	d16a      	bne.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800968c:	4b30      	ldr	r3, [pc, #192]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800968e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	2b00      	cmp	r3, #0
 800969c:	d120      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800969e:	4b2c      	ldr	r3, [pc, #176]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d117      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096aa:	4b29      	ldr	r3, [pc, #164]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d005      	beq.n	80096c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80096b6:	4b26      	ldr	r3, [pc, #152]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	0e1b      	lsrs	r3, r3, #24
 80096bc:	f003 030f 	and.w	r3, r3, #15
 80096c0:	e006      	b.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80096c2:	4b23      	ldr	r3, [pc, #140]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096c8:	041b      	lsls	r3, r3, #16
 80096ca:	0e1b      	lsrs	r3, r3, #24
 80096cc:	f003 030f 	and.w	r3, r3, #15
 80096d0:	4a21      	ldr	r2, [pc, #132]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80096d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d8:	e344      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096de:	e341      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80096e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ee:	d112      	bne.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80096f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f6:	d10e      	bne.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80096f8:	4b15      	ldr	r3, [pc, #84]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009706:	d102      	bne.n	800970e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8009708:	23fa      	movs	r3, #250	@ 0xfa
 800970a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800970c:	e32a      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800970e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009714:	e326      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009716:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800971e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009722:	d106      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800972a:	d102      	bne.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800972c:	4b09      	ldr	r3, [pc, #36]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800972e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009730:	e318      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009732:	4b07      	ldr	r3, [pc, #28]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b02      	cmp	r3, #2
 800973e:	d10d      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009746:	d109      	bne.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009748:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
 800974e:	e309      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009750:	46020c00 	.word	0x46020c00
 8009754:	00f42400 	.word	0x00f42400
 8009758:	0800cea0 	.word	0x0800cea0
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009760:	e300      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009766:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800976a:	430b      	orrs	r3, r1
 800976c:	d164      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800976e:	4ba2      	ldr	r3, [pc, #648]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009774:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009778:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d120      	bne.n	80097c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009780:	4b9d      	ldr	r3, [pc, #628]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0320 	and.w	r3, r3, #32
 8009788:	2b20      	cmp	r3, #32
 800978a:	d117      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800978c:	4b9a      	ldr	r3, [pc, #616]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8009798:	4b97      	ldr	r3, [pc, #604]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	0e1b      	lsrs	r3, r3, #24
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	e006      	b.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80097a4:	4b94      	ldr	r3, [pc, #592]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097aa:	041b      	lsls	r3, r3, #16
 80097ac:	0e1b      	lsrs	r3, r3, #24
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	4a92      	ldr	r2, [pc, #584]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80097b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ba:	e2d3      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c0:	e2d0      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80097c2:	4b8d      	ldr	r3, [pc, #564]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097d0:	d112      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097d8:	d10e      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097da:	4b87      	ldr	r3, [pc, #540]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e8:	d102      	bne.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80097ea:	23fa      	movs	r3, #250	@ 0xfa
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097ee:	e2b9      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80097f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80097f6:	e2b5      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80097f8:	4b7f      	ldr	r3, [pc, #508]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009804:	d106      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800980c:	d102      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800980e:	4b7c      	ldr	r3, [pc, #496]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
 8009812:	e2a7      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009814:	4b78      	ldr	r3, [pc, #480]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009816:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b02      	cmp	r3, #2
 8009820:	d107      	bne.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009828:	d103      	bne.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800982a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800982e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009830:	e298      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
 8009836:	e295      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800983c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009840:	430b      	orrs	r3, r1
 8009842:	d147      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009844:	4b6c      	ldr	r3, [pc, #432]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800984a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800984e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009856:	f7fd fe21 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 800985a:	6378      	str	r0, [r7, #52]	@ 0x34
 800985c:	e282      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800985e:	4b66      	ldr	r3, [pc, #408]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009864:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800986c:	d112      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009874:	d10e      	bne.n	8009894 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009876:	4b60      	ldr	r3, [pc, #384]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800987c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009884:	d102      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8009886:	23fa      	movs	r3, #250	@ 0xfa
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800988a:	e26b      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800988c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009890:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009892:	e267      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009894:	4b58      	ldr	r3, [pc, #352]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800989c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a0:	d106      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80098a8:	d102      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80098aa:	4b55      	ldr	r3, [pc, #340]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ae:	e259      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80098b0:	4b51      	ldr	r3, [pc, #324]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80098b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d107      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80098c4:	d103      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80098c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80098cc:	e24a      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d2:	e247      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80098d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80098dc:	430b      	orrs	r3, r1
 80098de:	d12d      	bne.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80098e0:	4b45      	ldr	r3, [pc, #276]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80098e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80098ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80098ec:	4b42      	ldr	r3, [pc, #264]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098f8:	d105      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8009900:	4b3f      	ldr	r3, [pc, #252]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
 8009904:	e22e      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800990c:	d107      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800990e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe fc44 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	637b      	str	r3, [r7, #52]	@ 0x34
 800991c:	e222      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009924:	d107      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009926:	f107 0318 	add.w	r3, r7, #24
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe fd92 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	637b      	str	r3, [r7, #52]	@ 0x34
 8009934:	e216      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
 800993a:	e213      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800993c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009940:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009944:	430b      	orrs	r3, r1
 8009946:	d15d      	bne.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009948:	4b2b      	ldr	r3, [pc, #172]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800994a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800994e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009952:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800995a:	d028      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800995c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009962:	d845      	bhi.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800996a:	d013      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009972:	d83d      	bhi.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009976:	2b00      	cmp	r3, #0
 8009978:	d004      	beq.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009980:	d004      	beq.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009982:	e035      	b.n	80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009984:	f7fd fd9e 	bl	80074c4 <HAL_RCC_GetPCLK2Freq>
 8009988:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800998a:	e1eb      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800998c:	f7fd fc6a 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009990:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009992:	e1e7      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009994:	4b18      	ldr	r3, [pc, #96]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800999c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a0:	d102      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80099a2:	4b17      	ldr	r3, [pc, #92]	@ (8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099a6:	e1dd      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099ac:	e1da      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099ae:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	d117      	bne.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099ba:	4b0f      	ldr	r3, [pc, #60]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80099c6:	4b0c      	ldr	r3, [pc, #48]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	0e1b      	lsrs	r3, r3, #24
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	e006      	b.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80099d2:	4b09      	ldr	r3, [pc, #36]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80099d8:	041b      	lsls	r3, r3, #16
 80099da:	0e1b      	lsrs	r3, r3, #24
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	4a06      	ldr	r2, [pc, #24]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80099e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099e8:	e1bc      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099ee:	e1b9      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80099f0:	2300      	movs	r3, #0
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099f4:	e1b6      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80099f6:	bf00      	nop
 80099f8:	46020c00 	.word	0x46020c00
 80099fc:	0800cea0 	.word	0x0800cea0
 8009a00:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a08:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009a0c:	430b      	orrs	r3, r1
 8009a0e:	d156      	bne.n	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009a10:	4ba5      	ldr	r3, [pc, #660]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a22:	d028      	beq.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a2a:	d845      	bhi.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a32:	d013      	beq.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a3a:	d83d      	bhi.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d004      	beq.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a48:	d004      	beq.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8009a4a:	e035      	b.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009a4c:	f7fd fd26 	bl	800749c <HAL_RCC_GetPCLK1Freq>
 8009a50:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a52:	e187      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a54:	f7fd fc06 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009a58:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a5a:	e183      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a5c:	4b92      	ldr	r3, [pc, #584]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a68:	d102      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8009a6a:	4b90      	ldr	r3, [pc, #576]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a6e:	e179      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a74:	e176      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009a76:	4b8c      	ldr	r3, [pc, #560]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d117      	bne.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a82:	4b89      	ldr	r3, [pc, #548]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8009a8e:	4b86      	ldr	r3, [pc, #536]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	0e1b      	lsrs	r3, r3, #24
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	e006      	b.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8009a9a:	4b83      	ldr	r3, [pc, #524]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	0e1b      	lsrs	r3, r3, #24
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	4a81      	ldr	r2, [pc, #516]	@ (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ab0:	e158      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab6:	e155      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009abc:	e152      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	d177      	bne.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009aca:	4b77      	ldr	r3, [pc, #476]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ad0:	f003 0318 	and.w	r3, r3, #24
 8009ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	2b18      	cmp	r3, #24
 8009ada:	d86b      	bhi.n	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8009adc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009b49 	.word	0x08009b49
 8009ae8:	08009bb5 	.word	0x08009bb5
 8009aec:	08009bb5 	.word	0x08009bb5
 8009af0:	08009bb5 	.word	0x08009bb5
 8009af4:	08009bb5 	.word	0x08009bb5
 8009af8:	08009bb5 	.word	0x08009bb5
 8009afc:	08009bb5 	.word	0x08009bb5
 8009b00:	08009bb5 	.word	0x08009bb5
 8009b04:	08009b51 	.word	0x08009b51
 8009b08:	08009bb5 	.word	0x08009bb5
 8009b0c:	08009bb5 	.word	0x08009bb5
 8009b10:	08009bb5 	.word	0x08009bb5
 8009b14:	08009bb5 	.word	0x08009bb5
 8009b18:	08009bb5 	.word	0x08009bb5
 8009b1c:	08009bb5 	.word	0x08009bb5
 8009b20:	08009bb5 	.word	0x08009bb5
 8009b24:	08009b59 	.word	0x08009b59
 8009b28:	08009bb5 	.word	0x08009bb5
 8009b2c:	08009bb5 	.word	0x08009bb5
 8009b30:	08009bb5 	.word	0x08009bb5
 8009b34:	08009bb5 	.word	0x08009bb5
 8009b38:	08009bb5 	.word	0x08009bb5
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009bb5 	.word	0x08009bb5
 8009b44:	08009b73 	.word	0x08009b73
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009b48:	f7fd fcd0 	bl	80074ec <HAL_RCC_GetPCLK3Freq>
 8009b4c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b4e:	e109      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b50:	f7fd fb88 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009b54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b56:	e105      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b58:	4b53      	ldr	r3, [pc, #332]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b64:	d102      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8009b66:	4b51      	ldr	r3, [pc, #324]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b6a:	e0fb      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b70:	e0f8      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009b72:	4b4d      	ldr	r3, [pc, #308]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d117      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8009b8a:	4b47      	ldr	r3, [pc, #284]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	0e1b      	lsrs	r3, r3, #24
 8009b90:	f003 030f 	and.w	r3, r3, #15
 8009b94:	e006      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8009b96:	4b44      	ldr	r3, [pc, #272]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b9c:	041b      	lsls	r3, r3, #16
 8009b9e:	0e1b      	lsrs	r3, r3, #24
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	4a42      	ldr	r2, [pc, #264]	@ (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bac:	e0da      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb2:	e0d7      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb8:	e0d4      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bbe:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	d155      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009bc6:	4b38      	ldr	r3, [pc, #224]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009bc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bcc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009bd0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bd8:	d013      	beq.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009be0:	d844      	bhi.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009be8:	d013      	beq.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8009bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bf0:	d83c      	bhi.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d014      	beq.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bfe:	d014      	beq.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009c00:	e034      	b.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c02:	f107 0318 	add.w	r3, r7, #24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fe fc24 	bl	8008454 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c10:	e0a8      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fac2 	bl	80081a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c20:	e0a0      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c22:	f7fd fb1f 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8009c26:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c28:	e09c      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d117      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c36:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009c42:	4b19      	ldr	r3, [pc, #100]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	0e1b      	lsrs	r3, r3, #24
 8009c48:	f003 030f 	and.w	r3, r3, #15
 8009c4c:	e006      	b.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009c4e:	4b16      	ldr	r3, [pc, #88]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	0e1b      	lsrs	r3, r3, #24
 8009c58:	f003 030f 	and.w	r3, r3, #15
 8009c5c:	4a14      	ldr	r2, [pc, #80]	@ (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c62:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c64:	e07e      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c6a:	e07b      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c70:	e078      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c76:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	d138      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c88:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d10d      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10a      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca4:	e05e      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009ca6:	bf00      	nop
 8009ca8:	46020c00 	.word	0x46020c00
 8009cac:	00f42400 	.word	0x00f42400
 8009cb0:	0800cea0 	.word	0x0800cea0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cc2:	d112      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cca:	d10e      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ccc:	4b28      	ldr	r3, [pc, #160]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009cce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cda:	d102      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8009cdc:	23fa      	movs	r3, #250	@ 0xfa
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ce0:	e040      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ce2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ce6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ce8:	e03c      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cee:	e039      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009cf8:	430b      	orrs	r3, r1
 8009cfa:	d131      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009cfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009d06:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009d08:	4b19      	ldr	r3, [pc, #100]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d14:	d105      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8009d1c:	4b15      	ldr	r3, [pc, #84]	@ (8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8009d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d20:	e020      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009d22:	4b13      	ldr	r3, [pc, #76]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d2e:	d106      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d36:	d102      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009d38:	4b0f      	ldr	r3, [pc, #60]	@ (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8009d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d3c:	e012      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d4a:	d106      	bne.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d52:	d102      	bne.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8009d54:	4b09      	ldr	r3, [pc, #36]	@ (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8009d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d58:	e004      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5e:	e001      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3738      	adds	r7, #56	@ 0x38
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	46020c00 	.word	0x46020c00
 8009d74:	02dc6c00 	.word	0x02dc6c00
 8009d78:	016e3600 	.word	0x016e3600
 8009d7c:	00f42400 	.word	0x00f42400

08009d80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009d88:	4b47      	ldr	r3, [pc, #284]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a46      	ldr	r2, [pc, #280]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009d8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d94:	f7f9 f876 	bl	8002e84 <HAL_GetTick>
 8009d98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d9a:	e008      	b.n	8009dae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d9c:	f7f9 f872 	bl	8002e84 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d901      	bls.n	8009dae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e077      	b.n	8009e9e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dae:	4b3e      	ldr	r3, [pc, #248]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1f0      	bne.n	8009d9c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009dba:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dbe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6811      	ldr	r1, [r2, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	6852      	ldr	r2, [r2, #4]
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	0212      	lsls	r2, r2, #8
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	4934      	ldr	r1, [pc, #208]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009dda:	4b33      	ldr	r3, [pc, #204]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dde:	4b33      	ldr	r3, [pc, #204]	@ (8009eac <RCCEx_PLL2_Config+0x12c>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6892      	ldr	r2, [r2, #8]
 8009de6:	3a01      	subs	r2, #1
 8009de8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	68d2      	ldr	r2, [r2, #12]
 8009df0:	3a01      	subs	r2, #1
 8009df2:	0252      	lsls	r2, r2, #9
 8009df4:	b292      	uxth	r2, r2
 8009df6:	4311      	orrs	r1, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6912      	ldr	r2, [r2, #16]
 8009dfc:	3a01      	subs	r2, #1
 8009dfe:	0412      	lsls	r2, r2, #16
 8009e00:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e04:	4311      	orrs	r1, r2
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6952      	ldr	r2, [r2, #20]
 8009e0a:	3a01      	subs	r2, #1
 8009e0c:	0612      	lsls	r2, r2, #24
 8009e0e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e12:	430a      	orrs	r2, r1
 8009e14:	4924      	ldr	r1, [pc, #144]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009e1a:	4b23      	ldr	r3, [pc, #140]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1e:	f023 020c 	bic.w	r2, r3, #12
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	4920      	ldr	r1, [pc, #128]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	491c      	ldr	r1, [pc, #112]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e40:	f023 0310 	bic.w	r3, r3, #16
 8009e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e46:	4b18      	ldr	r3, [pc, #96]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e4e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	69d2      	ldr	r2, [r2, #28]
 8009e56:	00d2      	lsls	r2, r2, #3
 8009e58:	4913      	ldr	r1, [pc, #76]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009e5e:	4b12      	ldr	r3, [pc, #72]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	4a11      	ldr	r2, [pc, #68]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e64:	f043 0310 	orr.w	r3, r3, #16
 8009e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e74:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e76:	f7f9 f805 	bl	8002e84 <HAL_GetTick>
 8009e7a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e7c:	e008      	b.n	8009e90 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e7e:	f7f9 f801 	bl	8002e84 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d901      	bls.n	8009e90 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e006      	b.n	8009e9e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e90:	4b05      	ldr	r3, [pc, #20]	@ (8009ea8 <RCCEx_PLL2_Config+0x128>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0f0      	beq.n	8009e7e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0

}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	46020c00 	.word	0x46020c00
 8009eac:	80800000 	.word	0x80800000

08009eb0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009eb8:	4b47      	ldr	r3, [pc, #284]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a46      	ldr	r2, [pc, #280]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ec2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ec4:	f7f8 ffde 	bl	8002e84 <HAL_GetTick>
 8009ec8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eca:	e008      	b.n	8009ede <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ecc:	f7f8 ffda 	bl	8002e84 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d901      	bls.n	8009ede <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e077      	b.n	8009fce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ede:	4b3e      	ldr	r3, [pc, #248]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f0      	bne.n	8009ecc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009eea:	4b3b      	ldr	r3, [pc, #236]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	6811      	ldr	r1, [r2, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6852      	ldr	r2, [r2, #4]
 8009efe:	3a01      	subs	r2, #1
 8009f00:	0212      	lsls	r2, r2, #8
 8009f02:	430a      	orrs	r2, r1
 8009f04:	4934      	ldr	r1, [pc, #208]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	630b      	str	r3, [r1, #48]	@ 0x30
 8009f0a:	4b33      	ldr	r3, [pc, #204]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f0e:	4b33      	ldr	r3, [pc, #204]	@ (8009fdc <RCCEx_PLL3_Config+0x12c>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6892      	ldr	r2, [r2, #8]
 8009f16:	3a01      	subs	r2, #1
 8009f18:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	68d2      	ldr	r2, [r2, #12]
 8009f20:	3a01      	subs	r2, #1
 8009f22:	0252      	lsls	r2, r2, #9
 8009f24:	b292      	uxth	r2, r2
 8009f26:	4311      	orrs	r1, r2
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6912      	ldr	r2, [r2, #16]
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	0412      	lsls	r2, r2, #16
 8009f30:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009f34:	4311      	orrs	r1, r2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6952      	ldr	r2, [r2, #20]
 8009f3a:	3a01      	subs	r2, #1
 8009f3c:	0612      	lsls	r2, r2, #24
 8009f3e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f42:	430a      	orrs	r2, r1
 8009f44:	4924      	ldr	r1, [pc, #144]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009f4a:	4b23      	ldr	r3, [pc, #140]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f4e:	f023 020c 	bic.w	r2, r3, #12
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	4920      	ldr	r1, [pc, #128]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	491c      	ldr	r1, [pc, #112]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f70:	f023 0310 	bic.w	r3, r3, #16
 8009f74:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f76:	4b18      	ldr	r3, [pc, #96]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f7e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	69d2      	ldr	r2, [r2, #28]
 8009f86:	00d2      	lsls	r2, r2, #3
 8009f88:	4913      	ldr	r1, [pc, #76]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009f8e:	4b12      	ldr	r3, [pc, #72]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f92:	4a11      	ldr	r2, [pc, #68]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f94:	f043 0310 	orr.w	r3, r3, #16
 8009f98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fa4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fa6:	f7f8 ff6d 	bl	8002e84 <HAL_GetTick>
 8009faa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fac:	e008      	b.n	8009fc0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fae:	f7f8 ff69 	bl	8002e84 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d901      	bls.n	8009fc0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e006      	b.n	8009fce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <RCCEx_PLL3_Config+0x128>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d0f0      	beq.n	8009fae <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	46020c00 	.word	0x46020c00
 8009fdc:	80800000 	.word	0x80800000

08009fe0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d078      	beq.n	800a0e4 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d106      	bne.n	800a00c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7f8 fb5a 	bl	80026c0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2202      	movs	r2, #2
 800a010:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a014:	4b36      	ldr	r3, [pc, #216]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b10      	cmp	r3, #16
 800a01e:	d058      	beq.n	800a0d2 <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800a020:	4b33      	ldr	r3, [pc, #204]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a02c:	d053      	beq.n	800a0d6 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a02e:	4b30      	ldr	r3, [pc, #192]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a030:	22ca      	movs	r2, #202	@ 0xca
 800a032:	625a      	str	r2, [r3, #36]	@ 0x24
 800a034:	4b2e      	ldr	r3, [pc, #184]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a036:	2253      	movs	r2, #83	@ 0x53
 800a038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f9ae 	bl	800a39c <RTC_EnterInitMode>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d13f      	bne.n	800a0ca <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a04a:	4b29      	ldr	r3, [pc, #164]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	4a28      	ldr	r2, [pc, #160]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a050:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a058:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a05a:	4b25      	ldr	r3, [pc, #148]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a05c:	699a      	ldr	r2, [r3, #24]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6859      	ldr	r1, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	4319      	orrs	r1, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	430b      	orrs	r3, r1
 800a06e:	4920      	ldr	r1, [pc, #128]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a070:	4313      	orrs	r3, r2
 800a072:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	491c      	ldr	r1, [pc, #112]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a080:	4313      	orrs	r3, r2
 800a082:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a084:	4b1a      	ldr	r3, [pc, #104]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a094:	430b      	orrs	r3, r1
 800a096:	4916      	ldr	r1, [pc, #88]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f9b9 	bl	800a414 <RTC_ExitInitMode>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10e      	bne.n	800a0ca <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 800a0ac:	4b10      	ldr	r3, [pc, #64]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a19      	ldr	r1, [r3, #32]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	4319      	orrs	r1, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	695b      	ldr	r3, [r3, #20]
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	490a      	ldr	r1, [pc, #40]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0ca:	4b09      	ldr	r3, [pc, #36]	@ (800a0f0 <HAL_RTC_Init+0x110>)
 800a0cc:	22ff      	movs	r2, #255	@ 0xff
 800a0ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800a0d0:	e001      	b.n	800a0d6 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d103      	bne.n	800a0e4 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	46007800 	.word	0x46007800

0800a0f4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a0f4:	b590      	push	{r4, r7, lr}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <HAL_RTC_SetTime+0x1a>
 800a10a:	2302      	movs	r3, #2
 800a10c:	e088      	b.n	800a220 <HAL_RTC_SetTime+0x12c>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a11e:	4b42      	ldr	r3, [pc, #264]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a120:	22ca      	movs	r2, #202	@ 0xca
 800a122:	625a      	str	r2, [r3, #36]	@ 0x24
 800a124:	4b40      	ldr	r3, [pc, #256]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a126:	2253      	movs	r2, #83	@ 0x53
 800a128:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 f936 	bl	800a39c <RTC_EnterInitMode>
 800a130:	4603      	mov	r3, r0
 800a132:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a134:	7cfb      	ldrb	r3, [r7, #19]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d163      	bne.n	800a202 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a13a:	4b3b      	ldr	r3, [pc, #236]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a146:	d057      	beq.n	800a1f8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d125      	bne.n	800a19a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a14e:	4b36      	ldr	r3, [pc, #216]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d102      	bne.n	800a160 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2200      	movs	r2, #0
 800a15e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	4618      	mov	r0, r3
 800a166:	f000 f993 	bl	800a490 <RTC_ByteToBcd2>
 800a16a:	4603      	mov	r3, r0
 800a16c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	785b      	ldrb	r3, [r3, #1]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f98c 	bl	800a490 <RTC_ByteToBcd2>
 800a178:	4603      	mov	r3, r0
 800a17a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a17c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	789b      	ldrb	r3, [r3, #2]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 f984 	bl	800a490 <RTC_ByteToBcd2>
 800a188:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a18a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	78db      	ldrb	r3, [r3, #3]
 800a192:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	e017      	b.n	800a1ca <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a19a:	4b23      	ldr	r3, [pc, #140]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1b8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1be:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	78db      	ldrb	r3, [r3, #3]
 800a1c4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a1ca:	4a17      	ldr	r2, [pc, #92]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a1d2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a1d6:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a1d8:	4b13      	ldr	r3, [pc, #76]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	4a12      	ldr	r2, [pc, #72]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a1de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1e2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a1e4:	4b10      	ldr	r3, [pc, #64]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a1e6:	699a      	ldr	r2, [r3, #24]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	68d9      	ldr	r1, [r3, #12]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	490d      	ldr	r1, [pc, #52]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 f90b 	bl	800a414 <RTC_ExitInitMode>
 800a1fe:	4603      	mov	r3, r0
 800a200:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a202:	4b09      	ldr	r3, [pc, #36]	@ (800a228 <HAL_RTC_SetTime+0x134>)
 800a204:	22ff      	movs	r2, #255	@ 0xff
 800a206:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a208:	7cfb      	ldrb	r3, [r7, #19]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a21e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a220:	4618      	mov	r0, r3
 800a222:	371c      	adds	r7, #28
 800a224:	46bd      	mov	sp, r7
 800a226:	bd90      	pop	{r4, r7, pc}
 800a228:	46007800 	.word	0x46007800

0800a22c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a22c:	b590      	push	{r4, r7, lr}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_RTC_SetDate+0x1a>
 800a242:	2302      	movs	r3, #2
 800a244:	e071      	b.n	800a32a <HAL_RTC_SetDate+0xfe>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2202      	movs	r2, #2
 800a252:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10e      	bne.n	800a27a <HAL_RTC_SetDate+0x4e>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	785b      	ldrb	r3, [r3, #1]
 800a260:	f003 0310 	and.w	r3, r3, #16
 800a264:	2b00      	cmp	r3, #0
 800a266:	d008      	beq.n	800a27a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	f023 0310 	bic.w	r3, r3, #16
 800a270:	b2db      	uxtb	r3, r3
 800a272:	330a      	adds	r3, #10
 800a274:	b2da      	uxtb	r2, r3
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11c      	bne.n	800a2ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	78db      	ldrb	r3, [r3, #3]
 800a284:	4618      	mov	r0, r3
 800a286:	f000 f903 	bl	800a490 <RTC_ByteToBcd2>
 800a28a:	4603      	mov	r3, r0
 800a28c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	785b      	ldrb	r3, [r3, #1]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f8fc 	bl	800a490 <RTC_ByteToBcd2>
 800a298:	4603      	mov	r3, r0
 800a29a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a29c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	789b      	ldrb	r3, [r3, #2]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f8f4 	bl	800a490 <RTC_ByteToBcd2>
 800a2a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a2aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	e00e      	b.n	800a2d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	78db      	ldrb	r3, [r3, #3]
 800a2be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	785b      	ldrb	r3, [r3, #1]
 800a2c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a2c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a2cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2d8:	4b16      	ldr	r3, [pc, #88]	@ (800a334 <HAL_RTC_SetDate+0x108>)
 800a2da:	22ca      	movs	r2, #202	@ 0xca
 800a2dc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a2de:	4b15      	ldr	r3, [pc, #84]	@ (800a334 <HAL_RTC_SetDate+0x108>)
 800a2e0:	2253      	movs	r2, #83	@ 0x53
 800a2e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f859 	bl	800a39c <RTC_EnterInitMode>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a2ee:	7cfb      	ldrb	r3, [r7, #19]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a2f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a334 <HAL_RTC_SetDate+0x108>)
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a2fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a300:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 f886 	bl	800a414 <RTC_ExitInitMode>
 800a308:	4603      	mov	r3, r0
 800a30a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a30c:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <HAL_RTC_SetDate+0x108>)
 800a30e:	22ff      	movs	r2, #255	@ 0xff
 800a310:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a312:	7cfb      	ldrb	r3, [r7, #19]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d103      	bne.n	800a320 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a328:	7cfb      	ldrb	r3, [r7, #19]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	371c      	adds	r7, #28
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd90      	pop	{r4, r7, pc}
 800a332:	bf00      	nop
 800a334:	46007800 	.word	0x46007800

0800a338 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a340:	4b15      	ldr	r3, [pc, #84]	@ (800a398 <HAL_RTC_WaitForSynchro+0x60>)
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	4a14      	ldr	r2, [pc, #80]	@ (800a398 <HAL_RTC_WaitForSynchro+0x60>)
 800a346:	f023 0320 	bic.w	r3, r3, #32
 800a34a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a34c:	f7f8 fd9a 	bl	8002e84 <HAL_GetTick>
 800a350:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a352:	e013      	b.n	800a37c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a354:	f7f8 fd96 	bl	8002e84 <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a362:	d90b      	bls.n	800a37c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a364:	4b0c      	ldr	r3, [pc, #48]	@ (800a398 <HAL_RTC_WaitForSynchro+0x60>)
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f003 0320 	and.w	r3, r3, #32
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10c      	bne.n	800a38a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2203      	movs	r2, #3
 800a374:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e008      	b.n	800a38e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a37c:	4b06      	ldr	r3, [pc, #24]	@ (800a398 <HAL_RTC_WaitForSynchro+0x60>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	f003 0320 	and.w	r3, r3, #32
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0e5      	beq.n	800a354 <HAL_RTC_WaitForSynchro+0x1c>
 800a388:	e000      	b.n	800a38c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a38a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	46007800 	.word	0x46007800

0800a39c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a3a8:	4b19      	ldr	r3, [pc, #100]	@ (800a410 <RTC_EnterInitMode+0x74>)
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d128      	bne.n	800a406 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a3b4:	4b16      	ldr	r3, [pc, #88]	@ (800a410 <RTC_EnterInitMode+0x74>)
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	4a15      	ldr	r2, [pc, #84]	@ (800a410 <RTC_EnterInitMode+0x74>)
 800a3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3be:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a3c0:	f7f8 fd60 	bl	8002e84 <HAL_GetTick>
 800a3c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a3c6:	e013      	b.n	800a3f0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a3c8:	f7f8 fd5c 	bl	8002e84 <HAL_GetTick>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3d6:	d90b      	bls.n	800a3f0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a3d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a410 <RTC_EnterInitMode+0x74>)
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10f      	bne.n	800a404 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2203      	movs	r2, #3
 800a3ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a3f0:	4b07      	ldr	r3, [pc, #28]	@ (800a410 <RTC_EnterInitMode+0x74>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <RTC_EnterInitMode+0x6a>
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d1e2      	bne.n	800a3c8 <RTC_EnterInitMode+0x2c>
 800a402:	e000      	b.n	800a406 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a404:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a406:	7bfb      	ldrb	r3, [r7, #15]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	46007800 	.word	0x46007800

0800a414 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a420:	4b1a      	ldr	r3, [pc, #104]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	4a19      	ldr	r2, [pc, #100]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a42a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a42c:	4b17      	ldr	r3, [pc, #92]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	f003 0320 	and.w	r3, r3, #32
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10c      	bne.n	800a452 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ff7d 	bl	800a338 <HAL_RTC_WaitForSynchro>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d01e      	beq.n	800a482 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2203      	movs	r2, #3
 800a448:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	73fb      	strb	r3, [r7, #15]
 800a450:	e017      	b.n	800a482 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a452:	4b0e      	ldr	r3, [pc, #56]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	4a0d      	ldr	r2, [pc, #52]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a458:	f023 0320 	bic.w	r3, r3, #32
 800a45c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff ff6a 	bl	800a338 <HAL_RTC_WaitForSynchro>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2203      	movs	r2, #3
 800a46e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a476:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	4a04      	ldr	r2, [pc, #16]	@ (800a48c <RTC_ExitInitMode+0x78>)
 800a47c:	f043 0320 	orr.w	r3, r3, #32
 800a480:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	46007800 	.word	0x46007800

0800a490 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a4a2:	e005      	b.n	800a4b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a4aa:	7afb      	ldrb	r3, [r7, #11]
 800a4ac:	3b0a      	subs	r3, #10
 800a4ae:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a4b0:	7afb      	ldrb	r3, [r7, #11]
 800a4b2:	2b09      	cmp	r3, #9
 800a4b4:	d8f6      	bhi.n	800a4a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	7afb      	ldrb	r3, [r7, #11]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	b2db      	uxtb	r3, r3
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4910      	ldr	r1, [pc, #64]	@ (800a524 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	689a      	ldr	r2, [r3, #8]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	490c      	ldr	r1, [pc, #48]	@ (800a528 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800a4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a528 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	6919      	ldr	r1, [r3, #16]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	041b      	lsls	r3, r3, #16
 800a50e:	430b      	orrs	r3, r1
 800a510:	4905      	ldr	r1, [pc, #20]	@ (800a528 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a512:	4313      	orrs	r3, r2
 800a514:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	46007800 	.word	0x46007800
 800a528:	46007c00 	.word	0x46007c00

0800a52c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e049      	b.n	800a5d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7f8 f900 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3304      	adds	r3, #4
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f000 fa7c 	bl	800aa68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d001      	beq.n	800a5f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e072      	b.n	800a6da <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f042 0201 	orr.w	r2, r2, #1
 800a60a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a35      	ldr	r2, [pc, #212]	@ (800a6e8 <HAL_TIM_Base_Start_IT+0x10c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d040      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a34      	ldr	r2, [pc, #208]	@ (800a6ec <HAL_TIM_Base_Start_IT+0x110>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d03b      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a628:	d036      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a632:	d031      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a2d      	ldr	r2, [pc, #180]	@ (800a6f0 <HAL_TIM_Base_Start_IT+0x114>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d02c      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a2c      	ldr	r2, [pc, #176]	@ (800a6f4 <HAL_TIM_Base_Start_IT+0x118>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d027      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a2a      	ldr	r2, [pc, #168]	@ (800a6f8 <HAL_TIM_Base_Start_IT+0x11c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d022      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a29      	ldr	r2, [pc, #164]	@ (800a6fc <HAL_TIM_Base_Start_IT+0x120>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d01d      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a27      	ldr	r2, [pc, #156]	@ (800a700 <HAL_TIM_Base_Start_IT+0x124>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d018      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a26      	ldr	r2, [pc, #152]	@ (800a704 <HAL_TIM_Base_Start_IT+0x128>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d013      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a24      	ldr	r2, [pc, #144]	@ (800a708 <HAL_TIM_Base_Start_IT+0x12c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00e      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a23      	ldr	r2, [pc, #140]	@ (800a70c <HAL_TIM_Base_Start_IT+0x130>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d009      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a21      	ldr	r2, [pc, #132]	@ (800a710 <HAL_TIM_Base_Start_IT+0x134>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d004      	beq.n	800a698 <HAL_TIM_Base_Start_IT+0xbc>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a20      	ldr	r2, [pc, #128]	@ (800a714 <HAL_TIM_Base_Start_IT+0x138>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d115      	bne.n	800a6c4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	4b1e      	ldr	r3, [pc, #120]	@ (800a718 <HAL_TIM_Base_Start_IT+0x13c>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b06      	cmp	r3, #6
 800a6a8:	d015      	beq.n	800a6d6 <HAL_TIM_Base_Start_IT+0xfa>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6b0:	d011      	beq.n	800a6d6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f042 0201 	orr.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6c2:	e008      	b.n	800a6d6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f042 0201 	orr.w	r2, r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
 800a6d4:	e000      	b.n	800a6d8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	50012c00 	.word	0x50012c00
 800a6f0:	40000400 	.word	0x40000400
 800a6f4:	50000400 	.word	0x50000400
 800a6f8:	40000800 	.word	0x40000800
 800a6fc:	50000800 	.word	0x50000800
 800a700:	40000c00 	.word	0x40000c00
 800a704:	50000c00 	.word	0x50000c00
 800a708:	40013400 	.word	0x40013400
 800a70c:	50013400 	.word	0x50013400
 800a710:	40014000 	.word	0x40014000
 800a714:	50014000 	.word	0x50014000
 800a718:	00010007 	.word	0x00010007

0800a71c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0201 	bic.w	r2, r2, #1
 800a732:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a73e:	4013      	ands	r3, r2
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10f      	bne.n	800a764 <HAL_TIM_Base_Stop_IT+0x48>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6a1a      	ldr	r2, [r3, #32]
 800a74a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a74e:	4013      	ands	r3, r2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d107      	bne.n	800a764 <HAL_TIM_Base_Stop_IT+0x48>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f003 0302 	and.w	r3, r3, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d020      	beq.n	800a7de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f003 0302 	and.w	r3, r3, #2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d01b      	beq.n	800a7de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f06f 0202 	mvn.w	r2, #2
 800a7ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f003 0303 	and.w	r3, r3, #3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f931 	bl	800aa2c <HAL_TIM_IC_CaptureCallback>
 800a7ca:	e005      	b.n	800a7d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f923 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f934 	bl	800aa40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d020      	beq.n	800a82a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f003 0304 	and.w	r3, r3, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d01b      	beq.n	800a82a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f06f 0204 	mvn.w	r2, #4
 800a7fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d003      	beq.n	800a818 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 f90b 	bl	800aa2c <HAL_TIM_IC_CaptureCallback>
 800a816:	e005      	b.n	800a824 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f8fd 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f90e 	bl	800aa40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f003 0308 	and.w	r3, r3, #8
 800a830:	2b00      	cmp	r3, #0
 800a832:	d020      	beq.n	800a876 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f003 0308 	and.w	r3, r3, #8
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01b      	beq.n	800a876 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f06f 0208 	mvn.w	r2, #8
 800a846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2204      	movs	r2, #4
 800a84c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d003      	beq.n	800a864 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f8e5 	bl	800aa2c <HAL_TIM_IC_CaptureCallback>
 800a862:	e005      	b.n	800a870 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f8d7 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f8e8 	bl	800aa40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f003 0310 	and.w	r3, r3, #16
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d020      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0310 	and.w	r3, r3, #16
 800a886:	2b00      	cmp	r3, #0
 800a888:	d01b      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f06f 0210 	mvn.w	r2, #16
 800a892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2208      	movs	r2, #8
 800a898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69db      	ldr	r3, [r3, #28]
 800a8a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8bf 	bl	800aa2c <HAL_TIM_IC_CaptureCallback>
 800a8ae:	e005      	b.n	800a8bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f8b1 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f8c2 	bl	800aa40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00c      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d007      	beq.n	800a8e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f06f 0201 	mvn.w	r2, #1
 800a8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7f6 fe49 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d104      	bne.n	800a8fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00c      	beq.n	800a914 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a900:	2b00      	cmp	r3, #0
 800a902:	d007      	beq.n	800a914 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f9b4 	bl	800ac7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a924:	2b00      	cmp	r3, #0
 800a926:	d007      	beq.n	800a938 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9ac 	bl	800ac90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00c      	beq.n	800a95c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d007      	beq.n	800a95c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f87c 	bl	800aa54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f003 0320 	and.w	r3, r3, #32
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00c      	beq.n	800a980 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f003 0320 	and.w	r3, r3, #32
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f06f 0220 	mvn.w	r2, #32
 800a978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f974 	bl	800ac68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00c      	beq.n	800a9a4 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a990:	2b00      	cmp	r3, #0
 800a992:	d007      	beq.n	800a9a4 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a99c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f980 	bl	800aca4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00c      	beq.n	800a9c8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a9c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f978 	bl	800acb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00c      	beq.n	800a9ec <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d007      	beq.n	800a9ec <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f970 	bl	800accc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00c      	beq.n	800aa10 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d007      	beq.n	800aa10 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aa08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f968 	bl	800ace0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa10:	bf00      	nop
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a6b      	ldr	r2, [pc, #428]	@ (800ac28 <TIM_Base_SetConfig+0x1c0>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d02b      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a6a      	ldr	r2, [pc, #424]	@ (800ac2c <TIM_Base_SetConfig+0x1c4>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d027      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa8e:	d023      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa96:	d01f      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a65      	ldr	r2, [pc, #404]	@ (800ac30 <TIM_Base_SetConfig+0x1c8>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d01b      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a64      	ldr	r2, [pc, #400]	@ (800ac34 <TIM_Base_SetConfig+0x1cc>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d017      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a63      	ldr	r2, [pc, #396]	@ (800ac38 <TIM_Base_SetConfig+0x1d0>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d013      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a62      	ldr	r2, [pc, #392]	@ (800ac3c <TIM_Base_SetConfig+0x1d4>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00f      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a61      	ldr	r2, [pc, #388]	@ (800ac40 <TIM_Base_SetConfig+0x1d8>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d00b      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a60      	ldr	r2, [pc, #384]	@ (800ac44 <TIM_Base_SetConfig+0x1dc>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d007      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a5f      	ldr	r2, [pc, #380]	@ (800ac48 <TIM_Base_SetConfig+0x1e0>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <TIM_Base_SetConfig+0x70>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a5e      	ldr	r2, [pc, #376]	@ (800ac4c <TIM_Base_SetConfig+0x1e4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d108      	bne.n	800aaea <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a4e      	ldr	r2, [pc, #312]	@ (800ac28 <TIM_Base_SetConfig+0x1c0>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d043      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a4d      	ldr	r2, [pc, #308]	@ (800ac2c <TIM_Base_SetConfig+0x1c4>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d03f      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab00:	d03b      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab08:	d037      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a48      	ldr	r2, [pc, #288]	@ (800ac30 <TIM_Base_SetConfig+0x1c8>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d033      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a47      	ldr	r2, [pc, #284]	@ (800ac34 <TIM_Base_SetConfig+0x1cc>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d02f      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a46      	ldr	r2, [pc, #280]	@ (800ac38 <TIM_Base_SetConfig+0x1d0>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d02b      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a45      	ldr	r2, [pc, #276]	@ (800ac3c <TIM_Base_SetConfig+0x1d4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d027      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a44      	ldr	r2, [pc, #272]	@ (800ac40 <TIM_Base_SetConfig+0x1d8>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d023      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a43      	ldr	r2, [pc, #268]	@ (800ac44 <TIM_Base_SetConfig+0x1dc>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01f      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a42      	ldr	r2, [pc, #264]	@ (800ac48 <TIM_Base_SetConfig+0x1e0>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d01b      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a41      	ldr	r2, [pc, #260]	@ (800ac4c <TIM_Base_SetConfig+0x1e4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d017      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a40      	ldr	r2, [pc, #256]	@ (800ac50 <TIM_Base_SetConfig+0x1e8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d013      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a3f      	ldr	r2, [pc, #252]	@ (800ac54 <TIM_Base_SetConfig+0x1ec>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d00f      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a3e      	ldr	r2, [pc, #248]	@ (800ac58 <TIM_Base_SetConfig+0x1f0>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00b      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a3d      	ldr	r2, [pc, #244]	@ (800ac5c <TIM_Base_SetConfig+0x1f4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d007      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a3c      	ldr	r2, [pc, #240]	@ (800ac60 <TIM_Base_SetConfig+0x1f8>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d003      	beq.n	800ab7a <TIM_Base_SetConfig+0x112>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a3b      	ldr	r2, [pc, #236]	@ (800ac64 <TIM_Base_SetConfig+0x1fc>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d108      	bne.n	800ab8c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	689a      	ldr	r2, [r3, #8]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a1e      	ldr	r2, [pc, #120]	@ (800ac28 <TIM_Base_SetConfig+0x1c0>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d023      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac2c <TIM_Base_SetConfig+0x1c4>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d01f      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a22      	ldr	r2, [pc, #136]	@ (800ac48 <TIM_Base_SetConfig+0x1e0>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d01b      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a21      	ldr	r2, [pc, #132]	@ (800ac4c <TIM_Base_SetConfig+0x1e4>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d017      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a20      	ldr	r2, [pc, #128]	@ (800ac50 <TIM_Base_SetConfig+0x1e8>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a1f      	ldr	r2, [pc, #124]	@ (800ac54 <TIM_Base_SetConfig+0x1ec>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d00f      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a1e      	ldr	r2, [pc, #120]	@ (800ac58 <TIM_Base_SetConfig+0x1f0>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00b      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac5c <TIM_Base_SetConfig+0x1f4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d007      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a1c      	ldr	r2, [pc, #112]	@ (800ac60 <TIM_Base_SetConfig+0x1f8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d003      	beq.n	800abfa <TIM_Base_SetConfig+0x192>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a1b      	ldr	r2, [pc, #108]	@ (800ac64 <TIM_Base_SetConfig+0x1fc>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d103      	bne.n	800ac02 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	691a      	ldr	r2, [r3, #16]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f043 0204 	orr.w	r2, r3, #4
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	601a      	str	r2, [r3, #0]
}
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	40012c00 	.word	0x40012c00
 800ac2c:	50012c00 	.word	0x50012c00
 800ac30:	40000400 	.word	0x40000400
 800ac34:	50000400 	.word	0x50000400
 800ac38:	40000800 	.word	0x40000800
 800ac3c:	50000800 	.word	0x50000800
 800ac40:	40000c00 	.word	0x40000c00
 800ac44:	50000c00 	.word	0x50000c00
 800ac48:	40013400 	.word	0x40013400
 800ac4c:	50013400 	.word	0x50013400
 800ac50:	40014000 	.word	0x40014000
 800ac54:	50014000 	.word	0x50014000
 800ac58:	40014400 	.word	0x40014400
 800ac5c:	50014400 	.word	0x50014400
 800ac60:	40014800 	.word	0x40014800
 800ac64:	50014800 	.word	0x50014800

0800ac68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e042      	b.n	800ad8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7f7 fd45 	bl	80027a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2224      	movs	r2, #36	@ 0x24
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fd5e 	bl	800b800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fbb9 	bl	800b4bc <UART_SetConfig>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d101      	bne.n	800ad54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e01b      	b.n	800ad8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689a      	ldr	r2, [r3, #8]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0201 	orr.w	r2, r2, #1
 800ad82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fddd 	bl	800b944 <UART_CheckIdleState>
 800ad8a:	4603      	mov	r3, r0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	@ 0x28
 800ad98:	af02      	add	r7, sp, #8
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	60b9      	str	r1, [r7, #8]
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	4613      	mov	r3, r2
 800ada2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adaa:	2b20      	cmp	r3, #32
 800adac:	f040 808b 	bne.w	800aec6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_UART_Transmit+0x28>
 800adb6:	88fb      	ldrh	r3, [r7, #6]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e083      	b.n	800aec8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adca:	2b80      	cmp	r3, #128	@ 0x80
 800adcc:	d107      	bne.n	800adde <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800addc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2221      	movs	r2, #33	@ 0x21
 800adea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adee:	f7f8 f849 	bl	8002e84 <HAL_GetTick>
 800adf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	88fa      	ldrh	r2, [r7, #6]
 800adf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae0c:	d108      	bne.n	800ae20 <HAL_UART_Transmit+0x8c>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d104      	bne.n	800ae20 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	61bb      	str	r3, [r7, #24]
 800ae1e:	e003      	b.n	800ae28 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae28:	e030      	b.n	800ae8c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2200      	movs	r2, #0
 800ae32:	2180      	movs	r1, #128	@ 0x80
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f000 fe2f 	bl	800ba98 <UART_WaitOnFlagUntilTimeout>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e03d      	b.n	800aec8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10b      	bne.n	800ae6a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	461a      	mov	r2, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	3302      	adds	r3, #2
 800ae66:	61bb      	str	r3, [r7, #24]
 800ae68:	e007      	b.n	800ae7a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	3301      	adds	r3, #1
 800ae78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	3b01      	subs	r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1c8      	bne.n	800ae2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2140      	movs	r1, #64	@ 0x40
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fdf8 	bl	800ba98 <UART_WaitOnFlagUntilTimeout>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d005      	beq.n	800aeba <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e006      	b.n	800aec8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e000      	b.n	800aec8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aec6:	2302      	movs	r3, #2
  }
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b0ae      	sub	sp, #184	@ 0xb8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800aefa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aefe:	4013      	ands	r3, r2
 800af00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800af04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d11b      	bne.n	800af44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af10:	f003 0320 	and.w	r3, r3, #32
 800af14:	2b00      	cmp	r3, #0
 800af16:	d015      	beq.n	800af44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b00      	cmp	r3, #0
 800af22:	d105      	bne.n	800af30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d009      	beq.n	800af44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 8297 	beq.w	800b468 <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	4798      	blx	r3
      }
      return;
 800af42:	e291      	b.n	800b468 <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 80fd 	beq.w	800b148 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800af52:	4b7a      	ldr	r3, [pc, #488]	@ (800b13c <HAL_UART_IRQHandler+0x26c>)
 800af54:	4013      	ands	r3, r2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d106      	bne.n	800af68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af5e:	4b78      	ldr	r3, [pc, #480]	@ (800b140 <HAL_UART_IRQHandler+0x270>)
 800af60:	4013      	ands	r3, r2
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 80f0 	beq.w	800b148 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d011      	beq.n	800af98 <HAL_UART_IRQHandler+0xc8>
 800af74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800af78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2201      	movs	r2, #1
 800af86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af8e:	f043 0201 	orr.w	r2, r3, #1
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d011      	beq.n	800afc8 <HAL_UART_IRQHandler+0xf8>
 800afa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2202      	movs	r2, #2
 800afb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afbe:	f043 0204 	orr.w	r2, r3, #4
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afcc:	f003 0304 	and.w	r3, r3, #4
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d011      	beq.n	800aff8 <HAL_UART_IRQHandler+0x128>
 800afd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2204      	movs	r2, #4
 800afe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afee:	f043 0202 	orr.w	r2, r3, #2
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aff8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800affc:	f003 0308 	and.w	r3, r3, #8
 800b000:	2b00      	cmp	r3, #0
 800b002:	d017      	beq.n	800b034 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b008:	f003 0320 	and.w	r3, r3, #32
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d105      	bne.n	800b01c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b010:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b014:	4b49      	ldr	r3, [pc, #292]	@ (800b13c <HAL_UART_IRQHandler+0x26c>)
 800b016:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2208      	movs	r2, #8
 800b022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b02a:	f043 0208 	orr.w	r2, r3, #8
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d012      	beq.n	800b066 <HAL_UART_IRQHandler+0x196>
 800b040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b044:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00c      	beq.n	800b066 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b054:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b05c:	f043 0220 	orr.w	r2, r3, #32
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 81fd 	beq.w	800b46c <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b072:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b076:	f003 0320 	and.w	r3, r3, #32
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d013      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b07e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b082:	f003 0320 	and.w	r3, r3, #32
 800b086:	2b00      	cmp	r3, #0
 800b088:	d105      	bne.n	800b096 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b08a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b08e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ba:	2b40      	cmp	r3, #64	@ 0x40
 800b0bc:	d005      	beq.n	800b0ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d02e      	beq.n	800b128 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fe74 	bl	800bdb8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0da:	2b40      	cmp	r3, #64	@ 0x40
 800b0dc:	d120      	bne.n	800b120 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d017      	beq.n	800b118 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ee:	4a15      	ldr	r2, [pc, #84]	@ (800b144 <HAL_UART_IRQHandler+0x274>)
 800b0f0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7f8 f903 	bl	8003304 <HAL_DMA_Abort_IT>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d019      	beq.n	800b138 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b10a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b112:	4610      	mov	r0, r2
 800b114:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b116:	e00f      	b.n	800b138 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f9c5 	bl	800b4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b11e:	e00b      	b.n	800b138 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f9c1 	bl	800b4a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b126:	e007      	b.n	800b138 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f9bd 	bl	800b4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b136:	e199      	b.n	800b46c <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b138:	bf00      	nop
    return;
 800b13a:	e197      	b.n	800b46c <HAL_UART_IRQHandler+0x59c>
 800b13c:	10000001 	.word	0x10000001
 800b140:	04000120 	.word	0x04000120
 800b144:	0800be85 	.word	0x0800be85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	f040 8142 	bne.w	800b3d6 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b156:	f003 0310 	and.w	r3, r3, #16
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f000 813b 	beq.w	800b3d6 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b164:	f003 0310 	and.w	r3, r3, #16
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 8134 	beq.w	800b3d6 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2210      	movs	r2, #16
 800b174:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b180:	2b40      	cmp	r3, #64	@ 0x40
 800b182:	f040 80aa 	bne.w	800b2da <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b190:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b194:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 8084 	beq.w	800b2a6 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1a4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d27c      	bcs.n	800b2a6 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b1b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1be:	2b81      	cmp	r3, #129	@ 0x81
 800b1c0:	d060      	beq.n	800b284 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1ca:	e853 3f00 	ldrex	r3, [r3]
 800b1ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b1d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1e8:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b1ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b1f0:	e841 2300 	strex	r3, r2, [r1]
 800b1f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b1f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1e2      	bne.n	800b1c2 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3308      	adds	r3, #8
 800b202:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b20c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b20e:	f023 0301 	bic.w	r3, r3, #1
 800b212:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3308      	adds	r3, #8
 800b21c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b220:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b222:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b226:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b228:	e841 2300 	strex	r3, r2, [r1]
 800b22c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b22e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e3      	bne.n	800b1fc <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2220      	movs	r2, #32
 800b238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b24a:	e853 3f00 	ldrex	r3, [r3]
 800b24e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b252:	f023 0310 	bic.w	r3, r3, #16
 800b256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b264:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b266:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b268:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b26a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b26c:	e841 2300 	strex	r3, r2, [r1]
 800b270:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e4      	bne.n	800b242 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f7 ffc4 	bl	800320c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b296:	b29b      	uxth	r3, r3
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7f7 fbe4 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b2a4:	e0e4      	b.n	800b470 <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2ac:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	f040 80dd 	bne.w	800b470 <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2be:	2b81      	cmp	r3, #129	@ 0x81
 800b2c0:	f040 80d6 	bne.w	800b470 <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7f7 fbca 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
      return;
 800b2d8:	e0ca      	b.n	800b470 <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 80bc 	beq.w	800b474 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 800b2fc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 80b7 	beq.w	800b474 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30e:	e853 3f00 	ldrex	r3, [r3]
 800b312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b31a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b328:	647b      	str	r3, [r7, #68]	@ 0x44
 800b32a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b32e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b330:	e841 2300 	strex	r3, r2, [r1]
 800b334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e4      	bne.n	800b306 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	623b      	str	r3, [r7, #32]
   return(result);
 800b34c:	6a3b      	ldr	r3, [r7, #32]
 800b34e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b352:	f023 0301 	bic.w	r3, r3, #1
 800b356:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	3308      	adds	r3, #8
 800b360:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b364:	633a      	str	r2, [r7, #48]	@ 0x30
 800b366:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b36a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e1      	bne.n	800b33c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2220      	movs	r2, #32
 800b37c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	60fb      	str	r3, [r7, #12]
   return(result);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f023 0310 	bic.w	r3, r3, #16
 800b3a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b3ae:	61fb      	str	r3, [r7, #28]
 800b3b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b2:	69b9      	ldr	r1, [r7, #24]
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	e841 2300 	strex	r3, r2, [r1]
 800b3ba:	617b      	str	r3, [r7, #20]
   return(result);
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e4      	bne.n	800b38c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3c8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7f7 fb4c 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3d4:	e04e      	b.n	800b474 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b3d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d014      	beq.n	800b40c <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b3e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b3ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d008      	beq.n	800b40c <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d03a      	beq.n	800b478 <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
    }
    return;
 800b40a:	e035      	b.n	800b478 <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b40c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d009      	beq.n	800b42c <HAL_UART_IRQHandler+0x55c>
 800b418:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fd3f 	bl	800bea8 <UART_EndTransmit_IT>
    return;
 800b42a:	e026      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b42c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b430:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d009      	beq.n	800b44c <HAL_UART_IRQHandler+0x57c>
 800b438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b43c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f001 fa9d 	bl	800c984 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b44a:	e016      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b44c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b450:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d010      	beq.n	800b47a <HAL_UART_IRQHandler+0x5aa>
 800b458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	da0c      	bge.n	800b47a <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 fa85 	bl	800c970 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b466:	e008      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
      return;
 800b468:	bf00      	nop
 800b46a:	e006      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
    return;
 800b46c:	bf00      	nop
 800b46e:	e004      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
      return;
 800b470:	bf00      	nop
 800b472:	e002      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
      return;
 800b474:	bf00      	nop
 800b476:	e000      	b.n	800b47a <HAL_UART_IRQHandler+0x5aa>
    return;
 800b478:	bf00      	nop
  }
}
 800b47a:	37b8      	adds	r7, #184	@ 0xb8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4c0:	b094      	sub	sp, #80	@ 0x50
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	4b7e      	ldr	r3, [pc, #504]	@ (800b6cc <UART_SetConfig+0x210>)
 800b4d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d6:	689a      	ldr	r2, [r3, #8]
 800b4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4977      	ldr	r1, [pc, #476]	@ (800b6d0 <UART_SetConfig+0x214>)
 800b4f4:	4019      	ands	r1, r3
 800b4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50c:	68d9      	ldr	r1, [r3, #12]
 800b50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	ea40 0301 	orr.w	r3, r0, r1
 800b516:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	4b6a      	ldr	r3, [pc, #424]	@ (800b6cc <UART_SetConfig+0x210>)
 800b524:	429a      	cmp	r2, r3
 800b526:	d009      	beq.n	800b53c <UART_SetConfig+0x80>
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	4b69      	ldr	r3, [pc, #420]	@ (800b6d4 <UART_SetConfig+0x218>)
 800b52e:	429a      	cmp	r2, r3
 800b530:	d004      	beq.n	800b53c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	6a1a      	ldr	r2, [r3, #32]
 800b536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b538:	4313      	orrs	r3, r2
 800b53a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b546:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b550:	430b      	orrs	r3, r1
 800b552:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55a:	f023 000f 	bic.w	r0, r3, #15
 800b55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b560:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	ea40 0301 	orr.w	r3, r0, r1
 800b56a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	4b59      	ldr	r3, [pc, #356]	@ (800b6d8 <UART_SetConfig+0x21c>)
 800b572:	429a      	cmp	r2, r3
 800b574:	d102      	bne.n	800b57c <UART_SetConfig+0xc0>
 800b576:	2301      	movs	r3, #1
 800b578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b57a:	e029      	b.n	800b5d0 <UART_SetConfig+0x114>
 800b57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	4b56      	ldr	r3, [pc, #344]	@ (800b6dc <UART_SetConfig+0x220>)
 800b582:	429a      	cmp	r2, r3
 800b584:	d102      	bne.n	800b58c <UART_SetConfig+0xd0>
 800b586:	2302      	movs	r3, #2
 800b588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b58a:	e021      	b.n	800b5d0 <UART_SetConfig+0x114>
 800b58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	4b53      	ldr	r3, [pc, #332]	@ (800b6e0 <UART_SetConfig+0x224>)
 800b592:	429a      	cmp	r2, r3
 800b594:	d102      	bne.n	800b59c <UART_SetConfig+0xe0>
 800b596:	2304      	movs	r3, #4
 800b598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b59a:	e019      	b.n	800b5d0 <UART_SetConfig+0x114>
 800b59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	4b50      	ldr	r3, [pc, #320]	@ (800b6e4 <UART_SetConfig+0x228>)
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d102      	bne.n	800b5ac <UART_SetConfig+0xf0>
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5aa:	e011      	b.n	800b5d0 <UART_SetConfig+0x114>
 800b5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	4b4d      	ldr	r3, [pc, #308]	@ (800b6e8 <UART_SetConfig+0x22c>)
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d102      	bne.n	800b5bc <UART_SetConfig+0x100>
 800b5b6:	2310      	movs	r3, #16
 800b5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ba:	e009      	b.n	800b5d0 <UART_SetConfig+0x114>
 800b5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	4b42      	ldr	r3, [pc, #264]	@ (800b6cc <UART_SetConfig+0x210>)
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d102      	bne.n	800b5cc <UART_SetConfig+0x110>
 800b5c6:	2320      	movs	r3, #32
 800b5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ca:	e001      	b.n	800b5d0 <UART_SetConfig+0x114>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	4b3d      	ldr	r3, [pc, #244]	@ (800b6cc <UART_SetConfig+0x210>)
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d005      	beq.n	800b5e6 <UART_SetConfig+0x12a>
 800b5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5dc:	681a      	ldr	r2, [r3, #0]
 800b5de:	4b3d      	ldr	r3, [pc, #244]	@ (800b6d4 <UART_SetConfig+0x218>)
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	f040 8085 	bne.w	800b6f0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b5e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	623b      	str	r3, [r7, #32]
 800b5ec:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b5f2:	f7fd f9e3 	bl	80089bc <HAL_RCCEx_GetPeriphCLKFreq>
 800b5f6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 80e8 	beq.w	800b7d0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b604:	4a39      	ldr	r2, [pc, #228]	@ (800b6ec <UART_SetConfig+0x230>)
 800b606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b60a:	461a      	mov	r2, r3
 800b60c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b60e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b612:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	4613      	mov	r3, r2
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	4413      	add	r3, r2
 800b61e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b620:	429a      	cmp	r2, r3
 800b622:	d305      	bcc.n	800b630 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b62a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d903      	bls.n	800b638 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b636:	e048      	b.n	800b6ca <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b63a:	2200      	movs	r2, #0
 800b63c:	61bb      	str	r3, [r7, #24]
 800b63e:	61fa      	str	r2, [r7, #28]
 800b640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b644:	4a29      	ldr	r2, [pc, #164]	@ (800b6ec <UART_SetConfig+0x230>)
 800b646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	2200      	movs	r2, #0
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	617a      	str	r2, [r7, #20]
 800b652:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b65a:	f7f5 fa2b 	bl	8000ab4 <__aeabi_uldivmod>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4610      	mov	r0, r2
 800b664:	4619      	mov	r1, r3
 800b666:	f04f 0200 	mov.w	r2, #0
 800b66a:	f04f 0300 	mov.w	r3, #0
 800b66e:	020b      	lsls	r3, r1, #8
 800b670:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b674:	0202      	lsls	r2, r0, #8
 800b676:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b678:	6849      	ldr	r1, [r1, #4]
 800b67a:	0849      	lsrs	r1, r1, #1
 800b67c:	2000      	movs	r0, #0
 800b67e:	460c      	mov	r4, r1
 800b680:	4605      	mov	r5, r0
 800b682:	eb12 0804 	adds.w	r8, r2, r4
 800b686:	eb43 0905 	adc.w	r9, r3, r5
 800b68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	60bb      	str	r3, [r7, #8]
 800b692:	60fa      	str	r2, [r7, #12]
 800b694:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b698:	4640      	mov	r0, r8
 800b69a:	4649      	mov	r1, r9
 800b69c:	f7f5 fa0a 	bl	8000ab4 <__aeabi_uldivmod>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6ae:	d308      	bcc.n	800b6c2 <UART_SetConfig+0x206>
 800b6b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6b6:	d204      	bcs.n	800b6c2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b6be:	60da      	str	r2, [r3, #12]
 800b6c0:	e003      	b.n	800b6ca <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b6c8:	e082      	b.n	800b7d0 <UART_SetConfig+0x314>
 800b6ca:	e081      	b.n	800b7d0 <UART_SetConfig+0x314>
 800b6cc:	46002400 	.word	0x46002400
 800b6d0:	cfff69f3 	.word	0xcfff69f3
 800b6d4:	56002400 	.word	0x56002400
 800b6d8:	40013800 	.word	0x40013800
 800b6dc:	40004400 	.word	0x40004400
 800b6e0:	40004800 	.word	0x40004800
 800b6e4:	40004c00 	.word	0x40004c00
 800b6e8:	40005000 	.word	0x40005000
 800b6ec:	0800cf60 	.word	0x0800cf60
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6f8:	d13c      	bne.n	800b774 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b6fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b706:	f7fd f959 	bl	80089bc <HAL_RCCEx_GetPeriphCLKFreq>
 800b70a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b70c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d05e      	beq.n	800b7d0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b716:	4a39      	ldr	r2, [pc, #228]	@ (800b7fc <UART_SetConfig+0x340>)
 800b718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b71c:	461a      	mov	r2, r3
 800b71e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b720:	fbb3 f3f2 	udiv	r3, r3, r2
 800b724:	005a      	lsls	r2, r3, #1
 800b726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	441a      	add	r2, r3
 800b72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	fbb2 f3f3 	udiv	r3, r2, r3
 800b736:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b73a:	2b0f      	cmp	r3, #15
 800b73c:	d916      	bls.n	800b76c <UART_SetConfig+0x2b0>
 800b73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b744:	d212      	bcs.n	800b76c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b748:	b29b      	uxth	r3, r3
 800b74a:	f023 030f 	bic.w	r3, r3, #15
 800b74e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	b29b      	uxth	r3, r3
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b75e:	4313      	orrs	r3, r2
 800b760:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b768:	60da      	str	r2, [r3, #12]
 800b76a:	e031      	b.n	800b7d0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b772:	e02d      	b.n	800b7d0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b776:	2200      	movs	r2, #0
 800b778:	469a      	mov	sl, r3
 800b77a:	4693      	mov	fp, r2
 800b77c:	4650      	mov	r0, sl
 800b77e:	4659      	mov	r1, fp
 800b780:	f7fd f91c 	bl	80089bc <HAL_RCCEx_GetPeriphCLKFreq>
 800b784:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d021      	beq.n	800b7d0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b790:	4a1a      	ldr	r2, [pc, #104]	@ (800b7fc <UART_SetConfig+0x340>)
 800b792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b796:	461a      	mov	r2, r3
 800b798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b79a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	085b      	lsrs	r3, r3, #1
 800b7a4:	441a      	add	r2, r3
 800b7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b2:	2b0f      	cmp	r3, #15
 800b7b4:	d909      	bls.n	800b7ca <UART_SetConfig+0x30e>
 800b7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7bc:	d205      	bcs.n	800b7ca <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	60da      	str	r2, [r3, #12]
 800b7c8:	e002      	b.n	800b7d0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b7ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3750      	adds	r7, #80	@ 0x50
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7fa:	bf00      	nop
 800b7fc:	0800cf60 	.word	0x0800cf60

0800b800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80c:	f003 0308 	and.w	r3, r3, #8
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00a      	beq.n	800b82a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00a      	beq.n	800b84c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00a      	beq.n	800b86e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b872:	f003 0304 	and.w	r3, r3, #4
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00a      	beq.n	800b890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	430a      	orrs	r2, r1
 800b88e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b894:	f003 0310 	and.w	r3, r3, #16
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00a      	beq.n	800b8b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	430a      	orrs	r2, r1
 800b8b0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	430a      	orrs	r2, r1
 800b8d2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d01a      	beq.n	800b916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8fe:	d10a      	bne.n	800b916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00a      	beq.n	800b938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	605a      	str	r2, [r3, #4]
  }
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b098      	sub	sp, #96	@ 0x60
 800b948:	af02      	add	r7, sp, #8
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b954:	f7f7 fa96 	bl	8002e84 <HAL_GetTick>
 800b958:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 0308 	and.w	r3, r3, #8
 800b964:	2b08      	cmp	r3, #8
 800b966:	d12f      	bne.n	800b9c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b968:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b970:	2200      	movs	r2, #0
 800b972:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f88e 	bl	800ba98 <UART_WaitOnFlagUntilTimeout>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d022      	beq.n	800b9c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98a:	e853 3f00 	ldrex	r3, [r3]
 800b98e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b996:	653b      	str	r3, [r7, #80]	@ 0x50
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	461a      	mov	r2, r3
 800b99e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9a8:	e841 2300 	strex	r3, r2, [r1]
 800b9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e6      	bne.n	800b982 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	e063      	b.n	800ba90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0304 	and.w	r3, r3, #4
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d149      	bne.n	800ba6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f857 	bl	800ba98 <UART_WaitOnFlagUntilTimeout>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d03c      	beq.n	800ba6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	e853 3f00 	ldrex	r3, [r3]
 800b9fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba16:	e841 2300 	strex	r3, r2, [r1]
 800ba1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1e6      	bne.n	800b9f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	3308      	adds	r3, #8
 800ba28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f023 0301 	bic.w	r3, r3, #1
 800ba38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	3308      	adds	r3, #8
 800ba40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba42:	61fa      	str	r2, [r7, #28]
 800ba44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba46:	69b9      	ldr	r1, [r7, #24]
 800ba48:	69fa      	ldr	r2, [r7, #28]
 800ba4a:	e841 2300 	strex	r3, r2, [r1]
 800ba4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1e5      	bne.n	800ba22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba66:	2303      	movs	r3, #3
 800ba68:	e012      	b.n	800ba90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2220      	movs	r2, #32
 800ba76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3758      	adds	r7, #88	@ 0x58
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	4613      	mov	r3, r2
 800baa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa8:	e04f      	b.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab0:	d04b      	beq.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bab2:	f7f7 f9e7 	bl	8002e84 <HAL_GetTick>
 800bab6:	4602      	mov	r2, r0
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d302      	bcc.n	800bac8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e04e      	b.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0304 	and.w	r3, r3, #4
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d037      	beq.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b80      	cmp	r3, #128	@ 0x80
 800bade:	d034      	beq.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb2>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b40      	cmp	r3, #64	@ 0x40
 800bae4:	d031      	beq.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	f003 0308 	and.w	r3, r3, #8
 800baf0:	2b08      	cmp	r3, #8
 800baf2:	d110      	bne.n	800bb16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2208      	movs	r2, #8
 800bafa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 f95b 	bl	800bdb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2208      	movs	r2, #8
 800bb06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e029      	b.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb24:	d111      	bne.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 f941 	bl	800bdb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e00f      	b.n	800bb6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	69da      	ldr	r2, [r3, #28]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	4013      	ands	r3, r2
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	bf0c      	ite	eq
 800bb5a:	2301      	moveq	r3, #1
 800bb5c:	2300      	movne	r3, #0
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	461a      	mov	r2, r3
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d0a0      	beq.n	800baaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b0a3      	sub	sp, #140	@ 0x8c
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	88fa      	ldrh	r2, [r7, #6]
 800bb8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	88fa      	ldrh	r2, [r7, #6]
 800bb94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bba6:	d10e      	bne.n	800bbc6 <UART_Start_Receive_IT+0x52>
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d105      	bne.n	800bbbc <UART_Start_Receive_IT+0x48>
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bbb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bbba:	e02d      	b.n	800bc18 <UART_Start_Receive_IT+0xa4>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	22ff      	movs	r2, #255	@ 0xff
 800bbc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bbc4:	e028      	b.n	800bc18 <UART_Start_Receive_IT+0xa4>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10d      	bne.n	800bbea <UART_Start_Receive_IT+0x76>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d104      	bne.n	800bbe0 <UART_Start_Receive_IT+0x6c>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	22ff      	movs	r2, #255	@ 0xff
 800bbda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bbde:	e01b      	b.n	800bc18 <UART_Start_Receive_IT+0xa4>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	227f      	movs	r2, #127	@ 0x7f
 800bbe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bbe8:	e016      	b.n	800bc18 <UART_Start_Receive_IT+0xa4>
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbf2:	d10d      	bne.n	800bc10 <UART_Start_Receive_IT+0x9c>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d104      	bne.n	800bc06 <UART_Start_Receive_IT+0x92>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	227f      	movs	r2, #127	@ 0x7f
 800bc00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc04:	e008      	b.n	800bc18 <UART_Start_Receive_IT+0xa4>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	223f      	movs	r2, #63	@ 0x3f
 800bc0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc0e:	e003      	b.n	800bc18 <UART_Start_Receive_IT+0xa4>
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2222      	movs	r2, #34	@ 0x22
 800bc24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bc38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc3a:	f043 0301 	orr.w	r3, r3, #1
 800bc3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3308      	adds	r3, #8
 800bc48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bc4c:	673a      	str	r2, [r7, #112]	@ 0x70
 800bc4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc50:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bc52:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bc54:	e841 2300 	strex	r3, r2, [r1]
 800bc58:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800bc5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e3      	bne.n	800bc28 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc68:	d14f      	bne.n	800bd0a <UART_Start_Receive_IT+0x196>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bc70:	88fa      	ldrh	r2, [r7, #6]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d349      	bcc.n	800bd0a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc7e:	d107      	bne.n	800bc90 <UART_Start_Receive_IT+0x11c>
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4a47      	ldr	r2, [pc, #284]	@ (800bda8 <UART_Start_Receive_IT+0x234>)
 800bc8c:	675a      	str	r2, [r3, #116]	@ 0x74
 800bc8e:	e002      	b.n	800bc96 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4a46      	ldr	r2, [pc, #280]	@ (800bdac <UART_Start_Receive_IT+0x238>)
 800bc94:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01a      	beq.n	800bcd4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bca6:	e853 3f00 	ldrex	r3, [r3]
 800bcaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bcac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	461a      	mov	r2, r3
 800bcbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bcc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bcc2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bcc6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bcce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e4      	bne.n	800bc9e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	3308      	adds	r3, #8
 800bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcde:	e853 3f00 	ldrex	r3, [r3]
 800bce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bcf4:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bcf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bcfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bcfc:	e841 2300 	strex	r3, r2, [r1]
 800bd00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bd02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1e5      	bne.n	800bcd4 <UART_Start_Receive_IT+0x160>
 800bd08:	e046      	b.n	800bd98 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd12:	d107      	bne.n	800bd24 <UART_Start_Receive_IT+0x1b0>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d103      	bne.n	800bd24 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4a24      	ldr	r2, [pc, #144]	@ (800bdb0 <UART_Start_Receive_IT+0x23c>)
 800bd20:	675a      	str	r2, [r3, #116]	@ 0x74
 800bd22:	e002      	b.n	800bd2a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4a23      	ldr	r2, [pc, #140]	@ (800bdb4 <UART_Start_Receive_IT+0x240>)
 800bd28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d019      	beq.n	800bd66 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd42:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bd46:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd52:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e6      	bne.n	800bd32 <UART_Start_Receive_IT+0x1be>
 800bd64:	e018      	b.n	800bd98 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	e853 3f00 	ldrex	r3, [r3]
 800bd72:	613b      	str	r3, [r7, #16]
   return(result);
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f043 0320 	orr.w	r3, r3, #32
 800bd7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd84:	623b      	str	r3, [r7, #32]
 800bd86:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	69f9      	ldr	r1, [r7, #28]
 800bd8a:	6a3a      	ldr	r2, [r7, #32]
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e6      	bne.n	800bd66 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	378c      	adds	r7, #140	@ 0x8c
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
 800bda6:	bf00      	nop
 800bda8:	0800c5f9 	.word	0x0800c5f9
 800bdac:	0800c289 	.word	0x0800c289
 800bdb0:	0800c0c5 	.word	0x0800c0c5
 800bdb4:	0800bf01 	.word	0x0800bf01

0800bdb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b095      	sub	sp, #84	@ 0x54
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bdd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdde:	643b      	str	r3, [r7, #64]	@ 0x40
 800bde0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bde4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e6      	bne.n	800bdc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	61fb      	str	r3, [r7, #28]
   return(result);
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e3      	bne.n	800bdf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d118      	bne.n	800be64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f023 0310 	bic.w	r3, r3, #16
 800be46:	647b      	str	r3, [r7, #68]	@ 0x44
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be50:	61bb      	str	r3, [r7, #24]
 800be52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	6979      	ldr	r1, [r7, #20]
 800be56:	69ba      	ldr	r2, [r7, #24]
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	613b      	str	r3, [r7, #16]
   return(result);
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e6      	bne.n	800be32 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800be78:	bf00      	nop
 800be7a:	3754      	adds	r7, #84	@ 0x54
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fb04 	bl	800b4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bea0:	bf00      	nop
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bec4:	61fb      	str	r3, [r7, #28]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	61bb      	str	r3, [r7, #24]
 800bed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed2:	6979      	ldr	r1, [r7, #20]
 800bed4:	69ba      	ldr	r2, [r7, #24]
 800bed6:	e841 2300 	strex	r3, r2, [r1]
 800beda:	613b      	str	r3, [r7, #16]
   return(result);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1e6      	bne.n	800beb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2220      	movs	r2, #32
 800bee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f7ff fac5 	bl	800b480 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bef6:	bf00      	nop
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
	...

0800bf00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b09c      	sub	sp, #112	@ 0x70
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bf0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf18:	2b22      	cmp	r3, #34	@ 0x22
 800bf1a:	f040 80c3 	bne.w	800c0a4 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf2c:	b2d9      	uxtb	r1, r3
 800bf2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf38:	400a      	ands	r2, r1
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	3b01      	subs	r3, #1
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f040 80a6 	bne.w	800c0b4 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf70:	e853 3f00 	ldrex	r3, [r3]
 800bf74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	461a      	mov	r2, r3
 800bf84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e6      	bne.n	800bf68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa4:	e853 3f00 	ldrex	r3, [r3]
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfac:	f023 0301 	bic.w	r3, r3, #1
 800bfb0:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3308      	adds	r3, #8
 800bfb8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bfba:	647a      	str	r2, [r7, #68]	@ 0x44
 800bfbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfc2:	e841 2300 	strex	r3, r2, [r1]
 800bfc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1e5      	bne.n	800bf9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2220      	movs	r2, #32
 800bfd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a35      	ldr	r2, [pc, #212]	@ (800c0bc <UART_RxISR_8BIT+0x1bc>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d024      	beq.n	800c036 <UART_RxISR_8BIT+0x136>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a33      	ldr	r2, [pc, #204]	@ (800c0c0 <UART_RxISR_8BIT+0x1c0>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d01f      	beq.n	800c036 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d018      	beq.n	800c036 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	623b      	str	r3, [r7, #32]
   return(result);
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c018:	663b      	str	r3, [r7, #96]	@ 0x60
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c022:	633b      	str	r3, [r7, #48]	@ 0x30
 800c024:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c02a:	e841 2300 	strex	r3, r2, [r1]
 800c02e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1e6      	bne.n	800c004 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d12e      	bne.n	800c09c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	e853 3f00 	ldrex	r3, [r3]
 800c050:	60fb      	str	r3, [r7, #12]
   return(result);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f023 0310 	bic.w	r3, r3, #16
 800c058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	461a      	mov	r2, r3
 800c060:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c062:	61fb      	str	r3, [r7, #28]
 800c064:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c066:	69b9      	ldr	r1, [r7, #24]
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	617b      	str	r3, [r7, #20]
   return(result);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e6      	bne.n	800c044 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69db      	ldr	r3, [r3, #28]
 800c07c:	f003 0310 	and.w	r3, r3, #16
 800c080:	2b10      	cmp	r3, #16
 800c082:	d103      	bne.n	800c08c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2210      	movs	r2, #16
 800c08a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7f6 fce9 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c09a:	e00b      	b.n	800c0b4 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff f9f9 	bl	800b494 <HAL_UART_RxCpltCallback>
}
 800c0a2:	e007      	b.n	800c0b4 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	699a      	ldr	r2, [r3, #24]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f042 0208 	orr.w	r2, r2, #8
 800c0b2:	619a      	str	r2, [r3, #24]
}
 800c0b4:	bf00      	nop
 800c0b6:	3770      	adds	r7, #112	@ 0x70
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	46002400 	.word	0x46002400
 800c0c0:	56002400 	.word	0x56002400

0800c0c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b09c      	sub	sp, #112	@ 0x70
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c0d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0dc:	2b22      	cmp	r3, #34	@ 0x22
 800c0de:	f040 80c3 	bne.w	800c268 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c0f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c0f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	b29a      	uxth	r2, r3
 800c0fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c100:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c106:	1c9a      	adds	r2, r3, #2
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c112:	b29b      	uxth	r3, r3
 800c114:	3b01      	subs	r3, #1
 800c116:	b29a      	uxth	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c124:	b29b      	uxth	r3, r3
 800c126:	2b00      	cmp	r3, #0
 800c128:	f040 80a6 	bne.w	800c278 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c134:	e853 3f00 	ldrex	r3, [r3]
 800c138:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c13a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c13c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c140:	667b      	str	r3, [r7, #100]	@ 0x64
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c14a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c14c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c150:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c152:	e841 2300 	strex	r3, r2, [r1]
 800c156:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1e6      	bne.n	800c12c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3308      	adds	r3, #8
 800c164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c170:	f023 0301 	bic.w	r3, r3, #1
 800c174:	663b      	str	r3, [r7, #96]	@ 0x60
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c17e:	643a      	str	r2, [r7, #64]	@ 0x40
 800c180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c186:	e841 2300 	strex	r3, r2, [r1]
 800c18a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1e5      	bne.n	800c15e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2220      	movs	r2, #32
 800c196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a35      	ldr	r2, [pc, #212]	@ (800c280 <UART_RxISR_16BIT+0x1bc>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d024      	beq.n	800c1fa <UART_RxISR_16BIT+0x136>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a33      	ldr	r2, [pc, #204]	@ (800c284 <UART_RxISR_16BIT+0x1c0>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d01f      	beq.n	800c1fa <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d018      	beq.n	800c1fa <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	e853 3f00 	ldrex	r3, [r3]
 800c1d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c1dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c1ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1ee:	e841 2300 	strex	r3, r2, [r1]
 800c1f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e6      	bne.n	800c1c8 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d12e      	bne.n	800c260 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	e853 3f00 	ldrex	r3, [r3]
 800c214:	60bb      	str	r3, [r7, #8]
   return(result);
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	f023 0310 	bic.w	r3, r3, #16
 800c21c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c226:	61bb      	str	r3, [r7, #24]
 800c228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22a:	6979      	ldr	r1, [r7, #20]
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	e841 2300 	strex	r3, r2, [r1]
 800c232:	613b      	str	r3, [r7, #16]
   return(result);
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e6      	bne.n	800c208 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	69db      	ldr	r3, [r3, #28]
 800c240:	f003 0310 	and.w	r3, r3, #16
 800c244:	2b10      	cmp	r3, #16
 800c246:	d103      	bne.n	800c250 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2210      	movs	r2, #16
 800c24e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7f6 fc07 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c25e:	e00b      	b.n	800c278 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff f917 	bl	800b494 <HAL_UART_RxCpltCallback>
}
 800c266:	e007      	b.n	800c278 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	699a      	ldr	r2, [r3, #24]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f042 0208 	orr.w	r2, r2, #8
 800c276:	619a      	str	r2, [r3, #24]
}
 800c278:	bf00      	nop
 800c27a:	3770      	adds	r7, #112	@ 0x70
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	46002400 	.word	0x46002400
 800c284:	56002400 	.word	0x56002400

0800c288 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b0ac      	sub	sp, #176	@ 0xb0
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c296:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2be:	2b22      	cmp	r3, #34	@ 0x22
 800c2c0:	f040 8188 	bne.w	800c5d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c2ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c2ce:	e12b      	b.n	800c528 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c2da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c2de:	b2d9      	uxtb	r1, r3
 800c2e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2ea:	400a      	ands	r2, r1
 800c2ec:	b2d2      	uxtb	r2, r2
 800c2ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2f4:	1c5a      	adds	r2, r3, #1
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c300:	b29b      	uxth	r3, r3
 800c302:	3b01      	subs	r3, #1
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c31a:	f003 0307 	and.w	r3, r3, #7
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d053      	beq.n	800c3ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d011      	beq.n	800c352 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c32e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00b      	beq.n	800c352 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2201      	movs	r2, #1
 800c340:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c348:	f043 0201 	orr.w	r2, r3, #1
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d011      	beq.n	800c382 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c35e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00b      	beq.n	800c382 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2202      	movs	r2, #2
 800c370:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c378:	f043 0204 	orr.w	r2, r3, #4
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c382:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c386:	f003 0304 	and.w	r3, r3, #4
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d011      	beq.n	800c3b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c38e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00b      	beq.n	800c3b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2204      	movs	r2, #4
 800c3a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3a8:	f043 0202 	orr.w	r2, r3, #2
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d006      	beq.n	800c3ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7ff f873 	bl	800b4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f040 80a8 	bne.w	800c528 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c3fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c3fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c400:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e4      	bne.n	800c3d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c41e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c424:	f023 0301 	bic.w	r3, r3, #1
 800c428:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3308      	adds	r3, #8
 800c432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c436:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c438:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c43c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e1      	bne.n	800c40e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2220      	movs	r2, #32
 800c44e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a62      	ldr	r2, [pc, #392]	@ (800c5ec <UART_RxISR_8BIT_FIFOEN+0x364>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d026      	beq.n	800c4b6 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a60      	ldr	r2, [pc, #384]	@ (800c5f0 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d021      	beq.n	800c4b6 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d01a      	beq.n	800c4b6 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c488:	e853 3f00 	ldrex	r3, [r3]
 800c48c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c490:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c494:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	461a      	mov	r2, r3
 800c49e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c4a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4a4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4aa:	e841 2300 	strex	r3, r2, [r1]
 800c4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1e4      	bne.n	800c480 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d130      	bne.n	800c520 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4cc:	e853 3f00 	ldrex	r3, [r3]
 800c4d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d4:	f023 0310 	bic.w	r3, r3, #16
 800c4d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c4e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4ee:	e841 2300 	strex	r3, r2, [r1]
 800c4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1e4      	bne.n	800c4c4 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	f003 0310 	and.w	r3, r3, #16
 800c504:	2b10      	cmp	r3, #16
 800c506:	d103      	bne.n	800c510 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2210      	movs	r2, #16
 800c50e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7f6 faa7 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c51e:	e00e      	b.n	800c53e <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7fe ffb7 	bl	800b494 <HAL_UART_RxCpltCallback>
        break;
 800c526:	e00a      	b.n	800c53e <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c528:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d006      	beq.n	800c53e <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800c530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c534:	f003 0320 	and.w	r3, r3, #32
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f47f aec9 	bne.w	800c2d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c544:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c548:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d049      	beq.n	800c5e4 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c556:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d242      	bcs.n	800c5e4 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3308      	adds	r3, #8
 800c564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3308      	adds	r3, #8
 800c57e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c582:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c584:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c586:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c58a:	e841 2300 	strex	r3, r2, [r1]
 800c58e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1e3      	bne.n	800c55e <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a16      	ldr	r2, [pc, #88]	@ (800c5f4 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800c59a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f043 0320 	orr.w	r3, r3, #32
 800c5b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c5be:	61bb      	str	r3, [r7, #24]
 800c5c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c2:	6979      	ldr	r1, [r7, #20]
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	e841 2300 	strex	r3, r2, [r1]
 800c5ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1e4      	bne.n	800c59c <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5d2:	e007      	b.n	800c5e4 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	699a      	ldr	r2, [r3, #24]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f042 0208 	orr.w	r2, r2, #8
 800c5e2:	619a      	str	r2, [r3, #24]
}
 800c5e4:	bf00      	nop
 800c5e6:	37b0      	adds	r7, #176	@ 0xb0
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	46002400 	.word	0x46002400
 800c5f0:	56002400 	.word	0x56002400
 800c5f4:	0800bf01 	.word	0x0800bf01

0800c5f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b0ae      	sub	sp, #184	@ 0xb8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c606:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c62e:	2b22      	cmp	r3, #34	@ 0x22
 800c630:	f040 818c 	bne.w	800c94c <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c63a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c63e:	e12f      	b.n	800c8a0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c646:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c64e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c652:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c656:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c65a:	4013      	ands	r3, r2
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c662:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c668:	1c9a      	adds	r2, r3, #2
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c674:	b29b      	uxth	r3, r3
 800c676:	3b01      	subs	r3, #1
 800c678:	b29a      	uxth	r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c68a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	2b00      	cmp	r3, #0
 800c694:	d053      	beq.n	800c73e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c696:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c69a:	f003 0301 	and.w	r3, r3, #1
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d011      	beq.n	800c6c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c6a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6bc:	f043 0201 	orr.w	r2, r3, #1
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d011      	beq.n	800c6f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c6d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6ec:	f043 0204 	orr.w	r2, r3, #4
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c6fa:	f003 0304 	and.w	r3, r3, #4
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d011      	beq.n	800c726 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00b      	beq.n	800c726 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2204      	movs	r2, #4
 800c714:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c71c:	f043 0202 	orr.w	r2, r3, #2
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d006      	beq.n	800c73e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7fe feb9 	bl	800b4a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c744:	b29b      	uxth	r3, r3
 800c746:	2b00      	cmp	r3, #0
 800c748:	f040 80aa 	bne.w	800c8a0 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c754:	e853 3f00 	ldrex	r3, [r3]
 800c758:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c75a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c75c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	461a      	mov	r2, r3
 800c76a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c76e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c772:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c776:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c77a:	e841 2300 	strex	r3, r2, [r1]
 800c77e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c780:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1e2      	bne.n	800c74c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3308      	adds	r3, #8
 800c78c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c79c:	f023 0301 	bic.w	r3, r3, #1
 800c7a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c7ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7b6:	e841 2300 	strex	r3, r2, [r1]
 800c7ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1e1      	bne.n	800c786 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a62      	ldr	r2, [pc, #392]	@ (800c964 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d026      	beq.n	800c82e <UART_RxISR_16BIT_FIFOEN+0x236>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a60      	ldr	r2, [pc, #384]	@ (800c968 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d021      	beq.n	800c82e <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01a      	beq.n	800c82e <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c800:	e853 3f00 	ldrex	r3, [r3]
 800c804:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c808:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c80c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	461a      	mov	r2, r3
 800c816:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c81a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c81c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c820:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c822:	e841 2300 	strex	r3, r2, [r1]
 800c826:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1e4      	bne.n	800c7f8 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c832:	2b01      	cmp	r3, #1
 800c834:	d130      	bne.n	800c898 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c844:	e853 3f00 	ldrex	r3, [r3]
 800c848:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c84c:	f023 0310 	bic.w	r3, r3, #16
 800c850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	461a      	mov	r2, r3
 800c85a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c85e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c860:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c862:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c866:	e841 2300 	strex	r3, r2, [r1]
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1e4      	bne.n	800c83c <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	f003 0310 	and.w	r3, r3, #16
 800c87c:	2b10      	cmp	r3, #16
 800c87e:	d103      	bne.n	800c888 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2210      	movs	r2, #16
 800c886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c88e:	4619      	mov	r1, r3
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7f6 f8eb 	bl	8002a6c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c896:	e00e      	b.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7fe fdfb 	bl	800b494 <HAL_UART_RxCpltCallback>
        break;
 800c89e:	e00a      	b.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8a0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d006      	beq.n	800c8b6 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800c8a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c8ac:	f003 0320 	and.w	r3, r3, #32
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f47f aec5 	bne.w	800c640 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8bc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8c0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d049      	beq.n	800c95c <UART_RxISR_16BIT_FIFOEN+0x364>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c8ce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d242      	bcs.n	800c95c <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3308      	adds	r3, #8
 800c8dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e0:	e853 3f00 	ldrex	r3, [r3]
 800c8e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c8e6:	6a3b      	ldr	r3, [r7, #32]
 800c8e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c8fa:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e3      	bne.n	800c8d6 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a16      	ldr	r2, [pc, #88]	@ (800c96c <UART_RxISR_16BIT_FIFOEN+0x374>)
 800c912:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	60fb      	str	r3, [r7, #12]
   return(result);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f043 0320 	orr.w	r3, r3, #32
 800c928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	461a      	mov	r2, r3
 800c932:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c936:	61fb      	str	r3, [r7, #28]
 800c938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	69b9      	ldr	r1, [r7, #24]
 800c93c:	69fa      	ldr	r2, [r7, #28]
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	617b      	str	r3, [r7, #20]
   return(result);
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e4      	bne.n	800c914 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c94a:	e007      	b.n	800c95c <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	699a      	ldr	r2, [r3, #24]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f042 0208 	orr.w	r2, r2, #8
 800c95a:	619a      	str	r2, [r3, #24]
}
 800c95c:	bf00      	nop
 800c95e:	37b8      	adds	r7, #184	@ 0xb8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	46002400 	.word	0x46002400
 800c968:	56002400 	.word	0x56002400
 800c96c:	0800c0c5 	.word	0x0800c0c5

0800c970 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c98c:	bf00      	nop
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d101      	bne.n	800c9ae <HAL_UARTEx_DisableFifoMode+0x16>
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	e027      	b.n	800c9fe <HAL_UARTEx_DisableFifoMode+0x66>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2224      	movs	r2, #36	@ 0x24
 800c9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f022 0201 	bic.w	r2, r2, #1
 800c9d4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c9dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3714      	adds	r7, #20
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr

0800ca0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d101      	bne.n	800ca22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca1e:	2302      	movs	r3, #2
 800ca20:	e02d      	b.n	800ca7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2224      	movs	r2, #36	@ 0x24
 800ca2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f022 0201 	bic.w	r2, r2, #1
 800ca48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	683a      	ldr	r2, [r7, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f8ae 	bl	800cbc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2220      	movs	r2, #32
 800ca70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d101      	bne.n	800ca9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca9a:	2302      	movs	r3, #2
 800ca9c:	e02d      	b.n	800cafa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2224      	movs	r2, #36	@ 0x24
 800caaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f022 0201 	bic.w	r2, r2, #1
 800cac4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	430a      	orrs	r2, r1
 800cad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f870 	bl	800cbc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2220      	movs	r2, #32
 800caec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b08c      	sub	sp, #48	@ 0x30
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb1c:	2b20      	cmp	r3, #32
 800cb1e:	d14a      	bne.n	800cbb6 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e043      	b.n	800cbb8 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb3a:	2b40      	cmp	r3, #64	@ 0x40
 800cb3c:	d107      	bne.n	800cb4e <HAL_UARTEx_ReceiveToIdle_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689a      	ldr	r2, [r3, #8]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb4c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2201      	movs	r2, #1
 800cb52:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800cb5a:	88fb      	ldrh	r3, [r7, #6]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	68b9      	ldr	r1, [r7, #8]
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f7ff f807 	bl	800bb74 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d11d      	bne.n	800cbaa <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2210      	movs	r2, #16
 800cb74:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7c:	69bb      	ldr	r3, [r7, #24]
 800cb7e:	e853 3f00 	ldrex	r3, [r3]
 800cb82:	617b      	str	r3, [r7, #20]
   return(result);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	f043 0310 	orr.w	r3, r3, #16
 800cb8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	461a      	mov	r2, r3
 800cb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb96:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb98:	6a39      	ldr	r1, [r7, #32]
 800cb9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb9c:	e841 2300 	strex	r3, r2, [r1]
 800cba0:	61fb      	str	r3, [r7, #28]
   return(result);
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e6      	bne.n	800cb76 <HAL_UARTEx_ReceiveToIdle_IT+0x74>
 800cba8:	e002      	b.n	800cbb0 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800cbb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbb4:	e000      	b.n	800cbb8 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800cbb6:	2302      	movs	r3, #2
  }
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3730      	adds	r7, #48	@ 0x30
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b085      	sub	sp, #20
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d108      	bne.n	800cbe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cbe0:	e031      	b.n	800cc46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cbe2:	2308      	movs	r3, #8
 800cbe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cbe6:	2308      	movs	r3, #8
 800cbe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	0e5b      	lsrs	r3, r3, #25
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f003 0307 	and.w	r3, r3, #7
 800cbf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	0f5b      	lsrs	r3, r3, #29
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	f003 0307 	and.w	r3, r3, #7
 800cc08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc0a:	7bbb      	ldrb	r3, [r7, #14]
 800cc0c:	7b3a      	ldrb	r2, [r7, #12]
 800cc0e:	4911      	ldr	r1, [pc, #68]	@ (800cc54 <UARTEx_SetNbDataToProcess+0x94>)
 800cc10:	5c8a      	ldrb	r2, [r1, r2]
 800cc12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc16:	7b3a      	ldrb	r2, [r7, #12]
 800cc18:	490f      	ldr	r1, [pc, #60]	@ (800cc58 <UARTEx_SetNbDataToProcess+0x98>)
 800cc1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	7b7a      	ldrb	r2, [r7, #13]
 800cc2c:	4909      	ldr	r1, [pc, #36]	@ (800cc54 <UARTEx_SetNbDataToProcess+0x94>)
 800cc2e:	5c8a      	ldrb	r2, [r1, r2]
 800cc30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc34:	7b7a      	ldrb	r2, [r7, #13]
 800cc36:	4908      	ldr	r1, [pc, #32]	@ (800cc58 <UARTEx_SetNbDataToProcess+0x98>)
 800cc38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc46:	bf00      	nop
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop
 800cc54:	0800cf78 	.word	0x0800cf78
 800cc58:	0800cf80 	.word	0x0800cf80

0800cc5c <malloc>:
 800cc5c:	4b02      	ldr	r3, [pc, #8]	@ (800cc68 <malloc+0xc>)
 800cc5e:	4601      	mov	r1, r0
 800cc60:	6818      	ldr	r0, [r3, #0]
 800cc62:	f000 b825 	b.w	800ccb0 <_malloc_r>
 800cc66:	bf00      	nop
 800cc68:	2000000c 	.word	0x2000000c

0800cc6c <sbrk_aligned>:
 800cc6c:	b570      	push	{r4, r5, r6, lr}
 800cc6e:	4e0f      	ldr	r6, [pc, #60]	@ (800ccac <sbrk_aligned+0x40>)
 800cc70:	460c      	mov	r4, r1
 800cc72:	4605      	mov	r5, r0
 800cc74:	6831      	ldr	r1, [r6, #0]
 800cc76:	b911      	cbnz	r1, 800cc7e <sbrk_aligned+0x12>
 800cc78:	f000 f8ae 	bl	800cdd8 <_sbrk_r>
 800cc7c:	6030      	str	r0, [r6, #0]
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4628      	mov	r0, r5
 800cc82:	f000 f8a9 	bl	800cdd8 <_sbrk_r>
 800cc86:	1c43      	adds	r3, r0, #1
 800cc88:	d103      	bne.n	800cc92 <sbrk_aligned+0x26>
 800cc8a:	f04f 34ff 	mov.w	r4, #4294967295
 800cc8e:	4620      	mov	r0, r4
 800cc90:	bd70      	pop	{r4, r5, r6, pc}
 800cc92:	1cc4      	adds	r4, r0, #3
 800cc94:	f024 0403 	bic.w	r4, r4, #3
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d0f8      	beq.n	800cc8e <sbrk_aligned+0x22>
 800cc9c:	1a21      	subs	r1, r4, r0
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f000 f89a 	bl	800cdd8 <_sbrk_r>
 800cca4:	3001      	adds	r0, #1
 800cca6:	d1f2      	bne.n	800cc8e <sbrk_aligned+0x22>
 800cca8:	e7ef      	b.n	800cc8a <sbrk_aligned+0x1e>
 800ccaa:	bf00      	nop
 800ccac:	200002e8 	.word	0x200002e8

0800ccb0 <_malloc_r>:
 800ccb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb4:	1ccd      	adds	r5, r1, #3
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	f025 0503 	bic.w	r5, r5, #3
 800ccbc:	3508      	adds	r5, #8
 800ccbe:	2d0c      	cmp	r5, #12
 800ccc0:	bf38      	it	cc
 800ccc2:	250c      	movcc	r5, #12
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	db01      	blt.n	800cccc <_malloc_r+0x1c>
 800ccc8:	42a9      	cmp	r1, r5
 800ccca:	d904      	bls.n	800ccd6 <_malloc_r+0x26>
 800cccc:	230c      	movs	r3, #12
 800ccce:	6033      	str	r3, [r6, #0]
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdac <_malloc_r+0xfc>
 800ccda:	f000 f869 	bl	800cdb0 <__malloc_lock>
 800ccde:	f8d8 3000 	ldr.w	r3, [r8]
 800cce2:	461c      	mov	r4, r3
 800cce4:	bb44      	cbnz	r4, 800cd38 <_malloc_r+0x88>
 800cce6:	4629      	mov	r1, r5
 800cce8:	4630      	mov	r0, r6
 800ccea:	f7ff ffbf 	bl	800cc6c <sbrk_aligned>
 800ccee:	1c43      	adds	r3, r0, #1
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	d158      	bne.n	800cda6 <_malloc_r+0xf6>
 800ccf4:	f8d8 4000 	ldr.w	r4, [r8]
 800ccf8:	4627      	mov	r7, r4
 800ccfa:	2f00      	cmp	r7, #0
 800ccfc:	d143      	bne.n	800cd86 <_malloc_r+0xd6>
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	d04b      	beq.n	800cd9a <_malloc_r+0xea>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	4639      	mov	r1, r7
 800cd06:	4630      	mov	r0, r6
 800cd08:	eb04 0903 	add.w	r9, r4, r3
 800cd0c:	f000 f864 	bl	800cdd8 <_sbrk_r>
 800cd10:	4581      	cmp	r9, r0
 800cd12:	d142      	bne.n	800cd9a <_malloc_r+0xea>
 800cd14:	6821      	ldr	r1, [r4, #0]
 800cd16:	4630      	mov	r0, r6
 800cd18:	1a6d      	subs	r5, r5, r1
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7ff ffa6 	bl	800cc6c <sbrk_aligned>
 800cd20:	3001      	adds	r0, #1
 800cd22:	d03a      	beq.n	800cd9a <_malloc_r+0xea>
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	442b      	add	r3, r5
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd2e:	685a      	ldr	r2, [r3, #4]
 800cd30:	bb62      	cbnz	r2, 800cd8c <_malloc_r+0xdc>
 800cd32:	f8c8 7000 	str.w	r7, [r8]
 800cd36:	e00f      	b.n	800cd58 <_malloc_r+0xa8>
 800cd38:	6822      	ldr	r2, [r4, #0]
 800cd3a:	1b52      	subs	r2, r2, r5
 800cd3c:	d420      	bmi.n	800cd80 <_malloc_r+0xd0>
 800cd3e:	2a0b      	cmp	r2, #11
 800cd40:	d917      	bls.n	800cd72 <_malloc_r+0xc2>
 800cd42:	1961      	adds	r1, r4, r5
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	6025      	str	r5, [r4, #0]
 800cd48:	bf18      	it	ne
 800cd4a:	6059      	strne	r1, [r3, #4]
 800cd4c:	6863      	ldr	r3, [r4, #4]
 800cd4e:	bf08      	it	eq
 800cd50:	f8c8 1000 	streq.w	r1, [r8]
 800cd54:	5162      	str	r2, [r4, r5]
 800cd56:	604b      	str	r3, [r1, #4]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 f82f 	bl	800cdbc <__malloc_unlock>
 800cd5e:	f104 000b 	add.w	r0, r4, #11
 800cd62:	1d23      	adds	r3, r4, #4
 800cd64:	f020 0007 	bic.w	r0, r0, #7
 800cd68:	1ac2      	subs	r2, r0, r3
 800cd6a:	bf1c      	itt	ne
 800cd6c:	1a1b      	subne	r3, r3, r0
 800cd6e:	50a3      	strne	r3, [r4, r2]
 800cd70:	e7af      	b.n	800ccd2 <_malloc_r+0x22>
 800cd72:	6862      	ldr	r2, [r4, #4]
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	bf0c      	ite	eq
 800cd78:	f8c8 2000 	streq.w	r2, [r8]
 800cd7c:	605a      	strne	r2, [r3, #4]
 800cd7e:	e7eb      	b.n	800cd58 <_malloc_r+0xa8>
 800cd80:	4623      	mov	r3, r4
 800cd82:	6864      	ldr	r4, [r4, #4]
 800cd84:	e7ae      	b.n	800cce4 <_malloc_r+0x34>
 800cd86:	463c      	mov	r4, r7
 800cd88:	687f      	ldr	r7, [r7, #4]
 800cd8a:	e7b6      	b.n	800ccfa <_malloc_r+0x4a>
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	42a3      	cmp	r3, r4
 800cd92:	d1fb      	bne.n	800cd8c <_malloc_r+0xdc>
 800cd94:	2300      	movs	r3, #0
 800cd96:	6053      	str	r3, [r2, #4]
 800cd98:	e7de      	b.n	800cd58 <_malloc_r+0xa8>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	6033      	str	r3, [r6, #0]
 800cda0:	f000 f80c 	bl	800cdbc <__malloc_unlock>
 800cda4:	e794      	b.n	800ccd0 <_malloc_r+0x20>
 800cda6:	6005      	str	r5, [r0, #0]
 800cda8:	e7d6      	b.n	800cd58 <_malloc_r+0xa8>
 800cdaa:	bf00      	nop
 800cdac:	200002ec 	.word	0x200002ec

0800cdb0 <__malloc_lock>:
 800cdb0:	4801      	ldr	r0, [pc, #4]	@ (800cdb8 <__malloc_lock+0x8>)
 800cdb2:	f000 b84b 	b.w	800ce4c <__retarget_lock_acquire_recursive>
 800cdb6:	bf00      	nop
 800cdb8:	2000042c 	.word	0x2000042c

0800cdbc <__malloc_unlock>:
 800cdbc:	4801      	ldr	r0, [pc, #4]	@ (800cdc4 <__malloc_unlock+0x8>)
 800cdbe:	f000 b846 	b.w	800ce4e <__retarget_lock_release_recursive>
 800cdc2:	bf00      	nop
 800cdc4:	2000042c 	.word	0x2000042c

0800cdc8 <memset>:
 800cdc8:	4402      	add	r2, r0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d100      	bne.n	800cdd2 <memset+0xa>
 800cdd0:	4770      	bx	lr
 800cdd2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdd6:	e7f9      	b.n	800cdcc <memset+0x4>

0800cdd8 <_sbrk_r>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	2300      	movs	r3, #0
 800cddc:	4d05      	ldr	r5, [pc, #20]	@ (800cdf4 <_sbrk_r+0x1c>)
 800cdde:	4604      	mov	r4, r0
 800cde0:	4608      	mov	r0, r1
 800cde2:	602b      	str	r3, [r5, #0]
 800cde4:	f7f5 fda8 	bl	8002938 <_sbrk>
 800cde8:	1c43      	adds	r3, r0, #1
 800cdea:	d102      	bne.n	800cdf2 <_sbrk_r+0x1a>
 800cdec:	682b      	ldr	r3, [r5, #0]
 800cdee:	b103      	cbz	r3, 800cdf2 <_sbrk_r+0x1a>
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	20000428 	.word	0x20000428

0800cdf8 <__errno>:
 800cdf8:	4b01      	ldr	r3, [pc, #4]	@ (800ce00 <__errno+0x8>)
 800cdfa:	6818      	ldr	r0, [r3, #0]
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	2000000c 	.word	0x2000000c

0800ce04 <__libc_init_array>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	4d0d      	ldr	r5, [pc, #52]	@ (800ce3c <__libc_init_array+0x38>)
 800ce08:	2600      	movs	r6, #0
 800ce0a:	4c0d      	ldr	r4, [pc, #52]	@ (800ce40 <__libc_init_array+0x3c>)
 800ce0c:	1b64      	subs	r4, r4, r5
 800ce0e:	10a4      	asrs	r4, r4, #2
 800ce10:	42a6      	cmp	r6, r4
 800ce12:	d109      	bne.n	800ce28 <__libc_init_array+0x24>
 800ce14:	4d0b      	ldr	r5, [pc, #44]	@ (800ce44 <__libc_init_array+0x40>)
 800ce16:	2600      	movs	r6, #0
 800ce18:	4c0b      	ldr	r4, [pc, #44]	@ (800ce48 <__libc_init_array+0x44>)
 800ce1a:	f000 f827 	bl	800ce6c <_init>
 800ce1e:	1b64      	subs	r4, r4, r5
 800ce20:	10a4      	asrs	r4, r4, #2
 800ce22:	42a6      	cmp	r6, r4
 800ce24:	d105      	bne.n	800ce32 <__libc_init_array+0x2e>
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2c:	3601      	adds	r6, #1
 800ce2e:	4798      	blx	r3
 800ce30:	e7ee      	b.n	800ce10 <__libc_init_array+0xc>
 800ce32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce36:	3601      	adds	r6, #1
 800ce38:	4798      	blx	r3
 800ce3a:	e7f2      	b.n	800ce22 <__libc_init_array+0x1e>
 800ce3c:	0800cf90 	.word	0x0800cf90
 800ce40:	0800cf90 	.word	0x0800cf90
 800ce44:	0800cf90 	.word	0x0800cf90
 800ce48:	0800cf94 	.word	0x0800cf94

0800ce4c <__retarget_lock_acquire_recursive>:
 800ce4c:	4770      	bx	lr

0800ce4e <__retarget_lock_release_recursive>:
 800ce4e:	4770      	bx	lr

0800ce50 <memcpy>:
 800ce50:	440a      	add	r2, r1
 800ce52:	1e43      	subs	r3, r0, #1
 800ce54:	4291      	cmp	r1, r2
 800ce56:	d100      	bne.n	800ce5a <memcpy+0xa>
 800ce58:	4770      	bx	lr
 800ce5a:	b510      	push	{r4, lr}
 800ce5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce60:	4291      	cmp	r1, r2
 800ce62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce66:	d1f9      	bne.n	800ce5c <memcpy+0xc>
 800ce68:	bd10      	pop	{r4, pc}
	...

0800ce6c <_init>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	bf00      	nop
 800ce70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce72:	bc08      	pop	{r3}
 800ce74:	469e      	mov	lr, r3
 800ce76:	4770      	bx	lr

0800ce78 <_fini>:
 800ce78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7a:	bf00      	nop
 800ce7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7e:	bc08      	pop	{r3}
 800ce80:	469e      	mov	lr, r3
 800ce82:	4770      	bx	lr
