
health_monitoring_wearable_mainMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc88  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800cec0  0800cec0  0000dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cfc4  0800cfc4  0000dfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cfcc  0800cfcc  0000dfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800cfd0  0800cfd0  0000dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000005c  20000000  0800cfd4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d1  2000005c  0800d030  0000e05c  2**2
                  ALLOC
  8 ._user_heap_stack 00000603  2000042d  0800d030  0000e42d  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002443d  00000000  00000000  0000e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044ff  00000000  00000000  000324cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e18  00000000  00000000  000369d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000177f  00000000  00000000  000387e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003781d  00000000  00000000  00039f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002690f  00000000  00000000  00071784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159bac  00000000  00000000  00098093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f1c3f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085a0  00000000  00000000  001f1c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008e  00000000  00000000  001fa224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800cea8 	.word	0x0800cea8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	0800cea8 	.word	0x0800cea8

08000278 <__aeabi_drsub>:
 8000278:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	e002      	b.n	8000284 <__adddf3>
 800027e:	bf00      	nop

08000280 <__aeabi_dsub>:
 8000280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000284 <__adddf3>:
 8000284:	b530      	push	{r4, r5, lr}
 8000286:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800028a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800028e:	ea94 0f05 	teq	r4, r5
 8000292:	bf08      	it	eq
 8000294:	ea90 0f02 	teqeq	r0, r2
 8000298:	bf1f      	itttt	ne
 800029a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800029e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002aa:	f000 80e2 	beq.w	8000472 <__adddf3+0x1ee>
 80002ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002b6:	bfb8      	it	lt
 80002b8:	426d      	neglt	r5, r5
 80002ba:	dd0c      	ble.n	80002d6 <__adddf3+0x52>
 80002bc:	442c      	add	r4, r5
 80002be:	ea80 0202 	eor.w	r2, r0, r2
 80002c2:	ea81 0303 	eor.w	r3, r1, r3
 80002c6:	ea82 0000 	eor.w	r0, r2, r0
 80002ca:	ea83 0101 	eor.w	r1, r3, r1
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	2d36      	cmp	r5, #54	@ 0x36
 80002d8:	bf88      	it	hi
 80002da:	bd30      	pophi	{r4, r5, pc}
 80002dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ec:	d002      	beq.n	80002f4 <__adddf3+0x70>
 80002ee:	4240      	negs	r0, r0
 80002f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000300:	d002      	beq.n	8000308 <__adddf3+0x84>
 8000302:	4252      	negs	r2, r2
 8000304:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000308:	ea94 0f05 	teq	r4, r5
 800030c:	f000 80a7 	beq.w	800045e <__adddf3+0x1da>
 8000310:	f1a4 0401 	sub.w	r4, r4, #1
 8000314:	f1d5 0e20 	rsbs	lr, r5, #32
 8000318:	db0d      	blt.n	8000336 <__adddf3+0xb2>
 800031a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800031e:	fa22 f205 	lsr.w	r2, r2, r5
 8000322:	1880      	adds	r0, r0, r2
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	fa03 f20e 	lsl.w	r2, r3, lr
 800032c:	1880      	adds	r0, r0, r2
 800032e:	fa43 f305 	asr.w	r3, r3, r5
 8000332:	4159      	adcs	r1, r3
 8000334:	e00e      	b.n	8000354 <__adddf3+0xd0>
 8000336:	f1a5 0520 	sub.w	r5, r5, #32
 800033a:	f10e 0e20 	add.w	lr, lr, #32
 800033e:	2a01      	cmp	r2, #1
 8000340:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000344:	bf28      	it	cs
 8000346:	f04c 0c02 	orrcs.w	ip, ip, #2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000354:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000358:	d507      	bpl.n	800036a <__adddf3+0xe6>
 800035a:	f04f 0e00 	mov.w	lr, #0
 800035e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000362:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000366:	eb6e 0101 	sbc.w	r1, lr, r1
 800036a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800036e:	d31b      	bcc.n	80003a8 <__adddf3+0x124>
 8000370:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000374:	d30c      	bcc.n	8000390 <__adddf3+0x10c>
 8000376:	0849      	lsrs	r1, r1, #1
 8000378:	ea5f 0030 	movs.w	r0, r0, rrx
 800037c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000380:	f104 0401 	add.w	r4, r4, #1
 8000384:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000388:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800038c:	f080 809a 	bcs.w	80004c4 <__adddf3+0x240>
 8000390:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000394:	bf08      	it	eq
 8000396:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800039a:	f150 0000 	adcs.w	r0, r0, #0
 800039e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003a2:	ea41 0105 	orr.w	r1, r1, r5
 80003a6:	bd30      	pop	{r4, r5, pc}
 80003a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ac:	4140      	adcs	r0, r0
 80003ae:	eb41 0101 	adc.w	r1, r1, r1
 80003b2:	3c01      	subs	r4, #1
 80003b4:	bf28      	it	cs
 80003b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ba:	d2e9      	bcs.n	8000390 <__adddf3+0x10c>
 80003bc:	f091 0f00 	teq	r1, #0
 80003c0:	bf04      	itt	eq
 80003c2:	4601      	moveq	r1, r0
 80003c4:	2000      	moveq	r0, #0
 80003c6:	fab1 f381 	clz	r3, r1
 80003ca:	bf08      	it	eq
 80003cc:	3320      	addeq	r3, #32
 80003ce:	f1a3 030b 	sub.w	r3, r3, #11
 80003d2:	f1b3 0220 	subs.w	r2, r3, #32
 80003d6:	da0c      	bge.n	80003f2 <__adddf3+0x16e>
 80003d8:	320c      	adds	r2, #12
 80003da:	dd08      	ble.n	80003ee <__adddf3+0x16a>
 80003dc:	f102 0c14 	add.w	ip, r2, #20
 80003e0:	f1c2 020c 	rsb	r2, r2, #12
 80003e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ec:	e00c      	b.n	8000408 <__adddf3+0x184>
 80003ee:	f102 0214 	add.w	r2, r2, #20
 80003f2:	bfd8      	it	le
 80003f4:	f1c2 0c20 	rsble	ip, r2, #32
 80003f8:	fa01 f102 	lsl.w	r1, r1, r2
 80003fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000400:	bfdc      	itt	le
 8000402:	ea41 010c 	orrle.w	r1, r1, ip
 8000406:	4090      	lslle	r0, r2
 8000408:	1ae4      	subs	r4, r4, r3
 800040a:	bfa2      	ittt	ge
 800040c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000410:	4329      	orrge	r1, r5
 8000412:	bd30      	popge	{r4, r5, pc}
 8000414:	ea6f 0404 	mvn.w	r4, r4
 8000418:	3c1f      	subs	r4, #31
 800041a:	da1c      	bge.n	8000456 <__adddf3+0x1d2>
 800041c:	340c      	adds	r4, #12
 800041e:	dc0e      	bgt.n	800043e <__adddf3+0x1ba>
 8000420:	f104 0414 	add.w	r4, r4, #20
 8000424:	f1c4 0220 	rsb	r2, r4, #32
 8000428:	fa20 f004 	lsr.w	r0, r0, r4
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	ea40 0003 	orr.w	r0, r0, r3
 8000434:	fa21 f304 	lsr.w	r3, r1, r4
 8000438:	ea45 0103 	orr.w	r1, r5, r3
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f1c4 040c 	rsb	r4, r4, #12
 8000442:	f1c4 0220 	rsb	r2, r4, #32
 8000446:	fa20 f002 	lsr.w	r0, r0, r2
 800044a:	fa01 f304 	lsl.w	r3, r1, r4
 800044e:	ea40 0003 	orr.w	r0, r0, r3
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	fa21 f004 	lsr.w	r0, r1, r4
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f094 0f00 	teq	r4, #0
 8000462:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000466:	bf06      	itte	eq
 8000468:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800046c:	3401      	addeq	r4, #1
 800046e:	3d01      	subne	r5, #1
 8000470:	e74e      	b.n	8000310 <__adddf3+0x8c>
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf18      	it	ne
 8000478:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800047c:	d029      	beq.n	80004d2 <__adddf3+0x24e>
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	d005      	beq.n	8000496 <__adddf3+0x212>
 800048a:	ea54 0c00 	orrs.w	ip, r4, r0
 800048e:	bf04      	itt	eq
 8000490:	4619      	moveq	r1, r3
 8000492:	4610      	moveq	r0, r2
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	ea91 0f03 	teq	r1, r3
 800049a:	bf1e      	ittt	ne
 800049c:	2100      	movne	r1, #0
 800049e:	2000      	movne	r0, #0
 80004a0:	bd30      	popne	{r4, r5, pc}
 80004a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004a6:	d105      	bne.n	80004b4 <__adddf3+0x230>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	4149      	adcs	r1, r1
 80004ac:	bf28      	it	cs
 80004ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b8:	bf3c      	itt	cc
 80004ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004be:	bd30      	popcc	{r4, r5, pc}
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004cc:	f04f 0000 	mov.w	r0, #0
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf1a      	itte	ne
 80004d8:	4619      	movne	r1, r3
 80004da:	4610      	movne	r0, r2
 80004dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e0:	bf1c      	itt	ne
 80004e2:	460b      	movne	r3, r1
 80004e4:	4602      	movne	r2, r0
 80004e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ea:	bf06      	itte	eq
 80004ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f0:	ea91 0f03 	teqeq	r1, r3
 80004f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	bf00      	nop

080004fc <__aeabi_ui2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000510:	f04f 0500 	mov.w	r5, #0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e750      	b.n	80003bc <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_i2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000534:	bf48      	it	mi
 8000536:	4240      	negmi	r0, r0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e73e      	b.n	80003bc <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_f2d>:
 8000540:	0042      	lsls	r2, r0, #1
 8000542:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000546:	ea4f 0131 	mov.w	r1, r1, rrx
 800054a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800054e:	bf1f      	itttt	ne
 8000550:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000554:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000558:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800055c:	4770      	bxne	lr
 800055e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000562:	bf08      	it	eq
 8000564:	4770      	bxeq	lr
 8000566:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800056a:	bf04      	itt	eq
 800056c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000580:	e71c      	b.n	80003bc <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aed8 	beq.w	800036a <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6bd      	b.n	800036a <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b9b0 	b.w	8000e2c <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000aea:	4688      	mov	r8, r1
 8000aec:	4604      	mov	r4, r0
 8000aee:	468e      	mov	lr, r1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d14a      	bne.n	8000b8a <__udivmoddi4+0xa6>
 8000af4:	428a      	cmp	r2, r1
 8000af6:	4617      	mov	r7, r2
 8000af8:	d95f      	bls.n	8000bba <__udivmoddi4+0xd6>
 8000afa:	fab2 f682 	clz	r6, r2
 8000afe:	b14e      	cbz	r6, 8000b14 <__udivmoddi4+0x30>
 8000b00:	f1c6 0320 	rsb	r3, r6, #32
 8000b04:	fa01 fe06 	lsl.w	lr, r1, r6
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	ea43 0e0e 	orr.w	lr, r3, lr
 8000b14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b18:	fa1f fc87 	uxth.w	ip, r7
 8000b1c:	0c23      	lsrs	r3, r4, #16
 8000b1e:	fbbe f1f8 	udiv	r1, lr, r8
 8000b22:	fb08 ee11 	mls	lr, r8, r1, lr
 8000b26:	fb01 f20c 	mul.w	r2, r1, ip
 8000b2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d907      	bls.n	8000b42 <__udivmoddi4+0x5e>
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x5c>
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	f200 8154 	bhi.w	8000de8 <__udivmoddi4+0x304>
 8000b40:	4601      	mov	r1, r0
 8000b42:	1a9b      	subs	r3, r3, r2
 8000b44:	b2a2      	uxth	r2, r4
 8000b46:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4a:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000b56:	4594      	cmp	ip, r2
 8000b58:	d90b      	bls.n	8000b72 <__udivmoddi4+0x8e>
 8000b5a:	18ba      	adds	r2, r7, r2
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b60:	bf2c      	ite	cs
 8000b62:	2401      	movcs	r4, #1
 8000b64:	2400      	movcc	r4, #0
 8000b66:	4594      	cmp	ip, r2
 8000b68:	d902      	bls.n	8000b70 <__udivmoddi4+0x8c>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	f000 813f 	beq.w	8000dee <__udivmoddi4+0x30a>
 8000b70:	4618      	mov	r0, r3
 8000b72:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b76:	eba2 020c 	sub.w	r2, r2, ip
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	b11d      	cbz	r5, 8000b86 <__udivmoddi4+0xa2>
 8000b7e:	40f2      	lsrs	r2, r6
 8000b80:	2300      	movs	r3, #0
 8000b82:	e9c5 2300 	strd	r2, r3, [r5]
 8000b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d905      	bls.n	8000b9a <__udivmoddi4+0xb6>
 8000b8e:	b10d      	cbz	r5, 8000b94 <__udivmoddi4+0xb0>
 8000b90:	e9c5 0100 	strd	r0, r1, [r5]
 8000b94:	2100      	movs	r1, #0
 8000b96:	4608      	mov	r0, r1
 8000b98:	e7f5      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000b9a:	fab3 f183 	clz	r1, r3
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d14e      	bne.n	8000c40 <__udivmoddi4+0x15c>
 8000ba2:	4543      	cmp	r3, r8
 8000ba4:	f0c0 8112 	bcc.w	8000dcc <__udivmoddi4+0x2e8>
 8000ba8:	4282      	cmp	r2, r0
 8000baa:	f240 810f 	bls.w	8000dcc <__udivmoddi4+0x2e8>
 8000bae:	4608      	mov	r0, r1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e8      	beq.n	8000b86 <__udivmoddi4+0xa2>
 8000bb4:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb8:	e7e5      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f000 80ac 	beq.w	8000d18 <__udivmoddi4+0x234>
 8000bc0:	fab2 f682 	clz	r6, r2
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	f040 80bb 	bne.w	8000d40 <__udivmoddi4+0x25c>
 8000bca:	1a8b      	subs	r3, r1, r2
 8000bcc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000bd0:	b2bc      	uxth	r4, r7
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	0c02      	lsrs	r2, r0, #16
 8000bd6:	b280      	uxth	r0, r0
 8000bd8:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000be4:	fb04 f20c 	mul.w	r2, r4, ip
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d90e      	bls.n	8000c0a <__udivmoddi4+0x126>
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bf2:	bf2c      	ite	cs
 8000bf4:	f04f 0901 	movcs.w	r9, #1
 8000bf8:	f04f 0900 	movcc.w	r9, #0
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d903      	bls.n	8000c08 <__udivmoddi4+0x124>
 8000c00:	f1b9 0f00 	cmp.w	r9, #0
 8000c04:	f000 80ec 	beq.w	8000de0 <__udivmoddi4+0x2fc>
 8000c08:	46c4      	mov	ip, r8
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c10:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c14:	fb04 f408 	mul.w	r4, r4, r8
 8000c18:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000c1c:	4294      	cmp	r4, r2
 8000c1e:	d90b      	bls.n	8000c38 <__udivmoddi4+0x154>
 8000c20:	18ba      	adds	r2, r7, r2
 8000c22:	f108 33ff 	add.w	r3, r8, #4294967295
 8000c26:	bf2c      	ite	cs
 8000c28:	2001      	movcs	r0, #1
 8000c2a:	2000      	movcc	r0, #0
 8000c2c:	4294      	cmp	r4, r2
 8000c2e:	d902      	bls.n	8000c36 <__udivmoddi4+0x152>
 8000c30:	2800      	cmp	r0, #0
 8000c32:	f000 80d1 	beq.w	8000dd8 <__udivmoddi4+0x2f4>
 8000c36:	4698      	mov	r8, r3
 8000c38:	1b12      	subs	r2, r2, r4
 8000c3a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000c3e:	e79d      	b.n	8000b7c <__udivmoddi4+0x98>
 8000c40:	f1c1 0620 	rsb	r6, r1, #32
 8000c44:	408b      	lsls	r3, r1
 8000c46:	fa08 f401 	lsl.w	r4, r8, r1
 8000c4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000c4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c52:	fa28 f806 	lsr.w	r8, r8, r6
 8000c56:	408a      	lsls	r2, r1
 8000c58:	431f      	orrs	r7, r3
 8000c5a:	fa20 f306 	lsr.w	r3, r0, r6
 8000c5e:	0c38      	lsrs	r0, r7, #16
 8000c60:	4323      	orrs	r3, r4
 8000c62:	fa1f fc87 	uxth.w	ip, r7
 8000c66:	0c1c      	lsrs	r4, r3, #16
 8000c68:	fbb8 fef0 	udiv	lr, r8, r0
 8000c6c:	fb00 881e 	mls	r8, r0, lr, r8
 8000c70:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000c74:	fb0e f80c 	mul.w	r8, lr, ip
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d90e      	bls.n	8000c9a <__udivmoddi4+0x1b6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	bf2c      	ite	cs
 8000c84:	f04f 0b01 	movcs.w	fp, #1
 8000c88:	f04f 0b00 	movcc.w	fp, #0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d903      	bls.n	8000c98 <__udivmoddi4+0x1b4>
 8000c90:	f1bb 0f00 	cmp.w	fp, #0
 8000c94:	f000 80b8 	beq.w	8000e08 <__udivmoddi4+0x324>
 8000c98:	46d6      	mov	lr, sl
 8000c9a:	eba4 0408 	sub.w	r4, r4, r8
 8000c9e:	fa1f f883 	uxth.w	r8, r3
 8000ca2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ca6:	fb00 4413 	mls	r4, r0, r3, r4
 8000caa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cae:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	d90e      	bls.n	8000cd4 <__udivmoddi4+0x1f0>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cbc:	bf2c      	ite	cs
 8000cbe:	f04f 0801 	movcs.w	r8, #1
 8000cc2:	f04f 0800 	movcc.w	r8, #0
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d903      	bls.n	8000cd2 <__udivmoddi4+0x1ee>
 8000cca:	f1b8 0f00 	cmp.w	r8, #0
 8000cce:	f000 809f 	beq.w	8000e10 <__udivmoddi4+0x32c>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd8:	eba4 040c 	sub.w	r4, r4, ip
 8000cdc:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ce0:	4564      	cmp	r4, ip
 8000ce2:	4673      	mov	r3, lr
 8000ce4:	46e0      	mov	r8, ip
 8000ce6:	d302      	bcc.n	8000cee <__udivmoddi4+0x20a>
 8000ce8:	d107      	bne.n	8000cfa <__udivmoddi4+0x216>
 8000cea:	45f1      	cmp	r9, lr
 8000cec:	d205      	bcs.n	8000cfa <__udivmoddi4+0x216>
 8000cee:	ebbe 0302 	subs.w	r3, lr, r2
 8000cf2:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cf6:	3801      	subs	r0, #1
 8000cf8:	46e0      	mov	r8, ip
 8000cfa:	b15d      	cbz	r5, 8000d14 <__udivmoddi4+0x230>
 8000cfc:	ebb9 0203 	subs.w	r2, r9, r3
 8000d00:	eb64 0408 	sbc.w	r4, r4, r8
 8000d04:	fa04 f606 	lsl.w	r6, r4, r6
 8000d08:	fa22 f301 	lsr.w	r3, r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	e9c5 6400 	strd	r6, r4, [r5]
 8000d14:	2100      	movs	r1, #0
 8000d16:	e736      	b.n	8000b86 <__udivmoddi4+0xa2>
 8000d18:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d1c:	0c01      	lsrs	r1, r0, #16
 8000d1e:	4614      	mov	r4, r2
 8000d20:	b280      	uxth	r0, r0
 8000d22:	4696      	mov	lr, r2
 8000d24:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000d28:	2620      	movs	r6, #32
 8000d2a:	4690      	mov	r8, r2
 8000d2c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000d30:	4610      	mov	r0, r2
 8000d32:	fbb1 f1f2 	udiv	r1, r1, r2
 8000d36:	eba3 0308 	sub.w	r3, r3, r8
 8000d3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d3e:	e74b      	b.n	8000bd8 <__udivmoddi4+0xf4>
 8000d40:	40b7      	lsls	r7, r6
 8000d42:	f1c6 0320 	rsb	r3, r6, #32
 8000d46:	fa01 f206 	lsl.w	r2, r1, r6
 8000d4a:	fa21 f803 	lsr.w	r8, r1, r3
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	fa20 f303 	lsr.w	r3, r0, r3
 8000d56:	b2bc      	uxth	r4, r7
 8000d58:	40b0      	lsls	r0, r6
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	0c02      	lsrs	r2, r0, #16
 8000d5e:	0c19      	lsrs	r1, r3, #16
 8000d60:	b280      	uxth	r0, r0
 8000d62:	fbb8 f9fe 	udiv	r9, r8, lr
 8000d66:	fb0e 8819 	mls	r8, lr, r9, r8
 8000d6a:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	4588      	cmp	r8, r1
 8000d74:	d951      	bls.n	8000e1a <__udivmoddi4+0x336>
 8000d76:	1879      	adds	r1, r7, r1
 8000d78:	f109 3cff 	add.w	ip, r9, #4294967295
 8000d7c:	bf2c      	ite	cs
 8000d7e:	f04f 0a01 	movcs.w	sl, #1
 8000d82:	f04f 0a00 	movcc.w	sl, #0
 8000d86:	4588      	cmp	r8, r1
 8000d88:	d902      	bls.n	8000d90 <__udivmoddi4+0x2ac>
 8000d8a:	f1ba 0f00 	cmp.w	sl, #0
 8000d8e:	d031      	beq.n	8000df4 <__udivmoddi4+0x310>
 8000d90:	eba1 0108 	sub.w	r1, r1, r8
 8000d94:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d98:	fb09 f804 	mul.w	r8, r9, r4
 8000d9c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	4543      	cmp	r3, r8
 8000da8:	d235      	bcs.n	8000e16 <__udivmoddi4+0x332>
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	f109 31ff 	add.w	r1, r9, #4294967295
 8000db0:	bf2c      	ite	cs
 8000db2:	f04f 0a01 	movcs.w	sl, #1
 8000db6:	f04f 0a00 	movcc.w	sl, #0
 8000dba:	4543      	cmp	r3, r8
 8000dbc:	d2bb      	bcs.n	8000d36 <__udivmoddi4+0x252>
 8000dbe:	f1ba 0f00 	cmp.w	sl, #0
 8000dc2:	d1b8      	bne.n	8000d36 <__udivmoddi4+0x252>
 8000dc4:	f1a9 0102 	sub.w	r1, r9, #2
 8000dc8:	443b      	add	r3, r7
 8000dca:	e7b4      	b.n	8000d36 <__udivmoddi4+0x252>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb68 0203 	sbc.w	r2, r8, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4696      	mov	lr, r2
 8000dd6:	e6eb      	b.n	8000bb0 <__udivmoddi4+0xcc>
 8000dd8:	443a      	add	r2, r7
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	e72b      	b.n	8000c38 <__udivmoddi4+0x154>
 8000de0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	e710      	b.n	8000c0a <__udivmoddi4+0x126>
 8000de8:	3902      	subs	r1, #2
 8000dea:	443b      	add	r3, r7
 8000dec:	e6a9      	b.n	8000b42 <__udivmoddi4+0x5e>
 8000dee:	443a      	add	r2, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	e6be      	b.n	8000b72 <__udivmoddi4+0x8e>
 8000df4:	eba7 0808 	sub.w	r8, r7, r8
 8000df8:	f1a9 0c02 	sub.w	ip, r9, #2
 8000dfc:	4441      	add	r1, r8
 8000dfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e02:	fb09 f804 	mul.w	r8, r9, r4
 8000e06:	e7c9      	b.n	8000d9c <__udivmoddi4+0x2b8>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	e744      	b.n	8000c9a <__udivmoddi4+0x1b6>
 8000e10:	3b02      	subs	r3, #2
 8000e12:	443c      	add	r4, r7
 8000e14:	e75e      	b.n	8000cd4 <__udivmoddi4+0x1f0>
 8000e16:	4649      	mov	r1, r9
 8000e18:	e78d      	b.n	8000d36 <__udivmoddi4+0x252>
 8000e1a:	eba1 0108 	sub.w	r1, r1, r8
 8000e1e:	46cc      	mov	ip, r9
 8000e20:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e24:	fb09 f804 	mul.w	r8, r9, r4
 8000e28:	e7b8      	b.n	8000d9c <__udivmoddi4+0x2b8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <data_handler_dispatcher>:
void data_handler_notify_stop_stream(void) {
//    UART_Handler_t* uart = uart_handler_get();
//    uart_handler_Send_Response(CMD_STOP_STREAM, data_handler->payload, 1, 0);
}

void data_handler_dispatcher(UART_CommandPacket_t* cmd) {
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
    data_handler->data_cmd = (Data_CmdID_t)cmd->cmd_type;
 8000e38:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	7852      	ldrb	r2, [r2, #1]
 8000e40:	701a      	strb	r2, [r3, #0]
    memcpy(data_handler->payload, cmd->payload, 5);
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6858      	ldr	r0, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	2205      	movs	r2, #5
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f00c f81c 	bl	800ce8c <memcpy>
    data_handler->lenght=cmd->payload_len;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	7892      	ldrb	r2, [r2, #2]
 8000e5c:	731a      	strb	r2, [r3, #12]

    //Clean from past cmds response
    memset(data_handler->payload_out, 0, data_handler->lenght_out);
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6898      	ldr	r0, [r3, #8]
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	7b5b      	ldrb	r3, [r3, #13]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f00b ffc9 	bl	800ce04 <memset>
    data_handler->lenght_out=0;
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2200      	movs	r2, #0
 8000e78:	735a      	strb	r2, [r3, #13]


    //TODO: filter if the message is to configure something or to request a cmd

    sensor_interface_handle_cmd(data_handler->data_cmd, data_handler->payload, data_handler->lenght, data_handler->payload_out, &(data_handler->lenght_out));
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	7818      	ldrb	r0, [r3, #0]
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6859      	ldr	r1, [r3, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	7b1a      	ldrb	r2, [r3, #12]
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689c      	ldr	r4, [r3, #8]
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	330d      	adds	r3, #13
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	f001 faec 	bl	8002478 <sensor_interface_handle_cmd>
    UART_Handler_t* uart = uart_handler_get();
 8000ea0:	f001 ff02 	bl	8002ca8 <uart_handler_get>
 8000ea4:	60f8      	str	r0, [r7, #12]
    uart->send_response(data_handler->data_cmd, data_handler->payload_out, data_handler->lenght_out );
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	7810      	ldrb	r0, [r2, #0]
 8000eb0:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	6891      	ldr	r1, [r2, #8]
 8000eb6:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <data_handler_dispatcher+0x98>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	7b52      	ldrb	r2, [r2, #13]
 8000ebc:	4798      	blx	r3


}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000078 	.word	0x20000078

08000ecc <data_handler_Init>:
//static void data_handler_req_stop_stream(void) {
//	//TODO:sensor_stream_stop();
//    data_handler_notify_stop_stream();
//}

void data_handler_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    data_handler = (Data_Handler_t *)malloc(sizeof(Data_Handler_t));
 8000ed0:	2010      	movs	r0, #16
 8000ed2:	f00b fee1 	bl	800cc98 <malloc>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <data_handler_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
    data_handler->payload = data_handler_buffer;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <data_handler_Init+0x50>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <data_handler_Init+0x54>)
 8000ee4:	605a      	str	r2, [r3, #4]
    data_handler->payload_out = data_handler_buffer_out;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <data_handler_Init+0x50>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <data_handler_Init+0x58>)
 8000eec:	609a      	str	r2, [r3, #8]
    data_handler->lenght_out=0;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <data_handler_Init+0x50>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	735a      	strb	r2, [r3, #13]
    memset(data_handler->payload, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <data_handler_Init+0x50>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	220a      	movs	r2, #10
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00b ff7f 	bl	800ce04 <memset>
    memset(data_handler->payload_out, 0, DATA_HANDLER_PAYLOAD_LENGHT);
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <data_handler_Init+0x50>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	220a      	movs	r2, #10
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00b ff77 	bl	800ce04 <memset>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000078 	.word	0x20000078
 8000f20:	2000007c 	.word	0x2000007c
 8000f24:	20000088 	.word	0x20000088

08000f28 <HAL_I2C_MasterTxCpltCallback>:
// Basic operations
bool i2c_handler_write_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len);
bool i2c_handler_read_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len, uint8_t len_expected);

void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if(i2c_handler->hi2c==hi2c){
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d11f      	bne.n	8000f7c <HAL_I2C_MasterTxCpltCallback+0x54>
		if(i2c_handler->operation_type==I2C_OP_TYPE_WRITE_REG){
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d104      	bne.n	8000f50 <HAL_I2C_MasterTxCpltCallback+0x28>
			i2c_handler->state= I2C_STATE_IDLE;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			}
		}


	}
}
 8000f4e:	e015      	b.n	8000f7c <HAL_I2C_MasterTxCpltCallback+0x54>
			i2c_handler->state= I2C_STATE_BUSY;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
			if (HAL_I2C_Master_Receive_IT(i2c_handler->hi2c, i2c_handler->last_address << 1,
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	6858      	ldr	r0, [r3, #4]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	7a1b      	ldrb	r3, [r3, #8]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	b299      	uxth	r1, r3
						i2c_handler->Response_buffer, i2c_handler->response_buffer_lenght) != HAL_OK) {
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <HAL_I2C_MasterTxCpltCallback+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
			if (HAL_I2C_Master_Receive_IT(i2c_handler->hi2c, i2c_handler->last_address << 1,
 8000f78:	f002 ff0a 	bl	8003d90 <HAL_I2C_Master_Receive_IT>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000094 	.word	0x20000094

08000f88 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
 {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	if (i2c_handler->hi2c == hi2c) {
 8000fb8:	4b07      	ldr	r3, [pc, #28]	@ (8000fd8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d103      	bne.n	8000fcc <HAL_I2C_MasterRxCpltCallback+0x1c>
		i2c_handler->state= I2C_STATE_MSG_WAITING_FOR_PROCESSING;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	701a      	strb	r2, [r3, #0]
	}
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000094 	.word	0x20000094

08000fdc <i2c_handler_write_reg>:


bool i2c_handler_write_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	i2c_handler->last_address = device_addr;
 8000fec:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <i2c_handler_write_reg+0x74>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	721a      	strb	r2, [r3, #8]

	if (!i2c_handler || !i2c_handler->hi2c)
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <i2c_handler_write_reg+0x74>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <i2c_handler_write_reg+0x2a>
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <i2c_handler_write_reg+0x74>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <i2c_handler_write_reg+0x2e>
		return false;
 8001006:	2300      	movs	r3, #0
 8001008:	e01d      	b.n	8001046 <i2c_handler_write_reg+0x6a>

	i2c_handler->state = I2C_STATE_BUSY;
 800100a:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <i2c_handler_write_reg+0x74>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
	i2c_handler->operation_type = I2C_OP_TYPE_WRITE_REG;
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <i2c_handler_write_reg+0x74>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2201      	movs	r2, #1
 8001018:	705a      	strb	r2, [r3, #1]

    if (HAL_I2C_Master_Transmit_IT(i2c_handler->hi2c, device_addr << 1, buffer, len) != HAL_OK) {
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <i2c_handler_write_reg+0x74>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6858      	ldr	r0, [r3, #4]
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	b29b      	uxth	r3, r3
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b299      	uxth	r1, r3
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	b29b      	uxth	r3, r3
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	f002 fe2b 	bl	8003c88 <HAL_I2C_Master_Transmit_IT>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <i2c_handler_write_reg+0x60>
        return false;
 8001038:	2300      	movs	r3, #0
 800103a:	e004      	b.n	8001046 <i2c_handler_write_reg+0x6a>
//	if (HAL_I2C_Master_Transmit(i2c_handler->hi2c, device_addr << 1, buffer,
//			len, I2C_DELAY) != HAL_OK) {
//		return false;
//	}

	i2c_handler->state = I2C_STATE_IDLE;
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <i2c_handler_write_reg+0x74>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	return true;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000094 	.word	0x20000094

08001054 <i2c_handler_read_reg>:

bool i2c_handler_read_reg(uint8_t device_addr, uint8_t* buffer, uint8_t len, uint8_t len_expected) {
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af04      	add	r7, sp, #16
 800105a:	6039      	str	r1, [r7, #0]
 800105c:	4611      	mov	r1, r2
 800105e:	461a      	mov	r2, r3
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	460b      	mov	r3, r1
 8001066:	71bb      	strb	r3, [r7, #6]
 8001068:	4613      	mov	r3, r2
 800106a:	717b      	strb	r3, [r7, #5]

	i2c_handler->last_address = device_addr;
 800106c:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	721a      	strb	r2, [r3, #8]
	i2c_handler->response_buffer_lenght=len_expected;
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	797a      	ldrb	r2, [r7, #5]
 800107a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	if (!i2c_handler || !i2c_handler->hi2c ){
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <i2c_handler_read_reg+0x3c>
 8001086:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <i2c_handler_read_reg+0x40>
		return false;
 8001090:	2300      	movs	r3, #0
 8001092:	e029      	b.n	80010e8 <i2c_handler_read_reg+0x94>
	}
	i2c_handler->state= I2C_STATE_BUSY;
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
	i2c_handler->operation_type= I2C_OP_TYPE_READ_REG;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2202      	movs	r2, #2
 80010a2:	705a      	strb	r2, [r3, #1]
//			i2c_handler->Response_buffer, len_expected, I2C_DELAY) != HAL_OK) {
//		return false;
//	}


	if (HAL_I2C_Mem_Read(i2c_handler->hi2c,
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6858      	ldr	r0, [r3, #4]
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	b299      	uxth	r1, r3
		                     device_addr << 1,
		                     *buffer,
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	781b      	ldrb	r3, [r3, #0]
	if (HAL_I2C_Mem_Read(i2c_handler->hi2c,
 80010b6:	461d      	mov	r5, r3
		                     I2C_MEMADD_SIZE_8BIT,
		                     i2c_handler->Response_buffer,
 80010b8:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	332a      	adds	r3, #42	@ 0x2a
	if (HAL_I2C_Mem_Read(i2c_handler->hi2c,
 80010be:	797a      	ldrb	r2, [r7, #5]
 80010c0:	b292      	uxth	r2, r2
 80010c2:	f44f 74fa 	mov.w	r4, #500	@ 0x1f4
 80010c6:	9402      	str	r4, [sp, #8]
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	462a      	mov	r2, r5
 80010d0:	f002 fee2 	bl	8003e98 <HAL_I2C_Mem_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <i2c_handler_read_reg+0x8a>
		                     len_expected,
		                     I2C_DELAY) != HAL_OK) {
			return false;
 80010da:	2300      	movs	r3, #0
 80010dc:	e004      	b.n	80010e8 <i2c_handler_read_reg+0x94>
		}
	i2c_handler->state= I2C_STATE_IDLE;
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <i2c_handler_read_reg+0x9c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]


	return true;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	20000094 	.word	0x20000094

080010f4 <i2c_handler_init>:


void i2c_handler_init(I2C_HandleTypeDef* hi2c) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    if (i2c_handler == NULL) {
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <i2c_handler_init+0x70>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <i2c_handler_init+0x1e>
        i2c_handler = (I2C_Handler_t*) malloc(sizeof(I2C_Handler_t));
 8001104:	2054      	movs	r0, #84	@ 0x54
 8001106:	f00b fdc7 	bl	800cc98 <malloc>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <i2c_handler_init+0x70>)
 8001110:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->hi2c = hi2c;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <i2c_handler_init+0x70>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	605a      	str	r2, [r3, #4]
    i2c_handler->state= I2C_STATE_IDLE;
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <i2c_handler_init+0x70>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
    i2c_handler->operation_type=I2C_OP_TYPE_NONE;
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <i2c_handler_init+0x70>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2200      	movs	r2, #0
 8001128:	705a      	strb	r2, [r3, #1]
    memset(i2c_handler->Write_buffer, 0, I2C_MAX_BUFFER_SIZE);
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <i2c_handler_init+0x70>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3309      	adds	r3, #9
 8001130:	2220      	movs	r2, #32
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00b fe65 	bl	800ce04 <memset>
    memset(i2c_handler->Response_buffer, 0, I2C_MAX_BUFFER_SIZE);
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <i2c_handler_init+0x70>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	332a      	adds	r3, #42	@ 0x2a
 8001140:	2220      	movs	r2, #32
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f00b fe5d 	bl	800ce04 <memset>
    i2c_handler->read_reg=i2c_handler_read_reg;
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <i2c_handler_init+0x70>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a06      	ldr	r2, [pc, #24]	@ (8001168 <i2c_handler_init+0x74>)
 8001150:	651a      	str	r2, [r3, #80]	@ 0x50
    i2c_handler->write_reg=i2c_handler_write_reg;
 8001152:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <i2c_handler_init+0x70>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a05      	ldr	r2, [pc, #20]	@ (800116c <i2c_handler_init+0x78>)
 8001158:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000094 	.word	0x20000094
 8001168:	08001055 	.word	0x08001055
 800116c:	08000fdd 	.word	0x08000fdd

08001170 <i2c_handler_get>:

I2C_Handler_t* i2c_handler_get(void) {
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    return i2c_handler;
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <i2c_handler_get+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000094 	.word	0x20000094

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f001 fdde 	bl	8002d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001190:	f000 f822 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001194:	f000 f9ca 	bl	800152c <MX_GPIO_Init>
  MX_I2C2_Init();
 8001198:	f000 f87e 	bl	8001298 <MX_I2C2_Init>
  MX_RTC_Init();
 800119c:	f000 f8d0 	bl	8001340 <MX_RTC_Init>
  MX_TIM16_Init();
 80011a0:	f000 f950 	bl	8001444 <MX_TIM16_Init>
  MX_UART4_Init();
 80011a4:	f000 f976 	bl	8001494 <MX_UART4_Init>
  MX_ICACHE_Init();
 80011a8:	f000 f8b6 	bl	8001318 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  uart_handler_Init(&huart4);
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <main+0x44>)
 80011ae:	f001 fd2b 	bl	8002c08 <uart_handler_Init>
  data_handler_Init();
 80011b2:	f7ff fe8b 	bl	8000ecc <data_handler_Init>
  i2c_handler_init(&hi2c2);
 80011b6:	4806      	ldr	r0, [pc, #24]	@ (80011d0 <main+0x48>)
 80011b8:	f7ff ff9c 	bl	80010f4 <i2c_handler_init>
  sensor_interface_init();
 80011bc:	f001 f91a 	bl	80023f4 <sensor_interface_init>

  HAL_TIM_Base_Start_IT(&htim16);
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <main+0x4c>)
 80011c2:	f009 fa29 	bl	800a618 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uart_handler_check_tx_buffer();
 80011c6:	f001 fd7b 	bl	8002cc0 <uart_handler_check_tx_buffer>
 80011ca:	e7fc      	b.n	80011c6 <main+0x3e>
 80011cc:	20000168 	.word	0x20000168
 80011d0:	20000098 	.word	0x20000098
 80011d4:	2000011c 	.word	0x2000011c

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b09e      	sub	sp, #120	@ 0x78
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2260      	movs	r2, #96	@ 0x60
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f00b fe0c 	bl	800ce04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fc:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001200:	f004 fef4 	bl	8005fec <HAL_PWREx_ControlVoltageScaling>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800120a:	f000 f9e1 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800120e:	230a      	movs	r3, #10
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800121c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001236:	2308      	movs	r3, #8
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800123a:	2302      	movs	r3, #2
 800123c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001246:	230c      	movs	r3, #12
 8001248:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 0318 	add.w	r3, r7, #24
 8001252:	4618      	mov	r0, r3
 8001254:	f004 ff56 	bl	8006104 <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800125e:	f000 f9b7 	bl	80015d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	231f      	movs	r3, #31
 8001264:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2303      	movs	r3, #3
 8001268:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	2103      	movs	r1, #3
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fe1c 	bl	8006ebc <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800128a:	f000 f9a1 	bl	80015d0 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3778      	adds	r7, #120	@ 0x78
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800129c:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <MX_I2C2_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <MX_I2C2_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_I2C2_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <MX_I2C2_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <MX_I2C2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_I2C2_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <MX_I2C2_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_I2C2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_I2C2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	@ (800130c <MX_I2C2_Init+0x74>)
 80012d4:	f002 fa52 	bl	800377c <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 f977 	bl	80015d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	@ (800130c <MX_I2C2_Init+0x74>)
 80012e6:	f004 fdb9 	bl	8005e5c <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 f96e 	bl	80015d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_I2C2_Init+0x74>)
 80012f8:	f004 fdfb 	bl	8005ef2 <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 f965 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000098 	.word	0x20000098
 8001310:	40005800 	.word	0x40005800
 8001314:	20a0c4df 	.word	0x20a0c4df

08001318 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800131c:	2000      	movs	r0, #0
 800131e:	f004 fe35 	bl	8005f8c <HAL_ICACHE_ConfigAssociativityMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001328:	f000 f952 	bl	80015d0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800132c:	f004 fe4e 	bl	8005fcc <HAL_ICACHE_Enable>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001336:	f000 f94b 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800136e:	4b33      	ldr	r3, [pc, #204]	@ (800143c <MX_RTC_Init+0xfc>)
 8001370:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <MX_RTC_Init+0x100>)
 8001372:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001374:	4b31      	ldr	r3, [pc, #196]	@ (800143c <MX_RTC_Init+0xfc>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800137a:	4b30      	ldr	r3, [pc, #192]	@ (800143c <MX_RTC_Init+0xfc>)
 800137c:	227f      	movs	r2, #127	@ 0x7f
 800137e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001380:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <MX_RTC_Init+0xfc>)
 8001382:	22ff      	movs	r2, #255	@ 0xff
 8001384:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001386:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <MX_RTC_Init+0xfc>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800138c:	4b2b      	ldr	r3, [pc, #172]	@ (800143c <MX_RTC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001392:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <MX_RTC_Init+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <MX_RTC_Init+0xfc>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_RTC_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80013a6:	4b25      	ldr	r3, [pc, #148]	@ (800143c <MX_RTC_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ac:	4823      	ldr	r0, [pc, #140]	@ (800143c <MX_RTC_Init+0xfc>)
 80013ae:	f008 fe35 	bl	800a01c <HAL_RTC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f000 f90a 	bl	80015d0 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	481a      	ldr	r0, [pc, #104]	@ (800143c <MX_RTC_Init+0xfc>)
 80013d4:	f009 f89a 	bl	800a50c <HAL_RTCEx_PrivilegeModeSet>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013de:	f000 f8f7 	bl	80015d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2201      	movs	r2, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	480f      	ldr	r0, [pc, #60]	@ (800143c <MX_RTC_Init+0xfc>)
 8001400:	f008 fe96 	bl	800a130 <HAL_RTC_SetTime>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800140a:	f000 f8e1 	bl	80015d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800140e:	2301      	movs	r3, #1
 8001410:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001412:	2301      	movs	r3, #1
 8001414:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001416:	2301      	movs	r3, #1
 8001418:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_RTC_Init+0xfc>)
 8001426:	f008 ff1f 	bl	800a268 <HAL_RTC_SetDate>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001430:	f000 f8ce 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	@ 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000ec 	.word	0x200000ec
 8001440:	46007800 	.word	0x46007800

08001444 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_TIM16_Init+0x48>)
 800144a:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <MX_TIM16_Init+0x4c>)
 800144c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12800 - 1;
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_TIM16_Init+0x48>)
 8001450:	f243 12ff 	movw	r2, #12799	@ 0x31ff
 8001454:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <MX_TIM16_Init+0x48>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_TIM16_Init+0x48>)
 800145e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001462:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_TIM16_Init+0x48>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_TIM16_Init+0x48>)
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_TIM16_Init+0x48>)
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_TIM16_Init+0x48>)
 8001478:	f009 f876 	bl	800a568 <HAL_TIM_Base_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001482:	f000 f8a5 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000011c 	.word	0x2000011c
 8001490:	40014400 	.word	0x40014400

08001494 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <MX_UART4_Init+0x90>)
 800149a:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <MX_UART4_Init+0x94>)
 800149c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_UART4_Init+0x90>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_UART4_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_UART4_Init+0x90>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_UART4_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_UART4_Init+0x90>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_UART4_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_UART4_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_UART4_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_UART4_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_UART4_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014dc:	4811      	ldr	r0, [pc, #68]	@ (8001524 <MX_UART4_Init+0x90>)
 80014de:	f009 fc27 	bl	800ad30 <HAL_UART_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 f872 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ec:	2100      	movs	r1, #0
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_UART4_Init+0x90>)
 80014f0:	f00b faa9 	bl	800ca46 <HAL_UARTEx_SetTxFifoThreshold>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014fa:	f000 f869 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4808      	ldr	r0, [pc, #32]	@ (8001524 <MX_UART4_Init+0x90>)
 8001502:	f00b fade 	bl	800cac2 <HAL_UARTEx_SetRxFifoThreshold>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800150c:	f000 f860 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_UART4_Init+0x90>)
 8001512:	f00b fa5f 	bl	800c9d4 <HAL_UARTEx_DisableFifoMode>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800151c:	f000 f858 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000168 	.word	0x20000168
 8001528:	40004c00 	.word	0x40004c00

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001538:	4a17      	ldr	r2, [pc, #92]	@ (8001598 <MX_GPIO_Init+0x6c>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001556:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001574:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800157a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_GPIO_Init+0x6c>)
 8001580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	46020c00 	.word	0x46020c00

0800159c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM16)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d107      	bne.n	80015be <HAL_TIM_PeriodElapsedCallback+0x22>
    {
    	HAL_TIM_Base_Stop_IT(&htim16);
 80015ae:	4807      	ldr	r0, [pc, #28]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015b0:	f009 f8d2 	bl	800a758 <HAL_TIM_Base_Stop_IT>
        // Your code here: runs every 5 seconds
    	sensor_interface_schedule_readings();
 80015b4:	f000 ff2e 	bl	8002414 <sensor_interface_schedule_readings>
        //TODO: trigger meassurements
    	HAL_TIM_Base_Start_IT(&htim16);
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015ba:	f009 f82d 	bl	800a618 <HAL_TIM_Base_Start_IT>
    }

}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40014400 	.word	0x40014400
 80015cc:	2000011c 	.word	0x2000011c

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <Error_Handler+0x8>

080015dc <ppg_custom_read_command>:
static bool ppg_trigger_measurement();
static bool ppg_trigger_data_collection();



bool ppg_custom_read_command(uint8_t device_addr, uint8_t cmd, uint8_t* out, uint8_t len) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	603a      	str	r2, [r7, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	460b      	mov	r3, r1
 80015ec:	71bb      	strb	r3, [r7, #6]
 80015ee:	4613      	mov	r3, r2
 80015f0:	717b      	strb	r3, [r7, #5]
	I2C_Handler_t* i2c_handler = i2c_handler_get();
 80015f2:	f7ff fdbd 	bl	8001170 <i2c_handler_get>
 80015f6:	60f8      	str	r0, [r7, #12]
	// 1) send the “get HR/SpO2” command
    if (HAL_I2C_Master_Transmit(i2c_handler->hi2c, device_addr << 1, &cmd, 1, I2C_DELAY) != HAL_OK) {
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6858      	ldr	r0, [r3, #4]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b299      	uxth	r1, r3
 8001604:	1dba      	adds	r2, r7, #6
 8001606:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	f002 f951 	bl	80038b4 <HAL_I2C_Master_Transmit>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <ppg_custom_read_command+0x40>
        return false;
 8001618:	2300      	movs	r3, #0
 800161a:	e013      	b.n	8001644 <ppg_custom_read_command+0x68>
    }
    // 2) then read back len bytes
    if (HAL_I2C_Master_Receive(i2c_handler->hi2c, device_addr << 1, out, len, I2C_DELAY) != HAL_OK) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6858      	ldr	r0, [r3, #4]
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	b29b      	uxth	r3, r3
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	b299      	uxth	r1, r3
 8001628:	797b      	ldrb	r3, [r7, #5]
 800162a:	b29b      	uxth	r3, r3
 800162c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	f002 fa32 	bl	8003a9c <HAL_I2C_Master_Receive>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <ppg_custom_read_command+0x66>
        return false;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <ppg_custom_read_command+0x68>
    }
    return true;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <ppg_sensor_init>:


void ppg_sensor_init(uint8_t address) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    ppg_sensor = (PPG_Sensor_t*) malloc(sizeof(PPG_Sensor_t));
 8001656:	20c4      	movs	r0, #196	@ 0xc4
 8001658:	f00b fb1e 	bl	800cc98 <malloc>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <ppg_sensor_init+0xc8>)
 8001662:	601a      	str	r2, [r3, #0]
    memset(ppg_sensor, 0, sizeof(PPG_Sensor_t));
 8001664:	4b2b      	ldr	r3, [pc, #172]	@ (8001714 <ppg_sensor_init+0xc8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	22c4      	movs	r2, #196	@ 0xc4
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00b fbc9 	bl	800ce04 <memset>
    memset(ppg_data_ptr_buffer, 0, sizeof(ppg_data_ptr_buffer));
 8001672:	2228      	movs	r2, #40	@ 0x28
 8001674:	2100      	movs	r1, #0
 8001676:	4828      	ldr	r0, [pc, #160]	@ (8001718 <ppg_sensor_init+0xcc>)
 8001678:	f00b fbc4 	bl	800ce04 <memset>

    ppg_sensor->i2c_address = address;
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <ppg_sensor_init+0xc8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	701a      	strb	r2, [r3, #0]
    ppg_sensor->format_uart_response = ppg_format_uart_response;
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <ppg_sensor_init+0xc8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a24      	ldr	r2, [pc, #144]	@ (800171c <ppg_sensor_init+0xd0>)
 800168a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    ppg_sensor->get_last_data = ppg_get_last_data;
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <ppg_sensor_init+0xc8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <ppg_sensor_init+0xd4>)
 8001694:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    ppg_sensor->get_last_n_data = ppg_get_last_n_data;
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <ppg_sensor_init+0xc8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a21      	ldr	r2, [pc, #132]	@ (8001724 <ppg_sensor_init+0xd8>)
 800169e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    ppg_sensor->get_last_n_data_serial_format = ppg_get_last_n_serial_format;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <ppg_sensor_init+0xc8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <ppg_sensor_init+0xdc>)
 80016a8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    ppg_sensor->decode_i2c_response = ppg_decode_i2c_response;
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <ppg_sensor_init+0xc8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <ppg_sensor_init+0xe0>)
 80016b2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    ppg_sensor->trigger_data_collection = ppg_trigger_data_collection;
 80016b6:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <ppg_sensor_init+0xc8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001730 <ppg_sensor_init+0xe4>)
 80016bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    ppg_sensor->trigger_measurement = ppg_trigger_measurement;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <ppg_sensor_init+0xc8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <ppg_sensor_init+0xe8>)
 80016c6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    // - WHO_AM_I equivalent if applicable

    // Example (placeholder):
    // uint8_t init_cmd[2] = { SENSOR_REG_MODE_CONFIG, 0x03 };
    // i2c_handler_write_reg(address, init_cmd, 2);
    I2C_Handler_t* i2c = i2c_handler_get();
 80016ca:	f7ff fd51 	bl	8001170 <i2c_handler_get>
 80016ce:	60f8      	str	r0, [r7, #12]
    uint8_t ctrl1[3] = { PPG_SENSOR_SEN0344_START_STOP, 0x00,0x01 };
 80016d0:	4a19      	ldr	r2, [pc, #100]	@ (8001738 <ppg_sensor_init+0xec>)
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4611      	mov	r1, r2
 80016da:	8019      	strh	r1, [r3, #0]
 80016dc:	3302      	adds	r3, #2
 80016de:	0c12      	lsrs	r2, r2, #16
 80016e0:	701a      	strb	r2, [r3, #0]
//	if (!i2c->write_reg(ppg_sensor->i2c_address, ctrl1, 3)) {
//		return;
//	}

    if (HAL_I2C_Master_Transmit(i2c->hi2c, address << 1, ctrl1, 3, I2C_DELAY) != HAL_OK) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6858      	ldr	r0, [r3, #4]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	b299      	uxth	r1, r3
 80016ee:	f107 0208 	add.w	r2, r7, #8
 80016f2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2303      	movs	r3, #3
 80016fa:	f002 f8db 	bl	80038b4 <HAL_I2C_Master_Transmit>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <ppg_sensor_init+0xc0>
            return false;
        }
    HAL_Delay(5);
 8001704:	2005      	movs	r0, #5
 8001706:	f001 fbe7 	bl	8002ed8 <HAL_Delay>
 800170a:	e000      	b.n	800170e <ppg_sensor_init+0xc2>
            return false;
 800170c:	bf00      	nop
}
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200001fc 	.word	0x200001fc
 8001718:	20000200 	.word	0x20000200
 800171c:	08001755 	.word	0x08001755
 8001720:	08001811 	.word	0x08001811
 8001724:	08001855 	.word	0x08001855
 8001728:	080018ed 	.word	0x080018ed
 800172c:	08001ba9 	.word	0x08001ba9
 8001730:	08001b55 	.word	0x08001b55
 8001734:	08001b45 	.word	0x08001b45
 8001738:	0800cec0 	.word	0x0800cec0

0800173c <ppg_sensor_get>:
        free(ppg_sensor);
        ppg_sensor = NULL;
    }
}

PPG_Sensor_t* ppg_sensor_get(void) {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
    return ppg_sensor;
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <ppg_sensor_get+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200001fc 	.word	0x200001fc

08001754 <ppg_format_uart_response>:



// === Local Functions ===

static void ppg_format_uart_response(uint8_t* payload_out) {
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    PPG_Data_t* last = &ppg_sensor->history[
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <ppg_format_uart_response+0xb4>)
 800175e:	6818      	ldr	r0, [r3, #0]
        (ppg_sensor->head_index - 1 + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE];
 8001760:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <ppg_format_uart_response+0xb4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001768:	f103 0109 	add.w	r1, r3, #9
 800176c:	4b27      	ldr	r3, [pc, #156]	@ (800180c <ppg_format_uart_response+0xb8>)
 800176e:	fb83 2301 	smull	r2, r3, r3, r1
 8001772:	109a      	asrs	r2, r3, #2
 8001774:	17cb      	asrs	r3, r1, #31
 8001776:	1ad2      	subs	r2, r2, r3
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	1aca      	subs	r2, r1, r3
    PPG_Data_t* last = &ppg_sensor->history[
 8001782:	0113      	lsls	r3, r2, #4
 8001784:	4403      	add	r3, r0
 8001786:	3304      	adds	r3, #4
 8001788:	60fb      	str	r3, [r7, #12]


	payload_out[0] = (last->hr >> 8) & 0xFF;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b2da      	uxtb	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	701a      	strb	r2, [r3, #0]
	payload_out[1] = (last->hr >> 0) & 0xFF;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3301      	adds	r3, #1
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
	payload_out[2] = (last->spo2 >> 8) & 0xFF;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3302      	adds	r3, #2
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
	payload_out[3] = (last->spo2 >> 0) & 0xFF;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3303      	adds	r3, #3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	7912      	ldrb	r2, [r2, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
	payload_out[4] = 0x00;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3304      	adds	r3, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
	payload_out[5] = 0x00;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3305      	adds	r3, #5
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
	payload_out[6] = (last->timestamp >> 24) & 0xFF;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e1a      	lsrs	r2, r3, #24
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3306      	adds	r3, #6
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
	payload_out[7] = (last->timestamp >> 16) & 0xFF;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0c1a      	lsrs	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3307      	adds	r3, #7
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	701a      	strb	r2, [r3, #0]
    payload_out[8] = (last->timestamp >> 8)  & 0xFF;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0a1a      	lsrs	r2, r3, #8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3308      	adds	r3, #8
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
    payload_out[9] = (last->timestamp >> 0)  & 0xFF;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3309      	adds	r3, #9
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200001fc 	.word	0x200001fc
 800180c:	66666667 	.word	0x66666667

08001810 <ppg_get_last_data>:

static PPG_Data_t* ppg_get_last_data() {
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
    return &ppg_sensor->history[
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <ppg_get_last_data+0x3c>)
 8001816:	6818      	ldr	r0, [r3, #0]
        (ppg_sensor->head_index - 1 + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE];
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <ppg_get_last_data+0x3c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001820:	f103 0109 	add.w	r1, r3, #9
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <ppg_get_last_data+0x40>)
 8001826:	fb83 2301 	smull	r2, r3, r3, r1
 800182a:	109a      	asrs	r2, r3, #2
 800182c:	17cb      	asrs	r3, r1, #31
 800182e:	1ad2      	subs	r2, r2, r3
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	1aca      	subs	r2, r1, r3
    return &ppg_sensor->history[
 800183a:	0113      	lsls	r3, r2, #4
 800183c:	4403      	add	r3, r0
 800183e:	3304      	adds	r3, #4
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200001fc 	.word	0x200001fc
 8001850:	66666667 	.word	0x66666667

08001854 <ppg_get_last_n_data>:

static PPG_Data_t** ppg_get_last_n_data(uint8_t n) {
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
    if (!ppg_sensor || n == 0 || n > ppg_sensor->count) return NULL;
 800185e:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <ppg_get_last_n_data+0x8c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <ppg_get_last_n_data+0x26>
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <ppg_get_last_n_data+0x26>
 800186c:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <ppg_get_last_n_data+0x8c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	429a      	cmp	r2, r3
 8001878:	d901      	bls.n	800187e <ppg_get_last_n_data+0x2a>
 800187a:	2300      	movs	r3, #0
 800187c:	e029      	b.n	80018d2 <ppg_get_last_n_data+0x7e>

    for (uint8_t i = 0; i < n; ++i) {
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e021      	b.n	80018c8 <ppg_get_last_n_data+0x74>
        int index = (ppg_sensor->head_index - 1 - i + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE;
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <ppg_get_last_n_data+0x8c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f103 020a 	add.w	r2, r3, #10
 8001896:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <ppg_get_last_n_data+0x90>)
 8001898:	fb83 1302 	smull	r1, r3, r3, r2
 800189c:	1099      	asrs	r1, r3, #2
 800189e:	17d3      	asrs	r3, r2, #31
 80018a0:	1ac9      	subs	r1, r1, r3
 80018a2:	460b      	mov	r3, r1
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	60bb      	str	r3, [r7, #8]
        ppg_data_ptr_buffer[i] = &ppg_sensor->history[index];
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <ppg_get_last_n_data+0x8c>)
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	440a      	add	r2, r1
 80018ba:	3204      	adds	r2, #4
 80018bc:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <ppg_get_last_n_data+0x94>)
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < n; ++i) {
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	3301      	adds	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d3d9      	bcc.n	8001884 <ppg_get_last_n_data+0x30>
    }
    return ppg_data_ptr_buffer;
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <ppg_get_last_n_data+0x94>)
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200001fc 	.word	0x200001fc
 80018e4:	66666667 	.word	0x66666667
 80018e8:	20000200 	.word	0x20000200

080018ec <ppg_get_last_n_serial_format>:

static uint8_t ppg_get_last_n_serial_format(uint8_t n, uint8_t* out) {
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
    if (!ppg_sensor || !out || n == 0 || n > ppg_sensor->count) return 0;
 80018f8:	4b45      	ldr	r3, [pc, #276]	@ (8001a10 <ppg_get_last_n_serial_format+0x124>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00c      	beq.n	800191a <ppg_get_last_n_serial_format+0x2e>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <ppg_get_last_n_serial_format+0x2e>
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <ppg_get_last_n_serial_format+0x2e>
 800190c:	4b40      	ldr	r3, [pc, #256]	@ (8001a10 <ppg_get_last_n_serial_format+0x124>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	429a      	cmp	r2, r3
 8001918:	d901      	bls.n	800191e <ppg_get_last_n_serial_format+0x32>
 800191a:	2300      	movs	r3, #0
 800191c:	e071      	b.n	8001a02 <ppg_get_last_n_serial_format+0x116>

    for (uint8_t i = 0; i < n; ++i) {
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
 8001922:	e067      	b.n	80019f4 <ppg_get_last_n_serial_format+0x108>
        int index = (ppg_sensor->head_index - 1 - i + PPG_SENSOR_HISTORY_SIZE) % PPG_SENSOR_HISTORY_SIZE;
 8001924:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <ppg_get_last_n_serial_format+0x124>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f103 020a 	add.w	r2, r3, #10
 8001936:	4b37      	ldr	r3, [pc, #220]	@ (8001a14 <ppg_get_last_n_serial_format+0x128>)
 8001938:	fb83 1302 	smull	r1, r3, r3, r2
 800193c:	1099      	asrs	r1, r3, #2
 800193e:	17d3      	asrs	r3, r2, #31
 8001940:	1ac9      	subs	r1, r1, r3
 8001942:	460b      	mov	r3, r1
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	613b      	str	r3, [r7, #16]
        PPG_Data_t* data = &ppg_sensor->history[index];
 800194e:	4b30      	ldr	r3, [pc, #192]	@ (8001a10 <ppg_get_last_n_serial_format+0x124>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	60fb      	str	r3, [r7, #12]

        out[i * 8 + 0] = (data->hr >> 8) & 0xFF;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	0a1a      	lsrs	r2, r3, #8
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4619      	mov	r1, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	440b      	add	r3, r1
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 1] = (data->hr >> 0)  & 0xFF;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6899      	ldr	r1, [r3, #8]
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	3301      	adds	r3, #1
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 2] = (data->spo2 >> 8)  & 0xFF;
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	3302      	adds	r3, #2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 3] = (data->spo2 >> 0)  & 0xFF;
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	3303      	adds	r3, #3
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	4413      	add	r3, r2
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	7912      	ldrb	r2, [r2, #4]
 800199e:	701a      	strb	r2, [r3, #0]

        out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0e19      	lsrs	r1, r3, #24
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	3304      	adds	r3, #4
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0c19      	lsrs	r1, r3, #16
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	3305      	adds	r3, #5
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 6] = (data->timestamp >> 8)  & 0xFF;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0a19      	lsrs	r1, r3, #8
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	3306      	adds	r3, #6
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 7] = (data->timestamp >> 0)  & 0xFF;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	3307      	adds	r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	4413      	add	r3, r2
 80019ea:	b2ca      	uxtb	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; ++i) {
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	3301      	adds	r3, #1
 80019f2:	75fb      	strb	r3, [r7, #23]
 80019f4:	7dfa      	ldrb	r2, [r7, #23]
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d393      	bcc.n	8001924 <ppg_get_last_n_serial_format+0x38>
    }

    return (n * 8);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	b2db      	uxtb	r3, r3
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	200001fc 	.word	0x200001fc
 8001a14:	66666667 	.word	0x66666667

08001a18 <ppg_get_last_n_bodytemp_serial_format>:

uint8_t ppg_get_last_n_bodytemp_serial_format(uint8_t n, uint8_t* out) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
    if (!ppg_sensor || !out || n == 0 || n > ppg_sensor->count) return 0;
 8001a24:	4b45      	ldr	r3, [pc, #276]	@ (8001b3c <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <ppg_get_last_n_bodytemp_serial_format+0x2e>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <ppg_get_last_n_bodytemp_serial_format+0x2e>
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <ppg_get_last_n_bodytemp_serial_format+0x2e>
 8001a38:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001a40:	79fa      	ldrb	r2, [r7, #7]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d901      	bls.n	8001a4a <ppg_get_last_n_bodytemp_serial_format+0x32>
 8001a46:	2300      	movs	r3, #0
 8001a48:	e071      	b.n	8001b2e <ppg_get_last_n_bodytemp_serial_format+0x116>

	uint8_t i;
	for (i = 0; i < n; ++i) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]
 8001a4e:	e067      	b.n	8001b20 <ppg_get_last_n_bodytemp_serial_format+0x108>
		int index = (ppg_sensor->head_index - 1 - i
 8001a50:	4b3a      	ldr	r3, [pc, #232]	@ (8001b3c <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	1ad3      	subs	r3, r2, r3
				+ PPG_SENSOR_HISTORY_SIZE)
 8001a5e:	f103 020a 	add.w	r2, r3, #10
		int index = (ppg_sensor->head_index - 1 - i
 8001a62:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <ppg_get_last_n_bodytemp_serial_format+0x128>)
 8001a64:	fb83 1302 	smull	r1, r3, r3, r2
 8001a68:	1099      	asrs	r1, r3, #2
 8001a6a:	17d3      	asrs	r3, r2, #31
 8001a6c:	1ac9      	subs	r1, r1, r3
 8001a6e:	460b      	mov	r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	613b      	str	r3, [r7, #16]
				% PPG_SENSOR_HISTORY_SIZE;
		PPG_Data_t *data = &ppg_sensor->history[index];
 8001a7a:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <ppg_get_last_n_bodytemp_serial_format+0x124>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	4413      	add	r3, r2
 8001a84:	3304      	adds	r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]


		// Pack: [TEMP x100 MSB, LSB], [TIMESTAMP MSB to LSB]
		out[i * 8 + 0] = (data->temp >> 8) & 0xFF;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	899b      	ldrh	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4619      	mov	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	440b      	add	r3, r1
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 1] = (data->temp >> 0) & 0xFF;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8999      	ldrh	r1, [r3, #12]
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 2] = 0x00;
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 3] = 0x00;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e19      	lsrs	r1, r3, #24
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0c19      	lsrs	r1, r3, #16
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	3305      	adds	r3, #5
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 6] = (data->timestamp >> 8) & 0xFF;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0a19      	lsrs	r1, r3, #8
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	3306      	adds	r3, #6
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	701a      	strb	r2, [r3, #0]
		out[i * 8 + 7] = (data->timestamp >> 0) & 0xFF;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	3307      	adds	r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n; ++i) {
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	75fb      	strb	r3, [r7, #23]
 8001b20:	7dfa      	ldrb	r2, [r7, #23]
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d393      	bcc.n	8001a50 <ppg_get_last_n_bodytemp_serial_format+0x38>
	}

	return (i * 8);
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	b2db      	uxtb	r3, r3
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200001fc 	.word	0x200001fc
 8001b40:	66666667 	.word	0x66666667

08001b44 <ppg_trigger_measurement>:

static bool ppg_trigger_measurement() {
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
    // NOT needed here
    return true;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <ppg_trigger_data_collection>:

static bool ppg_trigger_data_collection() {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	I2C_Handler_t *i2c = i2c_handler_get();
 8001b5a:	f7ff fb09 	bl	8001170 <i2c_handler_get>
 8001b5e:	6078      	str	r0, [r7, #4]

	uint8_t reg = PPG_SENSOR_SEN0344_HR_SPO2;
 8001b60:	230c      	movs	r3, #12
 8001b62:	70fb      	strb	r3, [r7, #3]
//	if (!i2c->read_reg(ppg_sensor->i2c_address, &reg, 1, 8)) {
//		i2c->state=I2C_STATE_IDLE;
//		return false;
//	}
	if (!ppg_custom_read_command(ppg_sensor->i2c_address, reg, i2c->Response_buffer, 10))
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <ppg_trigger_data_collection+0x50>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	7818      	ldrb	r0, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8001b70:	78f9      	ldrb	r1, [r7, #3]
 8001b72:	230a      	movs	r3, #10
 8001b74:	f7ff fd32 	bl	80015dc <ppg_custom_read_command>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <ppg_trigger_data_collection+0x34>
	        return false;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e009      	b.n	8001b9c <ppg_trigger_data_collection+0x48>
    // i2c->read_reg(ppg_sensor->i2c_address, &reg, 1, 6);  // 3 bytes red + 3 bytes IR




    ppg_sensor->decode_i2c_response(i2c->Response_buffer, 10);
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <ppg_trigger_data_collection+0x50>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	322a      	adds	r2, #42	@ 0x2a
 8001b94:	210a      	movs	r1, #10
 8001b96:	4610      	mov	r0, r2
 8001b98:	4798      	blx	r3

    return true;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200001fc 	.word	0x200001fc

08001ba8 <ppg_decode_i2c_response>:

static void ppg_decode_i2c_response(uint8_t* data, uint8_t len) {
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
    // TODO: Parse raw bytes into red/IR values if using direct reads from FIFO
	// sample.red = ((data[0] << 16) | (data[1] << 8) | data[2]);
	// sample.ir  = ((data[3] << 16) | (data[4] << 8) | data[5]);

	PPG_Data_t sample;
	sample.spo2 = ((uint8_t)data[0]);;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	743b      	strb	r3, [r7, #16]
	sample.hr = ((uint32_t)data[2] << 24) | ((uint32_t)data[3] << 16) |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	061a      	lsls	r2, r3, #24
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	041b      	lsls	r3, r3, #16
 8001bca:	431a      	orrs	r2, r3
		       ((uint32_t)data[4] << 8) | ((uint32_t)data[5]);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	021b      	lsls	r3, r3, #8
	sample.hr = ((uint32_t)data[2] << 24) | ((uint32_t)data[3] << 16) |
 8001bd4:	4313      	orrs	r3, r2
		       ((uint32_t)data[4] << 8) | ((uint32_t)data[5]);
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	3205      	adds	r2, #5
 8001bda:	7812      	ldrb	r2, [r2, #0]
 8001bdc:	4313      	orrs	r3, r2
	sample.hr = ((uint32_t)data[2] << 24) | ((uint32_t)data[3] << 16) |
 8001bde:	617b      	str	r3, [r7, #20]

	float Temperature = data[8] * 1.0 + data[9] / 100.0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3308      	adds	r3, #8
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc98 	bl	800051c <__aeabi_i2d>
 8001bec:	4604      	mov	r4, r0
 8001bee:	460d      	mov	r5, r1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3309      	adds	r3, #9
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fc90 	bl	800051c <__aeabi_i2d>
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <ppg_decode_i2c_response+0x100>)
 8001c02:	f7fe fe1f 	bl	8000844 <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	f7fe fb39 	bl	8000284 <__adddf3>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe fefb 	bl	8000a14 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	61fb      	str	r3, [r7, #28]
	sample.temp=(uint16_t)(Temperature*100);
 8001c22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c26:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001cac <ppg_decode_i2c_response+0x104>
 8001c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c32:	ee17 3a90 	vmov	r3, s15
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	833b      	strh	r3, [r7, #24]

	sample.timestamp = 0x60D4A000; // Replace with RTC time
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <ppg_decode_i2c_response+0x108>)
 8001c3c:	60fb      	str	r3, [r7, #12]

	ppg_sensor->history[ppg_sensor->head_index] = sample;
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <ppg_decode_i2c_response+0x10c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <ppg_decode_i2c_response+0x10c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	4413      	add	r3, r2
 8001c4e:	1d1c      	adds	r4, r3, #4
 8001c50:	f107 030c 	add.w	r3, r7, #12
 8001c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ppg_sensor->head_index = (ppg_sensor->head_index + 1)
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <ppg_decode_i2c_response+0x10c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8001c62:	1c5a      	adds	r2, r3, #1
			% PPG_SENSOR_HISTORY_SIZE;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <ppg_decode_i2c_response+0x110>)
 8001c66:	fb83 1302 	smull	r1, r3, r3, r2
 8001c6a:	1099      	asrs	r1, r3, #2
 8001c6c:	17d3      	asrs	r3, r2, #31
 8001c6e:	1ac9      	subs	r1, r1, r3
 8001c70:	460b      	mov	r3, r1
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	1ad1      	subs	r1, r2, r3
	ppg_sensor->head_index = (ppg_sensor->head_index + 1)
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <ppg_decode_i2c_response+0x10c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2ca      	uxtb	r2, r1
 8001c80:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	if (ppg_sensor->count < PPG_SENSOR_HISTORY_SIZE)
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <ppg_decode_i2c_response+0x10c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d807      	bhi.n	8001ca0 <ppg_decode_i2c_response+0xf8>
		ppg_sensor->count++;
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <ppg_decode_i2c_response+0x10c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 8001c98:	3201      	adds	r2, #1
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
}
 8001ca0:	bf00      	nop
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca8:	40590000 	.word	0x40590000
 8001cac:	42c80000 	.word	0x42c80000
 8001cb0:	60d4a000 	.word	0x60d4a000
 8001cb4:	200001fc 	.word	0x200001fc
 8001cb8:	66666667 	.word	0x66666667

08001cbc <pressure_sensor_init>:





void pressure_sensor_init(uint8_t address) {
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
    pressure_sensor = (Pressure_Sensor_t*) malloc(sizeof(Pressure_Sensor_t));
 8001cc6:	209c      	movs	r0, #156	@ 0x9c
 8001cc8:	f00a ffe6 	bl	800cc98 <malloc>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b42      	ldr	r3, [pc, #264]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001cd2:	601a      	str	r2, [r3, #0]
    memset(pressure_sensor, 0, sizeof(Pressure_Sensor_t));
 8001cd4:	4b41      	ldr	r3, [pc, #260]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	229c      	movs	r2, #156	@ 0x9c
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00b f891 	bl	800ce04 <memset>
    memset(pressure_data_ptr_buffer, 0, sizeof(pressure_data_ptr_buffer));
 8001ce2:	2228      	movs	r2, #40	@ 0x28
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	483e      	ldr	r0, [pc, #248]	@ (8001de0 <pressure_sensor_init+0x124>)
 8001ce8:	f00b f88c 	bl	800ce04 <memset>

    pressure_sensor->i2c_address = address;
 8001cec:	4b3b      	ldr	r3, [pc, #236]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	701a      	strb	r2, [r3, #0]
    pressure_sensor->format_uart_response = pressure_format_uart_response;
 8001cf4:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8001de4 <pressure_sensor_init+0x128>)
 8001cfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    pressure_sensor->get_last_data = pressure_get_last_data;
 8001cfe:	4b37      	ldr	r3, [pc, #220]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a39      	ldr	r2, [pc, #228]	@ (8001de8 <pressure_sensor_init+0x12c>)
 8001d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    pressure_sensor->get_last_n_data = pressure_get_last_n_data;
 8001d08:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a37      	ldr	r2, [pc, #220]	@ (8001dec <pressure_sensor_init+0x130>)
 8001d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    pressure_sensor->get_last_n_data_serial_format = pressure_get_last_n_serial_format;
 8001d12:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <pressure_sensor_init+0x134>)
 8001d18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    pressure_sensor->decode_i2c_response = pressure_decode_i2c_response;
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <pressure_sensor_init+0x138>)
 8001d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    pressure_sensor->trigger_data_collection = pressure_trigger_data_collection;
 8001d26:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a33      	ldr	r2, [pc, #204]	@ (8001df8 <pressure_sensor_init+0x13c>)
 8001d2c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pressure_sensor->trigger_measurement = pressure_trigger_measurement;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <pressure_sensor_init+0x120>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <pressure_sensor_init+0x140>)
 8001d36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    I2C_Handler_t* i2c = i2c_handler_get();
 8001d3a:	f7ff fa19 	bl	8001170 <i2c_handler_get>
 8001d3e:	60f8      	str	r0, [r7, #12]
    uint8_t reg = PRESSURE_SENSOR_LPS22HH_WHO_AM_I_REG;
 8001d40:	230f      	movs	r3, #15
 8001d42:	72fb      	strb	r3, [r7, #11]

    if (!i2c->read_reg(address, &reg, 1, 1)) return;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001d48:	f107 010b 	add.w	r1, r7, #11
 8001d4c:	79f8      	ldrb	r0, [r7, #7]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	2201      	movs	r2, #1
 8001d52:	47a0      	blx	r4
 8001d54:	4603      	mov	r3, r0
 8001d56:	f083 0301 	eor.w	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d136      	bne.n	8001dce <pressure_sensor_init+0x112>
    HAL_Delay(5);
 8001d60:	2005      	movs	r0, #5
 8001d62:	f001 f8b9 	bl	8002ed8 <HAL_Delay>
    if (i2c->state == I2C_STATE_MSG_WAITING_FOR_PROCESSING && i2c->Response_buffer[0] == PRESSURE_SENSOR_LPS22HH_WHO_AM_I_VAL) {
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <pressure_sensor_init+0xc2>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001d74:	2bb3      	cmp	r3, #179	@ 0xb3
 8001d76:	d102      	bne.n	8001d7e <pressure_sensor_init+0xc2>
        // WHO_AM_I OK
    	i2c->state=I2C_STATE_IDLE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
    }


    // Enable Continuous Mode: ODR=10Hz (0b010), BDU=0, LPFP=0
    // CTRL_REG1 = 0b01000000 = 0x40
    uint8_t ctrl1[2] = { PRESSURE_SENSOR_LPS22HH_CTRL_REG1, 0x40 };
 8001d7e:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001d82:	813b      	strh	r3, [r7, #8]

//    // Power on: CTRL_REG1 = BDU=1, ODR=0 → 0x02
//    uint8_t ctrl1[2] = { PRESSURE_SENSOR_LPS22HH_CTRL_REG1, 0x02 };
    i2c->write_reg(address, ctrl1, 2);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	f107 0108 	add.w	r1, r7, #8
 8001d8c:	79f8      	ldrb	r0, [r7, #7]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	4798      	blx	r3
	HAL_Delay(5);
 8001d92:	2005      	movs	r0, #5
 8001d94:	f001 f8a0 	bl	8002ed8 <HAL_Delay>

	reg = PRESSURE_SENSOR_LPS22HH_CTRL_REG1;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	72fb      	strb	r3, [r7, #11]
	if (!i2c->read_reg(address, &reg, 1, 1))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8001da0:	f107 010b 	add.w	r1, r7, #11
 8001da4:	79f8      	ldrb	r0, [r7, #7]
 8001da6:	2301      	movs	r3, #1
 8001da8:	2201      	movs	r2, #1
 8001daa:	47a0      	blx	r4
 8001dac:	4603      	mov	r3, r0
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10c      	bne.n	8001dd2 <pressure_sensor_init+0x116>
		return;
	HAL_Delay(5);
 8001db8:	2005      	movs	r0, #5
 8001dba:	f001 f88d 	bl	8002ed8 <HAL_Delay>
	if (i2c->state == I2C_STATE_MSG_WAITING_FOR_PROCESSING) {
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d106      	bne.n	8001dd4 <pressure_sensor_init+0x118>
		// WHO_AM_I OK
		i2c->state = I2C_STATE_IDLE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e002      	b.n	8001dd4 <pressure_sensor_init+0x118>
    if (!i2c->read_reg(address, &reg, 1, 1)) return;
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <pressure_sensor_init+0x118>
		return;
 8001dd2:	bf00      	nop
	}



}
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000228 	.word	0x20000228
 8001de0:	2000022c 	.word	0x2000022c
 8001de4:	08001e19 	.word	0x08001e19
 8001de8:	08001ecd 	.word	0x08001ecd
 8001dec:	08001f15 	.word	0x08001f15
 8001df0:	08001fb1 	.word	0x08001fb1
 8001df4:	080022cd 	.word	0x080022cd
 8001df8:	08002245 	.word	0x08002245
 8001dfc:	08002215 	.word	0x08002215

08001e00 <pressure_sensor_get>:
        free(pressure_sensor);
        pressure_sensor = NULL;
    }
}

Pressure_Sensor_t* pressure_sensor_get(void) {
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
    return pressure_sensor;
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <pressure_sensor_get+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000228 	.word	0x20000228

08001e18 <pressure_format_uart_response>:

// === Local Functions ===

static void pressure_format_uart_response(uint8_t* payload_out) {
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    Pressure_Data_t* last = &pressure_sensor->history[
 8001e20:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <pressure_format_uart_response+0xac>)
 8001e22:	6818      	ldr	r0, [r3, #0]
        (pressure_sensor->head_index - 1 + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE];
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <pressure_format_uart_response+0xac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001e2c:	f103 0109 	add.w	r1, r3, #9
 8001e30:	4b25      	ldr	r3, [pc, #148]	@ (8001ec8 <pressure_format_uart_response+0xb0>)
 8001e32:	fb83 2301 	smull	r2, r3, r3, r1
 8001e36:	109a      	asrs	r2, r3, #2
 8001e38:	17cb      	asrs	r3, r1, #31
 8001e3a:	1ad2      	subs	r2, r2, r3
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	1aca      	subs	r2, r1, r3
    Pressure_Data_t* last = &pressure_sensor->history[
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4403      	add	r3, r0
 8001e50:	3304      	adds	r3, #4
 8001e52:	60fb      	str	r3, [r7, #12]

    payload_out[0] = (last->pressure >> 16) & 0xFF;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	701a      	strb	r2, [r3, #0]
    payload_out[1] = (last->pressure >> 8) & 0xFF;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0a1a      	lsrs	r2, r3, #8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
    payload_out[2] = (last->pressure >> 0) & 0xFF;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3302      	adds	r3, #2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]
    payload_out[3] = 0x00;  // padding
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]

    payload_out[4] = (last->timestamp >> 24) & 0xFF;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0e1a      	lsrs	r2, r3, #24
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	701a      	strb	r2, [r3, #0]
    payload_out[5] = (last->timestamp >> 16) & 0xFF;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0c1a      	lsrs	r2, r3, #16
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3305      	adds	r3, #5
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    payload_out[6] = (last->timestamp >> 8) & 0xFF;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0a1a      	lsrs	r2, r3, #8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]
    payload_out[7] = (last->timestamp >> 0) & 0xFF;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	20000228 	.word	0x20000228
 8001ec8:	66666667 	.word	0x66666667

08001ecc <pressure_get_last_data>:

static Pressure_Data_t* pressure_get_last_data() {
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    return &pressure_sensor->history[
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <pressure_get_last_data+0x40>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
        (pressure_sensor->head_index - 1 + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE];
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <pressure_get_last_data+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001edc:	f103 0109 	add.w	r1, r3, #9
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <pressure_get_last_data+0x44>)
 8001ee2:	fb83 2301 	smull	r2, r3, r3, r1
 8001ee6:	109a      	asrs	r2, r3, #2
 8001ee8:	17cb      	asrs	r3, r1, #31
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	1aca      	subs	r2, r1, r3
    return &pressure_sensor->history[
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4403      	add	r3, r0
 8001f00:	3304      	adds	r3, #4
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000228 	.word	0x20000228
 8001f10:	66666667 	.word	0x66666667

08001f14 <pressure_get_last_n_data>:



static Pressure_Data_t** pressure_get_last_n_data(uint8_t n) {
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
    if (!pressure_sensor || n == 0 || n > pressure_sensor->count) return NULL;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <pressure_get_last_n_data+0x90>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <pressure_get_last_n_data+0x26>
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <pressure_get_last_n_data+0x26>
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <pressure_get_last_n_data+0x90>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d901      	bls.n	8001f3e <pressure_get_last_n_data+0x2a>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e02c      	b.n	8001f98 <pressure_get_last_n_data+0x84>

    for (uint8_t i = 0; i < n; ++i) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e024      	b.n	8001f8e <pressure_get_last_n_data+0x7a>
        int index = (pressure_sensor->head_index - 1 - i + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE;
 8001f44:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <pressure_get_last_n_data+0x90>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001f4c:	1e5a      	subs	r2, r3, #1
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f103 020a 	add.w	r2, r3, #10
 8001f56:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <pressure_get_last_n_data+0x94>)
 8001f58:	fb83 1302 	smull	r1, r3, r3, r2
 8001f5c:	1099      	asrs	r1, r3, #2
 8001f5e:	17d3      	asrs	r3, r2, #31
 8001f60:	1ac9      	subs	r1, r1, r3
 8001f62:	460b      	mov	r3, r1
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	60bb      	str	r3, [r7, #8]
        pressure_data_ptr_buffer[i] = &pressure_sensor->history[index];
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <pressure_get_last_n_data+0x90>)
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	7bf9      	ldrb	r1, [r7, #15]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4403      	add	r3, r0
 8001f80:	3304      	adds	r3, #4
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <pressure_get_last_n_data+0x98>)
 8001f84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (uint8_t i = 0; i < n; ++i) {
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3d6      	bcc.n	8001f44 <pressure_get_last_n_data+0x30>
    }
    return pressure_data_ptr_buffer;
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <pressure_get_last_n_data+0x98>)
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000228 	.word	0x20000228
 8001fa8:	66666667 	.word	0x66666667
 8001fac:	2000022c 	.word	0x2000022c

08001fb0 <pressure_get_last_n_serial_format>:


static uint8_t pressure_get_last_n_serial_format(uint8_t n, uint8_t* out) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
    if (!pressure_sensor || !out || n == 0 || n > pressure_sensor->count) return 0;
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <pressure_get_last_n_serial_format+0x12c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00c      	beq.n	8001fde <pressure_get_last_n_serial_format+0x2e>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <pressure_get_last_n_serial_format+0x2e>
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <pressure_get_last_n_serial_format+0x2e>
 8001fd0:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <pressure_get_last_n_serial_format+0x12c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8001fd8:	79fa      	ldrb	r2, [r7, #7]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d901      	bls.n	8001fe2 <pressure_get_last_n_serial_format+0x32>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e076      	b.n	80020d0 <pressure_get_last_n_serial_format+0x120>

    for (uint8_t i = 0; i < n; ++i) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
 8001fe6:	e06c      	b.n	80020c2 <pressure_get_last_n_serial_format+0x112>
        int index = (pressure_sensor->head_index - 1 - i + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE;
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80020dc <pressure_get_last_n_serial_format+0x12c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f103 020a 	add.w	r2, r3, #10
 8001ffa:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <pressure_get_last_n_serial_format+0x130>)
 8001ffc:	fb83 1302 	smull	r1, r3, r3, r2
 8002000:	1099      	asrs	r1, r3, #2
 8002002:	17d3      	asrs	r3, r2, #31
 8002004:	1ac9      	subs	r1, r1, r3
 8002006:	460b      	mov	r3, r1
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	613b      	str	r3, [r7, #16]
        Pressure_Data_t* data = &pressure_sensor->history[index];
 8002012:	4b32      	ldr	r3, [pc, #200]	@ (80020dc <pressure_get_last_n_serial_format+0x12c>)
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3304      	adds	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]

        out[i * 8 + 0] = (data->pressure >> 16) & 0xFF;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0c1a      	lsrs	r2, r3, #16
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4619      	mov	r1, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	440b      	add	r3, r1
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 1] = (data->pressure >> 8) & 0xFF;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0a19      	lsrs	r1, r3, #8
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	3301      	adds	r3, #1
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 2] = (data->pressure >> 0) & 0xFF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	3302      	adds	r3, #2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 3] = 0x00;
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	3303      	adds	r3, #3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	0e19      	lsrs	r1, r3, #24
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	3304      	adds	r3, #4
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	b2ca      	uxtb	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0c19      	lsrs	r1, r3, #16
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	3305      	adds	r3, #5
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 6] = (data->timestamp >> 8) & 0xFF;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0a19      	lsrs	r1, r3, #8
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	3306      	adds	r3, #6
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	b2ca      	uxtb	r2, r1
 80020a8:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 7] = (data->timestamp >> 0) & 0xFF;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	3307      	adds	r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	b2ca      	uxtb	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; ++i) {
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	3301      	adds	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
 80020c2:	7dfa      	ldrb	r2, [r7, #23]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d38e      	bcc.n	8001fe8 <pressure_get_last_n_serial_format+0x38>
    }

    return (n * 8);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	b2db      	uxtb	r3, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	20000228 	.word	0x20000228
 80020e0:	66666667 	.word	0x66666667

080020e4 <pressure_get_temp_last_n_serial_format>:


uint8_t pressure_get_temp_last_n_serial_format(uint8_t n, uint8_t* out) {
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
    if (!pressure_sensor || !out || n == 0 || n > pressure_sensor->count) return 0;
 80020f0:	4b46      	ldr	r3, [pc, #280]	@ (800220c <pressure_get_temp_last_n_serial_format+0x128>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00c      	beq.n	8002112 <pressure_get_temp_last_n_serial_format+0x2e>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <pressure_get_temp_last_n_serial_format+0x2e>
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <pressure_get_temp_last_n_serial_format+0x2e>
 8002104:	4b41      	ldr	r3, [pc, #260]	@ (800220c <pressure_get_temp_last_n_serial_format+0x128>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800210c:	79fa      	ldrb	r2, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d901      	bls.n	8002116 <pressure_get_temp_last_n_serial_format+0x32>
 8002112:	2300      	movs	r3, #0
 8002114:	e074      	b.n	8002200 <pressure_get_temp_last_n_serial_format+0x11c>

    for (uint8_t i = 0; i < n; ++i) {
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]
 800211a:	e06a      	b.n	80021f2 <pressure_get_temp_last_n_serial_format+0x10e>
        int index = (pressure_sensor->head_index - 1 - i + PRESSURE_SENSOR_HISTORY_SIZE) % PRESSURE_SENSOR_HISTORY_SIZE;
 800211c:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <pressure_get_temp_last_n_serial_format+0x128>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8002124:	1e5a      	subs	r2, r3, #1
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f103 020a 	add.w	r2, r3, #10
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <pressure_get_temp_last_n_serial_format+0x12c>)
 8002130:	fb83 1302 	smull	r1, r3, r3, r2
 8002134:	1099      	asrs	r1, r3, #2
 8002136:	17d3      	asrs	r3, r2, #31
 8002138:	1ac9      	subs	r1, r1, r3
 800213a:	460b      	mov	r3, r1
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	613b      	str	r3, [r7, #16]
        Pressure_Data_t* data = &pressure_sensor->history[index];
 8002146:	4b31      	ldr	r3, [pc, #196]	@ (800220c <pressure_get_temp_last_n_serial_format+0x128>)
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	3304      	adds	r3, #4
 8002158:	60fb      	str	r3, [r7, #12]

        out[i * 8 + 0] = (data->temperature >> 8) & 0xFF;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	891b      	ldrh	r3, [r3, #8]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b29a      	uxth	r2, r3
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4619      	mov	r1, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	440b      	add	r3, r1
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 1] = (data->temperature >> 0) & 0xFF;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8919      	ldrh	r1, [r3, #8]
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	3301      	adds	r3, #1
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	b2ca      	uxtb	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 2] = 0x00;
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	3302      	adds	r3, #2
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 3] = 0x00;
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	3303      	adds	r3, #3
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 4] = (data->timestamp >> 24) & 0xFF;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e19      	lsrs	r1, r3, #24
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	3304      	adds	r3, #4
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	b2ca      	uxtb	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 5] = (data->timestamp >> 16) & 0xFF;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0c19      	lsrs	r1, r3, #16
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	3305      	adds	r3, #5
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	b2ca      	uxtb	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 6] = (data->timestamp >> 8) & 0xFF;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0a19      	lsrs	r1, r3, #8
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	3306      	adds	r3, #6
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
        out[i * 8 + 7] = (data->timestamp >> 0) & 0xFF;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	3307      	adds	r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	b2ca      	uxtb	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; ++i) {
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	3301      	adds	r3, #1
 80021f0:	75fb      	strb	r3, [r7, #23]
 80021f2:	7dfa      	ldrb	r2, [r7, #23]
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d390      	bcc.n	800211c <pressure_get_temp_last_n_serial_format+0x38>
    }

    return (n * 8);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	b2db      	uxtb	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	20000228 	.word	0x20000228
 8002210:	66666667 	.word	0x66666667

08002214 <pressure_trigger_measurement>:



static bool pressure_trigger_measurement() {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

	//USED if one shot mode
    I2C_Handler_t* i2c = i2c_handler_get();
 800221a:	f7fe ffa9 	bl	8001170 <i2c_handler_get>
 800221e:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = { PRESSURE_SENSOR_LPS22HH_CTRL_REG2, 0x01 };  // ONE_SHOT
 8002220:	f240 1311 	movw	r3, #273	@ 0x111
 8002224:	803b      	strh	r3, [r7, #0]
    return i2c->write_reg(pressure_sensor->i2c_address, cmd, 2);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <pressure_trigger_measurement+0x2c>)
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	7810      	ldrb	r0, [r2, #0]
 8002230:	4639      	mov	r1, r7
 8002232:	2202      	movs	r2, #2
 8002234:	4798      	blx	r3
 8002236:	4603      	mov	r3, r0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000228 	.word	0x20000228

08002244 <pressure_trigger_data_collection>:



static bool pressure_trigger_data_collection() {
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
    I2C_Handler_t* i2c = i2c_handler_get();
 800224a:	f7fe ff91 	bl	8001170 <i2c_handler_get>
 800224e:	6078      	str	r0, [r7, #4]

    // Step 1: Check data ready
    uint8_t reg = PRESSURE_SENSOR_LPS22HH_STATUS_REG;
 8002250:	2327      	movs	r3, #39	@ 0x27
 8002252:	70fb      	strb	r3, [r7, #3]
    if (!i2c->read_reg(pressure_sensor->i2c_address, &reg, 1, 1)){
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <pressure_trigger_data_collection+0x84>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	7818      	ldrb	r0, [r3, #0]
 800225e:	1cf9      	adds	r1, r7, #3
 8002260:	2301      	movs	r3, #1
 8002262:	2201      	movs	r2, #1
 8002264:	47a0      	blx	r4
 8002266:	4603      	mov	r3, r0
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <pressure_trigger_data_collection+0x32>
    	return false;
 8002272:	2300      	movs	r3, #0
 8002274:	e023      	b.n	80022be <pressure_trigger_data_collection+0x7a>
    }
//    HAL_Delay(5);

    if (!(i2c->Response_buffer[0] == 0x33)) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800227c:	2b33      	cmp	r3, #51	@ 0x33
 800227e:	d001      	beq.n	8002284 <pressure_trigger_data_collection+0x40>
        return false;  // Pressure data not ready
 8002280:	2300      	movs	r3, #0
 8002282:	e01c      	b.n	80022be <pressure_trigger_data_collection+0x7a>
    }

    // Step 2: Read 3-byte pressure (0x28–0x2A), auto-increment bit
    reg = PRESSURE_SENSOR_LPS22HH_PRESS_OUT_XL;// auto-increment
 8002284:	2328      	movs	r3, #40	@ 0x28
 8002286:	70fb      	strb	r3, [r7, #3]
    if (!i2c->read_reg(pressure_sensor->i2c_address, &reg, 1, 5)) return false;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <pressure_trigger_data_collection+0x84>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	7818      	ldrb	r0, [r3, #0]
 8002292:	1cf9      	adds	r1, r7, #3
 8002294:	2305      	movs	r3, #5
 8002296:	2201      	movs	r2, #1
 8002298:	47a0      	blx	r4
 800229a:	4603      	mov	r3, r0
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <pressure_trigger_data_collection+0x66>
 80022a6:	2300      	movs	r3, #0
 80022a8:	e009      	b.n	80022be <pressure_trigger_data_collection+0x7a>

    pressure_sensor->decode_i2c_response(i2c->Response_buffer, 5);
 80022aa:	4b07      	ldr	r3, [pc, #28]	@ (80022c8 <pressure_trigger_data_collection+0x84>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	322a      	adds	r2, #42	@ 0x2a
 80022b6:	2105      	movs	r1, #5
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3


    return true;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000228 	.word	0x20000228

080022cc <pressure_decode_i2c_response>:

static void pressure_decode_i2c_response(uint8_t* data, uint8_t len) {
 80022cc:	b480      	push	{r7}
 80022ce:	b08b      	sub	sp, #44	@ 0x2c
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
    if (len < 5){

	}
	uint32_t raw_pressure = ((uint32_t) data[2] << 16) | ((uint32_t) data[1] << 8)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3302      	adds	r3, #2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	041a      	lsls	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3301      	adds	r3, #1
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4313      	orrs	r3, r2
			| (uint32_t) data[0];
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7812      	ldrb	r2, [r2, #0]
	uint32_t raw_pressure = ((uint32_t) data[2] << 16) | ((uint32_t) data[1] << 8)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
	float pressure = raw_pressure / 4096.0f; //hpA
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022fc:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023e0 <pressure_decode_i2c_response+0x114>
 8002300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002304:	edc7 7a08 	vstr	s15, [r7, #32]

	uint16_t raw_temp = (int16_t)((data[4] << 8) | data[3]);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b21b      	sxth	r3, r3
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21a      	sxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3303      	adds	r3, #3
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b21b      	sxth	r3, r3
 800231c:	4313      	orrs	r3, r2
 800231e:	b21b      	sxth	r3, r3
 8002320:	83fb      	strh	r3, [r7, #30]
	float temperature = raw_temp / 100.0f;
 8002322:	8bfb      	ldrh	r3, [r7, #30]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232c:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80023e4 <pressure_decode_i2c_response+0x118>
 8002330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002334:	edc7 7a06 	vstr	s15, [r7, #24]

	Pressure_Data_t reading;
	reading.pressure = pressure*10;
 8002338:	edd7 7a08 	vldr	s15, [r7, #32]
 800233c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002348:	ee17 3a90 	vmov	r3, s15
 800234c:	613b      	str	r3, [r7, #16]
	reading.temperature=temperature*100;
 800234e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002352:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80023e4 <pressure_decode_i2c_response+0x118>
 8002356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235e:	ee17 3a90 	vmov	r3, s15
 8002362:	b29b      	uxth	r3, r3
 8002364:	82bb      	strh	r3, [r7, #20]
    reading.timestamp = 0x60D4A000;  // Dummy timestamp; replace with RTC if available
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <pressure_decode_i2c_response+0x11c>)
 8002368:	60fb      	str	r3, [r7, #12]

    pressure_sensor->history[pressure_sensor->head_index] = reading;
 800236a:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <pressure_decode_i2c_response+0x120>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ec <pressure_decode_i2c_response+0x120>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8002376:	4619      	mov	r1, r3
 8002378:	460b      	mov	r3, r1
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	f107 020c 	add.w	r2, r7, #12
 8002388:	ca07      	ldmia	r2, {r0, r1, r2}
 800238a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    pressure_sensor->head_index = (pressure_sensor->head_index + 1) % PRESSURE_SENSOR_HISTORY_SIZE;
 800238e:	4b17      	ldr	r3, [pc, #92]	@ (80023ec <pressure_decode_i2c_response+0x120>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <pressure_decode_i2c_response+0x124>)
 800239a:	fb83 1302 	smull	r1, r3, r3, r2
 800239e:	1099      	asrs	r1, r3, #2
 80023a0:	17d3      	asrs	r3, r2, #31
 80023a2:	1ac9      	subs	r1, r1, r3
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	1ad1      	subs	r1, r2, r3
 80023ae:	4b0f      	ldr	r3, [pc, #60]	@ (80023ec <pressure_decode_i2c_response+0x120>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b2ca      	uxtb	r2, r1
 80023b4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    if (pressure_sensor->count < PRESSURE_SENSOR_HISTORY_SIZE)
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <pressure_decode_i2c_response+0x120>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80023c0:	2b09      	cmp	r3, #9
 80023c2:	d807      	bhi.n	80023d4 <pressure_decode_i2c_response+0x108>
        pressure_sensor->count++;
 80023c4:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <pressure_decode_i2c_response+0x120>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 80023cc:	3201      	adds	r2, #1
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
}
 80023d4:	bf00      	nop
 80023d6:	372c      	adds	r7, #44	@ 0x2c
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	45800000 	.word	0x45800000
 80023e4:	42c80000 	.word	0x42c80000
 80023e8:	60d4a000 	.word	0x60d4a000
 80023ec:	20000228 	.word	0x20000228
 80023f0:	66666667 	.word	0x66666667

080023f4 <sensor_interface_init>:
//sensor_interface_trigger_schedule_t sensor_interface_trigger_schedule_state;
sensor_interface_trigger_schedule_t sensor_interface_schedule;

// Internal buffer for I2C tx/rx

void sensor_interface_init(void) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	sensor_interface_schedule=TRIGGER_ENV_TEMP;
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <sensor_interface_init+0x1c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
//    temp_sensor_init(SENSOR_ADDRESS_TEMP_HUM_HTS221);
    pressure_sensor_init(SENSOR_ADDRESS_PRESSURE_LPS22HH);
 80023fe:	205d      	movs	r0, #93	@ 0x5d
 8002400:	f7ff fc5c 	bl	8001cbc <pressure_sensor_init>
    ppg_sensor_init(SENSOR_ADDRESS_PPG_SEN0344);
 8002404:	2057      	movs	r0, #87	@ 0x57
 8002406:	f7ff f921 	bl	800164c <ppg_sensor_init>

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000254 	.word	0x20000254

08002414 <sensor_interface_schedule_readings>:
void sensor_interface_deinit(void) {
//    temp_sensor_deinit();
    // TODO: Add other sensor deinit
}

void sensor_interface_schedule_readings(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0

	//STEP1:
	//Check if a data processing is queue
	I2C_Handler_t* i2c_handle=i2c_handler_get();
 800241a:	f7fe fea9 	bl	8001170 <i2c_handler_get>
 800241e:	60f8      	str	r0, [r7, #12]
	Temp_Sensor_t* temp = temp_sensor_get();
 8002420:	f000 faf2 	bl	8002a08 <temp_sensor_get>
 8002424:	60b8      	str	r0, [r7, #8]
	Pressure_Sensor_t* pres=pressure_sensor_get();
 8002426:	f7ff fceb 	bl	8001e00 <pressure_sensor_get>
 800242a:	6078      	str	r0, [r7, #4]
	PPG_Sensor_t* ppg=ppg_sensor_get();
 800242c:	f7ff f986 	bl	800173c <ppg_sensor_get>
 8002430:	6038      	str	r0, [r7, #0]
//	}


	//STEP2:
	//Schedule new reading
    if(i2c_handle->state==I2C_STATE_IDLE){
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <sensor_interface_schedule_readings+0x54>

    	sensor_interface_schedule=(sensor_interface_schedule+1)%TRIGGER_COUNT;// schedule next reading
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <sensor_interface_schedule_readings+0x5c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <sensor_interface_schedule_readings+0x60>)
 8002442:	fb83 3102 	smull	r3, r1, r3, r2
 8002446:	17d3      	asrs	r3, r2, #31
 8002448:	1ac9      	subs	r1, r1, r3
 800244a:	460b      	mov	r3, r1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	440b      	add	r3, r1
 8002450:	1ad1      	subs	r1, r2, r3
 8002452:	b2ca      	uxtb	r2, r1
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <sensor_interface_schedule_readings+0x5c>)
 8002456:	701a      	strb	r2, [r3, #0]

//    	temp->trigger_data_collection();
    	pres->trigger_data_collection();
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800245e:	4798      	blx	r3
    	ppg->trigger_data_collection();
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002466:	4798      	blx	r3

    }



}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000254 	.word	0x20000254
 8002474:	55555556 	.word	0x55555556

08002478 <sensor_interface_handle_cmd>:

void sensor_interface_handle_cmd(uint8_t cmd_id, uint8_t* payload, uint8_t len, uint8_t* payload_out, uint8_t* len_out) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4603      	mov	r3, r0
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	4613      	mov	r3, r2
 8002488:	73bb      	strb	r3, [r7, #14]
	PPG_Sensor_t* ppg=ppg_sensor_get();
 800248a:	f7ff f957 	bl	800173c <ppg_sensor_get>
 800248e:	6178      	str	r0, [r7, #20]
	switch (cmd_id) {
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3b01      	subs	r3, #1
 8002494:	2b03      	cmp	r3, #3
 8002496:	d872      	bhi.n	800257e <sensor_interface_handle_cmd+0x106>
 8002498:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <sensor_interface_handle_cmd+0x28>)
 800249a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249e:	bf00      	nop
 80024a0:	08002553 	.word	0x08002553
 80024a4:	080024b1 	.word	0x080024b1
 80024a8:	08002511 	.word	0x08002511
 80024ac:	0800257f 	.word	0x0800257f
	case CMD_REQ_TEMP_DATA:
		if (payload[0] == 0x02) {
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d113      	bne.n	80024e0 <sensor_interface_handle_cmd+0x68>
//			if (env_temp && env_temp->get_last_n_data_serial_format) {
//				payload_out[0]=0x02;
//				(*len_out)=env_temp->get_last_n_data_serial_format(1,payload_out+1);
//				(*len_out)= (*len_out)+1;
//			}
			payload_out[0] = 0x02;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]

			(*len_out) = pressure_get_temp_last_n_serial_format(1,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4619      	mov	r1, r3
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7ff fe0d 	bl	80020e4 <pressure_get_temp_last_n_serial_format>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	701a      	strb	r2, [r3, #0]
					payload_out + 1);
			(*len_out) = (*len_out) + 1;
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	701a      	strb	r2, [r3, #0]
					payload_out + 1);
			(*len_out) = (*len_out) + 1;

		}

		break;
 80024de:	e050      	b.n	8002582 <sensor_interface_handle_cmd+0x10a>
		}		else if (payload[0] == 0x01) {
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d14c      	bne.n	8002582 <sensor_interface_handle_cmd+0x10a>
			payload_out[0] = 0x01;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
			(*len_out) = ppg_get_last_n_bodytemp_serial_format(1,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4619      	mov	r1, r3
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7ff fa8f 	bl	8001a18 <ppg_get_last_n_bodytemp_serial_format>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	701a      	strb	r2, [r3, #0]
			(*len_out) = (*len_out) + 1;
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	701a      	strb	r2, [r3, #0]
		break;
 800250e:	e038      	b.n	8002582 <sensor_interface_handle_cmd+0x10a>

	case CMD_REQ_PRESSURE_DATA:
		Pressure_Sensor_t *press = pressure_sensor_get();
 8002510:	f7ff fc76 	bl	8001e00 <pressure_sensor_get>
 8002514:	6138      	str	r0, [r7, #16]
		if (press && press->get_last_n_data_serial_format) {
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d034      	beq.n	8002586 <sensor_interface_handle_cmd+0x10e>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d02f      	beq.n	8002586 <sensor_interface_handle_cmd+0x10e>
			payload_out[0] = 0x00; //Reserved bit in this case not used
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
			(*len_out) = press->get_last_n_data_serial_format(1, payload_out + 1);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	3201      	adds	r2, #1
 8002536:	4611      	mov	r1, r2
 8002538:	2001      	movs	r0, #1
 800253a:	4798      	blx	r3
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	701a      	strb	r2, [r3, #0]
			(*len_out) = (*len_out) + 1;
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	3301      	adds	r3, #1
 800254a:	b2da      	uxtb	r2, r3
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002550:	e019      	b.n	8002586 <sensor_interface_handle_cmd+0x10e>

	case CMD_REQ_HR_SPO2_DATA:


		payload_out[0] = 0x00; //Reserved bit in this case not used
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
		(*len_out) = ppg->get_last_n_data_serial_format(1, payload_out + 1);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	3201      	adds	r2, #1
 8002562:	4611      	mov	r1, r2
 8002564:	2001      	movs	r0, #1
 8002566:	4798      	blx	r3
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	701a      	strb	r2, [r3, #0]
		(*len_out) = (*len_out) + 1;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	701a      	strb	r2, [r3, #0]

		//TODO: After finishig sensor declaration
		break;
 800257c:	e004      	b.n	8002588 <sensor_interface_handle_cmd+0x110>
		// TODO: Add support for composing full sensor packet with all sensor readings
		break;

        default:
            // Unknown command
            break;
 800257e:	bf00      	nop
 8002580:	e002      	b.n	8002588 <sensor_interface_handle_cmd+0x110>
		break;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <sensor_interface_handle_cmd+0x110>
		break;
 8002586:	bf00      	nop
    }
}
 8002588:	bf00      	nop
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_MspInit+0x30>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <HAL_MspInit+0x30>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_MspInit+0x30>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	46020c00 	.word	0x46020c00

080025c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0bc      	sub	sp, #240	@ 0xf0
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	22c8      	movs	r2, #200	@ 0xc8
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00a fc0d 	bl	800ce04 <memset>
  if(hi2c->Instance==I2C2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a2e      	ldr	r2, [pc, #184]	@ (80026a8 <HAL_I2C_MspInit+0xe4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d154      	bne.n	800269e <HAL_I2C_MspInit+0xda>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025f4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002600:	2300      	movs	r3, #0
 8002602:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f005 f827 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8002614:	f7fe ffdc 	bl	80015d0 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002618:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_I2C_MspInit+0xe8>)
 800261a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800261e:	4a23      	ldr	r2, [pc, #140]	@ (80026ac <HAL_I2C_MspInit+0xe8>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002624:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002628:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_I2C_MspInit+0xe8>)
 800262a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002636:	2330      	movs	r3, #48	@ 0x30
 8002638:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263c:	2312      	movs	r3, #18
 800263e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800264e:	2304      	movs	r3, #4
 8002650:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002654:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002658:	4619      	mov	r1, r3
 800265a:	4815      	ldr	r0, [pc, #84]	@ (80026b0 <HAL_I2C_MspInit+0xec>)
 800265c:	f000 feb6 	bl	80033cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <HAL_I2C_MspInit+0xe8>)
 8002662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002666:	4a11      	ldr	r2, [pc, #68]	@ (80026ac <HAL_I2C_MspInit+0xe8>)
 8002668:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800266c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <HAL_I2C_MspInit+0xe8>)
 8002672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 3, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2103      	movs	r1, #3
 8002682:	2039      	movs	r0, #57	@ 0x39
 8002684:	f000 fd04 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002688:	2039      	movs	r0, #57	@ 0x39
 800268a:	f000 fd1b 	bl	80030c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 3, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2103      	movs	r1, #3
 8002692:	203a      	movs	r0, #58	@ 0x3a
 8002694:	f000 fcfc 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002698:	203a      	movs	r0, #58	@ 0x3a
 800269a:	f000 fd13 	bl	80030c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800269e:	bf00      	nop
 80026a0:	37f0      	adds	r7, #240	@ 0xf0
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40005800 	.word	0x40005800
 80026ac:	46020c00 	.word	0x46020c00
 80026b0:	42021c00 	.word	0x42021c00

080026b4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b0b6      	sub	sp, #216	@ 0xd8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	22c8      	movs	r2, #200	@ 0xc8
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00a fb9d 	bl	800ce04 <memset>
  if(hrtc->Instance==RTC)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_RTC_MspInit+0x90>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d132      	bne.n	800273a <HAL_RTC_MspInit+0x86>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 ffb5 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80026f8:	f7fe ff6a 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 80026fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002702:	4a11      	ldr	r2, [pc, #68]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 8002704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002708:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 800270e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002712:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 8002714:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002718:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800271c:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 800271e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 800272c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002730:	4a05      	ldr	r2, [pc, #20]	@ (8002748 <HAL_RTC_MspInit+0x94>)
 8002732:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002736:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800273a:	bf00      	nop
 800273c:	37d8      	adds	r7, #216	@ 0xd8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	46007800 	.word	0x46007800
 8002748:	46020c00 	.word	0x46020c00

0800274c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <HAL_TIM_Base_MspInit+0x48>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d116      	bne.n	800278c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800275e:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_TIM_Base_MspInit+0x4c>)
 8002760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002764:	4a0c      	ldr	r2, [pc, #48]	@ (8002798 <HAL_TIM_Base_MspInit+0x4c>)
 8002766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800276a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800276e:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_TIM_Base_MspInit+0x4c>)
 8002770:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 800277c:	2200      	movs	r2, #0
 800277e:	2102      	movs	r1, #2
 8002780:	2046      	movs	r0, #70	@ 0x46
 8002782:	f000 fc85 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002786:	2046      	movs	r0, #70	@ 0x46
 8002788:	f000 fc9c 	bl	80030c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40014400 	.word	0x40014400
 8002798:	46020c00 	.word	0x46020c00

0800279c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b0bc      	sub	sp, #240	@ 0xf0
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	22c8      	movs	r2, #200	@ 0xc8
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f00a fb21 	bl	800ce04 <memset>
  if(huart->Instance==UART4)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002870 <HAL_UART_MspInit+0xd4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d14d      	bne.n	8002868 <HAL_UART_MspInit+0xcc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027cc:	f04f 0208 	mov.w	r2, #8
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027d8:	2300      	movs	r3, #0
 80027da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 ff3b 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80027ec:	f7fe fef0 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027f0:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HAL_UART_MspInit+0xd8>)
 80027f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <HAL_UART_MspInit+0xd8>)
 80027f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80027fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002800:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_UART_MspInit+0xd8>)
 8002802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002806:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_UART_MspInit+0xd8>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002814:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_UART_MspInit+0xd8>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_UART_MspInit+0xd8>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800282c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002830:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002846:	2308      	movs	r3, #8
 8002848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002850:	4619      	mov	r1, r3
 8002852:	4809      	ldr	r0, [pc, #36]	@ (8002878 <HAL_UART_MspInit+0xdc>)
 8002854:	f000 fdba 	bl	80033cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2101      	movs	r1, #1
 800285c:	2040      	movs	r0, #64	@ 0x40
 800285e:	f000 fc17 	bl	8003090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002862:	2040      	movs	r0, #64	@ 0x40
 8002864:	f000 fc2e 	bl	80030c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8002868:	bf00      	nop
 800286a:	37f0      	adds	r7, #240	@ 0xf0
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40004c00 	.word	0x40004c00
 8002874:	46020c00 	.word	0x46020c00
 8002878:	42020800 	.word	0x42020800

0800287c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <NMI_Handler+0x4>

08002884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <HardFault_Handler+0x4>

0800288c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <MemManage_Handler+0x4>

08002894 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <BusFault_Handler+0x4>

0800289c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <UsageFault_Handler+0x4>

080028a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d2:	f000 fae1 	bl	8002e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <I2C2_EV_IRQHandler+0x10>)
 80028e2:	f001 fbf3 	bl	80040cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000098 	.word	0x20000098

080028f0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <I2C2_ER_IRQHandler+0x10>)
 80028f6:	f001 fc03 	bl	8004100 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000098 	.word	0x20000098

08002904 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002908:	4802      	ldr	r0, [pc, #8]	@ (8002914 <UART4_IRQHandler+0x10>)
 800290a:	f008 faff 	bl	800af0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000168 	.word	0x20000168

08002918 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800291c:	4802      	ldr	r0, [pc, #8]	@ (8002928 <TIM16_IRQHandler+0x10>)
 800291e:	f007 ff4a 	bl	800a7b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	2000011c 	.word	0x2000011c

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	@ (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f00a fa6a 	bl	800ce34 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	@ (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200c0000 	.word	0x200c0000
 800298c:	00000400 	.word	0x00000400
 8002990:	20000258 	.word	0x20000258
 8002994:	20000430 	.word	0x20000430

08002998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800299c:	4b18      	ldr	r3, [pc, #96]	@ (8002a00 <SystemInit+0x68>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <SystemInit+0x68>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <SystemInit+0x6c>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <SystemInit+0x6c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <SystemInit+0x6c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <SystemInit+0x6c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <SystemInit+0x6c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <SystemInit+0x6c>)
 80029ca:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80029ce:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80029d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <SystemInit+0x6c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <SystemInit+0x6c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <SystemInit+0x6c>)
 80029e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <SystemInit+0x6c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029ec:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <SystemInit+0x68>)
 80029ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029f2:	609a      	str	r2, [r3, #8]
  #endif
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00
 8002a04:	46020c00 	.word	0x46020c00

08002a08 <temp_sensor_get>:
		temp_sensor = NULL;
	}
}


Temp_Sensor_t* temp_sensor_get(void) {
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
    return temp_sensor;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <temp_sensor_get+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000025c 	.word	0x2000025c

08002a20 <Calculate_CRC>:

// Forward declarations
static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size);
static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len);

static uint8_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	73bb      	strb	r3, [r7, #14]
 8002a34:	e009      	b.n	8002a4a <Calculate_CRC+0x2a>
        crc ^= data[i];
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781a      	ldrb	r2, [r3, #0]
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	4053      	eors	r3, r2
 8002a42:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; ++i) {
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	3301      	adds	r3, #1
 8002a48:	73bb      	strb	r3, [r7, #14]
 8002a4a:	7bba      	ldrb	r2, [r7, #14]
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d3f1      	bcc.n	8002a36 <Calculate_CRC+0x16>
    }
    return crc;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	807b      	strh	r3, [r7, #2]
    if (Size >= 7 && rx_buffer[0] == 0xAA) {
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d90d      	bls.n	8002a8e <HAL_UARTEx_RxEventCallback+0x2e>
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_UARTEx_RxEventCallback+0x48>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2baa      	cmp	r3, #170	@ 0xaa
 8002a78:	d109      	bne.n	8002a8e <HAL_UARTEx_RxEventCallback+0x2e>
    	uart_handler->state=UART_STATE_WAITING_PROCESSING;
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <HAL_UARTEx_RxEventCallback+0x4c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
    	uart_handler->rx_buffer_len=Size;
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_UARTEx_RxEventCallback+0x4c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]
//		uart_handler->process_recived_pck(uart_handler->rx_buffer, uart_handler->rx_buffer_len);
    }
    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_UARTEx_RxEventCallback+0x4c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2240      	movs	r2, #64	@ 0x40
 8002a96:	4904      	ldr	r1, [pc, #16]	@ (8002aa8 <HAL_UARTEx_RxEventCallback+0x48>)
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00a f850 	bl	800cb3e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200002a4 	.word	0x200002a4
 8002aac:	20000260 	.word	0x20000260

08002ab0 <uart_handler_Process_Received_pck>:

static void uart_handler_Process_Received_pck(uint8_t* pck, uint16_t size) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
    if (size < 7) return;
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d945      	bls.n	8002b4e <uart_handler_Process_Received_pck+0x9e>

    uint8_t received_crc = pck[size - 1];
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	73fb      	strb	r3, [r7, #15]
    uint8_t calculated_crc = Calculate_CRC(&pck[0], size - 1); // exclude start byte and CRC
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffa1 	bl	8002a20 <Calculate_CRC>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73bb      	strb	r3, [r7, #14]
    if (received_crc != calculated_crc) {
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d004      	beq.n	8002af4 <uart_handler_Process_Received_pck+0x44>
        uart_handler->state = UART_STATE_ERROR;
 8002aea:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2203      	movs	r2, #3
 8002af0:	701a      	strb	r2, [r3, #0]
        return;
 8002af2:	e02d      	b.n	8002b50 <uart_handler_Process_Received_pck+0xa0>
    }

    uart_handler->cmd_packet->header = pck[0];
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
    uart_handler->cmd_packet->cmd_type = pck[1];
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	7852      	ldrb	r2, [r2, #1]
 8002b0a:	705a      	strb	r2, [r3, #1]
    uart_handler->cmd_packet->payload_len = pck[2];
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	7892      	ldrb	r2, [r2, #2]
 8002b16:	709a      	strb	r2, [r3, #2]
    memcpy(uart_handler->cmd_packet->payload, &pck[3], 5);
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	1cd8      	adds	r0, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3303      	adds	r3, #3
 8002b24:	2205      	movs	r2, #5
 8002b26:	4619      	mov	r1, r3
 8002b28:	f00a f9b0 	bl	800ce8c <memcpy>
    uart_handler->cmd_packet->crc = received_crc;
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	7bfa      	ldrb	r2, [r7, #15]
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    uart_handler->state = UART_STATE_PROCESSING;
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]
//
//    // Here you should now call your command dispatcher logic:
    data_handler_dispatcher(uart_handler->cmd_packet);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <uart_handler_Process_Received_pck+0xa8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f972 	bl	8000e30 <data_handler_dispatcher>
 8002b4c:	e000      	b.n	8002b50 <uart_handler_Process_Received_pck+0xa0>
    if (size < 7) return;
 8002b4e:	bf00      	nop
}
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000260 	.word	0x20000260

08002b5c <uart_handler_Send_Response>:

static void uart_handler_Send_Response(uint8_t cmd, uint8_t* payload, uint8_t payload_len) {
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	71bb      	strb	r3, [r7, #6]
    uint8_t* buf = tx_buffer;
 8002b6c:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <uart_handler_Send_Response+0xa4>)
 8002b6e:	60fb      	str	r3, [r7, #12]
    uint8_t idx = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	72fb      	strb	r3, [r7, #11]

    buf[idx++] = 0xAA;                     // Start byte
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	72fa      	strb	r2, [r7, #11]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4413      	add	r3, r2
 8002b80:	22aa      	movs	r2, #170	@ 0xaa
 8002b82:	701a      	strb	r2, [r3, #0]
    buf[idx++] = cmd;                  // Response CMD/status
 8002b84:	7afb      	ldrb	r3, [r7, #11]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	72fa      	strb	r2, [r7, #11]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	79fa      	ldrb	r2, [r7, #7]
 8002b92:	701a      	strb	r2, [r3, #0]
    buf[idx++] = payload_len;             // Payload length
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	72fa      	strb	r2, [r7, #11]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	79ba      	ldrb	r2, [r7, #6]
 8002ba2:	701a      	strb	r2, [r3, #0]

    memcpy(&buf[idx], payload, payload_len);
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4413      	add	r3, r2
 8002baa:	79ba      	ldrb	r2, [r7, #6]
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f00a f96c 	bl	800ce8c <memcpy>
    idx += payload_len;
 8002bb4:	7afa      	ldrb	r2, [r7, #11]
 8002bb6:	79bb      	ldrb	r3, [r7, #6]
 8002bb8:	4413      	add	r3, r2
 8002bba:	72fb      	strb	r3, [r7, #11]


    buf[idx] = Calculate_CRC(&buf[1], idx - 1); // CRC over CMD + LEN + payload + timestamp
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1c58      	adds	r0, r3, #1
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b2d9      	uxtb	r1, r3
 8002bc6:	7afb      	ldrb	r3, [r7, #11]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	18d4      	adds	r4, r2, r3
 8002bcc:	f7ff ff28 	bl	8002a20 <Calculate_CRC>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	7023      	strb	r3, [r4, #0]
    idx++;
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	72fb      	strb	r3, [r7, #11]

    HAL_UART_Transmit(uart_handler->huart, buf, idx, HAL_MAX_DELAY);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <uart_handler_Send_Response+0xa8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68d8      	ldr	r0, [r3, #12]
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	68f9      	ldr	r1, [r7, #12]
 8002bea:	f008 f8f1 	bl	800add0 <HAL_UART_Transmit>
    uart_handler->state = UART_STATE_IDLE;
 8002bee:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <uart_handler_Send_Response+0xa8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]

}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000264 	.word	0x20000264
 8002c04:	20000260 	.word	0x20000260

08002c08 <uart_handler_Init>:

void uart_handler_Init(UART_HandleTypeDef *huart) {
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    uart_handler = (UART_Handler_t *)malloc(sizeof(UART_Handler_t));
 8002c10:	2024      	movs	r0, #36	@ 0x24
 8002c12:	f00a f841 	bl	800cc98 <malloc>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c1c:	601a      	str	r2, [r3, #0]
    uart_handler->cmd_packet = (UART_CommandPacket_t *)malloc(sizeof(UART_CommandPacket_t));
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c20:	681c      	ldr	r4, [r3, #0]
 8002c22:	203e      	movs	r0, #62	@ 0x3e
 8002c24:	f00a f838 	bl	800cc98 <malloc>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	6063      	str	r3, [r4, #4]
    uart_handler->resp_packet = (UART_ResponsePacket_t *)malloc(sizeof(UART_ResponsePacket_t));
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c2e:	681c      	ldr	r4, [r3, #0]
 8002c30:	203e      	movs	r0, #62	@ 0x3e
 8002c32:	f00a f831 	bl	800cc98 <malloc>
 8002c36:	4603      	mov	r3, r0
 8002c38:	60a3      	str	r3, [r4, #8]

    uart_handler->huart = huart;
 8002c3a:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
    uart_handler->state = UART_STATE_IDLE;
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
    uart_handler->max_payload_len = UART_RX_BUFFER_SIZE - 6;
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	223a      	movs	r2, #58	@ 0x3a
 8002c50:	705a      	strb	r2, [r3, #1]
    uart_handler->rx_buffer = rx_buffer;
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <uart_handler_Init+0x90>)
 8002c58:	61da      	str	r2, [r3, #28]
    uart_handler->tx_buffer = tx_buffer;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <uart_handler_Init+0x94>)
 8002c60:	619a      	str	r2, [r3, #24]
    uart_handler->rx_buffer_len=0;
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]

    uart_handler->process_recived_pck = uart_handler_Process_Received_pck;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <uart_handler_Init+0x98>)
 8002c72:	611a      	str	r2, [r3, #16]
    uart_handler->send_response = uart_handler_Send_Response;
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca4 <uart_handler_Init+0x9c>)
 8002c7a:	615a      	str	r2, [r3, #20]

    HAL_UARTEx_ReceiveToIdle_IT(uart_handler->huart, rx_buffer, UART_RX_BUFFER_SIZE);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <uart_handler_Init+0x8c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2240      	movs	r2, #64	@ 0x40
 8002c84:	4904      	ldr	r1, [pc, #16]	@ (8002c98 <uart_handler_Init+0x90>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	f009 ff59 	bl	800cb3e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}
 8002c94:	20000260 	.word	0x20000260
 8002c98:	200002a4 	.word	0x200002a4
 8002c9c:	20000264 	.word	0x20000264
 8002ca0:	08002ab1 	.word	0x08002ab1
 8002ca4:	08002b5d 	.word	0x08002b5d

08002ca8 <uart_handler_get>:
        memset(uart_handler->cmd_packet, 0, sizeof(UART_CommandPacket_t));
        memset(uart_handler->resp_packet, 0, sizeof(UART_ResponsePacket_t));
    }
}

UART_Handler_t* uart_handler_get(void) {
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
    return uart_handler;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <uart_handler_get+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000260 	.word	0x20000260

08002cc0 <uart_handler_check_tx_buffer>:

void uart_handler_check_tx_buffer(void){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	if(uart_handler->state==UART_STATE_WAITING_PROCESSING){
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <uart_handler_check_tx_buffer+0x34>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d10f      	bne.n	8002cee <uart_handler_check_tx_buffer+0x2e>
		uart_handler->process_recived_pck(uart_handler->rx_buffer, uart_handler->rx_buffer_len);
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <uart_handler_check_tx_buffer+0x34>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	4a07      	ldr	r2, [pc, #28]	@ (8002cf4 <uart_handler_check_tx_buffer+0x34>)
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	69d0      	ldr	r0, [r2, #28]
 8002cda:	4a06      	ldr	r2, [pc, #24]	@ (8002cf4 <uart_handler_check_tx_buffer+0x34>)
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4798      	blx	r3

		uart_handler->state=UART_STATE_IDLE;
 8002ce6:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <uart_handler_check_tx_buffer+0x34>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
	}

}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000260 	.word	0x20000260

08002cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002cf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d30 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cfc:	f7ff fe4c 	bl	8002998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d02:	e003      	b.n	8002d0c <LoopCopyDataInit>

08002d04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d0a:	3104      	adds	r1, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d0c:	480a      	ldr	r0, [pc, #40]	@ (8002d38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d14:	d3f6      	bcc.n	8002d04 <CopyDataInit>
	ldr	r2, =_sbss
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d18:	e002      	b.n	8002d20 <LoopFillZerobss>

08002d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d1c:	f842 3b04 	str.w	r3, [r2], #4

08002d20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <LoopForever+0x16>)
	cmp	r2, r3
 8002d22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d24:	d3f9      	bcc.n	8002d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d26:	f00a f88b 	bl	800ce40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2a:	f7fe fa2d 	bl	8001188 <main>

08002d2e <LoopForever>:

LoopForever:
    b LoopForever
 8002d2e:	e7fe      	b.n	8002d2e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002d30:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002d34:	0800cfd4 	.word	0x0800cfd4
	ldr	r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d3c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8002d40:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8002d44:	2000042d 	.word	0x2000042d

08002d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC1_IRQHandler>
	...

08002d4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d50:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_Init+0x50>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_Init+0x50>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d5c:	2003      	movs	r0, #3
 8002d5e:	f000 f98c 	bl	800307a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002d62:	f004 fa9d 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <HAL_Init+0x54>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	490c      	ldr	r1, [pc, #48]	@ (8002da4 <HAL_Init+0x58>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	4a0b      	ldr	r2, [pc, #44]	@ (8002da8 <HAL_Init+0x5c>)
 8002d7a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d7c:	2004      	movs	r0, #4
 8002d7e:	f000 f9d1 	bl	8003124 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d82:	200f      	movs	r0, #15
 8002d84:	f000 f812 	bl	8002dac <HAL_InitTick>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e002      	b.n	8002d98 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d92:	f7ff fbfd 	bl	8002590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	46020c00 	.word	0x46020c00
 8002da4:	0800cec4 	.word	0x0800cec4
 8002da8:	20000000 	.word	0x20000000

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002db8:	4b33      	ldr	r3, [pc, #204]	@ (8002e88 <HAL_InitTick+0xdc>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e05c      	b.n	8002e7e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002dc4:	4b31      	ldr	r3, [pc, #196]	@ (8002e8c <HAL_InitTick+0xe0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d10c      	bne.n	8002dea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_InitTick+0xe4>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <HAL_InitTick+0xdc>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e037      	b.n	8002e5a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002dea:	f000 f9f3 	bl	80031d4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002dee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d023      	beq.n	8002e3e <HAL_InitTick+0x92>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d82d      	bhi.n	8002e58 <HAL_InitTick+0xac>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_InitTick+0x5e>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d00d      	beq.n	8002e24 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002e08:	e026      	b.n	8002e58 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <HAL_InitTick+0xe4>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <HAL_InitTick+0xdc>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	4619      	mov	r1, r3
 8002e14:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	60fb      	str	r3, [r7, #12]
        break;
 8002e22:	e01a      	b.n	8002e5a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002e24:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_InitTick+0xdc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e32:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	60fb      	str	r3, [r7, #12]
        break;
 8002e3c:	e00d      	b.n	8002e5a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_InitTick+0xdc>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	60fb      	str	r3, [r7, #12]
        break;
 8002e56:	e000      	b.n	8002e5a <HAL_InitTick+0xae>
        break;
 8002e58:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f940 	bl	80030e0 <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e009      	b.n	8002e7e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e72:	f000 f90d 	bl	8003090 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <HAL_InitTick+0xe8>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000008 	.word	0x20000008
 8002e8c:	e000e010 	.word	0xe000e010
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <HAL_IncTick+0x20>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_IncTick+0x24>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_IncTick+0x24>)
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	200002e4 	.word	0x200002e4

08002ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_GetTick+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	200002e4 	.word	0x200002e4

08002ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff ffee 	bl	8002ec0 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d005      	beq.n	8002efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <HAL_Delay+0x44>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efe:	bf00      	nop
 8002f00:	f7ff ffde 	bl	8002ec0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8f7      	bhi.n	8002f00 <HAL_Delay+0x28>
  {
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000008 	.word	0x20000008

08002f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f52:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <__NVIC_SetPriorityGrouping+0x44>)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	60d3      	str	r3, [r2, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f6c:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <__NVIC_GetPriorityGrouping+0x18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	f003 0307 	and.w	r3, r3, #7
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	db0b      	blt.n	8002fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	4907      	ldr	r1, [pc, #28]	@ (8002fbc <__NVIC_EnableIRQ+0x38>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000e100 	.word	0xe000e100

08002fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	db0a      	blt.n	8002fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	490c      	ldr	r1, [pc, #48]	@ (800300c <__NVIC_SetPriority+0x4c>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe8:	e00a      	b.n	8003000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4908      	ldr	r1, [pc, #32]	@ (8003010 <__NVIC_SetPriority+0x50>)
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	0112      	lsls	r2, r2, #4
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	761a      	strb	r2, [r3, #24]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf28      	it	cs
 8003032:	2304      	movcs	r3, #4
 8003034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	2b06      	cmp	r3, #6
 800303c:	d902      	bls.n	8003044 <NVIC_EncodePriority+0x30>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3b03      	subs	r3, #3
 8003042:	e000      	b.n	8003046 <NVIC_EncodePriority+0x32>
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	f04f 32ff 	mov.w	r2, #4294967295
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	401a      	ands	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800305c:	f04f 31ff 	mov.w	r1, #4294967295
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	43d9      	mvns	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	4313      	orrs	r3, r2
         );
}
 800306e:	4618      	mov	r0, r3
 8003070:	3724      	adds	r7, #36	@ 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ff4c 	bl	8002f20 <__NVIC_SetPriorityGrouping>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800309e:	f7ff ff63 	bl	8002f68 <__NVIC_GetPriorityGrouping>
 80030a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f7ff ffb3 	bl	8003014 <NVIC_EncodePriority>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff82 	bl	8002fc0 <__NVIC_SetPriority>
}
 80030bc:	bf00      	nop
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff56 	bl	8002f84 <__NVIC_EnableIRQ>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00d      	b.n	8003112 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80030f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_SYSTICK_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80030fe:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_SYSTICK_Config+0x40>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_SYSTICK_Config+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <HAL_SYSTICK_Config+0x40>)
 800310a:	f043 0303 	orr.w	r3, r3, #3
 800310e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d844      	bhi.n	80031bc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800315b 	.word	0x0800315b
 800313c:	08003179 	.word	0x08003179
 8003140:	0800319b 	.word	0x0800319b
 8003144:	080031bd 	.word	0x080031bd
 8003148:	0800314d 	.word	0x0800314d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800314c:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1e      	ldr	r2, [pc, #120]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003152:	f043 0304 	orr.w	r3, r3, #4
 8003156:	6013      	str	r3, [r2, #0]
      break;
 8003158:	e031      	b.n	80031be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800315a:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1b      	ldr	r2, [pc, #108]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800316c:	4a18      	ldr	r2, [pc, #96]	@ (80031d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800316e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003176:	e022      	b.n	80031be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003178:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a13      	ldr	r2, [pc, #76]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8003184:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800318e:	4a10      	ldr	r2, [pc, #64]	@ (80031d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003190:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8003198:	e011      	b.n	80031be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800319a:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a0b      	ldr	r2, [pc, #44]	@ (80031cc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80031a0:	f023 0304 	bic.w	r3, r3, #4
 80031a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ac:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80031b0:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80031b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80031ba:	e000      	b.n	80031be <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80031bc:	bf00      	nop
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000e010 	.word	0xe000e010
 80031d0:	46020c00 	.word	0x46020c00

080031d4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80031e6:	2304      	movs	r3, #4
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	e021      	b.n	8003230 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80031ec:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80031f6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fe:	d011      	beq.n	8003224 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003206:	d810      	bhi.n	800322a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003214:	d003      	beq.n	800321e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003216:	e008      	b.n	800322a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
        break;
 800321c:	e008      	b.n	8003230 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800321e:	2301      	movs	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
        break;
 8003222:	e005      	b.n	8003230 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003224:	2302      	movs	r3, #2
 8003226:	607b      	str	r3, [r7, #4]
        break;
 8003228:	e002      	b.n	8003230 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
        break;
 800322e:	bf00      	nop
    }
  }
  return systick_source;
 8003230:	687b      	ldr	r3, [r7, #4]
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e010 	.word	0xe000e010
 8003244:	46020c00 	.word	0x46020c00

08003248 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003250:	f7ff fe36 	bl	8002ec0 <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e06b      	b.n	8003338 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d008      	beq.n	800327e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e05c      	b.n	8003338 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0204 	orr.w	r2, r2, #4
 800328c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2205      	movs	r2, #5
 8003292:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003296:	e020      	b.n	80032da <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003298:	f7ff fe12 	bl	8002ec0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d919      	bls.n	80032da <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032aa:	f043 0210 	orr.w	r2, r3, #16
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2203      	movs	r2, #3
 80032b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ca:	2201      	movs	r2, #1
 80032cc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e02e      	b.n	8003338 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0d7      	beq.n	8003298 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0202 	orr.w	r2, r2, #2
 80032f6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2204      	movs	r2, #4
 80032fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003308:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003322:	2201      	movs	r2, #1
 8003324:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e019      	b.n	8003386 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e00e      	b.n	8003386 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2204      	movs	r2, #4
 800336c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033a0:	b2db      	uxtb	r3, r3
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	b2db      	uxtb	r3, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	@ 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033de:	e1ba      	b.n	8003756 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	4013      	ands	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 81aa 	beq.w	8003750 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a55      	ldr	r2, [pc, #340]	@ (8003554 <HAL_GPIO_Init+0x188>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d15d      	bne.n	80034c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800340a:	2201      	movs	r2, #1
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	4013      	ands	r3, r2
 8003418:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0201 	and.w	r2, r3, #1
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	4313      	orrs	r3, r2
 800342c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003434:	4a48      	ldr	r2, [pc, #288]	@ (8003558 <HAL_GPIO_Init+0x18c>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800343c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800343e:	4a46      	ldr	r2, [pc, #280]	@ (8003558 <HAL_GPIO_Init+0x18c>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3208      	adds	r2, #8
 8003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003456:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	4013      	ands	r3, r2
 800346c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220b      	movs	r2, #11
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	4313      	orrs	r3, r2
 8003480:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	3208      	adds	r2, #8
 800348a:	69f9      	ldr	r1, [r7, #28]
 800348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2202      	movs	r2, #2
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e067      	b.n	8003590 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0x104>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b12      	cmp	r3, #18
 80034ce:	d145      	bne.n	800355c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	4313      	orrs	r3, r2
 800350c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3208      	adds	r2, #8
 8003516:	69f9      	ldr	r1, [r7, #28]
 8003518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	4013      	ands	r3, r2
 8003532:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	4313      	orrs	r3, r2
 8003548:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e01e      	b.n	8003590 <HAL_GPIO_Init+0x1c4>
 8003552:	bf00      	nop
 8003554:	46020000 	.word	0x46020000
 8003558:	0800cf1c 	.word	0x0800cf1c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	4013      	ands	r3, r2
 8003572:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0203 	and.w	r2, r3, #3
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	4313      	orrs	r3, r2
 8003588:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d00b      	beq.n	80035b0 <HAL_GPIO_Init+0x1e4>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d007      	beq.n	80035b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a4:	2b11      	cmp	r3, #17
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b12      	cmp	r3, #18
 80035ae:	d130      	bne.n	8003612 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80035e6:	2201      	movs	r2, #1
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0201 	and.w	r2, r3, #1
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	4313      	orrs	r3, r2
 800360a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d017      	beq.n	800364a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	2203      	movs	r2, #3
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	4013      	ands	r3, r2
 8003630:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d07c      	beq.n	8003750 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003656:	4a47      	ldr	r2, [pc, #284]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	3318      	adds	r3, #24
 800365e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003662:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	220f      	movs	r2, #15
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	4013      	ands	r3, r2
 8003678:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0a9a      	lsrs	r2, r3, #10
 800367e:	4b3e      	ldr	r3, [pc, #248]	@ (8003778 <HAL_GPIO_Init+0x3ac>)
 8003680:	4013      	ands	r3, r2
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	f002 0203 	and.w	r2, r2, #3
 8003688:	00d2      	lsls	r2, r2, #3
 800368a:	4093      	lsls	r3, r2
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	4313      	orrs	r3, r2
 8003690:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003692:	4938      	ldr	r1, [pc, #224]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	3318      	adds	r3, #24
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80036a0:	4b34      	ldr	r3, [pc, #208]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80036c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80036ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80036ee:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80036f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	4013      	ands	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800371a:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003722:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 8003724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003728:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	43db      	mvns	r3, r3
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	4013      	ands	r3, r2
 8003732:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003748:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <HAL_GPIO_Init+0x3a8>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3301      	adds	r3, #1
 8003754:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f47f ae3d 	bne.w	80033e0 <HAL_GPIO_Init+0x14>
  }
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	3724      	adds	r7, #36	@ 0x24
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	46022000 	.word	0x46022000
 8003778:	002f7f7f 	.word	0x002f7f7f

0800377c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e08d      	b.n	80038aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fe ff0e 	bl	80025c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	@ 0x24
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e006      	b.n	8003804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d108      	bne.n	800381e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	e007      	b.n	800382e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800383c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003840:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003850:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1a      	ldr	r2, [r3, #32]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	461a      	mov	r2, r3
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
 80038c4:	4613      	mov	r3, r2
 80038c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	f040 80da 	bne.w	8003a8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_I2C_Master_Transmit+0x30>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0d3      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1d8>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038ec:	f7ff fae8 	bl	8002ec0 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2319      	movs	r3, #25
 80038f8:	2201      	movs	r2, #1
 80038fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f001 ff49 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0be      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2221      	movs	r2, #33	@ 0x21
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2210      	movs	r2, #16
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	893a      	ldrh	r2, [r7, #8]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2bff      	cmp	r3, #255	@ 0xff
 800393e:	d90e      	bls.n	800395e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	22ff      	movs	r2, #255	@ 0xff
 8003944:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394a:	b2da      	uxtb	r2, r3
 800394c:	8979      	ldrh	r1, [r7, #10]
 800394e:	4b51      	ldr	r3, [pc, #324]	@ (8003a94 <HAL_I2C_Master_Transmit+0x1e0>)
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f002 f96c 	bl	8005c34 <I2C_TransferConfig>
 800395c:	e06c      	b.n	8003a38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	b2da      	uxtb	r2, r3
 800396e:	8979      	ldrh	r1, [r7, #10]
 8003970:	4b48      	ldr	r3, [pc, #288]	@ (8003a94 <HAL_I2C_Master_Transmit+0x1e0>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f002 f95b 	bl	8005c34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800397e:	e05b      	b.n	8003a38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6a39      	ldr	r1, [r7, #32]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f001 ff5f 	bl	8005848 <I2C_WaitOnTXISFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e07b      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d034      	beq.n	8003a38 <HAL_I2C_Master_Transmit+0x184>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d130      	bne.n	8003a38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	@ 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f001 fed8 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04d      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2bff      	cmp	r3, #255	@ 0xff
 80039f8:	d90e      	bls.n	8003a18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22ff      	movs	r2, #255	@ 0xff
 80039fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f002 f90f 	bl	8005c34 <I2C_TransferConfig>
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f002 f8fe 	bl	8005c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19e      	bne.n	8003980 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6a39      	ldr	r1, [r7, #32]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f001 ff45 	bl	80058d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01a      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_I2C_Master_Transmit+0x1e4>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	80002000 	.word	0x80002000
 8003a98:	fe00e800 	.word	0xfe00e800

08003a9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	817b      	strh	r3, [r7, #10]
 8003aac:	4613      	mov	r3, r2
 8003aae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	f040 80db 	bne.w	8003c74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_I2C_Master_Receive+0x30>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e0d4      	b.n	8003c76 <HAL_I2C_Master_Receive+0x1da>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad4:	f7ff f9f4 	bl	8002ec0 <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2319      	movs	r3, #25
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f001 fe55 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e0bf      	b.n	8003c76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2222      	movs	r2, #34	@ 0x22
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2210      	movs	r2, #16
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	893a      	ldrh	r2, [r7, #8]
 8003b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2bff      	cmp	r3, #255	@ 0xff
 8003b26:	d90e      	bls.n	8003b46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	@ 0xff
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	8979      	ldrh	r1, [r7, #10]
 8003b36:	4b52      	ldr	r3, [pc, #328]	@ (8003c80 <HAL_I2C_Master_Receive+0x1e4>)
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f002 f878 	bl	8005c34 <I2C_TransferConfig>
 8003b44:	e06d      	b.n	8003c22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	8979      	ldrh	r1, [r7, #10]
 8003b58:	4b49      	ldr	r3, [pc, #292]	@ (8003c80 <HAL_I2C_Master_Receive+0x1e4>)
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f002 f867 	bl	8005c34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b66:	e05c      	b.n	8003c22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6a39      	ldr	r1, [r7, #32]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f001 fef5 	bl	800595c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e07c      	b.n	8003c76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d034      	beq.n	8003c22 <HAL_I2C_Master_Receive+0x186>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d130      	bne.n	8003c22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2180      	movs	r1, #128	@ 0x80
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f001 fde3 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e04d      	b.n	8003c76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2bff      	cmp	r3, #255	@ 0xff
 8003be2:	d90e      	bls.n	8003c02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	22ff      	movs	r2, #255	@ 0xff
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f002 f81a 	bl	8005c34 <I2C_TransferConfig>
 8003c00:	e00f      	b.n	8003c22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	8979      	ldrh	r1, [r7, #10]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f002 f809 	bl	8005c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d19d      	bne.n	8003b68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f001 fe50 	bl	80058d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e01a      	b.n	8003c76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2220      	movs	r2, #32
 8003c46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b0c      	ldr	r3, [pc, #48]	@ (8003c84 <HAL_I2C_Master_Receive+0x1e8>)
 8003c54:	400b      	ands	r3, r1
 8003c56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	80002400 	.word	0x80002400
 8003c84:	fe00e800 	.word	0xfe00e800

08003c88 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	461a      	mov	r2, r3
 8003c94:	460b      	mov	r3, r1
 8003c96:	817b      	strh	r3, [r7, #10]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d167      	bne.n	8003d78 <HAL_I2C_Master_Transmit_IT+0xf0>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb6:	d101      	bne.n	8003cbc <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e05e      	b.n	8003d7a <HAL_I2C_Master_Transmit_IT+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_Master_Transmit_IT+0x42>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e057      	b.n	8003d7a <HAL_I2C_Master_Transmit_IT+0xf2>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	@ 0x21
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2210      	movs	r2, #16
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	893a      	ldrh	r2, [r7, #8]
 8003cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a23      	ldr	r2, [pc, #140]	@ (8003d84 <HAL_I2C_Master_Transmit_IT+0xfc>)
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	@ (8003d88 <HAL_I2C_Master_Transmit_IT+0x100>)
 8003cfe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2bff      	cmp	r3, #255	@ 0xff
 8003d08:	d906      	bls.n	8003d18 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	22ff      	movs	r2, #255	@ 0xff
 8003d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003d10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	e007      	b.n	8003d28 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d26:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    /* Check if the Autonomous mode is enabled */
    if ((hi2c->Instance->AUTOCR & I2C_AUTOCR_TRIGEN) == I2C_AUTOCR_TRIGEN)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d36:	d10b      	bne.n	8003d50 <HAL_I2C_Master_Transmit_IT+0xc8>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_NO_START_WRITE);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	8979      	ldrh	r1, [r7, #10]
 8003d40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f001 ff73 	bl	8005c34 <I2C_TransferConfig>
 8003d4e:	e009      	b.n	8003d64 <HAL_I2C_Master_Transmit_IT+0xdc>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8979      	ldrh	r1, [r7, #10]
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <HAL_I2C_Master_Transmit_IT+0x104>)
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f001 ff68 	bl	8005c34 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f001 ff92 	bl	8005c98 <I2C_Enable_IRQ>

    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <HAL_I2C_Master_Transmit_IT+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	ffff0000 	.word	0xffff0000
 8003d88:	08004243 	.word	0x08004243
 8003d8c:	80002000 	.word	0x80002000

08003d90 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	817b      	strh	r3, [r7, #10]
 8003da0:	4613      	mov	r3, r2
 8003da2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d166      	bne.n	8003e7e <HAL_I2C_Master_Receive_IT+0xee>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbe:	d101      	bne.n	8003dc4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e05d      	b.n	8003e80 <HAL_I2C_Master_Receive_IT+0xf0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2C_Master_Receive_IT+0x42>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e056      	b.n	8003e80 <HAL_I2C_Master_Receive_IT+0xf0>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2222      	movs	r2, #34	@ 0x22
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2210      	movs	r2, #16
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	893a      	ldrh	r2, [r7, #8]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_I2C_Master_Receive_IT+0xf8>)
 8003e00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a21      	ldr	r2, [pc, #132]	@ (8003e8c <HAL_I2C_Master_Receive_IT+0xfc>)
 8003e06:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2bff      	cmp	r3, #255	@ 0xff
 8003e10:	d906      	bls.n	8003e20 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	@ 0xff
 8003e16:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e007      	b.n	8003e30 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    /* Check if the Autonomous mode is enabled */
    if ((hi2c->Instance->AUTOCR & I2C_AUTOCR_TRIGEN) == I2C_AUTOCR_TRIGEN)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e3e:	d10a      	bne.n	8003e56 <HAL_I2C_Master_Receive_IT+0xc6>
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_NO_START_READ);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	8979      	ldrh	r1, [r7, #10]
 8003e48:	4b11      	ldr	r3, [pc, #68]	@ (8003e90 <HAL_I2C_Master_Receive_IT+0x100>)
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f001 fef0 	bl	8005c34 <I2C_TransferConfig>
 8003e54:	e009      	b.n	8003e6a <HAL_I2C_Master_Receive_IT+0xda>
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	8979      	ldrh	r1, [r7, #10]
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <HAL_I2C_Master_Receive_IT+0x104>)
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f001 fee5 	bl	8005c34 <I2C_TransferConfig>
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e72:	2102      	movs	r1, #2
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f001 ff0f 	bl	8005c98 <I2C_Enable_IRQ>

    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_I2C_Master_Receive_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	ffff0000 	.word	0xffff0000
 8003e8c:	08004243 	.word	0x08004243
 8003e90:	80000400 	.word	0x80000400
 8003e94:	80002400 	.word	0x80002400

08003e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	f040 80fd 	bne.w	80040ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x34>
 8003ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0f1      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x4e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0ea      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eee:	f7fe ffe7 	bl	8002ec0 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2319      	movs	r3, #25
 8003efa:	2201      	movs	r2, #1
 8003efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f001 fc48 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d5      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	@ 0x22
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f38:	88f8      	ldrh	r0, [r7, #6]
 8003f3a:	893a      	ldrh	r2, [r7, #8]
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	4603      	mov	r3, r0
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 febb 	bl	8004cc4 <I2C_RequestMemoryRead>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0ad      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2bff      	cmp	r3, #255	@ 0xff
 8003f68:	d90e      	bls.n	8003f88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	22ff      	movs	r2, #255	@ 0xff
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_I2C_Mem_Read+0x22c>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f001 fe57 	bl	8005c34 <I2C_TransferConfig>
 8003f86:	e00f      	b.n	8003fa8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	8979      	ldrh	r1, [r7, #10]
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <HAL_I2C_Mem_Read+0x22c>)
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f001 fe46 	bl	8005c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f001 fbef 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07c      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d034      	beq.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d130      	bne.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	@ 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f001 fbc0 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04d      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2bff      	cmp	r3, #255	@ 0xff
 8004028:	d90e      	bls.n	8004048 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	22ff      	movs	r2, #255	@ 0xff
 800402e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	b2da      	uxtb	r2, r3
 8004036:	8979      	ldrh	r1, [r7, #10]
 8004038:	2300      	movs	r3, #0
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f001 fdf7 	bl	8005c34 <I2C_TransferConfig>
 8004046:	e00f      	b.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	b2da      	uxtb	r2, r3
 8004058:	8979      	ldrh	r1, [r7, #10]
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f001 fde6 	bl	8005c34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d19a      	bne.n	8003fa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f001 fc2d 	bl	80058d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e01a      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2220      	movs	r2, #32
 800408c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_I2C_Mem_Read+0x230>)
 800409a:	400b      	ands	r3, r1
 800409c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	80002400 	.word	0x80002400
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4798      	blx	r3
  }
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	09db      	lsrs	r3, r3, #7
 8004128:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004144:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	0a9b      	lsrs	r3, r3, #10
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	09db      	lsrs	r3, r3, #7
 8004156:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	f043 0208 	orr.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004172:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	0a5b      	lsrs	r3, r3, #9
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	09db      	lsrs	r3, r3, #7
 8004184:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004190:	f043 0202 	orr.w	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 030b 	and.w	r3, r3, #11
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f001 f995 	bl	80054e4 <I2C_ITError>
  }
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	70fb      	strb	r3, [r7, #3]
 80041f6:	4613      	mov	r3, r2
 80041f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b088      	sub	sp, #32
 8004246:	af02      	add	r7, sp, #8
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <I2C_Master_ISR_IT+0x1e>
 800425c:	2302      	movs	r3, #2
 800425e:	e114      	b.n	800448a <I2C_Master_ISR_IT+0x248>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f001 fa3c 	bl	8005712 <I2C_Flush_TXDR>
 800429a:	e0e1      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01d      	beq.n	80042f0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0304 	bic.w	r3, r3, #4
 80042ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ee:	e0b7      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01e      	beq.n	800433a <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004304:	2b00      	cmp	r3, #0
 8004306:	d018      	beq.n	800433a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004338:	e092      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	09db      	lsrs	r3, r3, #7
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d05d      	beq.n	8004402 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800434e:	2b00      	cmp	r3, #0
 8004350:	d057      	beq.n	8004402 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d040      	beq.n	80043de <I2C_Master_ISR_IT+0x19c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d13c      	bne.n	80043de <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004370:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2bff      	cmp	r3, #255	@ 0xff
 800437a:	d90e      	bls.n	800439a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	b2da      	uxtb	r2, r3
 8004388:	8a79      	ldrh	r1, [r7, #18]
 800438a:	2300      	movs	r3, #0
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f001 fc4e 	bl	8005c34 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004398:	e032      	b.n	8004400 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043ac:	d00b      	beq.n	80043c6 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80043b8:	8a79      	ldrh	r1, [r7, #18]
 80043ba:	2000      	movs	r0, #0
 80043bc:	9000      	str	r0, [sp, #0]
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f001 fc38 	bl	8005c34 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c4:	e01c      	b.n	8004400 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	8a79      	ldrh	r1, [r7, #18]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f001 fc2c 	bl	8005c34 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043dc:	e010      	b.n	8004400 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043ec:	d003      	beq.n	80043f6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fd40 	bl	8004e74 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f4:	e034      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043f6:	2140      	movs	r1, #64	@ 0x40
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f001 f873 	bl	80054e4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043fe:	e02f      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
 8004400:	e02e      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d028      	beq.n	8004460 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004416:	2b00      	cmp	r3, #0
 8004418:	d022      	beq.n	8004460 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d119      	bne.n	8004458 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004432:	d015      	beq.n	8004460 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800443c:	d108      	bne.n	8004450 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e007      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fd0f 	bl	8004e74 <I2C_ITMasterSeqCplt>
 8004456:	e003      	b.n	8004460 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004458:	2140      	movs	r1, #64	@ 0x40
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f001 f842 	bl	80054e4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004478:	6979      	ldr	r1, [r7, #20]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fd96 	bl	8004fac <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <I2C_Slave_ISR_IT+0x24>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0ed      	b.n	8004692 <I2C_Slave_ISR_IT+0x200>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d004      	beq.n	80044e0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fe31 	bl	8005140 <I2C_ITSlaveCplt>
 80044de:	e0d3      	b.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d04d      	beq.n	8004588 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d047      	beq.n	8004588 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d128      	bne.n	8004554 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b28      	cmp	r3, #40	@ 0x28
 800450c:	d108      	bne.n	8004520 <I2C_Slave_ISR_IT+0x8e>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004514:	d104      	bne.n	8004520 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004516:	6939      	ldr	r1, [r7, #16]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 ff8d 	bl	8005438 <I2C_ITListenCplt>
 800451e:	e032      	b.n	8004586 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b29      	cmp	r3, #41	@ 0x29
 800452a:	d10e      	bne.n	800454a <I2C_Slave_ISR_IT+0xb8>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004532:	d00a      	beq.n	800454a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2210      	movs	r2, #16
 800453a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f001 f8e8 	bl	8005712 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fcd3 	bl	8004eee <I2C_ITSlaveSeqCplt>
 8004548:	e01d      	b.n	8004586 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2210      	movs	r2, #16
 8004550:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004552:	e096      	b.n	8004682 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2210      	movs	r2, #16
 800455a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <I2C_Slave_ISR_IT+0xe6>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004574:	f040 8085 	bne.w	8004682 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	4619      	mov	r1, r3
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 ffb0 	bl	80054e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004584:	e07d      	b.n	8004682 <I2C_Slave_ISR_IT+0x1f0>
 8004586:	e07c      	b.n	8004682 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d030      	beq.n	80045f6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02a      	beq.n	80045f6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d018      	beq.n	80045dc <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d14f      	bne.n	8004686 <I2C_Slave_ISR_IT+0x1f4>
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045ec:	d04b      	beq.n	8004686 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fc7d 	bl	8004eee <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045f4:	e047      	b.n	8004686 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	08db      	lsrs	r3, r3, #3
 8004606:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800460a:	2b00      	cmp	r3, #0
 800460c:	d004      	beq.n	8004618 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800460e:	6939      	ldr	r1, [r7, #16]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fbab 	bl	8004d6c <I2C_ITAddrCplt>
 8004616:	e037      	b.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d031      	beq.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800462c:	2b00      	cmp	r3, #0
 800462e:	d02b      	beq.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	781a      	ldrb	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	@ 0x28
 800466a:	e00d      	b.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004672:	d002      	beq.n	800467a <I2C_Slave_ISR_IT+0x1e8>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fc37 	bl	8004eee <I2C_ITSlaveSeqCplt>
 8004680:	e002      	b.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004686:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b088      	sub	sp, #32
 800469e:	af02      	add	r7, sp, #8
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <I2C_Master_ISR_DMA+0x1a>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e0e1      	b.n	8004878 <I2C_Master_ISR_DMA+0x1de>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d017      	beq.n	80046f8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d011      	beq.n	80046f8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2210      	movs	r2, #16
 80046da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e0:	f043 0204 	orr.w	r2, r3, #4
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80046e8:	2120      	movs	r1, #32
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f001 fad4 	bl	8005c98 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f001 f80e 	bl	8005712 <I2C_Flush_TXDR>
 80046f6:	e0ba      	b.n	800486e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	09db      	lsrs	r3, r3, #7
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d072      	beq.n	80047ea <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	099b      	lsrs	r3, r3, #6
 8004708:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800470c:	2b00      	cmp	r3, #0
 800470e:	d06c      	beq.n	80047ea <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d04e      	beq.n	80047c8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b29b      	uxth	r3, r3
 8004732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004736:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2bff      	cmp	r3, #255	@ 0xff
 8004740:	d906      	bls.n	8004750 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	22ff      	movs	r2, #255	@ 0xff
 8004746:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004748:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e010      	b.n	8004772 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004762:	d003      	beq.n	800476c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e002      	b.n	8004772 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800476c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004770:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004776:	b2da      	uxtb	r2, r3
 8004778:	8a79      	ldrh	r1, [r7, #18]
 800477a:	2300      	movs	r3, #0
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f001 fa57 	bl	8005c34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b22      	cmp	r3, #34	@ 0x22
 80047a2:	d108      	bne.n	80047b6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047b4:	e05b      	b.n	800486e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80047c6:	e052      	b.n	800486e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047d6:	d003      	beq.n	80047e0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fb4b 	bl	8004e74 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80047de:	e046      	b.n	800486e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80047e0:	2140      	movs	r1, #64	@ 0x40
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fe7e 	bl	80054e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80047e8:	e041      	b.n	800486e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	099b      	lsrs	r3, r3, #6
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d029      	beq.n	800484a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d023      	beq.n	800484a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d119      	bne.n	8004840 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800481a:	d027      	beq.n	800486c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004824:	d108      	bne.n	8004838 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004834:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004836:	e019      	b.n	800486c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fb1b 	bl	8004e74 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800483e:	e015      	b.n	800486c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004840:	2140      	movs	r1, #64	@ 0x40
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fe4e 	bl	80054e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004848:	e010      	b.n	800486c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fba1 	bl	8004fac <I2C_ITMasterCplt>
 800486a:	e000      	b.n	800486e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800486c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800488c:	4b92      	ldr	r3, [pc, #584]	@ (8004ad8 <I2C_Mem_ISR_DMA+0x258>)
 800488e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <I2C_Mem_ISR_DMA+0x1e>
 800489a:	2302      	movs	r3, #2
 800489c:	e118      	b.n	8004ad0 <I2C_Mem_ISR_DMA+0x250>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d011      	beq.n	80048e2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80048d2:	2120      	movs	r1, #32
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f001 f9df 	bl	8005c98 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 ff19 	bl	8005712 <I2C_Flush_TXDR>
 80048e0:	e0f1      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	651a      	str	r2, [r3, #80]	@ 0x50
 800490c:	e0db      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	09db      	lsrs	r3, r3, #7
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d060      	beq.n	80049dc <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004922:	2b00      	cmp	r3, #0
 8004924:	d05a      	beq.n	80049dc <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004926:	2101      	movs	r1, #1
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f001 fa39 	bl	8005da0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800492e:	2110      	movs	r1, #16
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f001 f9b1 	bl	8005c98 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d048      	beq.n	80049d2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2bff      	cmp	r3, #255	@ 0xff
 8004948:	d910      	bls.n	800496c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	22ff      	movs	r2, #255	@ 0xff
 800494e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004954:	b299      	uxth	r1, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495a:	b2da      	uxtb	r2, r3
 800495c:	2300      	movs	r3, #0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f001 f965 	bl	8005c34 <I2C_TransferConfig>
 800496a:	e011      	b.n	8004990 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	b299      	uxth	r1, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004980:	b2da      	uxtb	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f001 f952 	bl	8005c34 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b22      	cmp	r3, #34	@ 0x22
 80049ac:	d108      	bne.n	80049c0 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80049be:	e082      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80049d0:	e079      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80049d2:	2140      	movs	r1, #64	@ 0x40
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fd85 	bl	80054e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80049da:	e074      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05e      	beq.n	8004aa6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	099b      	lsrs	r3, r3, #6
 80049ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d058      	beq.n	8004aa6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049f4:	2101      	movs	r1, #1
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f001 f9d2 	bl	8005da0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049fc:	2110      	movs	r1, #16
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f001 f94a 	bl	8005c98 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b22      	cmp	r3, #34	@ 0x22
 8004a0e:	d101      	bne.n	8004a14 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004a10:	4b32      	ldr	r3, [pc, #200]	@ (8004adc <I2C_Mem_ISR_DMA+0x25c>)
 8004a12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2bff      	cmp	r3, #255	@ 0xff
 8004a1c:	d910      	bls.n	8004a40 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	22ff      	movs	r2, #255	@ 0xff
 8004a22:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a28:	b299      	uxth	r1, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f001 f8fb 	bl	8005c34 <I2C_TransferConfig>
 8004a3e:	e011      	b.n	8004a64 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4e:	b299      	uxth	r1, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f001 f8e8 	bl	8005c34 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b22      	cmp	r3, #34	@ 0x22
 8004a80:	d108      	bne.n	8004a94 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a90:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a92:	e018      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aa4:	e00f      	b.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fa73 	bl	8004fac <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	80002000 	.word	0x80002000
 8004adc:	80002400 	.word	0x80002400

08004ae0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b089      	sub	sp, #36	@ 0x24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <I2C_Slave_ISR_DMA+0x24>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0db      	b.n	8004cbc <I2C_Slave_ISR_DMA+0x1dc>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fb0a 	bl	8005140 <I2C_ITSlaveCplt>
 8004b2c:	e0c1      	b.n	8004cb2 <I2C_Slave_ISR_DMA+0x1d2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80ab 	beq.w	8004c92 <I2C_Slave_ISR_DMA+0x1b2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80a4 	beq.w	8004c92 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0b9b      	lsrs	r3, r3, #14
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0bdb      	lsrs	r3, r3, #15
 8004b5a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8090 	beq.w	8004c84 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d015      	beq.n	8004b98 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0bdb      	lsrs	r3, r3, #15
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b80:	b29c      	uxth	r4, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe fc11 	bl	80033ae <HAL_DMAEx_GetFifoLevel>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4423      	add	r3, r4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004b94:	2301      	movs	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d015      	beq.n	8004bcc <I2C_Slave_ISR_DMA+0xec>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0b9b      	lsrs	r3, r3, #14
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00f      	beq.n	8004bcc <I2C_Slave_ISR_DMA+0xec>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb4:	b29c      	uxth	r4, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fbf7 	bl	80033ae <HAL_DMAEx_GetFifoLevel>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4423      	add	r3, r4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <I2C_Slave_ISR_DMA+0xec>
          {
            treatdmanack = 1U;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d128      	bne.n	8004c24 <I2C_Slave_ISR_DMA+0x144>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b28      	cmp	r3, #40	@ 0x28
 8004bdc:	d108      	bne.n	8004bf0 <I2C_Slave_ISR_DMA+0x110>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004be4:	d104      	bne.n	8004bf0 <I2C_Slave_ISR_DMA+0x110>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fc25 	bl	8005438 <I2C_ITListenCplt>
 8004bee:	e048      	b.n	8004c82 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b29      	cmp	r3, #41	@ 0x29
 8004bfa:	d10e      	bne.n	8004c1a <I2C_Slave_ISR_DMA+0x13a>
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c02:	d00a      	beq.n	8004c1a <I2C_Slave_ISR_DMA+0x13a>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fd80 	bl	8005712 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f96b 	bl	8004eee <I2C_ITSlaveSeqCplt>
 8004c18:	e033      	b.n	8004c82 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004c22:	e034      	b.n	8004c8e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c30:	f043 0204 	orr.w	r2, r3, #4
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c3e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <I2C_Slave_ISR_DMA+0x16e>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c4c:	d11f      	bne.n	8004c8e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b21      	cmp	r3, #33	@ 0x21
 8004c52:	d002      	beq.n	8004c5a <I2C_Slave_ISR_DMA+0x17a>
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b29      	cmp	r3, #41	@ 0x29
 8004c58:	d103      	bne.n	8004c62 <I2C_Slave_ISR_DMA+0x182>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2221      	movs	r2, #33	@ 0x21
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c60:	e008      	b.n	8004c74 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
 8004c64:	2b22      	cmp	r3, #34	@ 0x22
 8004c66:	d002      	beq.n	8004c6e <I2C_Slave_ISR_DMA+0x18e>
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c6c:	d102      	bne.n	8004c74 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2222      	movs	r2, #34	@ 0x22
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 fc32 	bl	80054e4 <I2C_ITError>
      if (treatdmanack == 1U)
 8004c80:	e005      	b.n	8004c8e <I2C_Slave_ISR_DMA+0x1ae>
 8004c82:	e004      	b.n	8004c8e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c8c:	e011      	b.n	8004cb2 <I2C_Slave_ISR_DMA+0x1d2>
      if (treatdmanack == 1U)
 8004c8e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c90:	e00f      	b.n	8004cb2 <I2C_Slave_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	08db      	lsrs	r3, r3, #3
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <I2C_Slave_ISR_DMA+0x1d2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <I2C_Slave_ISR_DMA+0x1d2>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f85d 	bl	8004d6c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3724      	adds	r7, #36	@ 0x24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}

08004cc4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	4608      	mov	r0, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	817b      	strh	r3, [r7, #10]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	813b      	strh	r3, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	8979      	ldrh	r1, [r7, #10]
 8004ce4:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <I2C_RequestMemoryRead+0xa4>)
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 ffa2 	bl	8005c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	69b9      	ldr	r1, [r7, #24]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fda7 	bl	8005848 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e02c      	b.n	8004d5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d105      	bne.n	8004d16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0a:	893b      	ldrh	r3, [r7, #8]
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d14:	e015      	b.n	8004d42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d16:	893b      	ldrh	r3, [r7, #8]
 8004d18:	0a1b      	lsrs	r3, r3, #8
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d24:	69fa      	ldr	r2, [r7, #28]
 8004d26:	69b9      	ldr	r1, [r7, #24]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 fd8d 	bl	8005848 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e012      	b.n	8004d5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d38:	893b      	ldrh	r3, [r7, #8]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2140      	movs	r1, #64	@ 0x40
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fd22 	bl	8005796 <I2C_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d001      	beq.n	8004d5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	80002000 	.word	0x80002000

08004d6c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d82:	2b28      	cmp	r3, #40	@ 0x28
 8004d84:	d16a      	bne.n	8004e5c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004da4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004dc0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d138      	bne.n	8004e3c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004dca:	897b      	ldrh	r3, [r7, #10]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	89bb      	ldrh	r3, [r7, #12]
 8004dd2:	4053      	eors	r3, r2
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f003 0306 	and.w	r3, r3, #6
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d11c      	bne.n	8004e18 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004dde:	897b      	ldrh	r3, [r7, #10]
 8004de0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d13b      	bne.n	8004e6c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2208      	movs	r2, #8
 8004e00:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e0a:	89ba      	ldrh	r2, [r7, #12]
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff f9ea 	bl	80041ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e16:	e029      	b.n	8004e6c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004e18:	893b      	ldrh	r3, [r7, #8]
 8004e1a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 ffbd 	bl	8005da0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e2e:	89ba      	ldrh	r2, [r7, #12]
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff f9d8 	bl	80041ea <HAL_I2C_AddrCallback>
}
 8004e3a:	e017      	b.n	8004e6c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 ffad 	bl	8005da0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e4e:	89ba      	ldrh	r2, [r7, #12]
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff f9c8 	bl	80041ea <HAL_I2C_AddrCallback>
}
 8004e5a:	e007      	b.n	8004e6c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004e6c:	bf00      	nop
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b21      	cmp	r3, #33	@ 0x21
 8004e8e:	d115      	bne.n	8004ebc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2211      	movs	r2, #17
 8004e9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 ff7a 	bl	8005da0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fc f837 	bl	8000f28 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eba:	e014      	b.n	8004ee6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2212      	movs	r2, #18
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 ff64 	bl	8005da0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fc f865 	bl	8000fb0 <HAL_I2C_MasterRxCpltCallback>
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	0b9b      	lsrs	r3, r3, #14
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e00d      	b.n	8004f40 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0bdb      	lsrs	r3, r3, #15
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b29      	cmp	r3, #41	@ 0x29
 8004f4a:	d112      	bne.n	8004f72 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2228      	movs	r2, #40	@ 0x28
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2221      	movs	r2, #33	@ 0x21
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 ff1f 	bl	8005da0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff f929 	bl	80041c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f70:	e017      	b.n	8004fa2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f7c:	d111      	bne.n	8004fa2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2228      	movs	r2, #40	@ 0x28
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2222      	movs	r2, #34	@ 0x22
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f8c:	2102      	movs	r1, #2
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 ff06 	bl	8005da0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff f91a 	bl	80041d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b21      	cmp	r3, #33	@ 0x21
 8004fcc:	d107      	bne.n	8004fde <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fce:	2101      	movs	r1, #1
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fee5 	bl	8005da0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2211      	movs	r2, #17
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fdc:	e00c      	b.n	8004ff8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b22      	cmp	r3, #34	@ 0x22
 8004fe8:	d106      	bne.n	8004ff8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fea:	2102      	movs	r1, #2
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fed7 	bl	8005da0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2212      	movs	r2, #18
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b4d      	ldr	r3, [pc, #308]	@ (8005138 <I2C_ITMasterCplt+0x18c>)
 8005004:	400b      	ands	r3, r1
 8005006:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a4a      	ldr	r2, [pc, #296]	@ (800513c <I2C_ITMasterCplt+0x190>)
 8005012:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2210      	movs	r2, #16
 8005026:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	f043 0204 	orr.w	r2, r3, #4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b60      	cmp	r3, #96	@ 0x60
 800503e:	d10b      	bne.n	8005058 <I2C_ITMasterCplt+0xac>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	b2db      	uxtb	r3, r3
 8005054:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005056:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb5a 	bl	8005712 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b60      	cmp	r3, #96	@ 0x60
 800506e:	d002      	beq.n	8005076 <I2C_ITMasterCplt+0xca>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa31 	bl	80054e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005082:	e054      	b.n	800512e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b21      	cmp	r3, #33	@ 0x21
 800508e:	d124      	bne.n	80050da <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b40      	cmp	r3, #64	@ 0x40
 80050a8:	d10b      	bne.n	80050c2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fb ff6e 	bl	8000f9c <HAL_I2C_MemTxCpltCallback>
}
 80050c0:	e035      	b.n	800512e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fb ff28 	bl	8000f28 <HAL_I2C_MasterTxCpltCallback>
}
 80050d8:	e029      	b.n	800512e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b22      	cmp	r3, #34	@ 0x22
 80050e4:	d123      	bne.n	800512e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b40      	cmp	r3, #64	@ 0x40
 80050fe:	d10b      	bne.n	8005118 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fb ff39 	bl	8000f88 <HAL_I2C_MemRxCpltCallback>
}
 8005116:	e00a      	b.n	800512e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fb ff41 	bl	8000fb0 <HAL_I2C_MasterRxCpltCallback>
}
 800512e:	bf00      	nop
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	fe00e800 	.word	0xfe00e800
 800513c:	ffff0000 	.word	0xffff0000

08005140 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005162:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2220      	movs	r2, #32
 800516a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	2b21      	cmp	r3, #33	@ 0x21
 8005170:	d002      	beq.n	8005178 <I2C_ITSlaveCplt+0x38>
 8005172:	7afb      	ldrb	r3, [r7, #11]
 8005174:	2b29      	cmp	r3, #41	@ 0x29
 8005176:	d108      	bne.n	800518a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005178:	f248 0101 	movw	r1, #32769	@ 0x8001
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fe0f 	bl	8005da0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2221      	movs	r2, #33	@ 0x21
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
 8005188:	e019      	b.n	80051be <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	2b22      	cmp	r3, #34	@ 0x22
 800518e:	d002      	beq.n	8005196 <I2C_ITSlaveCplt+0x56>
 8005190:	7afb      	ldrb	r3, [r7, #11]
 8005192:	2b2a      	cmp	r3, #42	@ 0x2a
 8005194:	d108      	bne.n	80051a8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005196:	f248 0102 	movw	r1, #32770	@ 0x8002
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fe00 	bl	8005da0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2222      	movs	r2, #34	@ 0x22
 80051a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051a6:	e00a      	b.n	80051be <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80051a8:	7afb      	ldrb	r3, [r7, #11]
 80051aa:	2b28      	cmp	r3, #40	@ 0x28
 80051ac:	d107      	bne.n	80051be <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80051ae:	f248 0103 	movw	r1, #32771	@ 0x8003
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fdf4 	bl	8005da0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051cc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b95      	ldr	r3, [pc, #596]	@ (8005430 <I2C_ITSlaveCplt+0x2f0>)
 80051da:	400b      	ands	r3, r1
 80051dc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa97 	bl	8005712 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	0b9b      	lsrs	r3, r3, #14
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01c      	beq.n	800522a <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	2b00      	cmp	r3, #0
 8005206:	d032      	beq.n	800526e <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005210:	b29c      	uxth	r4, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe f8c9 	bl	80033ae <HAL_DMAEx_GetFifoLevel>
 800521c:	4603      	mov	r3, r0
 800521e:	b29b      	uxth	r3, r3
 8005220:	4423      	add	r3, r4
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005228:	e021      	b.n	800526e <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	0bdb      	lsrs	r3, r3, #15
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01b      	beq.n	800526e <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005244:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005256:	b29c      	uxth	r4, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe f8a6 	bl	80033ae <HAL_DMAEx_GetFifoLevel>
 8005262:	4603      	mov	r3, r0
 8005264:	b29b      	uxth	r3, r3
 8005266:	4423      	add	r3, r4
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	089b      	lsrs	r3, r3, #2
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0304 	bic.w	r3, r3, #4
 8005280:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00c      	beq.n	80052bc <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	f043 0204 	orr.w	r2, r3, #4
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04a      	beq.n	8005374 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d044      	beq.n	8005374 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d128      	bne.n	8005346 <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b28      	cmp	r3, #40	@ 0x28
 80052fe:	d108      	bne.n	8005312 <I2C_ITSlaveCplt+0x1d2>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005306:	d104      	bne.n	8005312 <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005308:	6979      	ldr	r1, [r7, #20]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f894 	bl	8005438 <I2C_ITListenCplt>
 8005310:	e030      	b.n	8005374 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b29      	cmp	r3, #41	@ 0x29
 800531c:	d10e      	bne.n	800533c <I2C_ITSlaveCplt+0x1fc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005324:	d00a      	beq.n	800533c <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2210      	movs	r2, #16
 800532c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9ef 	bl	8005712 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fdda 	bl	8004eee <I2C_ITSlaveSeqCplt>
 800533a:	e01b      	b.n	8005374 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2210      	movs	r2, #16
 8005342:	61da      	str	r2, [r3, #28]
 8005344:	e016      	b.n	8005374 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2210      	movs	r2, #16
 800534c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f043 0204 	orr.w	r2, r3, #4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <I2C_ITSlaveCplt+0x228>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005366:	d105      	bne.n	8005374 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f8b8 	bl	80054e4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	2b00      	cmp	r3, #0
 8005388:	d010      	beq.n	80053ac <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8a7 	bl	80054e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b28      	cmp	r3, #40	@ 0x28
 80053a0:	d141      	bne.n	8005426 <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f847 	bl	8005438 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053aa:	e03c      	b.n	8005426 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053b4:	d014      	beq.n	80053e0 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff fd99 	bl	8004eee <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1d      	ldr	r2, [pc, #116]	@ (8005434 <I2C_ITSlaveCplt+0x2f4>)
 80053c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fe ff14 	bl	8004206 <HAL_I2C_ListenCpltCallback>
}
 80053de:	e022      	b.n	8005426 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b22      	cmp	r3, #34	@ 0x22
 80053ea:	d10e      	bne.n	800540a <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fe fee7 	bl	80041d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005408:	e00d      	b.n	8005426 <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7fe fece 	bl	80041c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	bd90      	pop	{r4, r7, pc}
 800542e:	bf00      	nop
 8005430:	fe00e800 	.word	0xfe00e800
 8005434:	ffff0000 	.word	0xffff0000

08005438 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	@ (80054e0 <I2C_ITListenCplt+0xa8>)
 8005446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d022      	beq.n	80054b6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d012      	beq.n	80054b6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ae:	f043 0204 	orr.w	r2, r3, #4
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80054b6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc70 	bl	8005da0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2210      	movs	r2, #16
 80054c6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fe fe98 	bl	8004206 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	ffff0000 	.word	0xffff0000

080054e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a6d      	ldr	r2, [pc, #436]	@ (80056b8 <I2C_ITError+0x1d4>)
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	2b28      	cmp	r3, #40	@ 0x28
 800551a:	d005      	beq.n	8005528 <I2C_ITError+0x44>
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	2b29      	cmp	r3, #41	@ 0x29
 8005520:	d002      	beq.n	8005528 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	2b2a      	cmp	r3, #42	@ 0x2a
 8005526:	d10b      	bne.n	8005540 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005528:	2103      	movs	r1, #3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fc38 	bl	8005da0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2228      	movs	r2, #40	@ 0x28
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a60      	ldr	r2, [pc, #384]	@ (80056bc <I2C_ITError+0x1d8>)
 800553c:	635a      	str	r2, [r3, #52]	@ 0x34
 800553e:	e030      	b.n	80055a2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005540:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fc2b 	bl	8005da0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8e1 	bl	8005712 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b60      	cmp	r3, #96	@ 0x60
 800555a:	d01f      	beq.n	800559c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b20      	cmp	r3, #32
 8005570:	d114      	bne.n	800559c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b10      	cmp	r3, #16
 800557e:	d109      	bne.n	8005594 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558c:	f043 0204 	orr.w	r2, r3, #4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2220      	movs	r2, #32
 800559a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d039      	beq.n	8005624 <I2C_ITError+0x140>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b11      	cmp	r3, #17
 80055b4:	d002      	beq.n	80055bc <I2C_ITError+0xd8>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b21      	cmp	r3, #33	@ 0x21
 80055ba:	d133      	bne.n	8005624 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ca:	d107      	bne.n	80055dc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fd fed6 	bl	8003392 <HAL_DMA_GetState>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d017      	beq.n	800561c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f0:	4a33      	ldr	r2, [pc, #204]	@ (80056c0 <I2C_ITError+0x1dc>)
 80055f2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd fe9d 	bl	8003340 <HAL_DMA_Abort_IT>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d04d      	beq.n	80056a8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005616:	4610      	mov	r0, r2
 8005618:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800561a:	e045      	b.n	80056a8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f851 	bl	80056c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005622:	e041      	b.n	80056a8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d039      	beq.n	80056a0 <I2C_ITError+0x1bc>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b12      	cmp	r3, #18
 8005630:	d002      	beq.n	8005638 <I2C_ITError+0x154>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b22      	cmp	r3, #34	@ 0x22
 8005636:	d133      	bne.n	80056a0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005646:	d107      	bne.n	8005658 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005656:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	4618      	mov	r0, r3
 800565e:	f7fd fe98 	bl	8003392 <HAL_DMA_GetState>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d017      	beq.n	8005698 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566c:	4a14      	ldr	r2, [pc, #80]	@ (80056c0 <I2C_ITError+0x1dc>)
 800566e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567c:	4618      	mov	r0, r3
 800567e:	f7fd fe5f 	bl	8003340 <HAL_DMA_Abort_IT>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005692:	4610      	mov	r0, r2
 8005694:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005696:	e009      	b.n	80056ac <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f813 	bl	80056c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800569e:	e005      	b.n	80056ac <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f80f 	bl	80056c4 <I2C_TreatErrorCallback>
  }
}
 80056a6:	e002      	b.n	80056ae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056a8:	bf00      	nop
 80056aa:	e000      	b.n	80056ae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ac:	bf00      	nop
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	ffff0000 	.word	0xffff0000
 80056bc:	08004493 	.word	0x08004493
 80056c0:	0800575b 	.word	0x0800575b

080056c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b60      	cmp	r3, #96	@ 0x60
 80056d6:	d10e      	bne.n	80056f6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fe fd9d 	bl	800422e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056f4:	e009      	b.n	800570a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7fe fd88 	bl	800421a <HAL_I2C_ErrorCallback>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b02      	cmp	r3, #2
 8005726:	d103      	bne.n	8005730 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2200      	movs	r2, #0
 800572e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d007      	beq.n	800574e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699a      	ldr	r2, [r3, #24]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	619a      	str	r2, [r3, #24]
  }
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	2200      	movs	r2, #0
 8005786:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff ff9b 	bl	80056c4 <I2C_TreatErrorCallback>
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a6:	e03b      	b.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f961 	bl	8005a74 <I2C_IsErrorOccurred>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e041      	b.n	8005840 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d02d      	beq.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fd fb7c 	bl	8002ec0 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnFlagUntilTimeout+0x44>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d122      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d113      	bne.n	8005820 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e00f      	b.n	8005840 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4013      	ands	r3, r2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	429a      	cmp	r2, r3
 800583c:	d0b4      	beq.n	80057a8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005854:	e033      	b.n	80058be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f90a 	bl	8005a74 <I2C_IsErrorOccurred>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e031      	b.n	80058ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d025      	beq.n	80058be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7fd fb25 	bl	8002ec0 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11a      	bne.n	80058be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b02      	cmp	r3, #2
 8005894:	d013      	beq.n	80058be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f043 0220 	orr.w	r2, r3, #32
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e007      	b.n	80058ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d1c4      	bne.n	8005856 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058e2:	e02f      	b.n	8005944 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f8c3 	bl	8005a74 <I2C_IsErrorOccurred>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e02d      	b.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fd fae2 	bl	8002ec0 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11a      	bne.n	8005944 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b20      	cmp	r3, #32
 800591a:	d013      	beq.n	8005944 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e007      	b.n	8005954 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b20      	cmp	r3, #32
 8005950:	d1c8      	bne.n	80058e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800596c:	e071      	b.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f87e 	bl	8005a74 <I2C_IsErrorOccurred>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b20      	cmp	r3, #32
 800598e:	d13b      	bne.n	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d138      	bne.n	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d105      	bne.n	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d121      	bne.n	8005a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2210      	movs	r2, #16
 80059c4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2204      	movs	r2, #4
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2220      	movs	r2, #32
 80059d2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b24      	ldr	r3, [pc, #144]	@ (8005a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80059e0:	400b      	ands	r3, r1
 80059e2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]
 8005a00:	e002      	b.n	8005a08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005a08:	f7fd fa5a 	bl	8002ec0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d302      	bcc.n	8005a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d119      	bne.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d116      	bne.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d00f      	beq.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f043 0220 	orr.w	r2, r3, #32
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d002      	beq.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d083      	beq.n	800596e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	fe00e800 	.word	0xfe00e800

08005a74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	@ 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d068      	beq.n	8005b72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005aa8:	e049      	b.n	8005b3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d045      	beq.n	8005b3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ab2:	f7fd fa05 	bl	8002ec0 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <I2C_IsErrorOccurred+0x54>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d13a      	bne.n	8005b3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ada:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aea:	d121      	bne.n	8005b30 <I2C_IsErrorOccurred+0xbc>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005af2:	d01d      	beq.n	8005b30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d01a      	beq.n	8005b30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b0a:	f7fd f9d9 	bl	8002ec0 <HAL_GetTick>
 8005b0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b10:	e00e      	b.n	8005b30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b12:	f7fd f9d5 	bl	8002ec0 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b19      	cmp	r3, #25
 8005b1e:	d907      	bls.n	8005b30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	f043 0320 	orr.w	r3, r3, #32
 8005b26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b2e:	e006      	b.n	8005b3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d1e9      	bne.n	8005b12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d003      	beq.n	8005b54 <I2C_IsErrorOccurred+0xe0>
 8005b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0aa      	beq.n	8005aaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2220      	movs	r2, #32
 8005b62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00b      	beq.n	8005b9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	f043 0308 	orr.w	r3, r3, #8
 8005bac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f043 0302 	orr.w	r3, r3, #2
 8005bce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01c      	beq.n	8005c22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fd92 	bl	8005712 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6859      	ldr	r1, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <I2C_IsErrorOccurred+0x1bc>)
 8005bfa:	400b      	ands	r3, r1
 8005bfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3728      	adds	r7, #40	@ 0x28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	fe00e800 	.word	0xfe00e800

08005c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	4613      	mov	r3, r2
 8005c44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c4c:	7a7b      	ldrb	r3, [r7, #9]
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c54:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c62:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	0d5b      	lsrs	r3, r3, #21
 8005c6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c72:	4b08      	ldr	r3, [pc, #32]	@ (8005c94 <I2C_TransferConfig+0x60>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	43db      	mvns	r3, r3
 8005c78:	ea02 0103 	and.w	r1, r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	03ff63ff 	.word	0x03ff63ff

08005c98 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	4a39      	ldr	r2, [pc, #228]	@ (8005d94 <I2C_Enable_IRQ+0xfc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d032      	beq.n	8005d18 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005cb6:	4a38      	ldr	r2, [pc, #224]	@ (8005d98 <I2C_Enable_IRQ+0x100>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d02d      	beq.n	8005d18 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005cc0:	4a36      	ldr	r2, [pc, #216]	@ (8005d9c <I2C_Enable_IRQ+0x104>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d028      	beq.n	8005d18 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005cc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da03      	bge.n	8005cd6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005cd4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005cd6:	887b      	ldrh	r3, [r7, #2]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005ce6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005cf8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005cfa:	887b      	ldrh	r3, [r7, #2]
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d103      	bne.n	8005d08 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d08:	887b      	ldrh	r3, [r7, #2]
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d133      	bne.n	8005d76 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f043 0320 	orr.w	r3, r3, #32
 8005d14:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d16:	e02e      	b.n	8005d76 <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da03      	bge.n	8005d28 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005d26:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005d28:	887b      	ldrh	r3, [r7, #2]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005d38:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005d3a:	887b      	ldrh	r3, [r7, #2]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005d4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005d4c:	887b      	ldrh	r3, [r7, #2]
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d103      	bne.n	8005d5a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005d58:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005d5a:	887b      	ldrh	r3, [r7, #2]
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d103      	bne.n	8005d68 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005d66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005d68:	887b      	ldrh	r3, [r7, #2]
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d103      	bne.n	8005d76 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d74:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6819      	ldr	r1, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	0800469b 	.word	0x0800469b
 8005d98:	08004ae1 	.word	0x08004ae1
 8005d9c:	08004881 	.word	0x08004881

08005da0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00f      	beq.n	8005dda <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dce:	2b28      	cmp	r3, #40	@ 0x28
 8005dd0:	d003      	beq.n	8005dda <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005dd8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00f      	beq.n	8005e04 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005dea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005df8:	2b28      	cmp	r3, #40	@ 0x28
 8005dfa:	d003      	beq.n	8005e04 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005e02:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	da03      	bge.n	8005e14 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e14:	887b      	ldrh	r3, [r7, #2]
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d103      	bne.n	8005e22 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e22:	887b      	ldrh	r3, [r7, #2]
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d103      	bne.n	8005e30 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f043 0320 	orr.w	r3, r3, #32
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e30:	887b      	ldrh	r3, [r7, #2]
 8005e32:	2b40      	cmp	r3, #64	@ 0x40
 8005e34:	d103      	bne.n	8005e3e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	43da      	mvns	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d138      	bne.n	8005ee4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e032      	b.n	8005ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2224      	movs	r2, #36	@ 0x24
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005eae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d139      	bne.n	8005f7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e033      	b.n	8005f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2224      	movs	r2, #36	@ 0x24
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005f44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005f98:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
 8005fa8:	e007      	b.n	8005fba <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005faa:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 0204 	bic.w	r2, r3, #4
 8005fb2:	4905      	ldr	r1, [pc, #20]	@ (8005fc8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40030400 	.word	0x40030400

08005fcc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <HAL_ICACHE_Enable+0x1c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a04      	ldr	r2, [pc, #16]	@ (8005fe8 <HAL_ICACHE_Enable+0x1c>)
 8005fd6:	f043 0301 	orr.w	r3, r3, #1
 8005fda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40030400 	.word	0x40030400

08005fec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005ff4:	4b39      	ldr	r3, [pc, #228]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ffc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d10b      	bne.n	800601e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800600c:	d905      	bls.n	800601a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800600e:	4b33      	ldr	r3, [pc, #204]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	4a32      	ldr	r2, [pc, #200]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006018:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e057      	b.n	80060ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006024:	d90a      	bls.n	800603c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006026:	4b2d      	ldr	r3, [pc, #180]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4313      	orrs	r3, r2
 8006032:	4a2a      	ldr	r2, [pc, #168]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006038:	60d3      	str	r3, [r2, #12]
 800603a:	e007      	b.n	800604c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800603c:	4b27      	ldr	r3, [pc, #156]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006044:	4925      	ldr	r1, [pc, #148]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4313      	orrs	r3, r2
 800604a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800604c:	4b24      	ldr	r3, [pc, #144]	@ (80060e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a24      	ldr	r2, [pc, #144]	@ (80060e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	2232      	movs	r2, #50	@ 0x32
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	4a21      	ldr	r2, [pc, #132]	@ (80060e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	3301      	adds	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800606a:	e002      	b.n	8006072 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b01      	subs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006072:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <HAL_PWREx_ControlVoltageScaling+0x98>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f3      	bne.n	800606c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01b      	beq.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800608a:	4b15      	ldr	r3, [pc, #84]	@ (80060e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a15      	ldr	r2, [pc, #84]	@ (80060e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	099b      	lsrs	r3, r3, #6
 8006096:	2232      	movs	r2, #50	@ 0x32
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	4a11      	ldr	r2, [pc, #68]	@ (80060e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	099b      	lsrs	r3, r3, #6
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80060a8:	e002      	b.n	80060b0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80060b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f3      	bne.n	80060aa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e000      	b.n	80060ce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	46020800 	.word	0x46020800
 80060e0:	20000000 	.word	0x20000000
 80060e4:	10624dd3 	.word	0x10624dd3

080060e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80060ec:	4b04      	ldr	r3, [pc, #16]	@ (8006100 <HAL_PWREx_GetVoltageRange+0x18>)
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	46020800 	.word	0x46020800

08006104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08e      	sub	sp, #56	@ 0x38
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800610c:	2300      	movs	r3, #0
 800610e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f000 bec8 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800611e:	4b99      	ldr	r3, [pc, #612]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006128:	4b96      	ldr	r3, [pc, #600]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0310 	and.w	r3, r3, #16
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 816c 	beq.w	8006418 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <HAL_RCC_OscConfig+0x52>
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	2b0c      	cmp	r3, #12
 800614a:	f040 80de 	bne.w	800630a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	2b01      	cmp	r3, #1
 8006152:	f040 80da 	bne.w	800630a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d102      	bne.n	8006164 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f000 bea5 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006168:	4b86      	ldr	r3, [pc, #536]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <HAL_RCC_OscConfig+0x7a>
 8006174:	4b83      	ldr	r3, [pc, #524]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800617c:	e005      	b.n	800618a <HAL_RCC_OscConfig+0x86>
 800617e:	4b81      	ldr	r3, [pc, #516]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006184:	041b      	lsls	r3, r3, #16
 8006186:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800618a:	4293      	cmp	r3, r2
 800618c:	d255      	bcs.n	800623a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f001 f9d9 	bl	8007550 <RCC_SetFlashLatencyFromMSIRange>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f000 be82 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80061aa:	4b76      	ldr	r3, [pc, #472]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	4a75      	ldr	r2, [pc, #468]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061b4:	6093      	str	r3, [r2, #8]
 80061b6:	4b73      	ldr	r3, [pc, #460]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c2:	4970      	ldr	r1, [pc, #448]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80061d0:	d309      	bcc.n	80061e6 <HAL_RCC_OscConfig+0xe2>
 80061d2:	4b6c      	ldr	r3, [pc, #432]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f023 021f 	bic.w	r2, r3, #31
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	4969      	ldr	r1, [pc, #420]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60cb      	str	r3, [r1, #12]
 80061e4:	e07e      	b.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da0a      	bge.n	8006204 <HAL_RCC_OscConfig+0x100>
 80061ee:	4b65      	ldr	r3, [pc, #404]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	015b      	lsls	r3, r3, #5
 80061fc:	4961      	ldr	r1, [pc, #388]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	60cb      	str	r3, [r1, #12]
 8006202:	e06f      	b.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620c:	d30a      	bcc.n	8006224 <HAL_RCC_OscConfig+0x120>
 800620e:	4b5d      	ldr	r3, [pc, #372]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	4959      	ldr	r1, [pc, #356]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800621e:	4313      	orrs	r3, r2
 8006220:	60cb      	str	r3, [r1, #12]
 8006222:	e05f      	b.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
 8006224:	4b57      	ldr	r3, [pc, #348]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	03db      	lsls	r3, r3, #15
 8006232:	4954      	ldr	r1, [pc, #336]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006234:	4313      	orrs	r3, r2
 8006236:	60cb      	str	r3, [r1, #12]
 8006238:	e054      	b.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800623a:	4b52      	ldr	r3, [pc, #328]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	4a51      	ldr	r2, [pc, #324]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006240:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006244:	6093      	str	r3, [r2, #8]
 8006246:	4b4f      	ldr	r3, [pc, #316]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	494c      	ldr	r1, [pc, #304]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006260:	d309      	bcc.n	8006276 <HAL_RCC_OscConfig+0x172>
 8006262:	4b48      	ldr	r3, [pc, #288]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f023 021f 	bic.w	r2, r3, #31
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4945      	ldr	r1, [pc, #276]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006270:	4313      	orrs	r3, r2
 8006272:	60cb      	str	r3, [r1, #12]
 8006274:	e028      	b.n	80062c8 <HAL_RCC_OscConfig+0x1c4>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	2b00      	cmp	r3, #0
 800627c:	da0a      	bge.n	8006294 <HAL_RCC_OscConfig+0x190>
 800627e:	4b41      	ldr	r3, [pc, #260]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	015b      	lsls	r3, r3, #5
 800628c:	493d      	ldr	r1, [pc, #244]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800628e:	4313      	orrs	r3, r2
 8006290:	60cb      	str	r3, [r1, #12]
 8006292:	e019      	b.n	80062c8 <HAL_RCC_OscConfig+0x1c4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629c:	d30a      	bcc.n	80062b4 <HAL_RCC_OscConfig+0x1b0>
 800629e:	4b39      	ldr	r3, [pc, #228]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	029b      	lsls	r3, r3, #10
 80062ac:	4935      	ldr	r1, [pc, #212]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60cb      	str	r3, [r1, #12]
 80062b2:	e009      	b.n	80062c8 <HAL_RCC_OscConfig+0x1c4>
 80062b4:	4b33      	ldr	r3, [pc, #204]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	03db      	lsls	r3, r3, #15
 80062c2:	4930      	ldr	r1, [pc, #192]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80062c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f93c 	bl	8007550 <RCC_SetFlashLatencyFromMSIRange>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f000 bde5 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80062e4:	f001 f8de 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80062e8:	4b27      	ldr	r3, [pc, #156]	@ (8006388 <HAL_RCC_OscConfig+0x284>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fc fd5d 	bl	8002dac <HAL_InitTick>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 808a 	beq.w	8006416 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006306:	f000 bdd2 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d066      	beq.n	80063e0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006312:	4b1c      	ldr	r3, [pc, #112]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800631e:	f7fc fdcf 	bl	8002ec0 <HAL_GetTick>
 8006322:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006324:	e009      	b.n	800633a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006326:	f7fc fdcb 	bl	8002ec0 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d902      	bls.n	800633a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	f000 bdba 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800633a:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0ef      	beq.n	8006326 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006346:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a0e      	ldr	r2, [pc, #56]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800634c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006350:	6093      	str	r3, [r2, #8]
 8006352:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	4909      	ldr	r1, [pc, #36]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006360:	4313      	orrs	r3, r2
 8006362:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800636c:	d30e      	bcc.n	800638c <HAL_RCC_OscConfig+0x288>
 800636e:	4b05      	ldr	r3, [pc, #20]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f023 021f 	bic.w	r2, r3, #31
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4902      	ldr	r1, [pc, #8]	@ (8006384 <HAL_RCC_OscConfig+0x280>)
 800637c:	4313      	orrs	r3, r2
 800637e:	60cb      	str	r3, [r1, #12]
 8006380:	e04a      	b.n	8006418 <HAL_RCC_OscConfig+0x314>
 8006382:	bf00      	nop
 8006384:	46020c00 	.word	0x46020c00
 8006388:	20000004 	.word	0x20000004
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	da0a      	bge.n	80063aa <HAL_RCC_OscConfig+0x2a6>
 8006394:	4b98      	ldr	r3, [pc, #608]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	015b      	lsls	r3, r3, #5
 80063a2:	4995      	ldr	r1, [pc, #596]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60cb      	str	r3, [r1, #12]
 80063a8:	e036      	b.n	8006418 <HAL_RCC_OscConfig+0x314>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b2:	d30a      	bcc.n	80063ca <HAL_RCC_OscConfig+0x2c6>
 80063b4:	4b90      	ldr	r3, [pc, #576]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	029b      	lsls	r3, r3, #10
 80063c2:	498d      	ldr	r1, [pc, #564]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60cb      	str	r3, [r1, #12]
 80063c8:	e026      	b.n	8006418 <HAL_RCC_OscConfig+0x314>
 80063ca:	4b8b      	ldr	r3, [pc, #556]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	03db      	lsls	r3, r3, #15
 80063d8:	4987      	ldr	r1, [pc, #540]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	60cb      	str	r3, [r1, #12]
 80063de:	e01b      	b.n	8006418 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80063e0:	4b85      	ldr	r3, [pc, #532]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a84      	ldr	r2, [pc, #528]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80063e6:	f023 0301 	bic.w	r3, r3, #1
 80063ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063ec:	f7fc fd68 	bl	8002ec0 <HAL_GetTick>
 80063f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80063f2:	e009      	b.n	8006408 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063f4:	f7fc fd64 	bl	8002ec0 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d902      	bls.n	8006408 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	f000 bd53 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006408:	4b7b      	ldr	r3, [pc, #492]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1ef      	bne.n	80063f4 <HAL_RCC_OscConfig+0x2f0>
 8006414:	e000      	b.n	8006418 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006416:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 808b 	beq.w	800653c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	2b08      	cmp	r3, #8
 800642a:	d005      	beq.n	8006438 <HAL_RCC_OscConfig+0x334>
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d109      	bne.n	8006446 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	2b03      	cmp	r3, #3
 8006436:	d106      	bne.n	8006446 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d17d      	bne.n	800653c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f000 bd34 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800644e:	d106      	bne.n	800645e <HAL_RCC_OscConfig+0x35a>
 8006450:	4b69      	ldr	r3, [pc, #420]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a68      	ldr	r2, [pc, #416]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	e041      	b.n	80064e2 <HAL_RCC_OscConfig+0x3de>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006466:	d112      	bne.n	800648e <HAL_RCC_OscConfig+0x38a>
 8006468:	4b63      	ldr	r3, [pc, #396]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a62      	ldr	r2, [pc, #392]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800646e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	4b60      	ldr	r3, [pc, #384]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a5f      	ldr	r2, [pc, #380]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800647a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b5d      	ldr	r3, [pc, #372]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5c      	ldr	r2, [pc, #368]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	e029      	b.n	80064e2 <HAL_RCC_OscConfig+0x3de>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006496:	d112      	bne.n	80064be <HAL_RCC_OscConfig+0x3ba>
 8006498:	4b57      	ldr	r3, [pc, #348]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a56      	ldr	r2, [pc, #344]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800649e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b54      	ldr	r3, [pc, #336]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a53      	ldr	r2, [pc, #332]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	4b51      	ldr	r3, [pc, #324]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a50      	ldr	r2, [pc, #320]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e011      	b.n	80064e2 <HAL_RCC_OscConfig+0x3de>
 80064be:	4b4e      	ldr	r3, [pc, #312]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4d      	ldr	r2, [pc, #308]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	4b4b      	ldr	r3, [pc, #300]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a4a      	ldr	r2, [pc, #296]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	4b48      	ldr	r3, [pc, #288]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a47      	ldr	r2, [pc, #284]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80064dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80064e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d014      	beq.n	8006514 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80064ea:	f7fc fce9 	bl	8002ec0 <HAL_GetTick>
 80064ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064f0:	e009      	b.n	8006506 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f2:	f7fc fce5 	bl	8002ec0 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b64      	cmp	r3, #100	@ 0x64
 80064fe:	d902      	bls.n	8006506 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	f000 bcd4 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006506:	4b3c      	ldr	r3, [pc, #240]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0ef      	beq.n	80064f2 <HAL_RCC_OscConfig+0x3ee>
 8006512:	e013      	b.n	800653c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006514:	f7fc fcd4 	bl	8002ec0 <HAL_GetTick>
 8006518:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800651a:	e009      	b.n	8006530 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800651c:	f7fc fcd0 	bl	8002ec0 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	@ 0x64
 8006528:	d902      	bls.n	8006530 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	f000 bcbf 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006530:	4b31      	ldr	r3, [pc, #196]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1ef      	bne.n	800651c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d05f      	beq.n	8006608 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	2b04      	cmp	r3, #4
 800654c:	d005      	beq.n	800655a <HAL_RCC_OscConfig+0x456>
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d114      	bne.n	800657e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	2b02      	cmp	r3, #2
 8006558:	d111      	bne.n	800657e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d102      	bne.n	8006568 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f000 bca3 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b23      	ldr	r3, [pc, #140]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	4920      	ldr	r1, [pc, #128]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006578:	4313      	orrs	r3, r2
 800657a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800657c:	e044      	b.n	8006608 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d024      	beq.n	80065d0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006586:	4b1c      	ldr	r3, [pc, #112]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1b      	ldr	r2, [pc, #108]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 800658c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006590:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006592:	f7fc fc95 	bl	8002ec0 <HAL_GetTick>
 8006596:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006598:	e009      	b.n	80065ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659a:	f7fc fc91 	bl	8002ec0 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d902      	bls.n	80065ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	f000 bc80 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ae:	4b12      	ldr	r3, [pc, #72]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80065ba:	4b0f      	ldr	r3, [pc, #60]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	490b      	ldr	r1, [pc, #44]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	610b      	str	r3, [r1, #16]
 80065ce:	e01b      	b.n	8006608 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80065d0:	4b09      	ldr	r3, [pc, #36]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a08      	ldr	r2, [pc, #32]	@ (80065f8 <HAL_RCC_OscConfig+0x4f4>)
 80065d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80065dc:	f7fc fc70 	bl	8002ec0 <HAL_GetTick>
 80065e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065e2:	e00b      	b.n	80065fc <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e4:	f7fc fc6c 	bl	8002ec0 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d904      	bls.n	80065fc <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	f000 bc5b 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
 80065f8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065fc:	4baf      	ldr	r3, [pc, #700]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1ed      	bne.n	80065e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 80c8 	beq.w	80067a6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006616:	2300      	movs	r3, #0
 8006618:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800661c:	4ba7      	ldr	r3, [pc, #668]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800661e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d111      	bne.n	800664e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662a:	4ba4      	ldr	r3, [pc, #656]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800662c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006630:	4aa2      	ldr	r2, [pc, #648]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800663a:	4ba0      	ldr	r3, [pc, #640]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800663c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800664e:	4b9c      	ldr	r3, [pc, #624]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 8006650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d119      	bne.n	800668e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800665a:	4b99      	ldr	r3, [pc, #612]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	4a98      	ldr	r2, [pc, #608]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006666:	f7fc fc2b 	bl	8002ec0 <HAL_GetTick>
 800666a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800666c:	e009      	b.n	8006682 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666e:	f7fc fc27 	bl	8002ec0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d902      	bls.n	8006682 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	f000 bc16 	b.w	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006682:	4b8f      	ldr	r3, [pc, #572]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0ef      	beq.n	800666e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d05f      	beq.n	8006756 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006696:	4b89      	ldr	r3, [pc, #548]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800669c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d037      	beq.n	800671c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d006      	beq.n	80066c4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e3f4      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01b      	beq.n	8006706 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80066ce:	4b7b      	ldr	r3, [pc, #492]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80066d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d4:	4a79      	ldr	r2, [pc, #484]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80066d6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80066da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80066de:	f7fc fbef 	bl	8002ec0 <HAL_GetTick>
 80066e2:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e6:	f7fc fbeb 	bl	8002ec0 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e3da      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80066f8:	4b70      	ldr	r3, [pc, #448]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80066fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1ef      	bne.n	80066e6 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006706:	4b6d      	ldr	r3, [pc, #436]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800670c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	4969      	ldr	r1, [pc, #420]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800671c:	4b67      	ldr	r3, [pc, #412]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800671e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006722:	4a66      	ldr	r2, [pc, #408]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800672c:	f7fc fbc8 	bl	8002ec0 <HAL_GetTick>
 8006730:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006734:	f7fc fbc4 	bl	8002ec0 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b05      	cmp	r3, #5
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e3b3      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006746:	4b5d      	ldr	r3, [pc, #372]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800674c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0ef      	beq.n	8006734 <HAL_RCC_OscConfig+0x630>
 8006754:	e01b      	b.n	800678e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006756:	4b59      	ldr	r3, [pc, #356]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800675c:	4a57      	ldr	r2, [pc, #348]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800675e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8006762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8006766:	f7fc fbab 	bl	8002ec0 <HAL_GetTick>
 800676a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676e:	f7fc fba7 	bl	8002ec0 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b05      	cmp	r3, #5
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e396      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006780:	4b4e      	ldr	r3, [pc, #312]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1ef      	bne.n	800676e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800678e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006796:	4b49      	ldr	r3, [pc, #292]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800679c:	4a47      	ldr	r2, [pc, #284]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800679e:	f023 0304 	bic.w	r3, r3, #4
 80067a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8111 	beq.w	80069d6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ba:	4b40      	ldr	r3, [pc, #256]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80067bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d111      	bne.n	80067ec <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c8:	4b3c      	ldr	r3, [pc, #240]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80067ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ce:	4a3b      	ldr	r2, [pc, #236]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80067d0:	f043 0304 	orr.w	r3, r3, #4
 80067d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80067d8:	4b38      	ldr	r3, [pc, #224]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 80067da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80067ec:	4b34      	ldr	r3, [pc, #208]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 80067ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d118      	bne.n	800682a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80067f8:	4b31      	ldr	r3, [pc, #196]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	4a30      	ldr	r2, [pc, #192]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006804:	f7fc fb5c 	bl	8002ec0 <HAL_GetTick>
 8006808:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800680c:	f7fc fb58 	bl	8002ec0 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e347      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800681e:	4b28      	ldr	r3, [pc, #160]	@ (80068c0 <HAL_RCC_OscConfig+0x7bc>)
 8006820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01f      	beq.n	8006876 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	2b00      	cmp	r3, #0
 8006840:	d010      	beq.n	8006864 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006842:	4b1e      	ldr	r3, [pc, #120]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006848:	4a1c      	ldr	r2, [pc, #112]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006852:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006858:	4a18      	ldr	r2, [pc, #96]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006862:	e018      	b.n	8006896 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006864:	4b15      	ldr	r3, [pc, #84]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800686a:	4a14      	ldr	r2, [pc, #80]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006874:	e00f      	b.n	8006896 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006876:	4b11      	ldr	r3, [pc, #68]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687c:	4a0f      	ldr	r2, [pc, #60]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 8006888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800688c:	4a0b      	ldr	r2, [pc, #44]	@ (80068bc <HAL_RCC_OscConfig+0x7b8>)
 800688e:	f023 0304 	bic.w	r3, r3, #4
 8006892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d057      	beq.n	800694e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800689e:	f7fc fb0f 	bl	8002ec0 <HAL_GetTick>
 80068a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a4:	e00e      	b.n	80068c4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a6:	f7fc fb0b 	bl	8002ec0 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d905      	bls.n	80068c4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e2f8      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
 80068bc:	46020c00 	.word	0x46020c00
 80068c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80068c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0e9      	beq.n	80068a6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01b      	beq.n	8006916 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80068de:	4b96      	ldr	r3, [pc, #600]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80068e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068e4:	4a94      	ldr	r2, [pc, #592]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80068e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80068ee:	e00a      	b.n	8006906 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f0:	f7fc fae6 	bl	8002ec0 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e2d3      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006906:	4b8c      	ldr	r3, [pc, #560]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800690c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ed      	beq.n	80068f0 <HAL_RCC_OscConfig+0x7ec>
 8006914:	e053      	b.n	80069be <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006916:	4b88      	ldr	r3, [pc, #544]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800691c:	4a86      	ldr	r2, [pc, #536]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 800691e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006922:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006926:	e00a      	b.n	800693e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006928:	f7fc faca 	bl	8002ec0 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006936:	4293      	cmp	r3, r2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e2b7      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800693e:	4b7e      	ldr	r3, [pc, #504]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ed      	bne.n	8006928 <HAL_RCC_OscConfig+0x824>
 800694c:	e037      	b.n	80069be <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800694e:	f7fc fab7 	bl	8002ec0 <HAL_GetTick>
 8006952:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006954:	e00a      	b.n	800696c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006956:	f7fc fab3 	bl	8002ec0 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e2a0      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800696c:	4b72      	ldr	r3, [pc, #456]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 800696e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1ed      	bne.n	8006956 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800697a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 800697c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01a      	beq.n	80069be <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006988:	4b6b      	ldr	r3, [pc, #428]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 800698a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800698e:	4a6a      	ldr	r2, [pc, #424]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006994:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006998:	e00a      	b.n	80069b0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800699a:	f7fc fa91 	bl	8002ec0 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e27e      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80069b0:	4b61      	ldr	r3, [pc, #388]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80069b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1ed      	bne.n	800699a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80069c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80069ce:	f023 0304 	bic.w	r3, r3, #4
 80069d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d036      	beq.n	8006a50 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d019      	beq.n	8006a1e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80069ea:	4b53      	ldr	r3, [pc, #332]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a52      	ldr	r2, [pc, #328]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 80069f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80069f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80069f6:	f7fc fa63 	bl	8002ec0 <HAL_GetTick>
 80069fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069fe:	f7fc fa5f 	bl	8002ec0 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e24e      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a10:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0f0      	beq.n	80069fe <HAL_RCC_OscConfig+0x8fa>
 8006a1c:	e018      	b.n	8006a50 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006a1e:	4b46      	ldr	r3, [pc, #280]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a45      	ldr	r2, [pc, #276]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a28:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a2a:	f7fc fa49 	bl	8002ec0 <HAL_GetTick>
 8006a2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a32:	f7fc fa45 	bl	8002ec0 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e234      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006a44:	4b3c      	ldr	r3, [pc, #240]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f0      	bne.n	8006a32 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d036      	beq.n	8006aca <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d019      	beq.n	8006a98 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006a64:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a33      	ldr	r2, [pc, #204]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006a70:	f7fc fa26 	bl	8002ec0 <HAL_GetTick>
 8006a74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006a78:	f7fc fa22 	bl	8002ec0 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e211      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f0      	beq.n	8006a78 <HAL_RCC_OscConfig+0x974>
 8006a96:	e018      	b.n	8006aca <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006a98:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a26      	ldr	r2, [pc, #152]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006a9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aa2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006aa4:	f7fc fa0c 	bl	8002ec0 <HAL_GetTick>
 8006aa8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006aac:	f7fc fa08 	bl	8002ec0 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1f7      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006abe:	4b1e      	ldr	r3, [pc, #120]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d07f      	beq.n	8006bd6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d062      	beq.n	8006ba4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8006ade:	4b16      	ldr	r3, [pc, #88]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006ae4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ae8:	6093      	str	r3, [r2, #8]
 8006aea:	4b13      	ldr	r3, [pc, #76]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af6:	4910      	ldr	r1, [pc, #64]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8006b04:	d309      	bcc.n	8006b1a <HAL_RCC_OscConfig+0xa16>
 8006b06:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f023 021f 	bic.w	r2, r3, #31
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	4909      	ldr	r1, [pc, #36]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60cb      	str	r3, [r1, #12]
 8006b18:	e02a      	b.n	8006b70 <HAL_RCC_OscConfig+0xa6c>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	da0c      	bge.n	8006b3c <HAL_RCC_OscConfig+0xa38>
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	015b      	lsls	r3, r3, #5
 8006b30:	4901      	ldr	r1, [pc, #4]	@ (8006b38 <HAL_RCC_OscConfig+0xa34>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60cb      	str	r3, [r1, #12]
 8006b36:	e01b      	b.n	8006b70 <HAL_RCC_OscConfig+0xa6c>
 8006b38:	46020c00 	.word	0x46020c00
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b44:	d30a      	bcc.n	8006b5c <HAL_RCC_OscConfig+0xa58>
 8006b46:	4ba1      	ldr	r3, [pc, #644]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	029b      	lsls	r3, r3, #10
 8006b54:	499d      	ldr	r1, [pc, #628]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60cb      	str	r3, [r1, #12]
 8006b5a:	e009      	b.n	8006b70 <HAL_RCC_OscConfig+0xa6c>
 8006b5c:	4b9b      	ldr	r3, [pc, #620]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	03db      	lsls	r3, r3, #15
 8006b6a:	4998      	ldr	r1, [pc, #608]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006b70:	4b96      	ldr	r3, [pc, #600]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a95      	ldr	r2, [pc, #596]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b76:	f043 0310 	orr.w	r3, r3, #16
 8006b7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006b7c:	f7fc f9a0 	bl	8002ec0 <HAL_GetTick>
 8006b80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006b84:	f7fc f99c 	bl	8002ec0 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e18b      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006b96:	4b8d      	ldr	r3, [pc, #564]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0320 	and.w	r3, r3, #32
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0xa80>
 8006ba2:	e018      	b.n	8006bd6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006ba4:	4b89      	ldr	r3, [pc, #548]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a88      	ldr	r2, [pc, #544]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006baa:	f023 0310 	bic.w	r3, r3, #16
 8006bae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006bb0:	f7fc f986 	bl	8002ec0 <HAL_GetTick>
 8006bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006bb8:	f7fc f982 	bl	8002ec0 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e171      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8006bca:	4b80      	ldr	r3, [pc, #512]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8166 	beq.w	8006eac <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006be6:	4b79      	ldr	r3, [pc, #484]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b0c      	cmp	r3, #12
 8006bf0:	f000 80f2 	beq.w	8006dd8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	f040 80c5 	bne.w	8006d88 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006bfe:	4b73      	ldr	r3, [pc, #460]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a72      	ldr	r2, [pc, #456]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c08:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006c0a:	f7fc f959 	bl	8002ec0 <HAL_GetTick>
 8006c0e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c12:	f7fc f955 	bl	8002ec0 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e144      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c24:	4b69      	ldr	r3, [pc, #420]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c30:	4b66      	ldr	r3, [pc, #408]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d111      	bne.n	8006c62 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006c3e:	4b63      	ldr	r3, [pc, #396]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c44:	4a61      	ldr	r2, [pc, #388]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c46:	f043 0304 	orr.w	r3, r3, #4
 8006c4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006c62:	4b5b      	ldr	r3, [pc, #364]	@ (8006dd0 <HAL_RCC_OscConfig+0xccc>)
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c6e:	d102      	bne.n	8006c76 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006c76:	4b56      	ldr	r3, [pc, #344]	@ (8006dd0 <HAL_RCC_OscConfig+0xccc>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	4a55      	ldr	r2, [pc, #340]	@ (8006dd0 <HAL_RCC_OscConfig+0xccc>)
 8006c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c80:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006c82:	4b52      	ldr	r3, [pc, #328]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c8a:	f023 0303 	bic.w	r3, r3, #3
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c96:	3a01      	subs	r2, #1
 8006c98:	0212      	lsls	r2, r2, #8
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	494a      	ldr	r1, [pc, #296]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ca8:	4b48      	ldr	r3, [pc, #288]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cac:	4b49      	ldr	r3, [pc, #292]	@ (8006dd4 <HAL_RCC_OscConfig+0xcd0>)
 8006cae:	4013      	ands	r3, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cb4:	3a01      	subs	r2, #1
 8006cb6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006cbe:	3a01      	subs	r2, #1
 8006cc0:	0252      	lsls	r2, r2, #9
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	4311      	orrs	r1, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006cca:	3a01      	subs	r2, #1
 8006ccc:	0412      	lsls	r2, r2, #16
 8006cce:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006cd2:	4311      	orrs	r1, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006cd8:	3a01      	subs	r2, #1
 8006cda:	0612      	lsls	r2, r2, #24
 8006cdc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	493a      	ldr	r1, [pc, #232]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006ce8:	4b38      	ldr	r3, [pc, #224]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cec:	4a37      	ldr	r2, [pc, #220]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf8:	4a34      	ldr	r2, [pc, #208]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006cfe:	4b33      	ldr	r3, [pc, #204]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d02:	4a32      	ldr	r2, [pc, #200]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d04:	f043 0310 	orr.w	r3, r3, #16
 8006d08:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006d0a:	4b30      	ldr	r3, [pc, #192]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0e:	f023 020c 	bic.w	r2, r3, #12
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d16:	492d      	ldr	r1, [pc, #180]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8006d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006d24:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <HAL_RCC_OscConfig+0xccc>)
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	4a29      	ldr	r2, [pc, #164]	@ (8006dd0 <HAL_RCC_OscConfig+0xccc>)
 8006d2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d2e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006d30:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006d38:	4b24      	ldr	r3, [pc, #144]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d3e:	4a23      	ldr	r2, [pc, #140]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006d48:	4b20      	ldr	r3, [pc, #128]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d54:	f7fc f8b4 	bl	8002ec0 <HAL_GetTick>
 8006d58:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d5c:	f7fc f8b0 	bl	8002ec0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e09f      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006d6e:	4b17      	ldr	r3, [pc, #92]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d7a:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7e:	4a13      	ldr	r2, [pc, #76]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d84:	6293      	str	r3, [r2, #40]	@ 0x28
 8006d86:	e091      	b.n	8006eac <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006d88:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006d8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006d94:	f7fc f894 	bl	8002ec0 <HAL_GetTick>
 8006d98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d9c:	f7fc f890 	bl	8002ec0 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e07f      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006dae:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f0      	bne.n	8006d9c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006dba:	4b04      	ldr	r3, [pc, #16]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	4a03      	ldr	r2, [pc, #12]	@ (8006dcc <HAL_RCC_OscConfig+0xcc8>)
 8006dc0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006dc4:	f023 0303 	bic.w	r3, r3, #3
 8006dc8:	6293      	str	r3, [r2, #40]	@ 0x28
 8006dca:	e06f      	b.n	8006eac <HAL_RCC_OscConfig+0xda8>
 8006dcc:	46020c00 	.word	0x46020c00
 8006dd0:	46020800 	.word	0x46020800
 8006dd4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006dd8:	4b37      	ldr	r3, [pc, #220]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006dde:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d039      	beq.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0203 	and.w	r2, r3, #3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d132      	bne.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d129      	bne.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d122      	bne.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e24:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d11a      	bne.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	0a5b      	lsrs	r3, r3, #9
 8006e2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d111      	bne.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	0c1b      	lsrs	r3, r3, #16
 8006e40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e48:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d108      	bne.n	8006e60 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	0e1b      	lsrs	r3, r3, #24
 8006e52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e024      	b.n	8006eae <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e64:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	08db      	lsrs	r3, r3, #3
 8006e6a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d01a      	beq.n	8006eac <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8006e76:	4b10      	ldr	r3, [pc, #64]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006e7c:	f023 0310 	bic.w	r3, r3, #16
 8006e80:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e82:	f7fc f81d 	bl	8002ec0 <HAL_GetTick>
 8006e86:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006e88:	bf00      	nop
 8006e8a:	f7fc f819 	bl	8002ec0 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d0f9      	beq.n	8006e8a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9a:	4a07      	ldr	r2, [pc, #28]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006ea0:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	4a04      	ldr	r2, [pc, #16]	@ (8006eb8 <HAL_RCC_OscConfig+0xdb4>)
 8006ea6:	f043 0310 	orr.w	r3, r3, #16
 8006eaa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3738      	adds	r7, #56	@ 0x38
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	46020c00 	.word	0x46020c00

08006ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e1d9      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8007140 <HAL_RCC_ClockConfig+0x284>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d910      	bls.n	8006f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ede:	4b98      	ldr	r3, [pc, #608]	@ (8007140 <HAL_RCC_ClockConfig+0x284>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f023 020f 	bic.w	r2, r3, #15
 8006ee6:	4996      	ldr	r1, [pc, #600]	@ (8007140 <HAL_RCC_ClockConfig+0x284>)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eee:	4b94      	ldr	r3, [pc, #592]	@ (8007140 <HAL_RCC_ClockConfig+0x284>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d001      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e1c1      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d010      	beq.n	8006f2e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	4b8c      	ldr	r3, [pc, #560]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d908      	bls.n	8006f2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006f1c:	4b89      	ldr	r3, [pc, #548]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	4986      	ldr	r1, [pc, #536]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d012      	beq.n	8006f60 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	4b81      	ldr	r3, [pc, #516]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	091b      	lsrs	r3, r3, #4
 8006f44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d909      	bls.n	8006f60 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006f4c:	4b7d      	ldr	r3, [pc, #500]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	497a      	ldr	r1, [pc, #488]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d010      	beq.n	8006f8e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	4b74      	ldr	r3, [pc, #464]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d908      	bls.n	8006f8e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006f7c:	4b71      	ldr	r3, [pc, #452]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	496e      	ldr	r1, [pc, #440]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	4b69      	ldr	r3, [pc, #420]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d908      	bls.n	8006fbc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006faa:	4b66      	ldr	r3, [pc, #408]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	f023 020f 	bic.w	r2, r3, #15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	4963      	ldr	r1, [pc, #396]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80d2 	beq.w	800716e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d143      	bne.n	800705e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd6:	4b5b      	ldr	r3, [pc, #364]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d110      	bne.n	8007006 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006fe4:	4b57      	ldr	r3, [pc, #348]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fea:	4a56      	ldr	r2, [pc, #344]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006fec:	f043 0304 	orr.w	r3, r3, #4
 8006ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006ff4:	4b53      	ldr	r3, [pc, #332]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8006ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007002:	2301      	movs	r3, #1
 8007004:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007006:	f7fb ff5b 	bl	8002ec0 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800700c:	4b4e      	ldr	r3, [pc, #312]	@ (8007148 <HAL_RCC_ClockConfig+0x28c>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00f      	beq.n	8007038 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007018:	e008      	b.n	800702c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800701a:	f7fb ff51 	bl	8002ec0 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e12b      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800702c:	4b46      	ldr	r3, [pc, #280]	@ (8007148 <HAL_RCC_ClockConfig+0x28c>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d107      	bne.n	800704e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800703e:	4b41      	ldr	r3, [pc, #260]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007044:	4a3f      	ldr	r2, [pc, #252]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007046:	f023 0304 	bic.w	r3, r3, #4
 800704a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800704e:	4b3d      	ldr	r3, [pc, #244]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d121      	bne.n	800709e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e112      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d107      	bne.n	8007076 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007066:	4b37      	ldr	r3, [pc, #220]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d115      	bne.n	800709e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e106      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800707e:	4b31      	ldr	r3, [pc, #196]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e0fa      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800708e:	4b2d      	ldr	r3, [pc, #180]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e0f2      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800709e:	4b29      	ldr	r3, [pc, #164]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f023 0203 	bic.w	r2, r3, #3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4926      	ldr	r1, [pc, #152]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80070b0:	f7fb ff06 	bl	8002ec0 <HAL_GetTick>
 80070b4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d112      	bne.n	80070e4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070be:	e00a      	b.n	80070d6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c0:	f7fb fefe 	bl	8002ec0 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e0d6      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	f003 030c 	and.w	r3, r3, #12
 80070de:	2b0c      	cmp	r3, #12
 80070e0:	d1ee      	bne.n	80070c0 <HAL_RCC_ClockConfig+0x204>
 80070e2:	e044      	b.n	800716e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d112      	bne.n	8007112 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070ec:	e00a      	b.n	8007104 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ee:	f7fb fee7 	bl	8002ec0 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e0bf      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007104:	4b0f      	ldr	r3, [pc, #60]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f003 030c 	and.w	r3, r3, #12
 800710c:	2b08      	cmp	r3, #8
 800710e:	d1ee      	bne.n	80070ee <HAL_RCC_ClockConfig+0x232>
 8007110:	e02d      	b.n	800716e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d123      	bne.n	8007162 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800711a:	e00a      	b.n	8007132 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800711c:	f7fb fed0 	bl	8002ec0 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e0a8      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007132:	4b04      	ldr	r3, [pc, #16]	@ (8007144 <HAL_RCC_ClockConfig+0x288>)
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f003 030c 	and.w	r3, r3, #12
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1ee      	bne.n	800711c <HAL_RCC_ClockConfig+0x260>
 800713e:	e016      	b.n	800716e <HAL_RCC_ClockConfig+0x2b2>
 8007140:	40022000 	.word	0x40022000
 8007144:	46020c00 	.word	0x46020c00
 8007148:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800714c:	f7fb feb8 	bl	8002ec0 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e090      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007162:	4b4a      	ldr	r3, [pc, #296]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f003 030c 	and.w	r3, r3, #12
 800716a:	2b04      	cmp	r3, #4
 800716c:	d1ee      	bne.n	800714c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d010      	beq.n	800719c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	4b43      	ldr	r3, [pc, #268]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	429a      	cmp	r2, r3
 8007188:	d208      	bcs.n	800719c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800718a:	4b40      	ldr	r3, [pc, #256]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 020f 	bic.w	r2, r3, #15
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	493d      	ldr	r1, [pc, #244]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 8007198:	4313      	orrs	r3, r2
 800719a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800719c:	4b3c      	ldr	r3, [pc, #240]	@ (8007290 <HAL_RCC_ClockConfig+0x3d4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d210      	bcs.n	80071cc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071aa:	4b39      	ldr	r3, [pc, #228]	@ (8007290 <HAL_RCC_ClockConfig+0x3d4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f023 020f 	bic.w	r2, r3, #15
 80071b2:	4937      	ldr	r1, [pc, #220]	@ (8007290 <HAL_RCC_ClockConfig+0x3d4>)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ba:	4b35      	ldr	r3, [pc, #212]	@ (8007290 <HAL_RCC_ClockConfig+0x3d4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d001      	beq.n	80071cc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e05b      	b.n	8007284 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d010      	beq.n	80071fa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	4b2b      	ldr	r3, [pc, #172]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d208      	bcs.n	80071fa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80071e8:	4b28      	ldr	r3, [pc, #160]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4925      	ldr	r1, [pc, #148]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d012      	beq.n	800722c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	4b20      	ldr	r3, [pc, #128]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	091b      	lsrs	r3, r3, #4
 8007210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007214:	429a      	cmp	r2, r3
 8007216:	d209      	bcs.n	800722c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007218:	4b1c      	ldr	r3, [pc, #112]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	4919      	ldr	r1, [pc, #100]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 8007228:	4313      	orrs	r3, r2
 800722a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	695a      	ldr	r2, [r3, #20]
 800723c:	4b13      	ldr	r3, [pc, #76]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007244:	429a      	cmp	r2, r3
 8007246:	d208      	bcs.n	800725a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007248:	4b10      	ldr	r3, [pc, #64]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 800724a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	490d      	ldr	r1, [pc, #52]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 8007256:	4313      	orrs	r3, r2
 8007258:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800725a:	f000 f821 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 800725e:	4602      	mov	r2, r0
 8007260:	4b0a      	ldr	r3, [pc, #40]	@ (800728c <HAL_RCC_ClockConfig+0x3d0>)
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	490a      	ldr	r1, [pc, #40]	@ (8007294 <HAL_RCC_ClockConfig+0x3d8>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	4a09      	ldr	r2, [pc, #36]	@ (8007298 <HAL_RCC_ClockConfig+0x3dc>)
 8007272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007274:	4b09      	ldr	r3, [pc, #36]	@ (800729c <HAL_RCC_ClockConfig+0x3e0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7fb fd97 	bl	8002dac <HAL_InitTick>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]

  return status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	46020c00 	.word	0x46020c00
 8007290:	40022000 	.word	0x40022000
 8007294:	0800cec4 	.word	0x0800cec4
 8007298:	20000000 	.word	0x20000000
 800729c:	20000004 	.word	0x20000004

080072a0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b08b      	sub	sp, #44	@ 0x2c
 80072a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072ae:	4b78      	ldr	r3, [pc, #480]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f003 030c 	and.w	r3, r3, #12
 80072b6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072b8:	4b75      	ldr	r3, [pc, #468]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_GetSysClockFreq+0x34>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d121      	bne.n	8007312 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d11e      	bne.n	8007312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80072d4:	4b6e      	ldr	r3, [pc, #440]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d107      	bne.n	80072f0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80072e0:	4b6b      	ldr	r3, [pc, #428]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072e6:	0b1b      	lsrs	r3, r3, #12
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80072ee:	e005      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80072f0:	4b67      	ldr	r3, [pc, #412]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	0f1b      	lsrs	r3, r3, #28
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072fc:	4a65      	ldr	r2, [pc, #404]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d110      	bne.n	800732e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007310:	e00d      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007312:	4b5f      	ldr	r3, [pc, #380]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 030c 	and.w	r3, r3, #12
 800731a:	2b04      	cmp	r3, #4
 800731c:	d102      	bne.n	8007324 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800731e:	4b5e      	ldr	r3, [pc, #376]	@ (8007498 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8007320:	623b      	str	r3, [r7, #32]
 8007322:	e004      	b.n	800732e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b08      	cmp	r3, #8
 8007328:	d101      	bne.n	800732e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800732a:	4b5b      	ldr	r3, [pc, #364]	@ (8007498 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800732c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b0c      	cmp	r3, #12
 8007332:	f040 80a5 	bne.w	8007480 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007336:	4b56      	ldr	r3, [pc, #344]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007340:	4b53      	ldr	r3, [pc, #332]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	0a1b      	lsrs	r3, r3, #8
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800734e:	4b50      	ldr	r3, [pc, #320]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	091b      	lsrs	r3, r3, #4
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800735a:	4b4d      	ldr	r3, [pc, #308]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	08db      	lsrs	r3, r3, #3
 8007360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	fb02 f303 	mul.w	r3, r2, r3
 800736a:	ee07 3a90 	vmov	s15, r3
 800736e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007372:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d003      	beq.n	8007384 <HAL_RCC_GetSysClockFreq+0xe4>
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d022      	beq.n	80073c8 <HAL_RCC_GetSysClockFreq+0x128>
 8007382:	e043      	b.n	800740c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800749c <HAL_RCC_GetSysClockFreq+0x1fc>
 8007392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007396:	4b3e      	ldr	r3, [pc, #248]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073a6:	ed97 6a01 	vldr	s12, [r7, #4]
 80073aa:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80074a0 <HAL_RCC_GetSysClockFreq+0x200>
 80073ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073c6:	e046      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800749c <HAL_RCC_GetSysClockFreq+0x1fc>
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b2d      	ldr	r3, [pc, #180]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80073dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80073ee:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80074a0 <HAL_RCC_GetSysClockFreq+0x200>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740a:	e024      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007424:	4b1a      	ldr	r3, [pc, #104]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007434:	ed97 6a01 	vldr	s12, [r7, #4]
 8007438:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80074a0 <HAL_RCC_GetSysClockFreq+0x200>
 800743c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007440:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007448:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800744c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007450:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007454:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8007456:	4b0e      	ldr	r3, [pc, #56]	@ (8007490 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8007458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745a:	0e1b      	lsrs	r3, r3, #24
 800745c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007460:	3301      	adds	r3, #1
 8007462:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800746e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800747a:	ee17 3a90 	vmov	r3, s15
 800747e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007480:	6a3b      	ldr	r3, [r7, #32]
}
 8007482:	4618      	mov	r0, r3
 8007484:	372c      	adds	r7, #44	@ 0x2c
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	46020c00 	.word	0x46020c00
 8007494:	0800cedc 	.word	0x0800cedc
 8007498:	00f42400 	.word	0x00f42400
 800749c:	4b742400 	.word	0x4b742400
 80074a0:	46000000 	.word	0x46000000

080074a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80074a8:	f7ff fefa 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <HAL_RCC_GetHCLKFreq+0x28>)
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f003 030f 	and.w	r3, r3, #15
 80074b6:	4906      	ldr	r1, [pc, #24]	@ (80074d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80074b8:	5ccb      	ldrb	r3, [r1, r3]
 80074ba:	fa22 f303 	lsr.w	r3, r2, r3
 80074be:	4a05      	ldr	r2, [pc, #20]	@ (80074d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80074c0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80074c2:	4b04      	ldr	r3, [pc, #16]	@ (80074d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80074c4:	681b      	ldr	r3, [r3, #0]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	46020c00 	.word	0x46020c00
 80074d0:	0800cec4 	.word	0x0800cec4
 80074d4:	20000000 	.word	0x20000000

080074d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80074dc:	f7ff ffe2 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
 80074e0:	4602      	mov	r2, r0
 80074e2:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	091b      	lsrs	r3, r3, #4
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	4903      	ldr	r1, [pc, #12]	@ (80074fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80074ee:	5ccb      	ldrb	r3, [r1, r3]
 80074f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	46020c00 	.word	0x46020c00
 80074fc:	0800ced4 	.word	0x0800ced4

08007500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007504:	f7ff ffce 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	0a1b      	lsrs	r3, r3, #8
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	4903      	ldr	r1, [pc, #12]	@ (8007524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800751c:	4618      	mov	r0, r3
 800751e:	bd80      	pop	{r7, pc}
 8007520:	46020c00 	.word	0x46020c00
 8007524:	0800ced4 	.word	0x0800ced4

08007528 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800752c:	f7ff ffba 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
 8007530:	4602      	mov	r2, r0
 8007532:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	091b      	lsrs	r3, r3, #4
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	4903      	ldr	r1, [pc, #12]	@ (800754c <HAL_RCC_GetPCLK3Freq+0x24>)
 800753e:	5ccb      	ldrb	r3, [r1, r3]
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007544:	4618      	mov	r0, r3
 8007546:	bd80      	pop	{r7, pc}
 8007548:	46020c00 	.word	0x46020c00
 800754c:	0800ced4 	.word	0x0800ced4

08007550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007558:	4b3e      	ldr	r3, [pc, #248]	@ (8007654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800755a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d003      	beq.n	800756e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007566:	f7fe fdbf 	bl	80060e8 <HAL_PWREx_GetVoltageRange>
 800756a:	6178      	str	r0, [r7, #20]
 800756c:	e019      	b.n	80075a2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800756e:	4b39      	ldr	r3, [pc, #228]	@ (8007654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007574:	4a37      	ldr	r2, [pc, #220]	@ (8007654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800757e:	4b35      	ldr	r3, [pc, #212]	@ (8007654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800758c:	f7fe fdac 	bl	80060e8 <HAL_PWREx_GetVoltageRange>
 8007590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007592:	4b30      	ldr	r3, [pc, #192]	@ (8007654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007598:	4a2e      	ldr	r2, [pc, #184]	@ (8007654 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800759a:	f023 0304 	bic.w	r3, r3, #4
 800759e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075a8:	d003      	beq.n	80075b2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075b0:	d109      	bne.n	80075c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075b8:	d202      	bcs.n	80075c0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80075ba:	2301      	movs	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80075be:	e033      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80075c4:	e030      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075cc:	d208      	bcs.n	80075e0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d4:	d102      	bne.n	80075dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80075d6:	2303      	movs	r3, #3
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	e025      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e035      	b.n	800764c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075e6:	d90f      	bls.n	8007608 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d109      	bne.n	8007602 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075f4:	d902      	bls.n	80075fc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	e015      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80075fc:	2301      	movs	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	e012      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007602:	2300      	movs	r3, #0
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	e00f      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800760e:	d109      	bne.n	8007624 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007616:	d102      	bne.n	800761e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007618:	2301      	movs	r3, #1
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	e004      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800761e:	2302      	movs	r3, #2
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	e001      	b.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007624:	2301      	movs	r3, #1
 8007626:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007628:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f023 020f 	bic.w	r2, r3, #15
 8007630:	4909      	ldr	r1, [pc, #36]	@ (8007658 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007638:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	429a      	cmp	r2, r3
 8007644:	d001      	beq.n	800764a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	46020c00 	.word	0x46020c00
 8007658:	40022000 	.word	0x40022000

0800765c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800765c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007660:	b0ba      	sub	sp, #232	@ 0xe8
 8007662:	af00      	add	r7, sp, #0
 8007664:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007668:	2300      	movs	r3, #0
 800766a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800766e:	2300      	movs	r3, #0
 8007670:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f002 0401 	and.w	r4, r2, #1
 8007680:	2500      	movs	r5, #0
 8007682:	ea54 0305 	orrs.w	r3, r4, r5
 8007686:	d00b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007688:	4bcb      	ldr	r3, [pc, #812]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800768a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800768e:	f023 0103 	bic.w	r1, r3, #3
 8007692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007698:	4ac7      	ldr	r2, [pc, #796]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800769a:	430b      	orrs	r3, r1
 800769c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f002 0802 	and.w	r8, r2, #2
 80076ac:	f04f 0900 	mov.w	r9, #0
 80076b0:	ea58 0309 	orrs.w	r3, r8, r9
 80076b4:	d00b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80076b6:	4bc0      	ldr	r3, [pc, #768]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076bc:	f023 010c 	bic.w	r1, r3, #12
 80076c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	4abc      	ldr	r2, [pc, #752]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076c8:	430b      	orrs	r3, r1
 80076ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f002 0a04 	and.w	sl, r2, #4
 80076da:	f04f 0b00 	mov.w	fp, #0
 80076de:	ea5a 030b 	orrs.w	r3, sl, fp
 80076e2:	d00b      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80076e4:	4bb4      	ldr	r3, [pc, #720]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076ea:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80076ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f4:	4ab0      	ldr	r2, [pc, #704]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f002 0308 	and.w	r3, r2, #8
 8007708:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800770c:	2300      	movs	r3, #0
 800770e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007712:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d00b      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800771c:	4ba6      	ldr	r3, [pc, #664]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800771e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007722:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772c:	4aa2      	ldr	r2, [pc, #648]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800772e:	430b      	orrs	r3, r1
 8007730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f002 0310 	and.w	r3, r2, #16
 8007740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007744:	2300      	movs	r3, #0
 8007746:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800774a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800774e:	460b      	mov	r3, r1
 8007750:	4313      	orrs	r3, r2
 8007752:	d00b      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007754:	4b98      	ldr	r3, [pc, #608]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800775a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800775e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007764:	4a94      	ldr	r2, [pc, #592]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007766:	430b      	orrs	r3, r1
 8007768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800776c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	f002 0320 	and.w	r3, r2, #32
 8007778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800777c:	2300      	movs	r3, #0
 800777e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007782:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d00b      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800778c:	4b8a      	ldr	r3, [pc, #552]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800778e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007792:	f023 0107 	bic.w	r1, r3, #7
 8007796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800779a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800779c:	4a86      	ldr	r2, [pc, #536]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800779e:	430b      	orrs	r3, r1
 80077a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80077be:	460b      	mov	r3, r1
 80077c0:	4313      	orrs	r3, r2
 80077c2:	d00b      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80077c4:	4b7c      	ldr	r3, [pc, #496]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80077ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077d4:	4a78      	ldr	r2, [pc, #480]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077d6:	430b      	orrs	r3, r1
 80077d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80077e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077ec:	2300      	movs	r3, #0
 80077ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077f6:	460b      	mov	r3, r1
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d00b      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80077fc:	4b6e      	ldr	r3, [pc, #440]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007802:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800780a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800780c:	4a6a      	ldr	r2, [pc, #424]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800780e:	430b      	orrs	r3, r1
 8007810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007820:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800782a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d00b      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007834:	4b60      	ldr	r3, [pc, #384]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800783a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800783e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007844:	4a5c      	ldr	r2, [pc, #368]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007846:	430b      	orrs	r3, r1
 8007848:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800784c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800785c:	2300      	movs	r3, #0
 800785e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007862:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007866:	460b      	mov	r3, r1
 8007868:	4313      	orrs	r3, r2
 800786a:	d00b      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800786c:	4b52      	ldr	r3, [pc, #328]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800786e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007872:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800787a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800787c:	4a4e      	ldr	r2, [pc, #312]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800787e:	430b      	orrs	r3, r1
 8007880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007890:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800789a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800789e:	460b      	mov	r3, r1
 80078a0:	4313      	orrs	r3, r2
 80078a2:	d00b      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80078a4:	4b44      	ldr	r3, [pc, #272]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078aa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80078ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b4:	4a40      	ldr	r2, [pc, #256]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078b6:	430b      	orrs	r3, r1
 80078b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80078c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d00b      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80078dc:	4b36      	ldr	r3, [pc, #216]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80078e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078ec:	4a32      	ldr	r2, [pc, #200]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80078ee:	430b      	orrs	r3, r1
 80078f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80078f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007904:	2300      	movs	r3, #0
 8007906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800790a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d00c      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007914:	4b28      	ldr	r3, [pc, #160]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800791a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800791e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007926:	4a24      	ldr	r2, [pc, #144]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007928:	430b      	orrs	r3, r1
 800792a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800792e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800793a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800793c:	2300      	movs	r3, #0
 800793e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007940:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007944:	460b      	mov	r3, r1
 8007946:	4313      	orrs	r3, r2
 8007948:	d04f      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800794a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007952:	2b80      	cmp	r3, #128	@ 0x80
 8007954:	d02d      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d827      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800795a:	2b60      	cmp	r3, #96	@ 0x60
 800795c:	d02e      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800795e:	2b60      	cmp	r3, #96	@ 0x60
 8007960:	d823      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007962:	2b40      	cmp	r3, #64	@ 0x40
 8007964:	d006      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007966:	2b40      	cmp	r3, #64	@ 0x40
 8007968:	d81f      	bhi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800796e:	2b20      	cmp	r3, #32
 8007970:	d011      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007972:	e01a      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007974:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	4a0f      	ldr	r2, [pc, #60]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800797a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800797e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007980:	e01d      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007986:	3308      	adds	r3, #8
 8007988:	4618      	mov	r0, r3
 800798a:	f002 fa17 	bl	8009dbc <RCCEx_PLL2_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007994:	e013      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800799a:	332c      	adds	r3, #44	@ 0x2c
 800799c:	4618      	mov	r0, r3
 800799e:	f002 faa5 	bl	8009eec <RCCEx_PLL3_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80079a8:	e009      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079b0:	e005      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80079b2:	bf00      	nop
 80079b4:	e003      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x362>
 80079b6:	bf00      	nop
 80079b8:	46020c00 	.word	0x46020c00
        break;
 80079bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10d      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80079c6:	4bb6      	ldr	r3, [pc, #728]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079cc:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80079d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d8:	4ab1      	ldr	r2, [pc, #708]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80079da:	430b      	orrs	r3, r1
 80079dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079e6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80079ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80079f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80079f8:	2300      	movs	r3, #0
 80079fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80079fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007a00:	460b      	mov	r3, r1
 8007a02:	4313      	orrs	r3, r2
 8007a04:	d053      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a12:	d033      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a18:	d82c      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a1e:	d02f      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a24:	d826      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a2a:	d008      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a30:	d820      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007a36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a3a:	d011      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007a3c:	e01a      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a3e:	4b98      	ldr	r3, [pc, #608]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a42:	4a97      	ldr	r2, [pc, #604]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a4a:	e01a      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a50:	3308      	adds	r3, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f002 f9b2 	bl	8009dbc <RCCEx_PLL2_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a5e:	e010      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a64:	332c      	adds	r3, #44	@ 0x2c
 8007a66:	4618      	mov	r0, r3
 8007a68:	f002 fa40 	bl	8009eec <RCCEx_PLL3_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007a72:	e006      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007a7a:	e002      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007a7c:	bf00      	nop
 8007a7e:	e000      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10d      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007a8a:	4b85      	ldr	r3, [pc, #532]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a90:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a9c:	4a80      	ldr	r2, [pc, #512]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007aa4:	e003      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007aaa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007aba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007abc:	2300      	movs	r3, #0
 8007abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ac0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	d046      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ad2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ad6:	d028      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ad8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007adc:	d821      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ae2:	d022      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ae8:	d81b      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007aea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007aee:	d01c      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007af0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007af4:	d815      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007afa:	d008      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b00:	d80f      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d011      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b0a:	d00e      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007b0c:	e009      	b.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b12:	3308      	adds	r3, #8
 8007b14:	4618      	mov	r0, r3
 8007b16:	f002 f951 	bl	8009dbc <RCCEx_PLL2_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b20:	e004      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b28:	e000      	b.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8007b2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10d      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007b34:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b3a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007b46:	4a56      	ldr	r2, [pc, #344]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b4e:	e003      	b.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b66:	2300      	movs	r3, #0
 8007b68:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b6a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4313      	orrs	r3, r2
 8007b72:	d03f      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d81e      	bhi.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007b80:	a201      	add	r2, pc, #4	@ (adr r2, 8007b88 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007bc7 	.word	0x08007bc7
 8007b8c:	08007b9d 	.word	0x08007b9d
 8007b90:	08007bab 	.word	0x08007bab
 8007b94:	08007bc7 	.word	0x08007bc7
 8007b98:	08007bc7 	.word	0x08007bc7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b9c:	4b40      	ldr	r3, [pc, #256]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ba6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007ba8:	e00e      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bae:	332c      	adds	r3, #44	@ 0x2c
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f002 f99b 	bl	8009eec <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007bbc:	e004      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007bc4:	e000      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8007bc6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007bc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10d      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007bd0:	4b33      	ldr	r3, [pc, #204]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bd6:	f023 0107 	bic.w	r1, r3, #7
 8007bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be2:	4a2f      	ldr	r2, [pc, #188]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007be4:	430b      	orrs	r3, r1
 8007be6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007bea:	e003      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bf0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c02:	2300      	movs	r3, #0
 8007c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	d04d      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c1c:	d028      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c22:	d821      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c28:	d024      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007c2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c2e:	d81b      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c34:	d00e      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8007c36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c3a:	d815      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01b      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8007c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c44:	d110      	bne.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c46:	4b16      	ldr	r3, [pc, #88]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c50:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007c52:	e012      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c58:	332c      	adds	r3, #44	@ 0x2c
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f002 f946 	bl	8009eec <RCCEx_PLL3_Config>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c66:	e008      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c6e:	e004      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c70:	bf00      	nop
 8007c72:	e002      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c74:	bf00      	nop
 8007c76:	e000      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8007c78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007c7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d110      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007c82:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c94:	4a02      	ldr	r2, [pc, #8]	@ (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007c96:	430b      	orrs	r3, r1
 8007c98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c9c:	e006      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007c9e:	bf00      	nop
 8007ca0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ca8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007cb8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cba:	2300      	movs	r3, #0
 8007cbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f000 80b5 	beq.w	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cd0:	4b9d      	ldr	r3, [pc, #628]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d113      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cde:	4b9a      	ldr	r3, [pc, #616]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ce4:	4a98      	ldr	r2, [pc, #608]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ce6:	f043 0304 	orr.w	r3, r3, #4
 8007cea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007cee:	4b96      	ldr	r3, [pc, #600]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
      pwrclkchanged = SET;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007d06:	4b91      	ldr	r3, [pc, #580]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0a:	4a90      	ldr	r2, [pc, #576]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d0c:	f043 0301 	orr.w	r3, r3, #1
 8007d10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d12:	f7fb f8d5 	bl	8002ec0 <HAL_GetTick>
 8007d16:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d1a:	e00b      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d1c:	f7fb f8d0 	bl	8002ec0 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d903      	bls.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d32:	e005      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007d34:	4b85      	ldr	r3, [pc, #532]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0ed      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8007d40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d165      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d48:	4b7f      	ldr	r3, [pc, #508]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d023      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8007d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01b      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d6e:	4b76      	ldr	r3, [pc, #472]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d7c:	4b72      	ldr	r3, [pc, #456]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d82:	4a71      	ldr	r2, [pc, #452]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d8c:	4b6e      	ldr	r3, [pc, #440]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d92:	4a6d      	ldr	r2, [pc, #436]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d019      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db2:	f7fb f885 	bl	8002ec0 <HAL_GetTick>
 8007db6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dba:	e00d      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dbc:	f7fb f880 	bl	8002ec0 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d903      	bls.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007dd6:	e006      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0ea      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8007de6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10d      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007dee:	4b56      	ldr	r3, [pc, #344]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007df4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007e00:	4a51      	ldr	r2, [pc, #324]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e02:	430b      	orrs	r3, r1
 8007e04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e08:	e008      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e0e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8007e12:	e003      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e1c:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d107      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e24:	4b48      	ldr	r3, [pc, #288]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e2a:	4a47      	ldr	r2, [pc, #284]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e2c:	f023 0304 	bic.w	r3, r3, #4
 8007e30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e42:	2300      	movs	r3, #0
 8007e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	d042      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e58:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007e5c:	d022      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8007e5e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007e62:	d81b      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e68:	d011      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007e6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e6e:	d815      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x840>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d019      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8007e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e78:	d110      	bne.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e7e:	3308      	adds	r3, #8
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 ff9b 	bl	8009dbc <RCCEx_PLL2_Config>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e8c:	e00d      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e92:	4a2d      	ldr	r2, [pc, #180]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e98:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007e9a:	e006      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ea2:	e002      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007ea4:	bf00      	nop
 8007ea6:	e000      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007ea8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007eaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10d      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007eb2:	4b25      	ldr	r3, [pc, #148]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007eb8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ec4:	4a20      	ldr	r2, [pc, #128]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ed2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007ee2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007eec:	460b      	mov	r3, r1
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	d032      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007efa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007efe:	d00b      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f04:	d804      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0e:	d007      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007f16:	e004      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e002      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007f1c:	bf00      	nop
 8007f1e:	e000      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8007f20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007f22:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d112      	bne.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007f2a:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f30:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f3c:	4a02      	ldr	r2, [pc, #8]	@ (8007f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f44:	e008      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8007f46:	bf00      	nop
 8007f48:	46020c00 	.word	0x46020c00
 8007f4c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007f54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f66:	2300      	movs	r3, #0
 8007f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d00c      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007f74:	4b98      	ldr	r3, [pc, #608]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f7a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f86:	4a94      	ldr	r2, [pc, #592]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	d019      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fb6:	d105      	bne.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fb8:	4b87      	ldr	r3, [pc, #540]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbc:	4a86      	ldr	r2, [pc, #536]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007fc4:	4b84      	ldr	r3, [pc, #528]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fca:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fd6:	4a80      	ldr	r2, [pc, #512]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007fea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007fec:	2300      	movs	r3, #0
 8007fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ff0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	d00c      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007ffa:	4b77      	ldr	r3, [pc, #476]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008000:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008008:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800800c:	4972      	ldr	r1, [pc, #456]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008020:	623b      	str	r3, [r7, #32]
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	@ 0x24
 8008026:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800802a:	460b      	mov	r3, r1
 800802c:	4313      	orrs	r3, r2
 800802e:	d00c      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008030:	4b69      	ldr	r3, [pc, #420]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008036:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800803a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800803e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008042:	4965      	ldr	r1, [pc, #404]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800804a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d00c      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008066:	4b5c      	ldr	r3, [pc, #368]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800806c:	f023 0218 	bic.w	r2, r3, #24
 8008070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008078:	4957      	ldr	r1, [pc, #348]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008096:	460b      	mov	r3, r1
 8008098:	4313      	orrs	r3, r2
 800809a:	d032      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800809c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080a8:	d105      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080aa:	4b4b      	ldr	r3, [pc, #300]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ae:	4a4a      	ldr	r2, [pc, #296]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080b4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80080b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80080c2:	d108      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080c8:	3308      	adds	r3, #8
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fe76 	bl	8009dbc <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
    }
    if (ret == HAL_OK)
 80080d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10d      	bne.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80080de:	4b3e      	ldr	r3, [pc, #248]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80080f0:	4939      	ldr	r1, [pc, #228]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80080f8:	e003      	b.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80080fe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8008102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800810e:	60bb      	str	r3, [r7, #8]
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008118:	460b      	mov	r3, r1
 800811a:	4313      	orrs	r3, r2
 800811c:	d03a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800811e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800812a:	d00e      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800812c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008130:	d815      	bhi.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d017      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800813a:	d110      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813c:	4b26      	ldr	r3, [pc, #152]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008140:	4a25      	ldr	r2, [pc, #148]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008146:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008148:	e00e      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800814a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800814e:	3308      	adds	r3, #8
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fe33 	bl	8009dbc <RCCEx_PLL2_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800815c:	e004      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8008164:	e000      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8008166:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008168:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10d      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008170:	4b19      	ldr	r3, [pc, #100]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008176:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800817a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800817e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008182:	4915      	ldr	r1, [pc, #84]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800818a:	e003      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8008190:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d00c      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80081b0:	4b09      	ldr	r3, [pc, #36]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80081ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081c2:	4905      	ldr	r1, [pc, #20]	@ (80081d8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80081ca:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	37e8      	adds	r7, #232	@ 0xe8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081d8:	46020c00 	.word	0x46020c00

080081dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80081dc:	b480      	push	{r7}
 80081de:	b089      	sub	sp, #36	@ 0x24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80081e4:	4ba6      	ldr	r3, [pc, #664]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ec:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80081ee:	4ba4      	ldr	r3, [pc, #656]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80081f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80081fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fc:	0a1b      	lsrs	r3, r3, #8
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	3301      	adds	r3, #1
 8008204:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008206:	4b9e      	ldr	r3, [pc, #632]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820a:	091b      	lsrs	r3, r3, #4
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008212:	4b9b      	ldr	r3, [pc, #620]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008216:	08db      	lsrs	r3, r3, #3
 8008218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	fb02 f303 	mul.w	r3, r2, r3
 8008222:	ee07 3a90 	vmov	s15, r3
 8008226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800822a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d062      	beq.n	80082fa <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b03      	cmp	r3, #3
 8008238:	f200 8081 	bhi.w	800833e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d024      	beq.n	800828c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d17a      	bne.n	800833e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	ee07 3a90 	vmov	s15, r3
 800824e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008252:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008484 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800825a:	4b89      	ldr	r3, [pc, #548]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800825c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800825e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800826a:	ed97 6a02 	vldr	s12, [r7, #8]
 800826e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008272:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008276:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800827a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800827e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008286:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800828a:	e08f      	b.n	80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800828c:	4b7c      	ldr	r3, [pc, #496]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008298:	4b79      	ldr	r3, [pc, #484]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	0f1b      	lsrs	r3, r3, #28
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	e006      	b.n	80082b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80082a4:	4b76      	ldr	r3, [pc, #472]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80082a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	0f1b      	lsrs	r3, r3, #28
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	4a76      	ldr	r2, [pc, #472]	@ (800848c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80082b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80082dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f8:	e058      	b.n	80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	ee07 3a90 	vmov	s15, r3
 8008300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008304:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008484 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8008308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830c:	4b5c      	ldr	r3, [pc, #368]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800830e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800831c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008320:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008324:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008328:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800832c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008330:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008338:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800833c:	e036      	b.n	80083ac <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800833e:	4b50      	ldr	r3, [pc, #320]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800834a:	4b4d      	ldr	r3, [pc, #308]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	0f1b      	lsrs	r3, r3, #28
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	e006      	b.n	8008364 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8008356:	4b4a      	ldr	r3, [pc, #296]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800835c:	041b      	lsls	r3, r3, #16
 800835e:	0f1b      	lsrs	r3, r3, #28
 8008360:	f003 030f 	and.w	r3, r3, #15
 8008364:	4a49      	ldr	r2, [pc, #292]	@ (800848c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8008366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a02 	vldr	s12, [r7, #8]
 800838e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083aa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80083ac:	4b34      	ldr	r3, [pc, #208]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d017      	beq.n	80083e8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083b8:	4b31      	ldr	r3, [pc, #196]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083bc:	0a5b      	lsrs	r3, r3, #9
 80083be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80083ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083de:	ee17 2a90 	vmov	r2, s15
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	e002      	b.n	80083ee <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80083ee:	4b24      	ldr	r3, [pc, #144]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d017      	beq.n	800842a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083fa:	4b21      	ldr	r3, [pc, #132]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80083fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fe:	0c1b      	lsrs	r3, r3, #16
 8008400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800840c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008410:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008414:	edd7 6a07 	vldr	s13, [r7, #28]
 8008418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008420:	ee17 2a90 	vmov	r2, s15
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008430:	4b13      	ldr	r3, [pc, #76]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d017      	beq.n	800846c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800843c:	4b10      	ldr	r3, [pc, #64]	@ (8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800843e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008440:	0e1b      	lsrs	r3, r3, #24
 8008442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800844e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008452:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008456:	edd7 6a07 	vldr	s13, [r7, #28]
 800845a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800845e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008462:	ee17 2a90 	vmov	r2, s15
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800846a:	e002      	b.n	8008472 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	609a      	str	r2, [r3, #8]
}
 8008472:	bf00      	nop
 8008474:	3724      	adds	r7, #36	@ 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	46020c00 	.word	0x46020c00
 8008484:	4b742400 	.word	0x4b742400
 8008488:	46000000 	.word	0x46000000
 800848c:	0800cedc 	.word	0x0800cedc

08008490 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008490:	b480      	push	{r7}
 8008492:	b089      	sub	sp, #36	@ 0x24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008498:	4ba6      	ldr	r3, [pc, #664]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800849a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80084a2:	4ba4      	ldr	r3, [pc, #656]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80084ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	0a1b      	lsrs	r3, r3, #8
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	3301      	adds	r3, #1
 80084b8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80084ba:	4b9e      	ldr	r3, [pc, #632]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	091b      	lsrs	r3, r3, #4
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80084c6:	4b9b      	ldr	r3, [pc, #620]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80084c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ca:	08db      	lsrs	r3, r3, #3
 80084cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	fb02 f303 	mul.w	r3, r2, r3
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d062      	beq.n	80085ae <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	f200 8081 	bhi.w	80085f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d024      	beq.n	8008540 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d17a      	bne.n	80085f2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8008738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b89      	ldr	r3, [pc, #548]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800851e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008522:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800852e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800853e:	e08f      	b.n	8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008540:	4b7c      	ldr	r3, [pc, #496]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800854c:	4b79      	ldr	r3, [pc, #484]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	0f1b      	lsrs	r3, r3, #28
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	e006      	b.n	8008566 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8008558:	4b76      	ldr	r3, [pc, #472]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800855a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	0f1b      	lsrs	r3, r3, #28
 8008562:	f003 030f 	and.w	r3, r3, #15
 8008566:	4a76      	ldr	r2, [pc, #472]	@ (8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8008568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	ee07 3a90 	vmov	s15, r3
 8008588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008590:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80085a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085ac:	e058      	b.n	8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008738 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80085bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c0:	4b5c      	ldr	r3, [pc, #368]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80085d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80085d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80085e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80085e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f0:	e036      	b.n	8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80085f2:	4b50      	ldr	r3, [pc, #320]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80085fe:	4b4d      	ldr	r3, [pc, #308]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	0f1b      	lsrs	r3, r3, #28
 8008604:	f003 030f 	and.w	r3, r3, #15
 8008608:	e006      	b.n	8008618 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800860a:	4b4a      	ldr	r3, [pc, #296]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800860c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	0f1b      	lsrs	r3, r3, #28
 8008614:	f003 030f 	and.w	r3, r3, #15
 8008618:	4a49      	ldr	r2, [pc, #292]	@ (8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800861a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	ee07 3a90 	vmov	s15, r3
 800862c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008642:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800873c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008660:	4b34      	ldr	r3, [pc, #208]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d017      	beq.n	800869c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800866c:	4b31      	ldr	r3, [pc, #196]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	0a5b      	lsrs	r3, r3, #9
 8008672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800867e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008682:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008686:	edd7 6a07 	vldr	s13, [r7, #28]
 800868a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008692:	ee17 2a90 	vmov	r2, s15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	e002      	b.n	80086a2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80086a2:	4b24      	ldr	r3, [pc, #144]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d017      	beq.n	80086de <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086ae:	4b21      	ldr	r3, [pc, #132]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b2:	0c1b      	lsrs	r3, r3, #16
 80086b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80086c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80086cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d4:	ee17 2a90 	vmov	r2, s15
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	605a      	str	r2, [r3, #4]
 80086dc:	e002      	b.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80086e4:	4b13      	ldr	r3, [pc, #76]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d017      	beq.n	8008720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086f0:	4b10      	ldr	r3, [pc, #64]	@ (8008734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80086f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f4:	0e1b      	lsrs	r3, r3, #24
 80086f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008706:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800870a:	edd7 6a07 	vldr	s13, [r7, #28]
 800870e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008716:	ee17 2a90 	vmov	r2, s15
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800871e:	e002      	b.n	8008726 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	609a      	str	r2, [r3, #8]
}
 8008726:	bf00      	nop
 8008728:	3724      	adds	r7, #36	@ 0x24
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	46020c00 	.word	0x46020c00
 8008738:	4b742400 	.word	0x4b742400
 800873c:	46000000 	.word	0x46000000
 8008740:	0800cedc 	.word	0x0800cedc

08008744 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008744:	b480      	push	{r7}
 8008746:	b089      	sub	sp, #36	@ 0x24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800874c:	4ba6      	ldr	r3, [pc, #664]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800874e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008754:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008756:	4ba4      	ldr	r3, [pc, #656]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008760:	4ba1      	ldr	r3, [pc, #644]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008764:	0a1b      	lsrs	r3, r3, #8
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	3301      	adds	r3, #1
 800876c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800876e:	4b9e      	ldr	r3, [pc, #632]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008772:	091b      	lsrs	r3, r3, #4
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800877a:	4b9b      	ldr	r3, [pc, #620]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800877c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800877e:	08db      	lsrs	r3, r3, #3
 8008780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d062      	beq.n	8008862 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	f200 8081 	bhi.w	80088a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d024      	beq.n	80087f4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d17a      	bne.n	80088a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80087be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c2:	4b89      	ldr	r3, [pc, #548]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80087d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80089f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80087da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80087e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80087ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80087f2:	e08f      	b.n	8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80087f4:	4b7c      	ldr	r3, [pc, #496]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008800:	4b79      	ldr	r3, [pc, #484]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	0f1b      	lsrs	r3, r3, #28
 8008806:	f003 030f 	and.w	r3, r3, #15
 800880a:	e006      	b.n	800881a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800880c:	4b76      	ldr	r3, [pc, #472]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800880e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008812:	041b      	lsls	r3, r3, #16
 8008814:	0f1b      	lsrs	r3, r3, #28
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	4a76      	ldr	r2, [pc, #472]	@ (80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800881c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008820:	ee07 3a90 	vmov	s15, r3
 8008824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	ee07 3a90 	vmov	s15, r3
 800883c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008840:	ed97 6a02 	vldr	s12, [r7, #8]
 8008844:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80089f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8008848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008854:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008860:	e058      	b.n	8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8008870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008874:	4b5c      	ldr	r3, [pc, #368]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008884:	ed97 6a02 	vldr	s12, [r7, #8]
 8008888:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80089f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800888c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008890:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8008894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008898:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800889c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088a4:	e036      	b.n	8008914 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80088a6:	4b50      	ldr	r3, [pc, #320]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80088b2:	4b4d      	ldr	r3, [pc, #308]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	0f1b      	lsrs	r3, r3, #28
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	e006      	b.n	80088cc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80088be:	4b4a      	ldr	r3, [pc, #296]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80088c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088c4:	041b      	lsls	r3, r3, #16
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	4a49      	ldr	r2, [pc, #292]	@ (80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80088ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80089f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80088fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008906:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800890a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008912:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008914:	4b34      	ldr	r3, [pc, #208]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d017      	beq.n	8008950 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008920:	4b31      	ldr	r3, [pc, #196]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008924:	0a5b      	lsrs	r3, r3, #9
 8008926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008936:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800893a:	edd7 6a07 	vldr	s13, [r7, #28]
 800893e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008946:	ee17 2a90 	vmov	r2, s15
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e002      	b.n	8008956 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008956:	4b24      	ldr	r3, [pc, #144]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d017      	beq.n	8008992 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008962:	4b21      	ldr	r3, [pc, #132]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8008964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008966:	0c1b      	lsrs	r3, r3, #16
 8008968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008978:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800897c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008988:	ee17 2a90 	vmov	r2, s15
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	e002      	b.n	8008998 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008998:	4b13      	ldr	r3, [pc, #76]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800899a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d017      	beq.n	80089d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089a4:	4b10      	ldr	r3, [pc, #64]	@ (80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80089a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089a8:	0e1b      	lsrs	r3, r3, #24
 80089aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089ae:	ee07 3a90 	vmov	s15, r3
 80089b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80089b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80089be:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ca:	ee17 2a90 	vmov	r2, s15
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089d2:	e002      	b.n	80089da <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	609a      	str	r2, [r3, #8]
}
 80089da:	bf00      	nop
 80089dc:	3724      	adds	r7, #36	@ 0x24
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	46020c00 	.word	0x46020c00
 80089ec:	4b742400 	.word	0x4b742400
 80089f0:	46000000 	.word	0x46000000
 80089f4:	0800cedc 	.word	0x0800cedc

080089f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08e      	sub	sp, #56	@ 0x38
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a06:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	d145      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a18:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008a1a:	4ba4      	ldr	r3, [pc, #656]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d108      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a2e:	d104      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008a30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a36:	f001 b9b3 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a48:	d114      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a50:	d110      	bne.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a52:	4b96      	ldr	r3, [pc, #600]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a60:	d103      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8008a62:	23fa      	movs	r3, #250	@ 0xfa
 8008a64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a66:	f001 b99b 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008a6a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a6e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008a70:	f001 b996 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008a74:	4b8d      	ldr	r3, [pc, #564]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a80:	d107      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a88:	d103      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008a8a:	4b89      	ldr	r3, [pc, #548]	@ (8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8e:	f001 b987 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a96:	f001 b983 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a9e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	d151      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008aa6:	4b81      	ldr	r3, [pc, #516]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008aa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008aac:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008ab0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab4:	2b80      	cmp	r3, #128	@ 0x80
 8008ab6:	d035      	beq.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	2b80      	cmp	r3, #128	@ 0x80
 8008abc:	d841      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	2b60      	cmp	r3, #96	@ 0x60
 8008ac2:	d02a      	beq.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac6:	2b60      	cmp	r3, #96	@ 0x60
 8008ac8:	d83b      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	2b40      	cmp	r3, #64	@ 0x40
 8008ace:	d009      	beq.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	2b40      	cmp	r3, #64	@ 0x40
 8008ad4:	d835      	bhi.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00c      	beq.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	d012      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008ae2:	e02e      	b.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fb77 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008af2:	f001 b955 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af6:	f107 0318 	add.w	r3, r7, #24
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff fcc8 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b04:	f001 b94c 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b08:	f107 030c 	add.w	r3, r7, #12
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fe19 	bl	8008744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b16:	f001 b943 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008b1a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b20:	f001 b93e 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b24:	4b61      	ldr	r3, [pc, #388]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b30:	d103      	bne.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8008b32:	4b60      	ldr	r3, [pc, #384]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b34:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b36:	f001 b933 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b3e:	f001 b92f 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b46:	f001 b92b 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b52:	430b      	orrs	r3, r1
 8008b54:	d158      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008b56:	4b55      	ldr	r3, [pc, #340]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b68:	d03b      	beq.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b70:	d846      	bhi.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b78:	d02e      	beq.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b80:	d83e      	bhi.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b88:	d00b      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b90:	d836      	bhi.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00d      	beq.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b9e:	d012      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008ba0:	e02e      	b.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fb18 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bb0:	f001 b8f6 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb4:	f107 0318 	add.w	r3, r7, #24
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fc69 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bc2:	f001 b8ed 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bc6:	f107 030c 	add.w	r3, r7, #12
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fdba 	bl	8008744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bd4:	f001 b8e4 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008bd8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bde:	f001 b8df 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008be2:	4b32      	ldr	r3, [pc, #200]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bee:	d103      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8008bf0:	4b30      	ldr	r3, [pc, #192]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bf4:	f001 b8d4 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bfc:	f001 b8d0 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c04:	f001 b8cc 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008c10:	430b      	orrs	r3, r1
 8008c12:	d126      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008c14:	4b25      	ldr	r3, [pc, #148]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008c20:	4b22      	ldr	r3, [pc, #136]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c2c:	d106      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d103      	bne.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8008c34:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c38:	f001 b8b2 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c48:	d107      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c50:	d103      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8008c52:	4b19      	ldr	r3, [pc, #100]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c56:	f001 b8a3 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c5e:	f001 b89f 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c66:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	d16e      	bne.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c74:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008c78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c80:	d03d      	beq.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008c88:	d85c      	bhi.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c90:	d014      	beq.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c98:	d854      	bhi.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01f      	beq.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ca6:	d012      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008ca8:	e04c      	b.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008caa:	bf00      	nop
 8008cac:	46020c00 	.word	0x46020c00
 8008cb0:	0007a120 	.word	0x0007a120
 8008cb4:	00f42400 	.word	0x00f42400
 8008cb8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fa8b 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cca:	f001 b869 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cce:	f107 0318 	add.w	r3, r7, #24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff fbdc 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cdc:	f001 b860 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008ce0:	4ba7      	ldr	r3, [pc, #668]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cec:	d103      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8008cee:	4ba5      	ldr	r3, [pc, #660]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cf0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008cf2:	f001 b855 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cfa:	f001 b851 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0320 	and.w	r3, r3, #32
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	d118      	bne.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008d0a:	4b9d      	ldr	r3, [pc, #628]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008d16:	4b9a      	ldr	r3, [pc, #616]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	0e1b      	lsrs	r3, r3, #24
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	e006      	b.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008d22:	4b97      	ldr	r3, [pc, #604]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d28:	041b      	lsls	r3, r3, #16
 8008d2a:	0e1b      	lsrs	r3, r3, #24
 8008d2c:	f003 030f 	and.w	r3, r3, #15
 8008d30:	4a95      	ldr	r2, [pc, #596]	@ (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008d38:	f001 b832 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d40:	f001 b82e 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d48:	f001 b82a 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d50:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008d54:	430b      	orrs	r3, r1
 8008d56:	d17f      	bne.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d58:	4b89      	ldr	r3, [pc, #548]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d62:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d165      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008d6a:	4b85      	ldr	r3, [pc, #532]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d70:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d7c:	d034      	beq.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008d84:	d853      	bhi.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d8c:	d00b      	beq.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d94:	d84b      	bhi.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d016      	beq.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008da2:	d009      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8008da4:	e043      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff fa16 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008db4:	f000 bff4 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db8:	f107 0318 	add.w	r3, r7, #24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fb67 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008dc6:	f000 bfeb 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8008dca:	4b6d      	ldr	r3, [pc, #436]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008dd6:	d103      	bne.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8008dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008dda:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008ddc:	f000 bfe0 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008de4:	f000 bfdc 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008de8:	4b65      	ldr	r3, [pc, #404]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0320 	and.w	r3, r3, #32
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	d118      	bne.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008df4:	4b62      	ldr	r3, [pc, #392]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8008e00:	4b5f      	ldr	r3, [pc, #380]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	0e1b      	lsrs	r3, r3, #24
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	e006      	b.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	0e1b      	lsrs	r3, r3, #24
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8008e22:	f000 bfbd 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e2a:	f000 bfb9 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8008e32:	f000 bfb5 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e3c:	d108      	bne.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff f9ca 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4c:	f000 bfa8 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e54:	f000 bfa4 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008e58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e5c:	1e51      	subs	r1, r2, #1
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	d136      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008e62:	4b47      	ldr	r3, [pc, #284]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8008e74:	f7fe fb44 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 8008e78:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e7a:	f000 bf91 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d104      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008e84:	f7fe fa0c 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8008e88:	6378      	str	r0, [r7, #52]	@ 0x34
 8008e8a:	f000 bf89 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e9a:	d106      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d103      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8008ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea6:	f000 bf7b 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008eaa:	4b35      	ldr	r3, [pc, #212]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d107      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d104      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec4:	f000 bf6c 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ecc:	f000 bf68 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	1e91      	subs	r1, r2, #2
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	d136      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008eda:	4b29      	ldr	r3, [pc, #164]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ee0:	f003 030c 	and.w	r3, r3, #12
 8008ee4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d104      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008eec:	f7fe faf4 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8008ef0:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ef2:	f000 bf55 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d104      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008efc:	f7fe f9d0 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8008f00:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f02:	f000 bf4d 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008f06:	4b1e      	ldr	r3, [pc, #120]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f12:	d106      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d103      	bne.n	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8008f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f1e:	f000 bf3f 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008f22:	4b17      	ldr	r3, [pc, #92]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d107      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f32:	2b0c      	cmp	r3, #12
 8008f34:	d104      	bne.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8008f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3c:	f000 bf30 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f44:	f000 bf2c 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4c:	1f11      	subs	r1, r2, #4
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	d13f      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008f52:	4b0b      	ldr	r3, [pc, #44]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f5c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008f64:	f7fe fab8 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8008f68:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f6a:	f000 bf19 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f70:	2b10      	cmp	r3, #16
 8008f72:	d10d      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008f74:	f7fe f994 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8008f78:	6378      	str	r0, [r7, #52]	@ 0x34
 8008f7a:	f000 bf11 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008f7e:	bf00      	nop
 8008f80:	46020c00 	.word	0x46020c00
 8008f84:	02dc6c00 	.word	0x02dc6c00
 8008f88:	0800cedc 	.word	0x0800cedc
 8008f8c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008f90:	4ba6      	ldr	r3, [pc, #664]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f9c:	d106      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	2b20      	cmp	r3, #32
 8008fa2:	d103      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8008fa4:	4ba2      	ldr	r3, [pc, #648]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa8:	f000 befa 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008fac:	4b9f      	ldr	r3, [pc, #636]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d107      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	2b30      	cmp	r3, #48	@ 0x30
 8008fbe:	d104      	bne.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008fc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc6:	f000 beeb 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fce:	f000 bee7 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8008fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd6:	f1a2 0108 	sub.w	r1, r2, #8
 8008fda:	430b      	orrs	r3, r1
 8008fdc:	d136      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008fde:	4b93      	ldr	r3, [pc, #588]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fe4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fe8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ff0:	f7fe fa72 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8008ff4:	6378      	str	r0, [r7, #52]	@ 0x34
 8008ff6:	f000 bed3 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	2b40      	cmp	r3, #64	@ 0x40
 8008ffe:	d104      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009000:	f7fe f94e 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8009004:	6378      	str	r0, [r7, #52]	@ 0x34
 8009006:	f000 becb 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800900a:	4b88      	ldr	r3, [pc, #544]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009016:	d106      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	2b80      	cmp	r3, #128	@ 0x80
 800901c:	d103      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800901e:	4b84      	ldr	r3, [pc, #528]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
 8009022:	f000 bebd 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009026:	4b81      	ldr	r3, [pc, #516]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800902c:	f003 0302 	and.w	r3, r3, #2
 8009030:	2b02      	cmp	r3, #2
 8009032:	d107      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009036:	2bc0      	cmp	r3, #192	@ 0xc0
 8009038:	d104      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800903a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009040:	f000 beae 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	637b      	str	r3, [r7, #52]	@ 0x34
 8009048:	f000 beaa 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800904c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009050:	f1a2 0110 	sub.w	r1, r2, #16
 8009054:	430b      	orrs	r3, r1
 8009056:	d139      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009058:	4b74      	ldr	r3, [pc, #464]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800905a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800905e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009062:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800906a:	f7fe fa35 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 800906e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009070:	f000 be96 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907a:	d104      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800907c:	f7fe f910 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8009080:	6378      	str	r0, [r7, #52]	@ 0x34
 8009082:	f000 be8d 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009086:	4b69      	ldr	r3, [pc, #420]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800908e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009092:	d107      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8009094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800909a:	d103      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800909c:	4b64      	ldr	r3, [pc, #400]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800909e:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a0:	f000 be7e 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80090a4:	4b61      	ldr	r3, [pc, #388]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80090a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d108      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090b8:	d104      	bne.n	80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80090ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c0:	f000 be6e 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090c8:	f000 be6a 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80090cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d0:	f1a2 0120 	sub.w	r1, r2, #32
 80090d4:	430b      	orrs	r3, r1
 80090d6:	d158      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80090d8:	4b54      	ldr	r3, [pc, #336]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80090da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80090ea:	f7fe fa1d 	bl	8007528 <HAL_RCC_GetPCLK3Freq>
 80090ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80090f0:	f000 be56 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d104      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80090fa:	f7fe f8d1 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 80090fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8009100:	f000 be4e 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009104:	4b49      	ldr	r3, [pc, #292]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800910c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009110:	d106      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009114:	2b02      	cmp	r3, #2
 8009116:	d103      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8009118:	4b45      	ldr	r3, [pc, #276]	@ (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800911a:	637b      	str	r3, [r7, #52]	@ 0x34
 800911c:	f000 be40 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009120:	4b42      	ldr	r3, [pc, #264]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d107      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009130:	2b03      	cmp	r3, #3
 8009132:	d104      	bne.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8009134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009138:	637b      	str	r3, [r7, #52]	@ 0x34
 800913a:	f000 be31 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800913e:	4b3b      	ldr	r3, [pc, #236]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0320 	and.w	r3, r3, #32
 8009146:	2b20      	cmp	r3, #32
 8009148:	d11b      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	2b04      	cmp	r3, #4
 800914e:	d118      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009150:	4b36      	ldr	r3, [pc, #216]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800915c:	4b33      	ldr	r3, [pc, #204]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	0e1b      	lsrs	r3, r3, #24
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	e006      	b.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8009168:	4b30      	ldr	r3, [pc, #192]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800916a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800916e:	041b      	lsls	r3, r3, #16
 8009170:	0e1b      	lsrs	r3, r3, #24
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	4a2f      	ldr	r2, [pc, #188]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
 800917e:	f000 be0f 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	637b      	str	r3, [r7, #52]	@ 0x34
 8009186:	f000 be0b 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800918a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800918e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009192:	430b      	orrs	r3, r1
 8009194:	d172      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009196:	4b25      	ldr	r3, [pc, #148]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800919c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80091a0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091a8:	d104      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80091aa:	f7fe f879 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 80091ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80091b0:	f000 bdf6 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ba:	d108      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091bc:	f107 0318 	add.w	r3, r7, #24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff f965 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80091c6:	6a3b      	ldr	r3, [r7, #32]
 80091c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ca:	f000 bde9 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80091d4:	f7fe f966 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
 80091d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80091da:	f000 bde1 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80091e4:	d128      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80091e6:	4b11      	ldr	r3, [pc, #68]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d118      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80091f2:	4b0e      	ldr	r3, [pc, #56]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80091fe:	4b0b      	ldr	r3, [pc, #44]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	0e1b      	lsrs	r3, r3, #24
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	e006      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800920a:	4b08      	ldr	r3, [pc, #32]	@ (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800920c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009210:	041b      	lsls	r3, r3, #16
 8009212:	0e1b      	lsrs	r3, r3, #24
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	4a06      	ldr	r2, [pc, #24]	@ (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800921a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800921e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009220:	f000 bdbe 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	637b      	str	r3, [r7, #52]	@ 0x34
 8009228:	f000 bdba 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800922c:	46020c00 	.word	0x46020c00
 8009230:	00f42400 	.word	0x00f42400
 8009234:	0800cedc 	.word	0x0800cedc
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009238:	4baf      	ldr	r3, [pc, #700]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009244:	d107      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800924c:	d103      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800924e:	4bab      	ldr	r3, [pc, #684]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009250:	637b      	str	r3, [r7, #52]	@ 0x34
 8009252:	f000 bda5 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009256:	4ba8      	ldr	r3, [pc, #672]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800925e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009262:	d107      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800926a:	d103      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800926c:	4ba3      	ldr	r3, [pc, #652]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009270:	f000 bd96 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	637b      	str	r3, [r7, #52]	@ 0x34
 8009278:	f000 bd92 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800927c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009280:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009284:	430b      	orrs	r3, r1
 8009286:	d158      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009288:	4b9b      	ldr	r3, [pc, #620]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800928a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800928e:	f003 0307 	and.w	r3, r3, #7
 8009292:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	2b04      	cmp	r3, #4
 8009298:	d84b      	bhi.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800929a:	a201      	add	r2, pc, #4	@ (adr r2, 80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800929c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a0:	080092d9 	.word	0x080092d9
 80092a4:	080092b5 	.word	0x080092b5
 80092a8:	080092c7 	.word	0x080092c7
 80092ac:	080092e3 	.word	0x080092e3
 80092b0:	080092ed 	.word	0x080092ed
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fe ff8f 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80092be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092c2:	f000 bd6d 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c6:	f107 030c 	add.w	r3, r7, #12
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff fa3a 	bl	8008744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092d4:	f000 bd64 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80092d8:	f7fe f8e4 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
 80092dc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80092de:	f000 bd5f 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80092e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092e8:	f000 bd5a 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80092ec:	4b82      	ldr	r3, [pc, #520]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d118      	bne.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80092f8:	4b7f      	ldr	r3, [pc, #508]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d005      	beq.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009304:	4b7c      	ldr	r3, [pc, #496]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	0e1b      	lsrs	r3, r3, #24
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	e006      	b.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009310:	4b79      	ldr	r3, [pc, #484]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	0e1b      	lsrs	r3, r3, #24
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	4a78      	ldr	r2, [pc, #480]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009324:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009326:	f000 bd3b 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800932e:	f000 bd37 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009336:	f000 bd33 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800933a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800933e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8009342:	430b      	orrs	r3, r1
 8009344:	d167      	bne.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009346:	4b6c      	ldr	r3, [pc, #432]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800934c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009350:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009354:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009358:	d036      	beq.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009360:	d855      	bhi.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009368:	d029      	beq.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009370:	d84d      	bhi.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009378:	d013      	beq.n	80093a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009380:	d845      	bhi.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	d015      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800938e:	d13e      	bne.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe ff21 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800939e:	f000 bcff 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093a2:	f107 030c 	add.w	r3, r7, #12
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff f9cc 	bl	8008744 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093b0:	f000 bcf6 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80093b4:	f7fe f876 	bl	80074a4 <HAL_RCC_GetHCLKFreq>
 80093b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80093ba:	f000 bcf1 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80093be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093c4:	f000 bcec 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80093c8:	4b4b      	ldr	r3, [pc, #300]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b20      	cmp	r3, #32
 80093d2:	d118      	bne.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093d4:	4b48      	ldr	r3, [pc, #288]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d005      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80093e0:	4b45      	ldr	r3, [pc, #276]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	0e1b      	lsrs	r3, r3, #24
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	e006      	b.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80093ec:	4b42      	ldr	r3, [pc, #264]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80093ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80093f2:	041b      	lsls	r3, r3, #16
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	4a41      	ldr	r2, [pc, #260]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80093fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009400:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009402:	f000 bccd 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009406:	2300      	movs	r3, #0
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800940a:	f000 bcc9 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009412:	f000 bcc5 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800941a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800941e:	430b      	orrs	r3, r1
 8009420:	d14c      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009422:	4b35      	ldr	r3, [pc, #212]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009428:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800942c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009434:	f7fe f850 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8009438:	6378      	str	r0, [r7, #52]	@ 0x34
 800943a:	f000 bcb1 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009444:	d104      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009446:	f7fd ff2b 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 800944a:	6378      	str	r0, [r7, #52]	@ 0x34
 800944c:	f000 bca8 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009450:	4b29      	ldr	r3, [pc, #164]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009464:	d103      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8009466:	4b25      	ldr	r3, [pc, #148]	@ (80094fc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
 800946a:	f000 bc99 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800946e:	4b22      	ldr	r3, [pc, #136]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b20      	cmp	r3, #32
 8009478:	d11c      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009480:	d118      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009482:	4b1d      	ldr	r3, [pc, #116]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800948e:	4b1a      	ldr	r3, [pc, #104]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	0e1b      	lsrs	r3, r3, #24
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	e006      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800949a:	4b17      	ldr	r3, [pc, #92]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800949c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80094a0:	041b      	lsls	r3, r3, #16
 80094a2:	0e1b      	lsrs	r3, r3, #24
 80094a4:	f003 030f 	and.w	r3, r3, #15
 80094a8:	4a15      	ldr	r2, [pc, #84]	@ (8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80094aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b0:	f000 bc76 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b8:	f000 bc72 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80094bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80094c4:	430b      	orrs	r3, r1
 80094c6:	d153      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80094c8:	4b0b      	ldr	r3, [pc, #44]	@ (80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80094ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80094d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094da:	f7fd fffd 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 80094de:	6378      	str	r0, [r7, #52]	@ 0x34
 80094e0:	f000 bc5e 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ea:	d10b      	bne.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094ec:	f7fd fed8 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 80094f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80094f2:	f000 bc55 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80094f6:	bf00      	nop
 80094f8:	46020c00 	.word	0x46020c00
 80094fc:	00f42400 	.word	0x00f42400
 8009500:	0800cedc 	.word	0x0800cedc
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009504:	4ba1      	ldr	r3, [pc, #644]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800950c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009510:	d107      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009518:	d103      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800951a:	4b9d      	ldr	r3, [pc, #628]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800951c:	637b      	str	r3, [r7, #52]	@ 0x34
 800951e:	f000 bc3f 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009522:	4b9a      	ldr	r3, [pc, #616]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b20      	cmp	r3, #32
 800952c:	d11c      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009534:	d118      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009536:	4b95      	ldr	r3, [pc, #596]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d005      	beq.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8009542:	4b92      	ldr	r3, [pc, #584]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	0e1b      	lsrs	r3, r3, #24
 8009548:	f003 030f 	and.w	r3, r3, #15
 800954c:	e006      	b.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800954e:	4b8f      	ldr	r3, [pc, #572]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009554:	041b      	lsls	r3, r3, #16
 8009556:	0e1b      	lsrs	r3, r3, #24
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	4a8d      	ldr	r2, [pc, #564]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800955e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009562:	637b      	str	r3, [r7, #52]	@ 0x34
 8009564:	f000 bc1c 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009568:	2300      	movs	r3, #0
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
 800956c:	f000 bc18 	b.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009574:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009578:	430b      	orrs	r3, r1
 800957a:	d151      	bne.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800957c:	4b83      	ldr	r3, [pc, #524]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800957e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009582:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009586:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958a:	2bc0      	cmp	r3, #192	@ 0xc0
 800958c:	d024      	beq.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	2bc0      	cmp	r3, #192	@ 0xc0
 8009592:	d842      	bhi.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	2b80      	cmp	r3, #128	@ 0x80
 8009598:	d00d      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2b80      	cmp	r3, #128	@ 0x80
 800959e:	d83c      	bhi.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80095a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2b40      	cmp	r3, #64	@ 0x40
 80095aa:	d011      	beq.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 80095ac:	e035      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80095ae:	f7fd ffbb 	bl	8007528 <HAL_RCC_GetPCLK3Freq>
 80095b2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095b4:	e3f4      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80095b6:	4b75      	ldr	r3, [pc, #468]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c2:	d102      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 80095c4:	4b72      	ldr	r3, [pc, #456]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80095c8:	e3ea      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095ce:	e3e7      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80095d0:	f7fd fe66 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 80095d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80095d6:	e3e3      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80095d8:	4b6c      	ldr	r3, [pc, #432]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0320 	and.w	r3, r3, #32
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d117      	bne.n	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095e4:	4b69      	ldr	r3, [pc, #420]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80095f0:	4b66      	ldr	r3, [pc, #408]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	0e1b      	lsrs	r3, r3, #24
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	e006      	b.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80095fc:	4b63      	ldr	r3, [pc, #396]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80095fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	0e1b      	lsrs	r3, r3, #24
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	4a62      	ldr	r2, [pc, #392]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800960c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009612:	e3c5      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009614:	2300      	movs	r3, #0
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009618:	e3c2      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800961e:	e3bf      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009620:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009624:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8009628:	430b      	orrs	r3, r1
 800962a:	d147      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800962c:	4b57      	ldr	r3, [pc, #348]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800962e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009632:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	2b00      	cmp	r3, #0
 800963c:	d103      	bne.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800963e:	f7fd ff4b 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8009642:	6378      	str	r0, [r7, #52]	@ 0x34
 8009644:	e3ac      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800964c:	d103      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800964e:	f7fd fe27 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8009652:	6378      	str	r0, [r7, #52]	@ 0x34
 8009654:	e3a4      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009656:	4b4d      	ldr	r3, [pc, #308]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800965e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009662:	d106      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009666:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800966a:	d102      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800966c:	4b48      	ldr	r3, [pc, #288]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800966e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009670:	e396      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009672:	4b46      	ldr	r3, [pc, #280]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b20      	cmp	r3, #32
 800967c:	d11b      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009684:	d117      	bne.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009686:	4b41      	ldr	r3, [pc, #260]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d005      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8009692:	4b3e      	ldr	r3, [pc, #248]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	0e1b      	lsrs	r3, r3, #24
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	e006      	b.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800969e:	4b3b      	ldr	r3, [pc, #236]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096a4:	041b      	lsls	r3, r3, #16
 80096a6:	0e1b      	lsrs	r3, r3, #24
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	4a39      	ldr	r2, [pc, #228]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80096ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b4:	e374      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ba:	e371      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80096bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096c0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80096c4:	430b      	orrs	r3, r1
 80096c6:	d16a      	bne.n	800979e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80096c8:	4b30      	ldr	r3, [pc, #192]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d120      	bne.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80096da:	4b2c      	ldr	r3, [pc, #176]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b20      	cmp	r3, #32
 80096e4:	d117      	bne.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096e6:	4b29      	ldr	r3, [pc, #164]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80096f2:	4b26      	ldr	r3, [pc, #152]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	0e1b      	lsrs	r3, r3, #24
 80096f8:	f003 030f 	and.w	r3, r3, #15
 80096fc:	e006      	b.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80096fe:	4b23      	ldr	r3, [pc, #140]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009704:	041b      	lsls	r3, r3, #16
 8009706:	0e1b      	lsrs	r3, r3, #24
 8009708:	f003 030f 	and.w	r3, r3, #15
 800970c:	4a21      	ldr	r2, [pc, #132]	@ (8009794 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800970e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009712:	637b      	str	r3, [r7, #52]	@ 0x34
 8009714:	e344      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009716:	2300      	movs	r3, #0
 8009718:	637b      	str	r3, [r7, #52]	@ 0x34
 800971a:	e341      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800971c:	4b1b      	ldr	r3, [pc, #108]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800971e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800972a:	d112      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800972c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009732:	d10e      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009734:	4b15      	ldr	r3, [pc, #84]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800973a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800973e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009742:	d102      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8009744:	23fa      	movs	r3, #250	@ 0xfa
 8009746:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009748:	e32a      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800974a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009750:	e326      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009752:	4b0e      	ldr	r3, [pc, #56]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800975a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800975e:	d106      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009766:	d102      	bne.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009768:	4b09      	ldr	r3, [pc, #36]	@ (8009790 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800976a:	637b      	str	r3, [r7, #52]	@ 0x34
 800976c:	e318      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800976e:	4b07      	ldr	r3, [pc, #28]	@ (800978c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009774:	f003 0302 	and.w	r3, r3, #2
 8009778:	2b02      	cmp	r3, #2
 800977a:	d10d      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009782:	d109      	bne.n	8009798 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
 800978a:	e309      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800978c:	46020c00 	.word	0x46020c00
 8009790:	00f42400 	.word	0x00f42400
 8009794:	0800cedc 	.word	0x0800cedc
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
 800979c:	e300      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800979e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80097a6:	430b      	orrs	r3, r1
 80097a8:	d164      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80097aa:	4ba2      	ldr	r3, [pc, #648]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d120      	bne.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80097bc:	4b9d      	ldr	r3, [pc, #628]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b20      	cmp	r3, #32
 80097c6:	d117      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097c8:	4b9a      	ldr	r3, [pc, #616]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d005      	beq.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80097d4:	4b97      	ldr	r3, [pc, #604]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	0e1b      	lsrs	r3, r3, #24
 80097da:	f003 030f 	and.w	r3, r3, #15
 80097de:	e006      	b.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80097e0:	4b94      	ldr	r3, [pc, #592]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80097e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097e6:	041b      	lsls	r3, r3, #16
 80097e8:	0e1b      	lsrs	r3, r3, #24
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	4a92      	ldr	r2, [pc, #584]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80097f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f6:	e2d3      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fc:	e2d0      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80097fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800980c:	d112      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009814:	d10e      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009816:	4b87      	ldr	r3, [pc, #540]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800981c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009824:	d102      	bne.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8009826:	23fa      	movs	r3, #250	@ 0xfa
 8009828:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800982a:	e2b9      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800982c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009832:	e2b5      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009834:	4b7f      	ldr	r3, [pc, #508]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800983c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009840:	d106      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009848:	d102      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800984a:	4b7c      	ldr	r3, [pc, #496]	@ (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
 800984e:	e2a7      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009850:	4b78      	ldr	r3, [pc, #480]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b02      	cmp	r3, #2
 800985c:	d107      	bne.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800985e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009860:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009864:	d103      	bne.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8009866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800986a:	637b      	str	r3, [r7, #52]	@ 0x34
 800986c:	e298      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800986e:	2300      	movs	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
 8009872:	e295      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009878:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800987c:	430b      	orrs	r3, r1
 800987e:	d147      	bne.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009880:	4b6c      	ldr	r3, [pc, #432]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009886:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800988a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800988c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988e:	2b00      	cmp	r3, #0
 8009890:	d103      	bne.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009892:	f7fd fe21 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8009896:	6378      	str	r0, [r7, #52]	@ 0x34
 8009898:	e282      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800989a:	4b66      	ldr	r3, [pc, #408]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800989c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098a8:	d112      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098b0:	d10e      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098b2:	4b60      	ldr	r3, [pc, #384]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80098b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098c0:	d102      	bne.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 80098c2:	23fa      	movs	r3, #250	@ 0xfa
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098c6:	e26b      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80098c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80098ce:	e267      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80098d0:	4b58      	ldr	r3, [pc, #352]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098dc:	d106      	bne.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80098e4:	d102      	bne.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80098e6:	4b55      	ldr	r3, [pc, #340]	@ (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80098e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ea:	e259      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80098ec:	4b51      	ldr	r3, [pc, #324]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80098ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d107      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009900:	d103      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8009902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009906:	637b      	str	r3, [r7, #52]	@ 0x34
 8009908:	e24a      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	637b      	str	r3, [r7, #52]	@ 0x34
 800990e:	e247      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009914:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8009918:	430b      	orrs	r3, r1
 800991a:	d12d      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800991c:	4b45      	ldr	r3, [pc, #276]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800991e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009922:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009926:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009928:	4b42      	ldr	r3, [pc, #264]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009934:	d105      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800993c:	4b3f      	ldr	r3, [pc, #252]	@ (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800993e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009940:	e22e      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009948:	d107      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800994a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fc44 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009956:	637b      	str	r3, [r7, #52]	@ 0x34
 8009958:	e222      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009960:	d107      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009962:	f107 0318 	add.w	r3, r7, #24
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fd92 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009970:	e216      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	637b      	str	r3, [r7, #52]	@ 0x34
 8009976:	e213      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800997c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8009980:	430b      	orrs	r3, r1
 8009982:	d15d      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009984:	4b2b      	ldr	r3, [pc, #172]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800998a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800998e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009992:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009996:	d028      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800999e:	d845      	bhi.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80099a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099a6:	d013      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099ae:	d83d      	bhi.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80099b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099bc:	d004      	beq.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80099be:	e035      	b.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80099c0:	f7fd fd9e 	bl	8007500 <HAL_RCC_GetPCLK2Freq>
 80099c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099c6:	e1eb      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80099c8:	f7fd fc6a 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 80099cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099ce:	e1e7      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099d0:	4b18      	ldr	r3, [pc, #96]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099dc:	d102      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80099de:	4b17      	ldr	r3, [pc, #92]	@ (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80099e2:	e1dd      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099e8:	e1da      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099ea:	4b12      	ldr	r3, [pc, #72]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d117      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8009a02:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	0e1b      	lsrs	r3, r3, #24
 8009a08:	f003 030f 	and.w	r3, r3, #15
 8009a0c:	e006      	b.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8009a0e:	4b09      	ldr	r3, [pc, #36]	@ (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	0e1b      	lsrs	r3, r3, #24
 8009a18:	f003 030f 	and.w	r3, r3, #15
 8009a1c:	4a06      	ldr	r2, [pc, #24]	@ (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a24:	e1bc      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a2a:	e1b9      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a30:	e1b6      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009a32:	bf00      	nop
 8009a34:	46020c00 	.word	0x46020c00
 8009a38:	0800cedc 	.word	0x0800cedc
 8009a3c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a44:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	d156      	bne.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009a4c:	4ba5      	ldr	r3, [pc, #660]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009a56:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a5e:	d028      	beq.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a66:	d845      	bhi.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a6e:	d013      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a76:	d83d      	bhi.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d004      	beq.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a84:	d004      	beq.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8009a86:	e035      	b.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009a88:	f7fd fd26 	bl	80074d8 <HAL_RCC_GetPCLK1Freq>
 8009a8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a8e:	e187      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009a90:	f7fd fc06 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8009a94:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009a96:	e183      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a98:	4b92      	ldr	r3, [pc, #584]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa4:	d102      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8009aa6:	4b90      	ldr	r3, [pc, #576]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009aa8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009aaa:	e179      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab0:	e176      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009ab2:	4b8c      	ldr	r3, [pc, #560]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d117      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009abe:	4b89      	ldr	r3, [pc, #548]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d005      	beq.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8009aca:	4b86      	ldr	r3, [pc, #536]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	0e1b      	lsrs	r3, r3, #24
 8009ad0:	f003 030f 	and.w	r3, r3, #15
 8009ad4:	e006      	b.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8009ad6:	4b83      	ldr	r3, [pc, #524]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009adc:	041b      	lsls	r3, r3, #16
 8009ade:	0e1b      	lsrs	r3, r3, #24
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	4a81      	ldr	r2, [pc, #516]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009aec:	e158      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af2:	e155      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af8:	e152      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009afe:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8009b02:	430b      	orrs	r3, r1
 8009b04:	d177      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009b06:	4b77      	ldr	r3, [pc, #476]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b0c:	f003 0318 	and.w	r3, r3, #24
 8009b10:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8009b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b14:	2b18      	cmp	r3, #24
 8009b16:	d86b      	bhi.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8009b18:	a201      	add	r2, pc, #4	@ (adr r2, 8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8009b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1e:	bf00      	nop
 8009b20:	08009b85 	.word	0x08009b85
 8009b24:	08009bf1 	.word	0x08009bf1
 8009b28:	08009bf1 	.word	0x08009bf1
 8009b2c:	08009bf1 	.word	0x08009bf1
 8009b30:	08009bf1 	.word	0x08009bf1
 8009b34:	08009bf1 	.word	0x08009bf1
 8009b38:	08009bf1 	.word	0x08009bf1
 8009b3c:	08009bf1 	.word	0x08009bf1
 8009b40:	08009b8d 	.word	0x08009b8d
 8009b44:	08009bf1 	.word	0x08009bf1
 8009b48:	08009bf1 	.word	0x08009bf1
 8009b4c:	08009bf1 	.word	0x08009bf1
 8009b50:	08009bf1 	.word	0x08009bf1
 8009b54:	08009bf1 	.word	0x08009bf1
 8009b58:	08009bf1 	.word	0x08009bf1
 8009b5c:	08009bf1 	.word	0x08009bf1
 8009b60:	08009b95 	.word	0x08009b95
 8009b64:	08009bf1 	.word	0x08009bf1
 8009b68:	08009bf1 	.word	0x08009bf1
 8009b6c:	08009bf1 	.word	0x08009bf1
 8009b70:	08009bf1 	.word	0x08009bf1
 8009b74:	08009bf1 	.word	0x08009bf1
 8009b78:	08009bf1 	.word	0x08009bf1
 8009b7c:	08009bf1 	.word	0x08009bf1
 8009b80:	08009baf 	.word	0x08009baf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009b84:	f7fd fcd0 	bl	8007528 <HAL_RCC_GetPCLK3Freq>
 8009b88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b8a:	e109      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009b8c:	f7fd fb88 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8009b90:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009b92:	e105      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b94:	4b53      	ldr	r3, [pc, #332]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba0:	d102      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8009ba2:	4b51      	ldr	r3, [pc, #324]	@ (8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ba6:	e0fb      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bac:	e0f8      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009bae:	4b4d      	ldr	r3, [pc, #308]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b20      	cmp	r3, #32
 8009bb8:	d117      	bne.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009bba:	4b4a      	ldr	r3, [pc, #296]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8009bc6:	4b47      	ldr	r3, [pc, #284]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	0e1b      	lsrs	r3, r3, #24
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	e006      	b.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8009bd2:	4b44      	ldr	r3, [pc, #272]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bd8:	041b      	lsls	r3, r3, #16
 8009bda:	0e1b      	lsrs	r3, r3, #24
 8009bdc:	f003 030f 	and.w	r3, r3, #15
 8009be0:	4a42      	ldr	r2, [pc, #264]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009be8:	e0da      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bee:	e0d7      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bf4:	e0d4      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bfa:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8009bfe:	430b      	orrs	r3, r1
 8009c00:	d155      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009c02:	4b38      	ldr	r3, [pc, #224]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c08:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009c0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c14:	d013      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c1c:	d844      	bhi.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c24:	d013      	beq.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c2c:	d83c      	bhi.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d014      	beq.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c3a:	d014      	beq.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009c3c:	e034      	b.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7fe fc24 	bl	8008490 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c4c:	e0a8      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fac2 	bl	80081dc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c5c:	e0a0      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c5e:	f7fd fb1f 	bl	80072a0 <HAL_RCC_GetSysClockFreq>
 8009c62:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009c64:	e09c      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0320 	and.w	r3, r3, #32
 8009c6e:	2b20      	cmp	r3, #32
 8009c70:	d117      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c72:	4b1c      	ldr	r3, [pc, #112]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009c7e:	4b19      	ldr	r3, [pc, #100]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	0e1b      	lsrs	r3, r3, #24
 8009c84:	f003 030f 	and.w	r3, r3, #15
 8009c88:	e006      	b.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009c8a:	4b16      	ldr	r3, [pc, #88]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c90:	041b      	lsls	r3, r3, #16
 8009c92:	0e1b      	lsrs	r3, r3, #24
 8009c94:	f003 030f 	and.w	r3, r3, #15
 8009c98:	4a14      	ldr	r2, [pc, #80]	@ (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009ca0:	e07e      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ca6:	e07b      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cac:	e078      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cb2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	d138      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009cba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009cc6:	4b07      	ldr	r3, [pc, #28]	@ (8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d10d      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8009cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce0:	e05e      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009ce2:	bf00      	nop
 8009ce4:	46020c00 	.word	0x46020c00
 8009ce8:	00f42400 	.word	0x00f42400
 8009cec:	0800cedc 	.word	0x0800cedc
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cfe:	d112      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d06:	d10e      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d08:	4b28      	ldr	r3, [pc, #160]	@ (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d16:	d102      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8009d18:	23fa      	movs	r3, #250	@ 0xfa
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d1c:	e040      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d1e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d24:	e03c      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d2a:	e039      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d30:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d34:	430b      	orrs	r3, r1
 8009d36:	d131      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009d38:	4b1c      	ldr	r3, [pc, #112]	@ (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009d42:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009d44:	4b19      	ldr	r3, [pc, #100]	@ (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d50:	d105      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8009d58:	4b15      	ldr	r3, [pc, #84]	@ (8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5c:	e020      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009d5e:	4b13      	ldr	r3, [pc, #76]	@ (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d6a:	d106      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d72:	d102      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8009d74:	4b0f      	ldr	r3, [pc, #60]	@ (8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d78:	e012      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d86:	d106      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d8e:	d102      	bne.n	8009d96 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8009d90:	4b09      	ldr	r3, [pc, #36]	@ (8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8009d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d94:	e004      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9a:	e001      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8009da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3738      	adds	r7, #56	@ 0x38
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	46020c00 	.word	0x46020c00
 8009db0:	02dc6c00 	.word	0x02dc6c00
 8009db4:	016e3600 	.word	0x016e3600
 8009db8:	00f42400 	.word	0x00f42400

08009dbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8009dc4:	4b47      	ldr	r3, [pc, #284]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a46      	ldr	r2, [pc, #280]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009dca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009dd0:	f7f9 f876 	bl	8002ec0 <HAL_GetTick>
 8009dd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd6:	e008      	b.n	8009dea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dd8:	f7f9 f872 	bl	8002ec0 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d901      	bls.n	8009dea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e077      	b.n	8009eda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dea:	4b3e      	ldr	r3, [pc, #248]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1f0      	bne.n	8009dd8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009df6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6811      	ldr	r1, [r2, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6852      	ldr	r2, [r2, #4]
 8009e0a:	3a01      	subs	r2, #1
 8009e0c:	0212      	lsls	r2, r2, #8
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	4934      	ldr	r1, [pc, #208]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009e16:	4b33      	ldr	r3, [pc, #204]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e1a:	4b33      	ldr	r3, [pc, #204]	@ (8009ee8 <RCCEx_PLL2_Config+0x12c>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6892      	ldr	r2, [r2, #8]
 8009e22:	3a01      	subs	r2, #1
 8009e24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	68d2      	ldr	r2, [r2, #12]
 8009e2c:	3a01      	subs	r2, #1
 8009e2e:	0252      	lsls	r2, r2, #9
 8009e30:	b292      	uxth	r2, r2
 8009e32:	4311      	orrs	r1, r2
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	6912      	ldr	r2, [r2, #16]
 8009e38:	3a01      	subs	r2, #1
 8009e3a:	0412      	lsls	r2, r2, #16
 8009e3c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e40:	4311      	orrs	r1, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	6952      	ldr	r2, [r2, #20]
 8009e46:	3a01      	subs	r2, #1
 8009e48:	0612      	lsls	r2, r2, #24
 8009e4a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	4924      	ldr	r1, [pc, #144]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009e56:	4b23      	ldr	r3, [pc, #140]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5a:	f023 020c 	bic.w	r2, r3, #12
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	4920      	ldr	r1, [pc, #128]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e64:	4313      	orrs	r3, r2
 8009e66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009e68:	4b1e      	ldr	r3, [pc, #120]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	491c      	ldr	r1, [pc, #112]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8009e76:	4b1b      	ldr	r3, [pc, #108]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e7c:	f023 0310 	bic.w	r3, r3, #16
 8009e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e82:	4b18      	ldr	r3, [pc, #96]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e8a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	69d2      	ldr	r2, [r2, #28]
 8009e92:	00d2      	lsls	r2, r2, #3
 8009e94:	4913      	ldr	r1, [pc, #76]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009e9a:	4b12      	ldr	r3, [pc, #72]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9e:	4a11      	ldr	r2, [pc, #68]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009ea0:	f043 0310 	orr.w	r3, r3, #16
 8009ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009eac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009eb0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eb2:	f7f9 f805 	bl	8002ec0 <HAL_GetTick>
 8009eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eb8:	e008      	b.n	8009ecc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eba:	f7f9 f801 	bl	8002ec0 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d901      	bls.n	8009ecc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e006      	b.n	8009eda <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ecc:	4b05      	ldr	r3, [pc, #20]	@ (8009ee4 <RCCEx_PLL2_Config+0x128>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0f0      	beq.n	8009eba <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0

}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	46020c00 	.word	0x46020c00
 8009ee8:	80800000 	.word	0x80800000

08009eec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8009ef4:	4b47      	ldr	r3, [pc, #284]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a46      	ldr	r2, [pc, #280]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f00:	f7f8 ffde 	bl	8002ec0 <HAL_GetTick>
 8009f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f06:	e008      	b.n	8009f1a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f08:	f7f8 ffda 	bl	8002ec0 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d901      	bls.n	8009f1a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e077      	b.n	800a00a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f1a:	4b3e      	ldr	r3, [pc, #248]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1f0      	bne.n	8009f08 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009f26:	4b3b      	ldr	r3, [pc, #236]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f2e:	f023 0303 	bic.w	r3, r3, #3
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6811      	ldr	r1, [r2, #0]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6852      	ldr	r2, [r2, #4]
 8009f3a:	3a01      	subs	r2, #1
 8009f3c:	0212      	lsls	r2, r2, #8
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	4934      	ldr	r1, [pc, #208]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	630b      	str	r3, [r1, #48]	@ 0x30
 8009f46:	4b33      	ldr	r3, [pc, #204]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f4a:	4b33      	ldr	r3, [pc, #204]	@ (800a018 <RCCEx_PLL3_Config+0x12c>)
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6892      	ldr	r2, [r2, #8]
 8009f52:	3a01      	subs	r2, #1
 8009f54:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	68d2      	ldr	r2, [r2, #12]
 8009f5c:	3a01      	subs	r2, #1
 8009f5e:	0252      	lsls	r2, r2, #9
 8009f60:	b292      	uxth	r2, r2
 8009f62:	4311      	orrs	r1, r2
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6912      	ldr	r2, [r2, #16]
 8009f68:	3a01      	subs	r2, #1
 8009f6a:	0412      	lsls	r2, r2, #16
 8009f6c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009f70:	4311      	orrs	r1, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6952      	ldr	r2, [r2, #20]
 8009f76:	3a01      	subs	r2, #1
 8009f78:	0612      	lsls	r2, r2, #24
 8009f7a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	4924      	ldr	r1, [pc, #144]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8009f86:	4b23      	ldr	r3, [pc, #140]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f8a:	f023 020c 	bic.w	r2, r3, #12
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	4920      	ldr	r1, [pc, #128]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009f98:	4b1e      	ldr	r3, [pc, #120]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	491c      	ldr	r1, [pc, #112]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8009fa6:	4b1b      	ldr	r3, [pc, #108]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009faa:	4a1a      	ldr	r2, [pc, #104]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fac:	f023 0310 	bic.w	r3, r3, #16
 8009fb0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fb2:	4b18      	ldr	r3, [pc, #96]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009fba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	69d2      	ldr	r2, [r2, #28]
 8009fc2:	00d2      	lsls	r2, r2, #3
 8009fc4:	4913      	ldr	r1, [pc, #76]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8009fca:	4b12      	ldr	r3, [pc, #72]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fce:	4a11      	ldr	r2, [pc, #68]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fd0:	f043 0310 	orr.w	r3, r3, #16
 8009fd4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8009fd6:	4b0f      	ldr	r3, [pc, #60]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a0e      	ldr	r2, [pc, #56]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fe0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fe2:	f7f8 ff6d 	bl	8002ec0 <HAL_GetTick>
 8009fe6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fe8:	e008      	b.n	8009ffc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fea:	f7f8 ff69 	bl	8002ec0 <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d901      	bls.n	8009ffc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e006      	b.n	800a00a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ffc:	4b05      	ldr	r3, [pc, #20]	@ (800a014 <RCCEx_PLL3_Config+0x128>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d0f0      	beq.n	8009fea <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	46020c00 	.word	0x46020c00
 800a018:	80800000 	.word	0x80800000

0800a01c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d078      	beq.n	800a120 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7f8 fb36 	bl	80026b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a050:	4b36      	ldr	r3, [pc, #216]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f003 0310 	and.w	r3, r3, #16
 800a058:	2b10      	cmp	r3, #16
 800a05a:	d058      	beq.n	800a10e <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800a05c:	4b33      	ldr	r3, [pc, #204]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a068:	d053      	beq.n	800a112 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a06a:	4b30      	ldr	r3, [pc, #192]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a06c:	22ca      	movs	r2, #202	@ 0xca
 800a06e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a070:	4b2e      	ldr	r3, [pc, #184]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a072:	2253      	movs	r2, #83	@ 0x53
 800a074:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f9ae 	bl	800a3d8 <RTC_EnterInitMode>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d13f      	bne.n	800a106 <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a086:	4b29      	ldr	r3, [pc, #164]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	4a28      	ldr	r2, [pc, #160]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a08c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a094:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a096:	4b25      	ldr	r3, [pc, #148]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6859      	ldr	r1, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	4319      	orrs	r1, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	4920      	ldr	r1, [pc, #128]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	041b      	lsls	r3, r3, #16
 800a0ba:	491c      	ldr	r1, [pc, #112]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a0c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d0:	430b      	orrs	r3, r1
 800a0d2:	4916      	ldr	r1, [pc, #88]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f9b9 	bl	800a450 <RTC_ExitInitMode>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10e      	bne.n	800a106 <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 800a0e8:	4b10      	ldr	r3, [pc, #64]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a19      	ldr	r1, [r3, #32]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	4319      	orrs	r1, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	430b      	orrs	r3, r1
 800a100:	490a      	ldr	r1, [pc, #40]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a102:	4313      	orrs	r3, r2
 800a104:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a106:	4b09      	ldr	r3, [pc, #36]	@ (800a12c <HAL_RTC_Init+0x110>)
 800a108:	22ff      	movs	r2, #255	@ 0xff
 800a10a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a10c:	e001      	b.n	800a112 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a120:	7bfb      	ldrb	r3, [r7, #15]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	46007800 	.word	0x46007800

0800a130 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a130:	b590      	push	{r4, r7, lr}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_RTC_SetTime+0x1a>
 800a146:	2302      	movs	r3, #2
 800a148:	e088      	b.n	800a25c <HAL_RTC_SetTime+0x12c>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2202      	movs	r2, #2
 800a156:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a15a:	4b42      	ldr	r3, [pc, #264]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a15c:	22ca      	movs	r2, #202	@ 0xca
 800a15e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a160:	4b40      	ldr	r3, [pc, #256]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a162:	2253      	movs	r2, #83	@ 0x53
 800a164:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f936 	bl	800a3d8 <RTC_EnterInitMode>
 800a16c:	4603      	mov	r3, r0
 800a16e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a170:	7cfb      	ldrb	r3, [r7, #19]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d163      	bne.n	800a23e <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a176:	4b3b      	ldr	r3, [pc, #236]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a182:	d057      	beq.n	800a234 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d125      	bne.n	800a1d6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a18a:	4b36      	ldr	r3, [pc, #216]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	2200      	movs	r2, #0
 800a19a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f993 	bl	800a4cc <RTC_ByteToBcd2>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	785b      	ldrb	r3, [r3, #1]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f98c 	bl	800a4cc <RTC_ByteToBcd2>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1b8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	789b      	ldrb	r3, [r3, #2]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f984 	bl	800a4cc <RTC_ByteToBcd2>
 800a1c4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1c6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	78db      	ldrb	r3, [r3, #3]
 800a1ce:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	617b      	str	r3, [r7, #20]
 800a1d4:	e017      	b.n	800a206 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a1d6:	4b23      	ldr	r3, [pc, #140]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d102      	bne.n	800a1e8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a1f4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1fa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	78db      	ldrb	r3, [r3, #3]
 800a200:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a206:	4a17      	ldr	r2, [pc, #92]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a20e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a212:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a214:	4b13      	ldr	r3, [pc, #76]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	4a12      	ldr	r2, [pc, #72]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a21a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a21e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a220:	4b10      	ldr	r3, [pc, #64]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a222:	699a      	ldr	r2, [r3, #24]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	68d9      	ldr	r1, [r3, #12]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	490d      	ldr	r1, [pc, #52]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a230:	4313      	orrs	r3, r2
 800a232:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f90b 	bl	800a450 <RTC_ExitInitMode>
 800a23a:	4603      	mov	r3, r0
 800a23c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a23e:	4b09      	ldr	r3, [pc, #36]	@ (800a264 <HAL_RTC_SetTime+0x134>)
 800a240:	22ff      	movs	r2, #255	@ 0xff
 800a242:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a244:	7cfb      	ldrb	r3, [r7, #19]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d103      	bne.n	800a252 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a25a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	bd90      	pop	{r4, r7, pc}
 800a264:	46007800 	.word	0x46007800

0800a268 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d101      	bne.n	800a282 <HAL_RTC_SetDate+0x1a>
 800a27e:	2302      	movs	r3, #2
 800a280:	e071      	b.n	800a366 <HAL_RTC_SetDate+0xfe>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2202      	movs	r2, #2
 800a28e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10e      	bne.n	800a2b6 <HAL_RTC_SetDate+0x4e>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	785b      	ldrb	r3, [r3, #1]
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d008      	beq.n	800a2b6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	785b      	ldrb	r3, [r3, #1]
 800a2a8:	f023 0310 	bic.w	r3, r3, #16
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	330a      	adds	r3, #10
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d11c      	bne.n	800a2f6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78db      	ldrb	r3, [r3, #3]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 f903 	bl	800a4cc <RTC_ByteToBcd2>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 f8fc 	bl	800a4cc <RTC_ByteToBcd2>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a2d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	789b      	ldrb	r3, [r3, #2]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f8f4 	bl	800a4cc <RTC_ByteToBcd2>
 800a2e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a2e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	e00e      	b.n	800a314 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	78db      	ldrb	r3, [r3, #3]
 800a2fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	785b      	ldrb	r3, [r3, #1]
 800a300:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a302:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a308:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a314:	4b16      	ldr	r3, [pc, #88]	@ (800a370 <HAL_RTC_SetDate+0x108>)
 800a316:	22ca      	movs	r2, #202	@ 0xca
 800a318:	625a      	str	r2, [r3, #36]	@ 0x24
 800a31a:	4b15      	ldr	r3, [pc, #84]	@ (800a370 <HAL_RTC_SetDate+0x108>)
 800a31c:	2253      	movs	r2, #83	@ 0x53
 800a31e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f000 f859 	bl	800a3d8 <RTC_EnterInitMode>
 800a326:	4603      	mov	r3, r0
 800a328:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a32a:	7cfb      	ldrb	r3, [r7, #19]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a330:	4a0f      	ldr	r2, [pc, #60]	@ (800a370 <HAL_RTC_SetDate+0x108>)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a338:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a33c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f886 	bl	800a450 <RTC_ExitInitMode>
 800a344:	4603      	mov	r3, r0
 800a346:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a348:	4b09      	ldr	r3, [pc, #36]	@ (800a370 <HAL_RTC_SetDate+0x108>)
 800a34a:	22ff      	movs	r2, #255	@ 0xff
 800a34c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a34e:	7cfb      	ldrb	r3, [r7, #19]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d103      	bne.n	800a35c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a364:	7cfb      	ldrb	r3, [r7, #19]
}
 800a366:	4618      	mov	r0, r3
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd90      	pop	{r4, r7, pc}
 800a36e:	bf00      	nop
 800a370:	46007800 	.word	0x46007800

0800a374 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a37c:	4b15      	ldr	r3, [pc, #84]	@ (800a3d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	4a14      	ldr	r2, [pc, #80]	@ (800a3d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a382:	f023 0320 	bic.w	r3, r3, #32
 800a386:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a388:	f7f8 fd9a 	bl	8002ec0 <HAL_GetTick>
 800a38c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a38e:	e013      	b.n	800a3b8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a390:	f7f8 fd96 	bl	8002ec0 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a39e:	d90b      	bls.n	800a3b8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10c      	bne.n	800a3c6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2203      	movs	r2, #3
 800a3b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e008      	b.n	800a3ca <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a3b8:	4b06      	ldr	r3, [pc, #24]	@ (800a3d4 <HAL_RTC_WaitForSynchro+0x60>)
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f003 0320 	and.w	r3, r3, #32
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0e5      	beq.n	800a390 <HAL_RTC_WaitForSynchro+0x1c>
 800a3c4:	e000      	b.n	800a3c8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a3c6:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	46007800 	.word	0x46007800

0800a3d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a3e4:	4b19      	ldr	r3, [pc, #100]	@ (800a44c <RTC_EnterInitMode+0x74>)
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d128      	bne.n	800a442 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a3f0:	4b16      	ldr	r3, [pc, #88]	@ (800a44c <RTC_EnterInitMode+0x74>)
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	4a15      	ldr	r2, [pc, #84]	@ (800a44c <RTC_EnterInitMode+0x74>)
 800a3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3fa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a3fc:	f7f8 fd60 	bl	8002ec0 <HAL_GetTick>
 800a400:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a402:	e013      	b.n	800a42c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a404:	f7f8 fd5c 	bl	8002ec0 <HAL_GetTick>
 800a408:	4602      	mov	r2, r0
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a412:	d90b      	bls.n	800a42c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a414:	4b0d      	ldr	r3, [pc, #52]	@ (800a44c <RTC_EnterInitMode+0x74>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10f      	bne.n	800a440 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2203      	movs	r2, #3
 800a428:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a42c:	4b07      	ldr	r3, [pc, #28]	@ (800a44c <RTC_EnterInitMode+0x74>)
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a434:	2b00      	cmp	r3, #0
 800a436:	d104      	bne.n	800a442 <RTC_EnterInitMode+0x6a>
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	d1e2      	bne.n	800a404 <RTC_EnterInitMode+0x2c>
 800a43e:	e000      	b.n	800a442 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a440:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	46007800 	.word	0x46007800

0800a450 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a458:	2300      	movs	r3, #0
 800a45a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a45c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	4a19      	ldr	r2, [pc, #100]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a466:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a468:	4b17      	ldr	r3, [pc, #92]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	f003 0320 	and.w	r3, r3, #32
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10c      	bne.n	800a48e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff ff7d 	bl	800a374 <HAL_RTC_WaitForSynchro>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01e      	beq.n	800a4be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2203      	movs	r2, #3
 800a484:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	73fb      	strb	r3, [r7, #15]
 800a48c:	e017      	b.n	800a4be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a48e:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	4a0d      	ldr	r2, [pc, #52]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a494:	f023 0320 	bic.w	r3, r3, #32
 800a498:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff ff6a 	bl	800a374 <HAL_RTC_WaitForSynchro>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2203      	movs	r2, #3
 800a4aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a4b2:	4b05      	ldr	r3, [pc, #20]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	4a04      	ldr	r2, [pc, #16]	@ (800a4c8 <RTC_ExitInitMode+0x78>)
 800a4b8:	f043 0320 	orr.w	r3, r3, #32
 800a4bc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	46007800 	.word	0x46007800

0800a4cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a4de:	e005      	b.n	800a4ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a4e6:	7afb      	ldrb	r3, [r7, #11]
 800a4e8:	3b0a      	subs	r3, #10
 800a4ea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	2b09      	cmp	r3, #9
 800a4f0:	d8f6      	bhi.n	800a4e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	011b      	lsls	r3, r3, #4
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	7afb      	ldrb	r3, [r7, #11]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	b2db      	uxtb	r3, r3
}
 800a500:	4618      	mov	r0, r3
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	4910      	ldr	r1, [pc, #64]	@ (800a560 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a520:	4313      	orrs	r3, r2
 800a522:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	431a      	orrs	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	490c      	ldr	r1, [pc, #48]	@ (800a564 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a534:	4313      	orrs	r3, r2
 800a536:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800a538:	4b0a      	ldr	r3, [pc, #40]	@ (800a564 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	6919      	ldr	r1, [r3, #16]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	430b      	orrs	r3, r1
 800a54c:	4905      	ldr	r1, [pc, #20]	@ (800a564 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	46007800 	.word	0x46007800
 800a564:	46007c00 	.word	0x46007c00

0800a568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e049      	b.n	800a60e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f8 f8dc 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	f000 fa7c 	bl	800aaa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d001      	beq.n	800a630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e072      	b.n	800a716 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a35      	ldr	r2, [pc, #212]	@ (800a724 <HAL_TIM_Base_Start_IT+0x10c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d040      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a34      	ldr	r2, [pc, #208]	@ (800a728 <HAL_TIM_Base_Start_IT+0x110>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d03b      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a664:	d036      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a66e:	d031      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a2d      	ldr	r2, [pc, #180]	@ (800a72c <HAL_TIM_Base_Start_IT+0x114>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d02c      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a2c      	ldr	r2, [pc, #176]	@ (800a730 <HAL_TIM_Base_Start_IT+0x118>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d027      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a2a      	ldr	r2, [pc, #168]	@ (800a734 <HAL_TIM_Base_Start_IT+0x11c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d022      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a29      	ldr	r2, [pc, #164]	@ (800a738 <HAL_TIM_Base_Start_IT+0x120>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d01d      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a27      	ldr	r2, [pc, #156]	@ (800a73c <HAL_TIM_Base_Start_IT+0x124>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d018      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a26      	ldr	r2, [pc, #152]	@ (800a740 <HAL_TIM_Base_Start_IT+0x128>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d013      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a24      	ldr	r2, [pc, #144]	@ (800a744 <HAL_TIM_Base_Start_IT+0x12c>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00e      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a23      	ldr	r2, [pc, #140]	@ (800a748 <HAL_TIM_Base_Start_IT+0x130>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d009      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a21      	ldr	r2, [pc, #132]	@ (800a74c <HAL_TIM_Base_Start_IT+0x134>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d004      	beq.n	800a6d4 <HAL_TIM_Base_Start_IT+0xbc>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a20      	ldr	r2, [pc, #128]	@ (800a750 <HAL_TIM_Base_Start_IT+0x138>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d115      	bne.n	800a700 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689a      	ldr	r2, [r3, #8]
 800a6da:	4b1e      	ldr	r3, [pc, #120]	@ (800a754 <HAL_TIM_Base_Start_IT+0x13c>)
 800a6dc:	4013      	ands	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b06      	cmp	r3, #6
 800a6e4:	d015      	beq.n	800a712 <HAL_TIM_Base_Start_IT+0xfa>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ec:	d011      	beq.n	800a712 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f042 0201 	orr.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6fe:	e008      	b.n	800a712 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e000      	b.n	800a714 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	40012c00 	.word	0x40012c00
 800a728:	50012c00 	.word	0x50012c00
 800a72c:	40000400 	.word	0x40000400
 800a730:	50000400 	.word	0x50000400
 800a734:	40000800 	.word	0x40000800
 800a738:	50000800 	.word	0x50000800
 800a73c:	40000c00 	.word	0x40000c00
 800a740:	50000c00 	.word	0x50000c00
 800a744:	40013400 	.word	0x40013400
 800a748:	50013400 	.word	0x50013400
 800a74c:	40014000 	.word	0x40014000
 800a750:	50014000 	.word	0x50014000
 800a754:	00010007 	.word	0x00010007

0800a758 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f022 0201 	bic.w	r2, r2, #1
 800a76e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a1a      	ldr	r2, [r3, #32]
 800a776:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10f      	bne.n	800a7a0 <HAL_TIM_Base_Stop_IT+0x48>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6a1a      	ldr	r2, [r3, #32]
 800a786:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a78a:	4013      	ands	r3, r2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d107      	bne.n	800a7a0 <HAL_TIM_Base_Stop_IT+0x48>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 0201 	bic.w	r2, r2, #1
 800a79e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d020      	beq.n	800a81a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f003 0302 	and.w	r3, r3, #2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d01b      	beq.n	800a81a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f06f 0202 	mvn.w	r2, #2
 800a7ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	f003 0303 	and.w	r3, r3, #3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f931 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a806:	e005      	b.n	800a814 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f923 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f934 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b00      	cmp	r3, #0
 800a822:	d020      	beq.n	800a866 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0304 	and.w	r3, r3, #4
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d01b      	beq.n	800a866 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f06f 0204 	mvn.w	r2, #4
 800a836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d003      	beq.n	800a854 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 f90b 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a852:	e005      	b.n	800a860 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f8fd 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f90e 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f003 0308 	and.w	r3, r3, #8
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d020      	beq.n	800a8b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f003 0308 	and.w	r3, r3, #8
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01b      	beq.n	800a8b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f06f 0208 	mvn.w	r2, #8
 800a882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2204      	movs	r2, #4
 800a888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d003      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f8e5 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a89e:	e005      	b.n	800a8ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f8d7 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f8e8 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d020      	beq.n	800a8fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f003 0310 	and.w	r3, r3, #16
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d01b      	beq.n	800a8fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f06f 0210 	mvn.w	r2, #16
 800a8ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2208      	movs	r2, #8
 800a8d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 f8bf 	bl	800aa68 <HAL_TIM_IC_CaptureCallback>
 800a8ea:	e005      	b.n	800a8f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f8b1 	bl	800aa54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f8c2 	bl	800aa7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00c      	beq.n	800a922 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d007      	beq.n	800a922 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f06f 0201 	mvn.w	r2, #1
 800a91a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7f6 fe3d 	bl	800159c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00c      	beq.n	800a950 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d007      	beq.n	800a950 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f9b4 	bl	800acb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00c      	beq.n	800a974 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a960:	2b00      	cmp	r3, #0
 800a962:	d007      	beq.n	800a974 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a96c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f9ac 	bl	800accc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00c      	beq.n	800a998 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f87c 	bl	800aa90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00c      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d007      	beq.n	800a9bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f06f 0220 	mvn.w	r2, #32
 800a9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f974 	bl	800aca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00c      	beq.n	800a9e0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f980 	bl	800ace0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00c      	beq.n	800aa04 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d007      	beq.n	800aa04 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f978 	bl	800acf4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00c      	beq.n	800aa28 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aa20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f970 	bl	800ad08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00c      	beq.n	800aa4c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d007      	beq.n	800aa4c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aa44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f968 	bl	800ad1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa4c:	bf00      	nop
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a6b      	ldr	r2, [pc, #428]	@ (800ac64 <TIM_Base_SetConfig+0x1c0>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d02b      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a6a      	ldr	r2, [pc, #424]	@ (800ac68 <TIM_Base_SetConfig+0x1c4>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d027      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaca:	d023      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aad2:	d01f      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a65      	ldr	r2, [pc, #404]	@ (800ac6c <TIM_Base_SetConfig+0x1c8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d01b      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a64      	ldr	r2, [pc, #400]	@ (800ac70 <TIM_Base_SetConfig+0x1cc>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d017      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a63      	ldr	r2, [pc, #396]	@ (800ac74 <TIM_Base_SetConfig+0x1d0>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d013      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a62      	ldr	r2, [pc, #392]	@ (800ac78 <TIM_Base_SetConfig+0x1d4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00f      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a61      	ldr	r2, [pc, #388]	@ (800ac7c <TIM_Base_SetConfig+0x1d8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d00b      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a60      	ldr	r2, [pc, #384]	@ (800ac80 <TIM_Base_SetConfig+0x1dc>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d007      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a5f      	ldr	r2, [pc, #380]	@ (800ac84 <TIM_Base_SetConfig+0x1e0>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d003      	beq.n	800ab14 <TIM_Base_SetConfig+0x70>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a5e      	ldr	r2, [pc, #376]	@ (800ac88 <TIM_Base_SetConfig+0x1e4>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d108      	bne.n	800ab26 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a4e      	ldr	r2, [pc, #312]	@ (800ac64 <TIM_Base_SetConfig+0x1c0>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d043      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a4d      	ldr	r2, [pc, #308]	@ (800ac68 <TIM_Base_SetConfig+0x1c4>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d03f      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab3c:	d03b      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab44:	d037      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a48      	ldr	r2, [pc, #288]	@ (800ac6c <TIM_Base_SetConfig+0x1c8>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d033      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a47      	ldr	r2, [pc, #284]	@ (800ac70 <TIM_Base_SetConfig+0x1cc>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d02f      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a46      	ldr	r2, [pc, #280]	@ (800ac74 <TIM_Base_SetConfig+0x1d0>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d02b      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a45      	ldr	r2, [pc, #276]	@ (800ac78 <TIM_Base_SetConfig+0x1d4>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d027      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a44      	ldr	r2, [pc, #272]	@ (800ac7c <TIM_Base_SetConfig+0x1d8>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d023      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a43      	ldr	r2, [pc, #268]	@ (800ac80 <TIM_Base_SetConfig+0x1dc>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d01f      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a42      	ldr	r2, [pc, #264]	@ (800ac84 <TIM_Base_SetConfig+0x1e0>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d01b      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a41      	ldr	r2, [pc, #260]	@ (800ac88 <TIM_Base_SetConfig+0x1e4>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d017      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a40      	ldr	r2, [pc, #256]	@ (800ac8c <TIM_Base_SetConfig+0x1e8>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d013      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a3f      	ldr	r2, [pc, #252]	@ (800ac90 <TIM_Base_SetConfig+0x1ec>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d00f      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a3e      	ldr	r2, [pc, #248]	@ (800ac94 <TIM_Base_SetConfig+0x1f0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00b      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a3d      	ldr	r2, [pc, #244]	@ (800ac98 <TIM_Base_SetConfig+0x1f4>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d007      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a3c      	ldr	r2, [pc, #240]	@ (800ac9c <TIM_Base_SetConfig+0x1f8>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d003      	beq.n	800abb6 <TIM_Base_SetConfig+0x112>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a3b      	ldr	r2, [pc, #236]	@ (800aca0 <TIM_Base_SetConfig+0x1fc>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d108      	bne.n	800abc8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	689a      	ldr	r2, [r3, #8]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a1e      	ldr	r2, [pc, #120]	@ (800ac64 <TIM_Base_SetConfig+0x1c0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d023      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac68 <TIM_Base_SetConfig+0x1c4>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d01f      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a22      	ldr	r2, [pc, #136]	@ (800ac84 <TIM_Base_SetConfig+0x1e0>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d01b      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a21      	ldr	r2, [pc, #132]	@ (800ac88 <TIM_Base_SetConfig+0x1e4>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d017      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a20      	ldr	r2, [pc, #128]	@ (800ac8c <TIM_Base_SetConfig+0x1e8>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d013      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a1f      	ldr	r2, [pc, #124]	@ (800ac90 <TIM_Base_SetConfig+0x1ec>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00f      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a1e      	ldr	r2, [pc, #120]	@ (800ac94 <TIM_Base_SetConfig+0x1f0>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d00b      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a1d      	ldr	r2, [pc, #116]	@ (800ac98 <TIM_Base_SetConfig+0x1f4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d007      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a1c      	ldr	r2, [pc, #112]	@ (800ac9c <TIM_Base_SetConfig+0x1f8>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d003      	beq.n	800ac36 <TIM_Base_SetConfig+0x192>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a1b      	ldr	r2, [pc, #108]	@ (800aca0 <TIM_Base_SetConfig+0x1fc>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d103      	bne.n	800ac3e <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	691a      	ldr	r2, [r3, #16]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f043 0204 	orr.w	r2, r3, #4
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	601a      	str	r2, [r3, #0]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40012c00 	.word	0x40012c00
 800ac68:	50012c00 	.word	0x50012c00
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	50000400 	.word	0x50000400
 800ac74:	40000800 	.word	0x40000800
 800ac78:	50000800 	.word	0x50000800
 800ac7c:	40000c00 	.word	0x40000c00
 800ac80:	50000c00 	.word	0x50000c00
 800ac84:	40013400 	.word	0x40013400
 800ac88:	50013400 	.word	0x50013400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	50014000 	.word	0x50014000
 800ac94:	40014400 	.word	0x40014400
 800ac98:	50014400 	.word	0x50014400
 800ac9c:	40014800 	.word	0x40014800
 800aca0:	50014800 	.word	0x50014800

0800aca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e042      	b.n	800adc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d106      	bne.n	800ad5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7f7 fd21 	bl	800279c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2224      	movs	r2, #36	@ 0x24
 800ad5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f022 0201 	bic.w	r2, r2, #1
 800ad70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d002      	beq.n	800ad80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fd5e 	bl	800b83c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fbb9 	bl	800b4f8 <UART_SetConfig>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d101      	bne.n	800ad90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e01b      	b.n	800adc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689a      	ldr	r2, [r3, #8]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f042 0201 	orr.w	r2, r2, #1
 800adbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fddd 	bl	800b980 <UART_CheckIdleState>
 800adc6:	4603      	mov	r3, r0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08a      	sub	sp, #40	@ 0x28
 800add4:	af02      	add	r7, sp, #8
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	4613      	mov	r3, r2
 800adde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	f040 808b 	bne.w	800af02 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <HAL_UART_Transmit+0x28>
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e083      	b.n	800af04 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae06:	2b80      	cmp	r3, #128	@ 0x80
 800ae08:	d107      	bne.n	800ae1a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ae18:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2221      	movs	r2, #33	@ 0x21
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae2a:	f7f8 f849 	bl	8002ec0 <HAL_GetTick>
 800ae2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	88fa      	ldrh	r2, [r7, #6]
 800ae34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	88fa      	ldrh	r2, [r7, #6]
 800ae3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae48:	d108      	bne.n	800ae5c <HAL_UART_Transmit+0x8c>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d104      	bne.n	800ae5c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e003      	b.n	800ae64 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae64:	e030      	b.n	800aec8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2180      	movs	r1, #128	@ 0x80
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 fe2f 	bl	800bad4 <UART_WaitOnFlagUntilTimeout>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d005      	beq.n	800ae88 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e03d      	b.n	800af04 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10b      	bne.n	800aea6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	3302      	adds	r3, #2
 800aea2:	61bb      	str	r3, [r7, #24]
 800aea4:	e007      	b.n	800aeb6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	781a      	ldrb	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	3b01      	subs	r3, #1
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1c8      	bne.n	800ae66 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2200      	movs	r2, #0
 800aedc:	2140      	movs	r1, #64	@ 0x40
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 fdf8 	bl	800bad4 <UART_WaitOnFlagUntilTimeout>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2220      	movs	r2, #32
 800aeee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e006      	b.n	800af04 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	e000      	b.n	800af04 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800af02:	2302      	movs	r3, #2
  }
}
 800af04:	4618      	mov	r0, r3
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b0ae      	sub	sp, #184	@ 0xb8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af36:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af3a:	4013      	ands	r3, r2
 800af3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800af40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d11b      	bne.n	800af80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af4c:	f003 0320 	and.w	r3, r3, #32
 800af50:	2b00      	cmp	r3, #0
 800af52:	d015      	beq.n	800af80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 8297 	beq.w	800b4a4 <HAL_UART_IRQHandler+0x598>
      {
        huart->RxISR(huart);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	4798      	blx	r3
      }
      return;
 800af7e:	e291      	b.n	800b4a4 <HAL_UART_IRQHandler+0x598>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 80fd 	beq.w	800b184 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800af8e:	4b7a      	ldr	r3, [pc, #488]	@ (800b178 <HAL_UART_IRQHandler+0x26c>)
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af9a:	4b78      	ldr	r3, [pc, #480]	@ (800b17c <HAL_UART_IRQHandler+0x270>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 80f0 	beq.w	800b184 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d011      	beq.n	800afd4 <HAL_UART_IRQHandler+0xc8>
 800afb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800afb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2201      	movs	r2, #1
 800afc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afca:	f043 0201 	orr.w	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afd8:	f003 0302 	and.w	r3, r3, #2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d011      	beq.n	800b004 <HAL_UART_IRQHandler+0xf8>
 800afe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00b      	beq.n	800b004 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2202      	movs	r2, #2
 800aff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affa:	f043 0204 	orr.w	r2, r3, #4
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b004:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d011      	beq.n	800b034 <HAL_UART_IRQHandler+0x128>
 800b010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2204      	movs	r2, #4
 800b022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b02a:	f043 0202 	orr.w	r2, r3, #2
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b038:	f003 0308 	and.w	r3, r3, #8
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d017      	beq.n	800b070 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d105      	bne.n	800b058 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b04c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b050:	4b49      	ldr	r3, [pc, #292]	@ (800b178 <HAL_UART_IRQHandler+0x26c>)
 800b052:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00b      	beq.n	800b070 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2208      	movs	r2, #8
 800b05e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b066:	f043 0208 	orr.w	r2, r3, #8
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b070:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d012      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x196>
 800b07c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00c      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b098:	f043 0220 	orr.w	r2, r3, #32
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 81fd 	beq.w	800b4a8 <HAL_UART_IRQHandler+0x59c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d013      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b0be:	f003 0320 	and.w	r3, r3, #32
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d105      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d007      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f6:	2b40      	cmp	r3, #64	@ 0x40
 800b0f8:	d005      	beq.n	800b106 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b0fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b102:	2b00      	cmp	r3, #0
 800b104:	d02e      	beq.n	800b164 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fe74 	bl	800bdf4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b116:	2b40      	cmp	r3, #64	@ 0x40
 800b118:	d120      	bne.n	800b15c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b120:	2b00      	cmp	r3, #0
 800b122:	d017      	beq.n	800b154 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b12a:	4a15      	ldr	r2, [pc, #84]	@ (800b180 <HAL_UART_IRQHandler+0x274>)
 800b12c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b134:	4618      	mov	r0, r3
 800b136:	f7f8 f903 	bl	8003340 <HAL_DMA_Abort_IT>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d019      	beq.n	800b174 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b14e:	4610      	mov	r0, r2
 800b150:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b152:	e00f      	b.n	800b174 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f9c5 	bl	800b4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15a:	e00b      	b.n	800b174 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f9c1 	bl	800b4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b162:	e007      	b.n	800b174 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f9bd 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b172:	e199      	b.n	800b4a8 <HAL_UART_IRQHandler+0x59c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b174:	bf00      	nop
    return;
 800b176:	e197      	b.n	800b4a8 <HAL_UART_IRQHandler+0x59c>
 800b178:	10000001 	.word	0x10000001
 800b17c:	04000120 	.word	0x04000120
 800b180:	0800bec1 	.word	0x0800bec1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b188:	2b01      	cmp	r3, #1
 800b18a:	f040 8142 	bne.w	800b412 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b18e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b192:	f003 0310 	and.w	r3, r3, #16
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 813b 	beq.w	800b412 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b19c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8134 	beq.w	800b412 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1bc:	2b40      	cmp	r3, #64	@ 0x40
 800b1be:	f040 80aa 	bne.w	800b316 <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1cc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800b1d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8084 	beq.w	800b2e2 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1e0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d27c      	bcs.n	800b2e2 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b1ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1fa:	2b81      	cmp	r3, #129	@ 0x81
 800b1fc:	d060      	beq.n	800b2c0 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b20c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b20e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	461a      	mov	r2, r3
 800b21c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b224:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b228:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b22c:	e841 2300 	strex	r3, r2, [r1]
 800b230:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b232:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e2      	bne.n	800b1fe <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3308      	adds	r3, #8
 800b23e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b24a:	f023 0301 	bic.w	r3, r3, #1
 800b24e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b25c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b25e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b262:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b26a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e3      	bne.n	800b238 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b28c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b28e:	f023 0310 	bic.w	r3, r3, #16
 800b292:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	461a      	mov	r2, r3
 800b29c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2a2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b2a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b2ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e4      	bne.n	800b27e <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f7 ffc4 	bl	8003248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7f7 fbc0 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b2e0:	e0e4      	b.n	800b4ac <HAL_UART_IRQHandler+0x5a0>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2e8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	f040 80dd 	bne.w	800b4ac <HAL_UART_IRQHandler+0x5a0>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2fa:	2b81      	cmp	r3, #129	@ 0x81
 800b2fc:	f040 80d6 	bne.w	800b4ac <HAL_UART_IRQHandler+0x5a0>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7f7 fba6 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
      return;
 800b314:	e0ca      	b.n	800b4ac <HAL_UART_IRQHandler+0x5a0>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b322:	b29b      	uxth	r3, r3
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b330:	b29b      	uxth	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80bc 	beq.w	800b4b0 <HAL_UART_IRQHandler+0x5a4>
          && (nb_rx_data > 0U))
 800b338:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 80b7 	beq.w	800b4b0 <HAL_UART_IRQHandler+0x5a4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b352:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b364:	647b      	str	r3, [r7, #68]	@ 0x44
 800b366:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b368:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b36a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b36c:	e841 2300 	strex	r3, r2, [r1]
 800b370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e4      	bne.n	800b342 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3308      	adds	r3, #8
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	e853 3f00 	ldrex	r3, [r3]
 800b386:	623b      	str	r3, [r7, #32]
   return(result);
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b38e:	f023 0301 	bic.w	r3, r3, #1
 800b392:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3308      	adds	r3, #8
 800b39c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b3a0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3a8:	e841 2300 	strex	r3, r2, [r1]
 800b3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e1      	bne.n	800b378 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f023 0310 	bic.w	r3, r3, #16
 800b3dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b3ea:	61fb      	str	r3, [r7, #28]
 800b3ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	69b9      	ldr	r1, [r7, #24]
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e4      	bne.n	800b3c8 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2202      	movs	r2, #2
 800b402:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b404:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7f7 fb28 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b410:	e04e      	b.n	800b4b0 <HAL_UART_IRQHandler+0x5a4>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d014      	beq.n	800b448 <HAL_UART_IRQHandler+0x53c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b41e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <HAL_UART_IRQHandler+0x52a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b42e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d008      	beq.n	800b448 <HAL_UART_IRQHandler+0x53c>
  {
    if (huart->TxISR != NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d03a      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x5a8>
    {
      huart->TxISR(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4798      	blx	r3
    }
    return;
 800b446:	e035      	b.n	800b4b4 <HAL_UART_IRQHandler+0x5a8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b448:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d009      	beq.n	800b468 <HAL_UART_IRQHandler+0x55c>
 800b454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d003      	beq.n	800b468 <HAL_UART_IRQHandler+0x55c>
  {
    UART_EndTransmit_IT(huart);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fd3f 	bl	800bee4 <UART_EndTransmit_IT>
    return;
 800b466:	e026      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b46c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <HAL_UART_IRQHandler+0x57c>
 800b474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b478:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <HAL_UART_IRQHandler+0x57c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f001 fa9d 	bl	800c9c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b486:	e016      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b48c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d010      	beq.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
 800b494:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	da0c      	bge.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 fa85 	bl	800c9ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4a2:	e008      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
      return;
 800b4a4:	bf00      	nop
 800b4a6:	e006      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
    return;
 800b4a8:	bf00      	nop
 800b4aa:	e004      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
      return;
 800b4ac:	bf00      	nop
 800b4ae:	e002      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
      return;
 800b4b0:	bf00      	nop
 800b4b2:	e000      	b.n	800b4b6 <HAL_UART_IRQHandler+0x5aa>
    return;
 800b4b4:	bf00      	nop
  }
}
 800b4b6:	37b8      	adds	r7, #184	@ 0xb8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4fc:	b094      	sub	sp, #80	@ 0x50
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	4b7e      	ldr	r3, [pc, #504]	@ (800b708 <UART_SetConfig+0x210>)
 800b50e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b512:	689a      	ldr	r2, [r3, #8]
 800b514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	431a      	orrs	r2, r3
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	431a      	orrs	r2, r3
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	4313      	orrs	r3, r2
 800b526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4977      	ldr	r1, [pc, #476]	@ (800b70c <UART_SetConfig+0x214>)
 800b530:	4019      	ands	r1, r3
 800b532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b538:	430b      	orrs	r3, r1
 800b53a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b548:	68d9      	ldr	r1, [r3, #12]
 800b54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	ea40 0301 	orr.w	r3, r0, r1
 800b552:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	4b6a      	ldr	r3, [pc, #424]	@ (800b708 <UART_SetConfig+0x210>)
 800b560:	429a      	cmp	r2, r3
 800b562:	d009      	beq.n	800b578 <UART_SetConfig+0x80>
 800b564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	4b69      	ldr	r3, [pc, #420]	@ (800b710 <UART_SetConfig+0x218>)
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d004      	beq.n	800b578 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b570:	6a1a      	ldr	r2, [r3, #32]
 800b572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b574:	4313      	orrs	r3, r2
 800b576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b582:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b58c:	430b      	orrs	r3, r1
 800b58e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b596:	f023 000f 	bic.w	r0, r3, #15
 800b59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	ea40 0301 	orr.w	r3, r0, r1
 800b5a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	4b59      	ldr	r3, [pc, #356]	@ (800b714 <UART_SetConfig+0x21c>)
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d102      	bne.n	800b5b8 <UART_SetConfig+0xc0>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5b6:	e029      	b.n	800b60c <UART_SetConfig+0x114>
 800b5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	4b56      	ldr	r3, [pc, #344]	@ (800b718 <UART_SetConfig+0x220>)
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d102      	bne.n	800b5c8 <UART_SetConfig+0xd0>
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5c6:	e021      	b.n	800b60c <UART_SetConfig+0x114>
 800b5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	4b53      	ldr	r3, [pc, #332]	@ (800b71c <UART_SetConfig+0x224>)
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d102      	bne.n	800b5d8 <UART_SetConfig+0xe0>
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d6:	e019      	b.n	800b60c <UART_SetConfig+0x114>
 800b5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	4b50      	ldr	r3, [pc, #320]	@ (800b720 <UART_SetConfig+0x228>)
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d102      	bne.n	800b5e8 <UART_SetConfig+0xf0>
 800b5e2:	2308      	movs	r3, #8
 800b5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5e6:	e011      	b.n	800b60c <UART_SetConfig+0x114>
 800b5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	4b4d      	ldr	r3, [pc, #308]	@ (800b724 <UART_SetConfig+0x22c>)
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d102      	bne.n	800b5f8 <UART_SetConfig+0x100>
 800b5f2:	2310      	movs	r3, #16
 800b5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f6:	e009      	b.n	800b60c <UART_SetConfig+0x114>
 800b5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	4b42      	ldr	r3, [pc, #264]	@ (800b708 <UART_SetConfig+0x210>)
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d102      	bne.n	800b608 <UART_SetConfig+0x110>
 800b602:	2320      	movs	r3, #32
 800b604:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b606:	e001      	b.n	800b60c <UART_SetConfig+0x114>
 800b608:	2300      	movs	r3, #0
 800b60a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	4b3d      	ldr	r3, [pc, #244]	@ (800b708 <UART_SetConfig+0x210>)
 800b612:	429a      	cmp	r2, r3
 800b614:	d005      	beq.n	800b622 <UART_SetConfig+0x12a>
 800b616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	4b3d      	ldr	r3, [pc, #244]	@ (800b710 <UART_SetConfig+0x218>)
 800b61c:	429a      	cmp	r2, r3
 800b61e:	f040 8085 	bne.w	800b72c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b624:	2200      	movs	r2, #0
 800b626:	623b      	str	r3, [r7, #32]
 800b628:	627a      	str	r2, [r7, #36]	@ 0x24
 800b62a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b62e:	f7fd f9e3 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b632:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 80e8 	beq.w	800b80c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b640:	4a39      	ldr	r2, [pc, #228]	@ (800b728 <UART_SetConfig+0x230>)
 800b642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b646:	461a      	mov	r2, r3
 800b648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b64e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	4613      	mov	r3, r2
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	4413      	add	r3, r2
 800b65a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d305      	bcc.n	800b66c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b668:	429a      	cmp	r2, r3
 800b66a:	d903      	bls.n	800b674 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b672:	e048      	b.n	800b706 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b676:	2200      	movs	r2, #0
 800b678:	61bb      	str	r3, [r7, #24]
 800b67a:	61fa      	str	r2, [r7, #28]
 800b67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b680:	4a29      	ldr	r2, [pc, #164]	@ (800b728 <UART_SetConfig+0x230>)
 800b682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b686:	b29b      	uxth	r3, r3
 800b688:	2200      	movs	r2, #0
 800b68a:	613b      	str	r3, [r7, #16]
 800b68c:	617a      	str	r2, [r7, #20]
 800b68e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b692:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b696:	f7f5 fa0d 	bl	8000ab4 <__aeabi_uldivmod>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4610      	mov	r0, r2
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f04f 0200 	mov.w	r2, #0
 800b6a6:	f04f 0300 	mov.w	r3, #0
 800b6aa:	020b      	lsls	r3, r1, #8
 800b6ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6b0:	0202      	lsls	r2, r0, #8
 800b6b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6b4:	6849      	ldr	r1, [r1, #4]
 800b6b6:	0849      	lsrs	r1, r1, #1
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	4605      	mov	r5, r0
 800b6be:	eb12 0804 	adds.w	r8, r2, r4
 800b6c2:	eb43 0905 	adc.w	r9, r3, r5
 800b6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	60bb      	str	r3, [r7, #8]
 800b6ce:	60fa      	str	r2, [r7, #12]
 800b6d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f5 f9ec 	bl	8000ab4 <__aeabi_uldivmod>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6ea:	d308      	bcc.n	800b6fe <UART_SetConfig+0x206>
 800b6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6f2:	d204      	bcs.n	800b6fe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800b6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b6fa:	60da      	str	r2, [r3, #12]
 800b6fc:	e003      	b.n	800b706 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b704:	e082      	b.n	800b80c <UART_SetConfig+0x314>
 800b706:	e081      	b.n	800b80c <UART_SetConfig+0x314>
 800b708:	46002400 	.word	0x46002400
 800b70c:	cfff69f3 	.word	0xcfff69f3
 800b710:	56002400 	.word	0x56002400
 800b714:	40013800 	.word	0x40013800
 800b718:	40004400 	.word	0x40004400
 800b71c:	40004800 	.word	0x40004800
 800b720:	40004c00 	.word	0x40004c00
 800b724:	40005000 	.word	0x40005000
 800b728:	0800cf9c 	.word	0x0800cf9c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b734:	d13c      	bne.n	800b7b0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b738:	2200      	movs	r2, #0
 800b73a:	603b      	str	r3, [r7, #0]
 800b73c:	607a      	str	r2, [r7, #4]
 800b73e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b742:	f7fd f959 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b746:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d05e      	beq.n	800b80c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b752:	4a39      	ldr	r2, [pc, #228]	@ (800b838 <UART_SetConfig+0x340>)
 800b754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b758:	461a      	mov	r2, r3
 800b75a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b75c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b760:	005a      	lsls	r2, r3, #1
 800b762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	085b      	lsrs	r3, r3, #1
 800b768:	441a      	add	r2, r3
 800b76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b772:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b776:	2b0f      	cmp	r3, #15
 800b778:	d916      	bls.n	800b7a8 <UART_SetConfig+0x2b0>
 800b77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b77c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b780:	d212      	bcs.n	800b7a8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b784:	b29b      	uxth	r3, r3
 800b786:	f023 030f 	bic.w	r3, r3, #15
 800b78a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b78c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b78e:	085b      	lsrs	r3, r3, #1
 800b790:	b29b      	uxth	r3, r3
 800b792:	f003 0307 	and.w	r3, r3, #7
 800b796:	b29a      	uxth	r2, r3
 800b798:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b79a:	4313      	orrs	r3, r2
 800b79c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	e031      	b.n	800b80c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b7ae:	e02d      	b.n	800b80c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b7b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	469a      	mov	sl, r3
 800b7b6:	4693      	mov	fp, r2
 800b7b8:	4650      	mov	r0, sl
 800b7ba:	4659      	mov	r1, fp
 800b7bc:	f7fd f91c 	bl	80089f8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b7c0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b7c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d021      	beq.n	800b80c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b838 <UART_SetConfig+0x340>)
 800b7ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	085b      	lsrs	r3, r3, #1
 800b7e0:	441a      	add	r2, r3
 800b7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ee:	2b0f      	cmp	r3, #15
 800b7f0:	d909      	bls.n	800b806 <UART_SetConfig+0x30e>
 800b7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7f8:	d205      	bcs.n	800b806 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	60da      	str	r2, [r3, #12]
 800b804:	e002      	b.n	800b80c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80e:	2201      	movs	r2, #1
 800b810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b816:	2201      	movs	r2, #1
 800b818:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81e:	2200      	movs	r2, #0
 800b820:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b824:	2200      	movs	r2, #0
 800b826:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b828:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3750      	adds	r7, #80	@ 0x50
 800b830:	46bd      	mov	sp, r7
 800b832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b836:	bf00      	nop
 800b838:	0800cf9c 	.word	0x0800cf9c

0800b83c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b848:	f003 0308 	and.w	r3, r3, #8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00a      	beq.n	800b866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	430a      	orrs	r2, r1
 800b864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00a      	beq.n	800b888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	430a      	orrs	r2, r1
 800b886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00a      	beq.n	800b8aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00a      	beq.n	800b8cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	430a      	orrs	r2, r1
 800b8ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d0:	f003 0310 	and.w	r3, r3, #16
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f2:	f003 0320 	and.w	r3, r3, #32
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	430a      	orrs	r2, r1
 800b90e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01a      	beq.n	800b952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	430a      	orrs	r2, r1
 800b930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b93a:	d10a      	bne.n	800b952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	430a      	orrs	r2, r1
 800b972:	605a      	str	r2, [r3, #4]
  }
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b098      	sub	sp, #96	@ 0x60
 800b984:	af02      	add	r7, sp, #8
 800b986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b990:	f7f7 fa96 	bl	8002ec0 <HAL_GetTick>
 800b994:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0308 	and.w	r3, r3, #8
 800b9a0:	2b08      	cmp	r3, #8
 800b9a2:	d12f      	bne.n	800ba04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f88e 	bl	800bad4 <UART_WaitOnFlagUntilTimeout>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d022      	beq.n	800ba04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e6      	bne.n	800b9be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e063      	b.n	800bacc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b04      	cmp	r3, #4
 800ba10:	d149      	bne.n	800baa6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f857 	bl	800bad4 <UART_WaitOnFlagUntilTimeout>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d03c      	beq.n	800baa6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	623b      	str	r3, [r7, #32]
   return(result);
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e6      	bne.n	800ba2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f023 0301 	bic.w	r3, r3, #1
 800ba74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba7e:	61fa      	str	r2, [r7, #28]
 800ba80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	69b9      	ldr	r1, [r7, #24]
 800ba84:	69fa      	ldr	r2, [r7, #28]
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	617b      	str	r3, [r7, #20]
   return(result);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e5      	bne.n	800ba5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e012      	b.n	800bacc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3758      	adds	r7, #88	@ 0x58
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	4613      	mov	r3, r2
 800bae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bae4:	e04f      	b.n	800bb86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baec:	d04b      	beq.n	800bb86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baee:	f7f7 f9e7 	bl	8002ec0 <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d302      	bcc.n	800bb04 <UART_WaitOnFlagUntilTimeout+0x30>
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e04e      	b.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0304 	and.w	r3, r3, #4
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d037      	beq.n	800bb86 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b80      	cmp	r3, #128	@ 0x80
 800bb1a:	d034      	beq.n	800bb86 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b40      	cmp	r3, #64	@ 0x40
 800bb20:	d031      	beq.n	800bb86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	f003 0308 	and.w	r3, r3, #8
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d110      	bne.n	800bb52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2208      	movs	r2, #8
 800bb36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 f95b 	bl	800bdf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2208      	movs	r2, #8
 800bb42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e029      	b.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	69db      	ldr	r3, [r3, #28]
 800bb58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb60:	d111      	bne.n	800bb86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f000 f941 	bl	800bdf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2220      	movs	r2, #32
 800bb76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e00f      	b.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	4013      	ands	r3, r2
 800bb90:	68ba      	ldr	r2, [r7, #8]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	bf0c      	ite	eq
 800bb96:	2301      	moveq	r3, #1
 800bb98:	2300      	movne	r3, #0
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	79fb      	ldrb	r3, [r7, #7]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d0a0      	beq.n	800bae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b0a3      	sub	sp, #140	@ 0x8c
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	88fa      	ldrh	r2, [r7, #6]
 800bbc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	88fa      	ldrh	r2, [r7, #6]
 800bbd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bbe2:	d10e      	bne.n	800bc02 <UART_Start_Receive_IT+0x52>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d105      	bne.n	800bbf8 <UART_Start_Receive_IT+0x48>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bbf2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bbf6:	e02d      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	22ff      	movs	r2, #255	@ 0xff
 800bbfc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc00:	e028      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10d      	bne.n	800bc26 <UART_Start_Receive_IT+0x76>
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d104      	bne.n	800bc1c <UART_Start_Receive_IT+0x6c>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	22ff      	movs	r2, #255	@ 0xff
 800bc16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc1a:	e01b      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	227f      	movs	r2, #127	@ 0x7f
 800bc20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc24:	e016      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc2e:	d10d      	bne.n	800bc4c <UART_Start_Receive_IT+0x9c>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d104      	bne.n	800bc42 <UART_Start_Receive_IT+0x92>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	227f      	movs	r2, #127	@ 0x7f
 800bc3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc40:	e008      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	223f      	movs	r2, #63	@ 0x3f
 800bc46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bc4a:	e003      	b.n	800bc54 <UART_Start_Receive_IT+0xa4>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2222      	movs	r2, #34	@ 0x22
 800bc60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3308      	adds	r3, #8
 800bc6a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bc74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc76:	f043 0301 	orr.w	r3, r3, #1
 800bc7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3308      	adds	r3, #8
 800bc84:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bc88:	673a      	str	r2, [r7, #112]	@ 0x70
 800bc8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bc8e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800bc96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e3      	bne.n	800bc64 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bca4:	d14f      	bne.n	800bd46 <UART_Start_Receive_IT+0x196>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bcac:	88fa      	ldrh	r2, [r7, #6]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d349      	bcc.n	800bd46 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcba:	d107      	bne.n	800bccc <UART_Start_Receive_IT+0x11c>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a47      	ldr	r2, [pc, #284]	@ (800bde4 <UART_Start_Receive_IT+0x234>)
 800bcc8:	675a      	str	r2, [r3, #116]	@ 0x74
 800bcca:	e002      	b.n	800bcd2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4a46      	ldr	r2, [pc, #280]	@ (800bde8 <UART_Start_Receive_IT+0x238>)
 800bcd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d01a      	beq.n	800bd10 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bcfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bcfe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd00:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bd02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bd04:	e841 2300 	strex	r3, r2, [r1]
 800bd08:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bd0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e4      	bne.n	800bcda <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3308      	adds	r3, #8
 800bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd1a:	e853 3f00 	ldrex	r3, [r3]
 800bd1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800bd30:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd32:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd38:	e841 2300 	strex	r3, r2, [r1]
 800bd3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bd3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1e5      	bne.n	800bd10 <UART_Start_Receive_IT+0x160>
 800bd44:	e046      	b.n	800bdd4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd4e:	d107      	bne.n	800bd60 <UART_Start_Receive_IT+0x1b0>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d103      	bne.n	800bd60 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	4a24      	ldr	r2, [pc, #144]	@ (800bdec <UART_Start_Receive_IT+0x23c>)
 800bd5c:	675a      	str	r2, [r3, #116]	@ 0x74
 800bd5e:	e002      	b.n	800bd66 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4a23      	ldr	r2, [pc, #140]	@ (800bdf0 <UART_Start_Receive_IT+0x240>)
 800bd64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d019      	beq.n	800bda2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bd82:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd8e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e6      	bne.n	800bd6e <UART_Start_Receive_IT+0x1be>
 800bda0:	e018      	b.n	800bdd4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	f043 0320 	orr.w	r3, r3, #32
 800bdb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdc0:	623b      	str	r3, [r7, #32]
 800bdc2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	69f9      	ldr	r1, [r7, #28]
 800bdc6:	6a3a      	ldr	r2, [r7, #32]
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e6      	bne.n	800bda2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	378c      	adds	r7, #140	@ 0x8c
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	0800c635 	.word	0x0800c635
 800bde8:	0800c2c5 	.word	0x0800c2c5
 800bdec:	0800c101 	.word	0x0800c101
 800bdf0:	0800bf3d 	.word	0x0800bf3d

0800bdf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b095      	sub	sp, #84	@ 0x54
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800be1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be22:	e841 2300 	strex	r3, r2, [r1]
 800be26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e6      	bne.n	800bdfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3308      	adds	r3, #8
 800be34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	e853 3f00 	ldrex	r3, [r3]
 800be3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be44:	f023 0301 	bic.w	r3, r3, #1
 800be48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3308      	adds	r3, #8
 800be50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be5a:	e841 2300 	strex	r3, r2, [r1]
 800be5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	d1e3      	bne.n	800be2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d118      	bne.n	800bea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	e853 3f00 	ldrex	r3, [r3]
 800be7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	f023 0310 	bic.w	r3, r3, #16
 800be82:	647b      	str	r3, [r7, #68]	@ 0x44
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	461a      	mov	r2, r3
 800be8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be8c:	61bb      	str	r3, [r7, #24]
 800be8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	6979      	ldr	r1, [r7, #20]
 800be92:	69ba      	ldr	r2, [r7, #24]
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	613b      	str	r3, [r7, #16]
   return(result);
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e6      	bne.n	800be6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800beb4:	bf00      	nop
 800beb6:	3754      	adds	r7, #84	@ 0x54
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800becc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f7ff fb04 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bedc:	bf00      	nop
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	e853 3f00 	ldrex	r3, [r3]
 800bef8:	60bb      	str	r3, [r7, #8]
   return(result);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf00:	61fb      	str	r3, [r7, #28]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	61bb      	str	r3, [r7, #24]
 800bf0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0e:	6979      	ldr	r1, [r7, #20]
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	613b      	str	r3, [r7, #16]
   return(result);
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e6      	bne.n	800beec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7ff fac5 	bl	800b4bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf32:	bf00      	nop
 800bf34:	3720      	adds	r7, #32
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
	...

0800bf3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b09c      	sub	sp, #112	@ 0x70
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bf4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf54:	2b22      	cmp	r3, #34	@ 0x22
 800bf56:	f040 80c3 	bne.w	800c0e0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf68:	b2d9      	uxtb	r1, r3
 800bf6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bf6e:	b2da      	uxtb	r2, r3
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf74:	400a      	ands	r2, r1
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f040 80a6 	bne.w	800c0f0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfac:	e853 3f00 	ldrex	r3, [r3]
 800bfb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bfb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bfc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfca:	e841 2300 	strex	r3, r2, [r1]
 800bfce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bfd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e6      	bne.n	800bfa4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfe8:	f023 0301 	bic.w	r3, r3, #1
 800bfec:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3308      	adds	r3, #8
 800bff4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bff6:	647a      	str	r2, [r7, #68]	@ 0x44
 800bff8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bffa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bffe:	e841 2300 	strex	r3, r2, [r1]
 800c002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1e5      	bne.n	800bfd6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2220      	movs	r2, #32
 800c00e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2200      	movs	r2, #0
 800c016:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a35      	ldr	r2, [pc, #212]	@ (800c0f8 <UART_RxISR_8BIT+0x1bc>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d024      	beq.n	800c072 <UART_RxISR_8BIT+0x136>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a33      	ldr	r2, [pc, #204]	@ (800c0fc <UART_RxISR_8BIT+0x1c0>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d01f      	beq.n	800c072 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d018      	beq.n	800c072 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	e853 3f00 	ldrex	r3, [r3]
 800c04c:	623b      	str	r3, [r7, #32]
   return(result);
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c054:	663b      	str	r3, [r7, #96]	@ 0x60
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c05e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c060:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c066:	e841 2300 	strex	r3, r2, [r1]
 800c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1e6      	bne.n	800c040 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c076:	2b01      	cmp	r3, #1
 800c078:	d12e      	bne.n	800c0d8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	e853 3f00 	ldrex	r3, [r3]
 800c08c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f023 0310 	bic.w	r3, r3, #16
 800c094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c09e:	61fb      	str	r3, [r7, #28]
 800c0a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a2:	69b9      	ldr	r1, [r7, #24]
 800c0a4:	69fa      	ldr	r2, [r7, #28]
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	617b      	str	r3, [r7, #20]
   return(result);
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e6      	bne.n	800c080 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	f003 0310 	and.w	r3, r3, #16
 800c0bc:	2b10      	cmp	r3, #16
 800c0be:	d103      	bne.n	800c0c8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2210      	movs	r2, #16
 800c0c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7f6 fcc5 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c0d6:	e00b      	b.n	800c0f0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff f9f9 	bl	800b4d0 <HAL_UART_RxCpltCallback>
}
 800c0de:	e007      	b.n	800c0f0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	699a      	ldr	r2, [r3, #24]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0208 	orr.w	r2, r2, #8
 800c0ee:	619a      	str	r2, [r3, #24]
}
 800c0f0:	bf00      	nop
 800c0f2:	3770      	adds	r7, #112	@ 0x70
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	46002400 	.word	0x46002400
 800c0fc:	56002400 	.word	0x56002400

0800c100 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b09c      	sub	sp, #112	@ 0x70
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c10e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c118:	2b22      	cmp	r3, #34	@ 0x22
 800c11a:	f040 80c3 	bne.w	800c2a4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c124:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c12c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c12e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c132:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c136:	4013      	ands	r3, r2
 800c138:	b29a      	uxth	r2, r3
 800c13a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c13c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c142:	1c9a      	adds	r2, r3, #2
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c14e:	b29b      	uxth	r3, r3
 800c150:	3b01      	subs	r3, #1
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c160:	b29b      	uxth	r3, r3
 800c162:	2b00      	cmp	r3, #0
 800c164:	f040 80a6 	bne.w	800c2b4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c170:	e853 3f00 	ldrex	r3, [r3]
 800c174:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c17c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	461a      	mov	r2, r3
 800c184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c186:	657b      	str	r3, [r7, #84]	@ 0x54
 800c188:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c18c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e6      	bne.n	800c168 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	3308      	adds	r3, #8
 800c1a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a4:	e853 3f00 	ldrex	r3, [r3]
 800c1a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ac:	f023 0301 	bic.w	r3, r3, #1
 800c1b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1ba:	643a      	str	r2, [r7, #64]	@ 0x40
 800c1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1c2:	e841 2300 	strex	r3, r2, [r1]
 800c1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d1e5      	bne.n	800c19a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a35      	ldr	r2, [pc, #212]	@ (800c2bc <UART_RxISR_16BIT+0x1bc>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d024      	beq.n	800c236 <UART_RxISR_16BIT+0x136>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a33      	ldr	r2, [pc, #204]	@ (800c2c0 <UART_RxISR_16BIT+0x1c0>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d01f      	beq.n	800c236 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d018      	beq.n	800c236 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	e853 3f00 	ldrex	r3, [r3]
 800c210:	61fb      	str	r3, [r7, #28]
   return(result);
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c224:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c22a:	e841 2300 	strex	r3, r2, [r1]
 800c22e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1e6      	bne.n	800c204 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d12e      	bne.n	800c29c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	e853 3f00 	ldrex	r3, [r3]
 800c250:	60bb      	str	r3, [r7, #8]
   return(result);
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	f023 0310 	bic.w	r3, r3, #16
 800c258:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c262:	61bb      	str	r3, [r7, #24]
 800c264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c266:	6979      	ldr	r1, [r7, #20]
 800c268:	69ba      	ldr	r2, [r7, #24]
 800c26a:	e841 2300 	strex	r3, r2, [r1]
 800c26e:	613b      	str	r3, [r7, #16]
   return(result);
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d1e6      	bne.n	800c244 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	69db      	ldr	r3, [r3, #28]
 800c27c:	f003 0310 	and.w	r3, r3, #16
 800c280:	2b10      	cmp	r3, #16
 800c282:	d103      	bne.n	800c28c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2210      	movs	r2, #16
 800c28a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7f6 fbe3 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c29a:	e00b      	b.n	800c2b4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff f917 	bl	800b4d0 <HAL_UART_RxCpltCallback>
}
 800c2a2:	e007      	b.n	800c2b4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	699a      	ldr	r2, [r3, #24]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f042 0208 	orr.w	r2, r2, #8
 800c2b2:	619a      	str	r2, [r3, #24]
}
 800c2b4:	bf00      	nop
 800c2b6:	3770      	adds	r7, #112	@ 0x70
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	46002400 	.word	0x46002400
 800c2c0:	56002400 	.word	0x56002400

0800c2c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b0ac      	sub	sp, #176	@ 0xb0
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c2d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2fa:	2b22      	cmp	r3, #34	@ 0x22
 800c2fc:	f040 8188 	bne.w	800c610 <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c306:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c30a:	e12b      	b.n	800c564 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c312:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c316:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c31a:	b2d9      	uxtb	r1, r3
 800c31c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c320:	b2da      	uxtb	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c326:	400a      	ands	r2, r1
 800c328:	b2d2      	uxtb	r2, r2
 800c32a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	3b01      	subs	r3, #1
 800c340:	b29a      	uxth	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d053      	beq.n	800c406 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c35e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b00      	cmp	r3, #0
 800c368:	d011      	beq.n	800c38e <UART_RxISR_8BIT_FIFOEN+0xca>
 800c36a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c36e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00b      	beq.n	800c38e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2201      	movs	r2, #1
 800c37c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c384:	f043 0201 	orr.w	r2, r3, #1
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c38e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d011      	beq.n	800c3be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c39a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d00b      	beq.n	800c3be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b4:	f043 0204 	orr.w	r2, r3, #4
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c3c2:	f003 0304 	and.w	r3, r3, #4
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d011      	beq.n	800c3ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c3ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3ce:	f003 0301 	and.w	r3, r3, #1
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00b      	beq.n	800c3ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2204      	movs	r2, #4
 800c3dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3e4:	f043 0202 	orr.w	r2, r3, #2
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff f873 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f040 80a8 	bne.w	800c564 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c41c:	e853 3f00 	ldrex	r3, [r3]
 800c420:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	461a      	mov	r2, r3
 800c432:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c436:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c438:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c43c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c43e:	e841 2300 	strex	r3, r2, [r1]
 800c442:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c444:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1e4      	bne.n	800c414 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3308      	adds	r3, #8
 800c450:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c45a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c45c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c460:	f023 0301 	bic.w	r3, r3, #1
 800c464:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3308      	adds	r3, #8
 800c46e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c472:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c474:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c478:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c480:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e1      	bne.n	800c44a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2220      	movs	r2, #32
 800c48a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a62      	ldr	r2, [pc, #392]	@ (800c628 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d026      	beq.n	800c4f2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a60      	ldr	r2, [pc, #384]	@ (800c62c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d021      	beq.n	800c4f2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01a      	beq.n	800c4f2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4c4:	e853 3f00 	ldrex	r3, [r3]
 800c4c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c4ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	461a      	mov	r2, r3
 800c4da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c4de:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4e6:	e841 2300 	strex	r3, r2, [r1]
 800c4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1e4      	bne.n	800c4bc <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d130      	bne.n	800c55c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c510:	f023 0310 	bic.w	r3, r3, #16
 800c514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	461a      	mov	r2, r3
 800c51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c522:	643b      	str	r3, [r7, #64]	@ 0x40
 800c524:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c526:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c528:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c52a:	e841 2300 	strex	r3, r2, [r1]
 800c52e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1e4      	bne.n	800c500 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69db      	ldr	r3, [r3, #28]
 800c53c:	f003 0310 	and.w	r3, r3, #16
 800c540:	2b10      	cmp	r3, #16
 800c542:	d103      	bne.n	800c54c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2210      	movs	r2, #16
 800c54a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7f6 fa83 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c55a:	e00e      	b.n	800c57a <UART_RxISR_8BIT_FIFOEN+0x2b6>
          HAL_UART_RxCpltCallback(huart);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7fe ffb7 	bl	800b4d0 <HAL_UART_RxCpltCallback>
        break;
 800c562:	e00a      	b.n	800c57a <UART_RxISR_8BIT_FIFOEN+0x2b6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c564:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <UART_RxISR_8BIT_FIFOEN+0x2b6>
 800c56c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c570:	f003 0320 	and.w	r3, r3, #32
 800c574:	2b00      	cmp	r3, #0
 800c576:	f47f aec9 	bne.w	800c30c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c580:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c584:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d049      	beq.n	800c620 <UART_RxISR_8BIT_FIFOEN+0x35c>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c592:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c596:	429a      	cmp	r2, r3
 800c598:	d242      	bcs.n	800c620 <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3308      	adds	r3, #8
 800c5a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c5be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5c6:	e841 2300 	strex	r3, r2, [r1]
 800c5ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1e3      	bne.n	800c59a <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a16      	ldr	r2, [pc, #88]	@ (800c630 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800c5d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	e853 3f00 	ldrex	r3, [r3]
 800c5e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f043 0320 	orr.w	r3, r3, #32
 800c5ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fe:	6979      	ldr	r1, [r7, #20]
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	e841 2300 	strex	r3, r2, [r1]
 800c606:	613b      	str	r3, [r7, #16]
   return(result);
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e4      	bne.n	800c5d8 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c60e:	e007      	b.n	800c620 <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	699a      	ldr	r2, [r3, #24]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f042 0208 	orr.w	r2, r2, #8
 800c61e:	619a      	str	r2, [r3, #24]
}
 800c620:	bf00      	nop
 800c622:	37b0      	adds	r7, #176	@ 0xb0
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	46002400 	.word	0x46002400
 800c62c:	56002400 	.word	0x56002400
 800c630:	0800bf3d 	.word	0x0800bf3d

0800c634 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b0ae      	sub	sp, #184	@ 0xb8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c642:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c66a:	2b22      	cmp	r3, #34	@ 0x22
 800c66c:	f040 818c 	bne.w	800c988 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c676:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c67a:	e12f      	b.n	800c8dc <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c682:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c68e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c692:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c696:	4013      	ands	r3, r2
 800c698:	b29a      	uxth	r2, r3
 800c69a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c69e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6a4:	1c9a      	adds	r2, r3, #2
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c6c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d053      	beq.n	800c77a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c6d6:	f003 0301 	and.w	r3, r3, #1
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d011      	beq.n	800c702 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c6de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00b      	beq.n	800c702 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6f8:	f043 0201 	orr.w	r2, r3, #1
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c702:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c706:	f003 0302 	and.w	r3, r3, #2
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d011      	beq.n	800c732 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c70e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00b      	beq.n	800c732 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2202      	movs	r2, #2
 800c720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c728:	f043 0204 	orr.w	r2, r3, #4
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c732:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c736:	f003 0304 	and.w	r3, r3, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d011      	beq.n	800c762 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c73e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00b      	beq.n	800c762 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2204      	movs	r2, #4
 800c750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c758:	f043 0202 	orr.w	r2, r3, #2
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d006      	beq.n	800c77a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7fe feb9 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c780:	b29b      	uxth	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	f040 80aa 	bne.w	800c8dc <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c78e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c790:	e853 3f00 	ldrex	r3, [r3]
 800c794:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c79c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c7ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7b6:	e841 2300 	strex	r3, r2, [r1]
 800c7ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1e2      	bne.n	800c788 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7cc:	e853 3f00 	ldrex	r3, [r3]
 800c7d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c7d8:	f023 0301 	bic.w	r3, r3, #1
 800c7dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c7ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7f2:	e841 2300 	strex	r3, r2, [r1]
 800c7f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d1e1      	bne.n	800c7c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2220      	movs	r2, #32
 800c802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a62      	ldr	r2, [pc, #392]	@ (800c9a0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d026      	beq.n	800c86a <UART_RxISR_16BIT_FIFOEN+0x236>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a60      	ldr	r2, [pc, #384]	@ (800c9a4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d021      	beq.n	800c86a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d01a      	beq.n	800c86a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c83a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c83c:	e853 3f00 	ldrex	r3, [r3]
 800c840:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c844:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c848:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	461a      	mov	r2, r3
 800c852:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c856:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c858:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c85c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c85e:	e841 2300 	strex	r3, r2, [r1]
 800c862:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1e4      	bne.n	800c834 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d130      	bne.n	800c8d4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c880:	e853 3f00 	ldrex	r3, [r3]
 800c884:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c888:	f023 0310 	bic.w	r3, r3, #16
 800c88c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	461a      	mov	r2, r3
 800c896:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c89a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c89c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8a2:	e841 2300 	strex	r3, r2, [r1]
 800c8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e4      	bne.n	800c878 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	69db      	ldr	r3, [r3, #28]
 800c8b4:	f003 0310 	and.w	r3, r3, #16
 800c8b8:	2b10      	cmp	r3, #16
 800c8ba:	d103      	bne.n	800c8c4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2210      	movs	r2, #16
 800c8c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7f6 f8c7 	bl	8002a60 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800c8d2:	e00e      	b.n	800c8f2 <UART_RxISR_16BIT_FIFOEN+0x2be>
          HAL_UART_RxCpltCallback(huart);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fe fdfb 	bl	800b4d0 <HAL_UART_RxCpltCallback>
        break;
 800c8da:	e00a      	b.n	800c8f2 <UART_RxISR_16BIT_FIFOEN+0x2be>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <UART_RxISR_16BIT_FIFOEN+0x2be>
 800c8e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c8e8:	f003 0320 	and.w	r3, r3, #32
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f47f aec5 	bne.w	800c67c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8f8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800c900:	2b00      	cmp	r3, #0
 800c902:	d049      	beq.n	800c998 <UART_RxISR_16BIT_FIFOEN+0x364>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c90a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800c90e:	429a      	cmp	r2, r3
 800c910:	d242      	bcs.n	800c998 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3308      	adds	r3, #8
 800c918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91c:	e853 3f00 	ldrex	r3, [r3]
 800c920:	623b      	str	r3, [r7, #32]
   return(result);
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3308      	adds	r3, #8
 800c932:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c936:	633a      	str	r2, [r7, #48]	@ 0x30
 800c938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c93a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c93c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c93e:	e841 2300 	strex	r3, r2, [r1]
 800c942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e3      	bne.n	800c912 <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4a16      	ldr	r2, [pc, #88]	@ (800c9a8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800c94e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	e853 3f00 	ldrex	r3, [r3]
 800c95c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f043 0320 	orr.w	r3, r3, #32
 800c964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c972:	61fb      	str	r3, [r7, #28]
 800c974:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c976:	69b9      	ldr	r1, [r7, #24]
 800c978:	69fa      	ldr	r2, [r7, #28]
 800c97a:	e841 2300 	strex	r3, r2, [r1]
 800c97e:	617b      	str	r3, [r7, #20]
   return(result);
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e4      	bne.n	800c950 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c986:	e007      	b.n	800c998 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	699a      	ldr	r2, [r3, #24]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f042 0208 	orr.w	r2, r2, #8
 800c996:	619a      	str	r2, [r3, #24]
}
 800c998:	bf00      	nop
 800c99a:	37b8      	adds	r7, #184	@ 0xb8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	46002400 	.word	0x46002400
 800c9a4:	56002400 	.word	0x56002400
 800c9a8:	0800c101 	.word	0x0800c101

0800c9ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9b4:	bf00      	nop
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d101      	bne.n	800c9ea <HAL_UARTEx_DisableFifoMode+0x16>
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	e027      	b.n	800ca3a <HAL_UARTEx_DisableFifoMode+0x66>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2224      	movs	r2, #36	@ 0x24
 800c9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f022 0201 	bic.w	r2, r2, #1
 800ca10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b084      	sub	sp, #16
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d101      	bne.n	800ca5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	e02d      	b.n	800caba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2224      	movs	r2, #36	@ 0x24
 800ca6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f022 0201 	bic.w	r2, r2, #1
 800ca84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 f8ae 	bl	800cbfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2220      	movs	r2, #32
 800caac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d101      	bne.n	800cada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cad6:	2302      	movs	r3, #2
 800cad8:	e02d      	b.n	800cb36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2201      	movs	r2, #1
 800cade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2224      	movs	r2, #36	@ 0x24
 800cae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f022 0201 	bic.w	r2, r2, #1
 800cb00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	430a      	orrs	r2, r1
 800cb14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f870 	bl	800cbfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2220      	movs	r2, #32
 800cb28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b08c      	sub	sp, #48	@ 0x30
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb58:	2b20      	cmp	r3, #32
 800cb5a:	d14a      	bne.n	800cbf2 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d002      	beq.n	800cb68 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800cb62:	88fb      	ldrh	r3, [r7, #6]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e043      	b.n	800cbf4 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb76:	2b40      	cmp	r3, #64	@ 0x40
 800cb78:	d107      	bne.n	800cb8a <HAL_UARTEx_ReceiveToIdle_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	689a      	ldr	r2, [r3, #8]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb88:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	68b9      	ldr	r1, [r7, #8]
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f7ff f807 	bl	800bbb0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d11d      	bne.n	800cbe6 <HAL_UARTEx_ReceiveToIdle_IT+0xa8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2210      	movs	r2, #16
 800cbb0:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	e853 3f00 	ldrex	r3, [r3]
 800cbbe:	617b      	str	r3, [r7, #20]
   return(result);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	f043 0310 	orr.w	r3, r3, #16
 800cbc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbd2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd4:	6a39      	ldr	r1, [r7, #32]
 800cbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbd8:	e841 2300 	strex	r3, r2, [r1]
 800cbdc:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e6      	bne.n	800cbb2 <HAL_UARTEx_ReceiveToIdle_IT+0x74>
 800cbe4:	e002      	b.n	800cbec <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800cbec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbf0:	e000      	b.n	800cbf4 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800cbf2:	2302      	movs	r3, #2
  }
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3730      	adds	r7, #48	@ 0x30
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d108      	bne.n	800cc1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc1c:	e031      	b.n	800cc82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc1e:	2308      	movs	r3, #8
 800cc20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc22:	2308      	movs	r3, #8
 800cc24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	0e5b      	lsrs	r3, r3, #25
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f003 0307 	and.w	r3, r3, #7
 800cc34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	0f5b      	lsrs	r3, r3, #29
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f003 0307 	and.w	r3, r3, #7
 800cc44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc46:	7bbb      	ldrb	r3, [r7, #14]
 800cc48:	7b3a      	ldrb	r2, [r7, #12]
 800cc4a:	4911      	ldr	r1, [pc, #68]	@ (800cc90 <UARTEx_SetNbDataToProcess+0x94>)
 800cc4c:	5c8a      	ldrb	r2, [r1, r2]
 800cc4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc52:	7b3a      	ldrb	r2, [r7, #12]
 800cc54:	490f      	ldr	r1, [pc, #60]	@ (800cc94 <UARTEx_SetNbDataToProcess+0x98>)
 800cc56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc58:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
 800cc66:	7b7a      	ldrb	r2, [r7, #13]
 800cc68:	4909      	ldr	r1, [pc, #36]	@ (800cc90 <UARTEx_SetNbDataToProcess+0x94>)
 800cc6a:	5c8a      	ldrb	r2, [r1, r2]
 800cc6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc70:	7b7a      	ldrb	r2, [r7, #13]
 800cc72:	4908      	ldr	r1, [pc, #32]	@ (800cc94 <UARTEx_SetNbDataToProcess+0x98>)
 800cc74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc76:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	0800cfb4 	.word	0x0800cfb4
 800cc94:	0800cfbc 	.word	0x0800cfbc

0800cc98 <malloc>:
 800cc98:	4b02      	ldr	r3, [pc, #8]	@ (800cca4 <malloc+0xc>)
 800cc9a:	4601      	mov	r1, r0
 800cc9c:	6818      	ldr	r0, [r3, #0]
 800cc9e:	f000 b825 	b.w	800ccec <_malloc_r>
 800cca2:	bf00      	nop
 800cca4:	2000000c 	.word	0x2000000c

0800cca8 <sbrk_aligned>:
 800cca8:	b570      	push	{r4, r5, r6, lr}
 800ccaa:	4e0f      	ldr	r6, [pc, #60]	@ (800cce8 <sbrk_aligned+0x40>)
 800ccac:	460c      	mov	r4, r1
 800ccae:	4605      	mov	r5, r0
 800ccb0:	6831      	ldr	r1, [r6, #0]
 800ccb2:	b911      	cbnz	r1, 800ccba <sbrk_aligned+0x12>
 800ccb4:	f000 f8ae 	bl	800ce14 <_sbrk_r>
 800ccb8:	6030      	str	r0, [r6, #0]
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f000 f8a9 	bl	800ce14 <_sbrk_r>
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d103      	bne.n	800ccce <sbrk_aligned+0x26>
 800ccc6:	f04f 34ff 	mov.w	r4, #4294967295
 800ccca:	4620      	mov	r0, r4
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
 800ccce:	1cc4      	adds	r4, r0, #3
 800ccd0:	f024 0403 	bic.w	r4, r4, #3
 800ccd4:	42a0      	cmp	r0, r4
 800ccd6:	d0f8      	beq.n	800ccca <sbrk_aligned+0x22>
 800ccd8:	1a21      	subs	r1, r4, r0
 800ccda:	4628      	mov	r0, r5
 800ccdc:	f000 f89a 	bl	800ce14 <_sbrk_r>
 800cce0:	3001      	adds	r0, #1
 800cce2:	d1f2      	bne.n	800ccca <sbrk_aligned+0x22>
 800cce4:	e7ef      	b.n	800ccc6 <sbrk_aligned+0x1e>
 800cce6:	bf00      	nop
 800cce8:	200002e8 	.word	0x200002e8

0800ccec <_malloc_r>:
 800ccec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf0:	1ccd      	adds	r5, r1, #3
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	f025 0503 	bic.w	r5, r5, #3
 800ccf8:	3508      	adds	r5, #8
 800ccfa:	2d0c      	cmp	r5, #12
 800ccfc:	bf38      	it	cc
 800ccfe:	250c      	movcc	r5, #12
 800cd00:	2d00      	cmp	r5, #0
 800cd02:	db01      	blt.n	800cd08 <_malloc_r+0x1c>
 800cd04:	42a9      	cmp	r1, r5
 800cd06:	d904      	bls.n	800cd12 <_malloc_r+0x26>
 800cd08:	230c      	movs	r3, #12
 800cd0a:	6033      	str	r3, [r6, #0]
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cde8 <_malloc_r+0xfc>
 800cd16:	f000 f869 	bl	800cdec <__malloc_lock>
 800cd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800cd1e:	461c      	mov	r4, r3
 800cd20:	bb44      	cbnz	r4, 800cd74 <_malloc_r+0x88>
 800cd22:	4629      	mov	r1, r5
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff ffbf 	bl	800cca8 <sbrk_aligned>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	d158      	bne.n	800cde2 <_malloc_r+0xf6>
 800cd30:	f8d8 4000 	ldr.w	r4, [r8]
 800cd34:	4627      	mov	r7, r4
 800cd36:	2f00      	cmp	r7, #0
 800cd38:	d143      	bne.n	800cdc2 <_malloc_r+0xd6>
 800cd3a:	2c00      	cmp	r4, #0
 800cd3c:	d04b      	beq.n	800cdd6 <_malloc_r+0xea>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	4639      	mov	r1, r7
 800cd42:	4630      	mov	r0, r6
 800cd44:	eb04 0903 	add.w	r9, r4, r3
 800cd48:	f000 f864 	bl	800ce14 <_sbrk_r>
 800cd4c:	4581      	cmp	r9, r0
 800cd4e:	d142      	bne.n	800cdd6 <_malloc_r+0xea>
 800cd50:	6821      	ldr	r1, [r4, #0]
 800cd52:	4630      	mov	r0, r6
 800cd54:	1a6d      	subs	r5, r5, r1
 800cd56:	4629      	mov	r1, r5
 800cd58:	f7ff ffa6 	bl	800cca8 <sbrk_aligned>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d03a      	beq.n	800cdd6 <_malloc_r+0xea>
 800cd60:	6823      	ldr	r3, [r4, #0]
 800cd62:	442b      	add	r3, r5
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	f8d8 3000 	ldr.w	r3, [r8]
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	bb62      	cbnz	r2, 800cdc8 <_malloc_r+0xdc>
 800cd6e:	f8c8 7000 	str.w	r7, [r8]
 800cd72:	e00f      	b.n	800cd94 <_malloc_r+0xa8>
 800cd74:	6822      	ldr	r2, [r4, #0]
 800cd76:	1b52      	subs	r2, r2, r5
 800cd78:	d420      	bmi.n	800cdbc <_malloc_r+0xd0>
 800cd7a:	2a0b      	cmp	r2, #11
 800cd7c:	d917      	bls.n	800cdae <_malloc_r+0xc2>
 800cd7e:	1961      	adds	r1, r4, r5
 800cd80:	42a3      	cmp	r3, r4
 800cd82:	6025      	str	r5, [r4, #0]
 800cd84:	bf18      	it	ne
 800cd86:	6059      	strne	r1, [r3, #4]
 800cd88:	6863      	ldr	r3, [r4, #4]
 800cd8a:	bf08      	it	eq
 800cd8c:	f8c8 1000 	streq.w	r1, [r8]
 800cd90:	5162      	str	r2, [r4, r5]
 800cd92:	604b      	str	r3, [r1, #4]
 800cd94:	4630      	mov	r0, r6
 800cd96:	f000 f82f 	bl	800cdf8 <__malloc_unlock>
 800cd9a:	f104 000b 	add.w	r0, r4, #11
 800cd9e:	1d23      	adds	r3, r4, #4
 800cda0:	f020 0007 	bic.w	r0, r0, #7
 800cda4:	1ac2      	subs	r2, r0, r3
 800cda6:	bf1c      	itt	ne
 800cda8:	1a1b      	subne	r3, r3, r0
 800cdaa:	50a3      	strne	r3, [r4, r2]
 800cdac:	e7af      	b.n	800cd0e <_malloc_r+0x22>
 800cdae:	6862      	ldr	r2, [r4, #4]
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	bf0c      	ite	eq
 800cdb4:	f8c8 2000 	streq.w	r2, [r8]
 800cdb8:	605a      	strne	r2, [r3, #4]
 800cdba:	e7eb      	b.n	800cd94 <_malloc_r+0xa8>
 800cdbc:	4623      	mov	r3, r4
 800cdbe:	6864      	ldr	r4, [r4, #4]
 800cdc0:	e7ae      	b.n	800cd20 <_malloc_r+0x34>
 800cdc2:	463c      	mov	r4, r7
 800cdc4:	687f      	ldr	r7, [r7, #4]
 800cdc6:	e7b6      	b.n	800cd36 <_malloc_r+0x4a>
 800cdc8:	461a      	mov	r2, r3
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d1fb      	bne.n	800cdc8 <_malloc_r+0xdc>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	6053      	str	r3, [r2, #4]
 800cdd4:	e7de      	b.n	800cd94 <_malloc_r+0xa8>
 800cdd6:	230c      	movs	r3, #12
 800cdd8:	4630      	mov	r0, r6
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	f000 f80c 	bl	800cdf8 <__malloc_unlock>
 800cde0:	e794      	b.n	800cd0c <_malloc_r+0x20>
 800cde2:	6005      	str	r5, [r0, #0]
 800cde4:	e7d6      	b.n	800cd94 <_malloc_r+0xa8>
 800cde6:	bf00      	nop
 800cde8:	200002ec 	.word	0x200002ec

0800cdec <__malloc_lock>:
 800cdec:	4801      	ldr	r0, [pc, #4]	@ (800cdf4 <__malloc_lock+0x8>)
 800cdee:	f000 b84b 	b.w	800ce88 <__retarget_lock_acquire_recursive>
 800cdf2:	bf00      	nop
 800cdf4:	2000042c 	.word	0x2000042c

0800cdf8 <__malloc_unlock>:
 800cdf8:	4801      	ldr	r0, [pc, #4]	@ (800ce00 <__malloc_unlock+0x8>)
 800cdfa:	f000 b846 	b.w	800ce8a <__retarget_lock_release_recursive>
 800cdfe:	bf00      	nop
 800ce00:	2000042c 	.word	0x2000042c

0800ce04 <memset>:
 800ce04:	4402      	add	r2, r0
 800ce06:	4603      	mov	r3, r0
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d100      	bne.n	800ce0e <memset+0xa>
 800ce0c:	4770      	bx	lr
 800ce0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce12:	e7f9      	b.n	800ce08 <memset+0x4>

0800ce14 <_sbrk_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	2300      	movs	r3, #0
 800ce18:	4d05      	ldr	r5, [pc, #20]	@ (800ce30 <_sbrk_r+0x1c>)
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f5 fd84 	bl	800292c <_sbrk>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_sbrk_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_sbrk_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	20000428 	.word	0x20000428

0800ce34 <__errno>:
 800ce34:	4b01      	ldr	r3, [pc, #4]	@ (800ce3c <__errno+0x8>)
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	2000000c 	.word	0x2000000c

0800ce40 <__libc_init_array>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	4d0d      	ldr	r5, [pc, #52]	@ (800ce78 <__libc_init_array+0x38>)
 800ce44:	2600      	movs	r6, #0
 800ce46:	4c0d      	ldr	r4, [pc, #52]	@ (800ce7c <__libc_init_array+0x3c>)
 800ce48:	1b64      	subs	r4, r4, r5
 800ce4a:	10a4      	asrs	r4, r4, #2
 800ce4c:	42a6      	cmp	r6, r4
 800ce4e:	d109      	bne.n	800ce64 <__libc_init_array+0x24>
 800ce50:	4d0b      	ldr	r5, [pc, #44]	@ (800ce80 <__libc_init_array+0x40>)
 800ce52:	2600      	movs	r6, #0
 800ce54:	4c0b      	ldr	r4, [pc, #44]	@ (800ce84 <__libc_init_array+0x44>)
 800ce56:	f000 f827 	bl	800cea8 <_init>
 800ce5a:	1b64      	subs	r4, r4, r5
 800ce5c:	10a4      	asrs	r4, r4, #2
 800ce5e:	42a6      	cmp	r6, r4
 800ce60:	d105      	bne.n	800ce6e <__libc_init_array+0x2e>
 800ce62:	bd70      	pop	{r4, r5, r6, pc}
 800ce64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce68:	3601      	adds	r6, #1
 800ce6a:	4798      	blx	r3
 800ce6c:	e7ee      	b.n	800ce4c <__libc_init_array+0xc>
 800ce6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce72:	3601      	adds	r6, #1
 800ce74:	4798      	blx	r3
 800ce76:	e7f2      	b.n	800ce5e <__libc_init_array+0x1e>
 800ce78:	0800cfcc 	.word	0x0800cfcc
 800ce7c:	0800cfcc 	.word	0x0800cfcc
 800ce80:	0800cfcc 	.word	0x0800cfcc
 800ce84:	0800cfd0 	.word	0x0800cfd0

0800ce88 <__retarget_lock_acquire_recursive>:
 800ce88:	4770      	bx	lr

0800ce8a <__retarget_lock_release_recursive>:
 800ce8a:	4770      	bx	lr

0800ce8c <memcpy>:
 800ce8c:	440a      	add	r2, r1
 800ce8e:	1e43      	subs	r3, r0, #1
 800ce90:	4291      	cmp	r1, r2
 800ce92:	d100      	bne.n	800ce96 <memcpy+0xa>
 800ce94:	4770      	bx	lr
 800ce96:	b510      	push	{r4, lr}
 800ce98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce9c:	4291      	cmp	r1, r2
 800ce9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cea2:	d1f9      	bne.n	800ce98 <memcpy+0xc>
 800cea4:	bd10      	pop	{r4, pc}
	...

0800cea8 <_init>:
 800cea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceaa:	bf00      	nop
 800ceac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceae:	bc08      	pop	{r3}
 800ceb0:	469e      	mov	lr, r3
 800ceb2:	4770      	bx	lr

0800ceb4 <_fini>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	bf00      	nop
 800ceb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceba:	bc08      	pop	{r3}
 800cebc:	469e      	mov	lr, r3
 800cebe:	4770      	bx	lr
